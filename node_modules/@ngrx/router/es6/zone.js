var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable, NgZone, Provider } from '@angular/core';
import { Subscriber } from 'rxjs/Subscriber';
export let ZoneOperator = class ZoneOperator {
    constructor(_zone) {
        this._zone = _zone;
    }
    call(subscriber, source) {
        return source._subscribe(new ZoneSubscriber(subscriber, this._zone));
    }
};
ZoneOperator = __decorate([
    Injectable(), 
    __metadata('design:paramtypes', [NgZone])
], ZoneOperator);
class ZoneSubscriber extends Subscriber {
    constructor(destination, _zone) {
        super(destination);
        this._zone = _zone;
    }
    _next(value) {
        this._zone.run(() => this.destination.next(value));
    }
}
export const ZONE_OPERATOR_PROVIDERS = [
    new Provider(ZoneOperator, { useClass: ZoneOperator })
];
//# sourceMappingURL=zone.js.map