!function(e){function r(e,r,o){return 4===arguments.length?t.apply(this,arguments):void n(e,{declarative:!0,deps:r,declare:o})}function t(e,r,t,o){n(e,{declarative:!1,deps:r,executingRequire:t,execute:o})}function n(e,r){r.name=e,e in v||(v[e]=r),r.normalizedDeps=r.deps}function o(e,r){if(r[e.groupIndex]=r[e.groupIndex]||[],-1==g.call(r[e.groupIndex],e)){r[e.groupIndex].push(e);for(var t=0,n=e.normalizedDeps.length;n>t;t++){var a=e.normalizedDeps[t],u=v[a];if(u&&!u.evaluated){var d=e.groupIndex+(u.declarative!=e.declarative);if(void 0===u.groupIndex||u.groupIndex<d){if(void 0!==u.groupIndex&&(r[u.groupIndex].splice(g.call(r[u.groupIndex],u),1),0==r[u.groupIndex].length))throw new TypeError("Mixed dependency cycle detected");u.groupIndex=d}o(u,r)}}}}function a(e){var r=v[e];r.groupIndex=0;var t=[];o(r,t);for(var n=!!r.declarative==t.length%2,a=t.length-1;a>=0;a--){for(var u=t[a],i=0;i<u.length;i++){var s=u[i];n?d(s):l(s)}n=!n}}function u(e){return y[e]||(y[e]={name:e,dependencies:[],exports:{},importers:[]})}function d(r){if(!r.module){var t=r.module=u(r.name),n=r.module.exports,o=r.declare.call(e,function(e,r){if(t.locked=!0,"object"==typeof e)for(var o in e)n[o]=e[o];else n[e]=r;for(var a=0,u=t.importers.length;u>a;a++){var d=t.importers[a];if(!d.locked)for(var i=0;i<d.dependencies.length;++i)d.dependencies[i]===t&&d.setters[i](n)}return t.locked=!1,r},{id:r.name});t.setters=o.setters,t.execute=o.execute;for(var a=0,i=r.normalizedDeps.length;i>a;a++){var l,s=r.normalizedDeps[a],c=v[s],f=y[s];f?l=f.exports:c&&!c.declarative?l=c.esModule:c?(d(c),f=c.module,l=f.exports):l=p(s),f&&f.importers?(f.importers.push(t),t.dependencies.push(f)):t.dependencies.push(null),t.setters[a]&&t.setters[a](l)}}}function i(e){var r,t=v[e];if(t)t.declarative?f(e,[]):t.evaluated||l(t),r=t.module.exports;else if(r=p(e),!r)throw new Error("Unable to load dependency "+e+".");return(!t||t.declarative)&&r&&r.__useDefault?r["default"]:r}function l(r){if(!r.module){var t={},n=r.module={exports:t,id:r.name};if(!r.executingRequire)for(var o=0,a=r.normalizedDeps.length;a>o;o++){var u=r.normalizedDeps[o],d=v[u];d&&l(d)}r.evaluated=!0;var c=r.execute.call(e,function(e){for(var t=0,n=r.deps.length;n>t;t++)if(r.deps[t]==e)return i(r.normalizedDeps[t]);throw new TypeError("Module "+e+" not declared as a dependency.")},t,n);void 0!==typeof c&&(n.exports=c),t=n.exports,t&&t.__esModule?r.esModule=t:r.esModule=s(t)}}function s(r){var t={};if(("object"==typeof r||"function"==typeof r)&&r!==e)if(m)for(var n in r)"default"!==n&&c(t,r,n);else{var o=r&&r.hasOwnProperty;for(var n in r)"default"===n||o&&!r.hasOwnProperty(n)||(t[n]=r[n])}return t["default"]=r,x(t,"__useDefault",{value:!0}),t}function c(e,r,t){try{var n;(n=Object.getOwnPropertyDescriptor(r,t))&&x(e,t,n)}catch(o){return e[t]=r[t],!1}}function f(r,t){var n=v[r];if(n&&!n.evaluated&&n.declarative){t.push(r);for(var o=0,a=n.normalizedDeps.length;a>o;o++){var u=n.normalizedDeps[o];-1==g.call(t,u)&&(v[u]?f(u,t):p(u))}n.evaluated||(n.evaluated=!0,n.module.execute.call(e))}}function p(e){if(I[e])return I[e];if("@node/"==e.substr(0,6))return I[e]=s(D(e.substr(6)));var r=v[e];if(!r)throw"Module "+e+" not present.";return a(e),f(e,[]),v[e]=void 0,r.declarative&&x(r.module.exports,"__esModule",{value:!0}),I[e]=r.declarative?r.module.exports:r.esModule}var v={},g=Array.prototype.indexOf||function(e){for(var r=0,t=this.length;t>r;r++)if(this[r]===e)return r;return-1},m=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(h){m=!1}var x;!function(){try{Object.defineProperty({},"a",{})&&(x=Object.defineProperty)}catch(e){x=function(e,r,t){try{e[r]=t.value||t.get.call(e)}catch(n){}}}}();var y={},D="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&require.resolve&&"undefined"!=typeof process&&require,I={"@empty":{}};return function(e,n,o,a){return function(u){u(function(u){for(var d={_nodeRequire:D,register:r,registerDynamic:t,get:p,set:function(e,r){I[e]=r},newModule:function(e){return e}},i=0;i<n.length;i++)(function(e,r){r&&r.__esModule?I[e]=r:I[e]=s(r)})(n[i],arguments[i]);a(d);var l=p(e[0]);if(e.length>1)for(var i=1;i<e.length;i++)p(e[i]);return o?l["default"]:l})}}}("undefined"!=typeof self?self:global)

(["app/main.js"], [], true, function($__System) {
var require = this.require, exports = this.exports, module = this.module;
!function(e){function n(e,n){e=e.replace(l,"");var r=e.match(u),t=(r[1].split(",")[n]||"require").replace(s,""),i=p[t]||(p[t]=new RegExp(a+t+f,"g"));i.lastIndex=0;for(var o,c=[];o=i.exec(e);)c.push(o[2]||o[3]);return c}function r(e,n,t,o){if("object"==typeof e&&!(e instanceof Array))return r.apply(null,Array.prototype.splice.call(arguments,1,arguments.length-1));if("string"==typeof e&&"function"==typeof n&&(e=[e]),!(e instanceof Array)){if("string"==typeof e){var l=i.get(e);return l.__useDefault?l["default"]:l}throw new TypeError("Invalid require")}for(var a=[],f=0;f<e.length;f++)a.push(i["import"](e[f],o));Promise.all(a).then(function(e){n&&n.apply(null,e)},t)}function t(t,l,a){"string"!=typeof t&&(a=l,l=t,t=null),l instanceof Array||(a=l,l=["require","exports","module"].splice(0,a.length)),"function"!=typeof a&&(a=function(e){return function(){return e}}(a)),void 0===l[l.length-1]&&l.pop();var f,u,s;-1!=(f=o.call(l,"require"))&&(l.splice(f,1),t||(l=l.concat(n(a.toString(),f)))),-1!=(u=o.call(l,"exports"))&&l.splice(u,1),-1!=(s=o.call(l,"module"))&&l.splice(s,1);var p={name:t,deps:l,execute:function(n,t,o){for(var p=[],c=0;c<l.length;c++)p.push(n(l[c]));o.uri=o.id,o.config=function(){},-1!=s&&p.splice(s,0,o),-1!=u&&p.splice(u,0,t),-1!=f&&p.splice(f,0,function(e,t,l){return"string"==typeof e&&"function"!=typeof t?n(e):r.call(i,e,t,l,o.id)});var d=a.apply(-1==u?e:t,p);return"undefined"==typeof d&&o&&(d=o.exports),"undefined"!=typeof d?d:void 0}};if(t)c.anonDefine||c.isBundle?c.anonDefine&&c.anonDefine.name&&(c.anonDefine=null):c.anonDefine=p,c.isBundle=!0,i.registerDynamic(p.name,p.deps,!1,p.execute);else{if(c.anonDefine&&!c.anonDefine.name)throw new Error("Multiple anonymous defines in module "+t);c.anonDefine=p}}var i=$__System,o=Array.prototype.indexOf||function(e){for(var n=0,r=this.length;r>n;n++)if(this[n]===e)return n;return-1},l=/(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/gm,a="(?:^|[^$_a-zA-Z\\xA0-\\uFFFF.])",f="\\s*\\(\\s*(\"([^\"]+)\"|'([^']+)')\\s*\\)",u=/\(([^\)]*)\)/,s=/^\s+|\s+$/g,p={};t.amd={};var c={isBundle:!1,anonDefine:null};i.amdDefine=t,i.amdRequire=r}("undefined"!=typeof self?self:global);
(function() {
var define = $__System.amdDefine;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) : typeof define === 'function' && define.amd ? define("node_modules/@angular/compiler/bundles/compiler.umd.js", ["exports", "node_modules/@angular/core/bundles/core.umd.js"], factory) : (factory((global.ng = global.ng || {}, global.ng.compiler = global.ng.compiler || {}), global.ng.core));
}(this, function(exports, _angular_core) {
  'use strict';
  var TextAst = (function() {
    function TextAst(value, ngContentIndex, sourceSpan) {
      this.value = value;
      this.ngContentIndex = ngContentIndex;
      this.sourceSpan = sourceSpan;
    }
    TextAst.prototype.visit = function(visitor, context) {
      return visitor.visitText(this, context);
    };
    return TextAst;
  }());
  var BoundTextAst = (function() {
    function BoundTextAst(value, ngContentIndex, sourceSpan) {
      this.value = value;
      this.ngContentIndex = ngContentIndex;
      this.sourceSpan = sourceSpan;
    }
    BoundTextAst.prototype.visit = function(visitor, context) {
      return visitor.visitBoundText(this, context);
    };
    return BoundTextAst;
  }());
  var AttrAst = (function() {
    function AttrAst(name, value, sourceSpan) {
      this.name = name;
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    AttrAst.prototype.visit = function(visitor, context) {
      return visitor.visitAttr(this, context);
    };
    return AttrAst;
  }());
  var BoundElementPropertyAst = (function() {
    function BoundElementPropertyAst(name, type, securityContext, needsRuntimeSecurityContext, value, unit, sourceSpan) {
      this.name = name;
      this.type = type;
      this.securityContext = securityContext;
      this.needsRuntimeSecurityContext = needsRuntimeSecurityContext;
      this.value = value;
      this.unit = unit;
      this.sourceSpan = sourceSpan;
    }
    BoundElementPropertyAst.prototype.visit = function(visitor, context) {
      return visitor.visitElementProperty(this, context);
    };
    Object.defineProperty(BoundElementPropertyAst.prototype, "isAnimation", {
      get: function() {
        return this.type === exports.PropertyBindingType.Animation;
      },
      enumerable: true,
      configurable: true
    });
    return BoundElementPropertyAst;
  }());
  var BoundEventAst = (function() {
    function BoundEventAst(name, target, phase, handler, sourceSpan) {
      this.name = name;
      this.target = target;
      this.phase = phase;
      this.handler = handler;
      this.sourceSpan = sourceSpan;
    }
    BoundEventAst.calcFullName = function(name, target, phase) {
      if (target) {
        return target + ":" + name;
      } else if (phase) {
        return "@" + name + "." + phase;
      } else {
        return name;
      }
    };
    BoundEventAst.prototype.visit = function(visitor, context) {
      return visitor.visitEvent(this, context);
    };
    Object.defineProperty(BoundEventAst.prototype, "fullName", {
      get: function() {
        return BoundEventAst.calcFullName(this.name, this.target, this.phase);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BoundEventAst.prototype, "isAnimation", {
      get: function() {
        return !!this.phase;
      },
      enumerable: true,
      configurable: true
    });
    return BoundEventAst;
  }());
  var ReferenceAst = (function() {
    function ReferenceAst(name, value, sourceSpan) {
      this.name = name;
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    ReferenceAst.prototype.visit = function(visitor, context) {
      return visitor.visitReference(this, context);
    };
    return ReferenceAst;
  }());
  var VariableAst = (function() {
    function VariableAst(name, value, sourceSpan) {
      this.name = name;
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    VariableAst.prototype.visit = function(visitor, context) {
      return visitor.visitVariable(this, context);
    };
    return VariableAst;
  }());
  var ElementAst = (function() {
    function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan, endSourceSpan) {
      this.name = name;
      this.attrs = attrs;
      this.inputs = inputs;
      this.outputs = outputs;
      this.references = references;
      this.directives = directives;
      this.providers = providers;
      this.hasViewContainer = hasViewContainer;
      this.children = children;
      this.ngContentIndex = ngContentIndex;
      this.sourceSpan = sourceSpan;
      this.endSourceSpan = endSourceSpan;
    }
    ElementAst.prototype.visit = function(visitor, context) {
      return visitor.visitElement(this, context);
    };
    return ElementAst;
  }());
  var EmbeddedTemplateAst = (function() {
    function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
      this.attrs = attrs;
      this.outputs = outputs;
      this.references = references;
      this.variables = variables;
      this.directives = directives;
      this.providers = providers;
      this.hasViewContainer = hasViewContainer;
      this.children = children;
      this.ngContentIndex = ngContentIndex;
      this.sourceSpan = sourceSpan;
    }
    EmbeddedTemplateAst.prototype.visit = function(visitor, context) {
      return visitor.visitEmbeddedTemplate(this, context);
    };
    return EmbeddedTemplateAst;
  }());
  var BoundDirectivePropertyAst = (function() {
    function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
      this.directiveName = directiveName;
      this.templateName = templateName;
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    BoundDirectivePropertyAst.prototype.visit = function(visitor, context) {
      return visitor.visitDirectiveProperty(this, context);
    };
    return BoundDirectivePropertyAst;
  }());
  var DirectiveAst = (function() {
    function DirectiveAst(directive, inputs, hostProperties, hostEvents, sourceSpan) {
      this.directive = directive;
      this.inputs = inputs;
      this.hostProperties = hostProperties;
      this.hostEvents = hostEvents;
      this.sourceSpan = sourceSpan;
    }
    DirectiveAst.prototype.visit = function(visitor, context) {
      return visitor.visitDirective(this, context);
    };
    return DirectiveAst;
  }());
  var ProviderAst = (function() {
    function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) {
      this.token = token;
      this.multiProvider = multiProvider;
      this.eager = eager;
      this.providers = providers;
      this.providerType = providerType;
      this.lifecycleHooks = lifecycleHooks;
      this.sourceSpan = sourceSpan;
    }
    ProviderAst.prototype.visit = function(visitor, context) {
      return null;
    };
    return ProviderAst;
  }());
  exports.ProviderAstType;
  (function(ProviderAstType) {
    ProviderAstType[ProviderAstType["PublicService"] = 0] = "PublicService";
    ProviderAstType[ProviderAstType["PrivateService"] = 1] = "PrivateService";
    ProviderAstType[ProviderAstType["Component"] = 2] = "Component";
    ProviderAstType[ProviderAstType["Directive"] = 3] = "Directive";
    ProviderAstType[ProviderAstType["Builtin"] = 4] = "Builtin";
  })(exports.ProviderAstType || (exports.ProviderAstType = {}));
  var NgContentAst = (function() {
    function NgContentAst(index, ngContentIndex, sourceSpan) {
      this.index = index;
      this.ngContentIndex = ngContentIndex;
      this.sourceSpan = sourceSpan;
    }
    NgContentAst.prototype.visit = function(visitor, context) {
      return visitor.visitNgContent(this, context);
    };
    return NgContentAst;
  }());
  exports.PropertyBindingType;
  (function(PropertyBindingType) {
    PropertyBindingType[PropertyBindingType["Property"] = 0] = "Property";
    PropertyBindingType[PropertyBindingType["Attribute"] = 1] = "Attribute";
    PropertyBindingType[PropertyBindingType["Class"] = 2] = "Class";
    PropertyBindingType[PropertyBindingType["Style"] = 3] = "Style";
    PropertyBindingType[PropertyBindingType["Animation"] = 4] = "Animation";
  })(exports.PropertyBindingType || (exports.PropertyBindingType = {}));
  function templateVisitAll(visitor, asts, context) {
    if (context === void 0) {
      context = null;
    }
    var result = [];
    var visit = visitor.visit ? function(ast) {
      return visitor.visit(ast, context) || ast.visit(visitor, context);
    } : function(ast) {
      return ast.visit(visitor, context);
    };
    asts.forEach(function(ast) {
      var astResult = visit(ast);
      if (astResult) {
        result.push(astResult);
      }
    });
    return result;
  }
  var $EOF = 0;
  var $TAB = 9;
  var $LF = 10;
  var $VTAB = 11;
  var $FF = 12;
  var $CR = 13;
  var $SPACE = 32;
  var $BANG = 33;
  var $DQ = 34;
  var $HASH = 35;
  var $$ = 36;
  var $PERCENT = 37;
  var $AMPERSAND = 38;
  var $SQ = 39;
  var $LPAREN = 40;
  var $RPAREN = 41;
  var $STAR = 42;
  var $PLUS = 43;
  var $COMMA = 44;
  var $MINUS = 45;
  var $PERIOD = 46;
  var $SLASH = 47;
  var $COLON = 58;
  var $SEMICOLON = 59;
  var $LT = 60;
  var $EQ = 61;
  var $GT = 62;
  var $QUESTION = 63;
  var $0 = 48;
  var $9 = 57;
  var $A = 65;
  var $E = 69;
  var $F = 70;
  var $X = 88;
  var $Z = 90;
  var $LBRACKET = 91;
  var $BACKSLASH = 92;
  var $RBRACKET = 93;
  var $CARET = 94;
  var $_ = 95;
  var $a = 97;
  var $e = 101;
  var $f = 102;
  var $n = 110;
  var $r = 114;
  var $t = 116;
  var $u = 117;
  var $v = 118;
  var $x = 120;
  var $z = 122;
  var $LBRACE = 123;
  var $BAR = 124;
  var $RBRACE = 125;
  var $NBSP = 160;
  var $BT = 96;
  function isWhitespace(code) {
    return (code >= $TAB && code <= $SPACE) || (code == $NBSP);
  }
  function isDigit(code) {
    return $0 <= code && code <= $9;
  }
  function isAsciiLetter(code) {
    return code >= $a && code <= $z || code >= $A && code <= $Z;
  }
  function isAsciiHexDigit(code) {
    return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
  }
  function isPresent(obj) {
    return obj != null;
  }
  function isBlank(obj) {
    return obj == null;
  }
  var STRING_MAP_PROTO = Object.getPrototypeOf({});
  function isStrictStringMap(obj) {
    return typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
  }
  function stringify(token) {
    if (typeof token === 'string') {
      return token;
    }
    if (token == null) {
      return '' + token;
    }
    if (token.overriddenName) {
      return token.overriddenName;
    }
    if (token.name) {
      return token.name;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  var NumberWrapper = (function() {
    function NumberWrapper() {}
    NumberWrapper.parseIntAutoRadix = function(text) {
      var result = parseInt(text);
      if (isNaN(result)) {
        throw new Error('Invalid integer literal when parsing ' + text);
      }
      return result;
    };
    NumberWrapper.isNumeric = function(value) {
      return !isNaN(value - parseFloat(value));
    };
    return NumberWrapper;
  }());
  function isJsObject(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
  }
  function isPrimitive(obj) {
    return !isJsObject(obj);
  }
  function escapeRegExp(s) {
    return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
  }
  function assertArrayOfStrings(identifier, value) {
    if (!_angular_core.isDevMode() || isBlank(value)) {
      return;
    }
    if (!Array.isArray(value)) {
      throw new Error("Expected '" + identifier + "' to be an array of strings.");
    }
    for (var i = 0; i < value.length; i += 1) {
      if (typeof value[i] !== 'string') {
        throw new Error("Expected '" + identifier + "' to be an array of strings.");
      }
    }
  }
  var INTERPOLATION_BLACKLIST_REGEXPS = [/^\s*$/, /[<>]/, /^[{}]$/, /&(#|[a-z])/i, /^\/\//];
  function assertInterpolationSymbols(identifier, value) {
    if (isPresent(value) && !(Array.isArray(value) && value.length == 2)) {
      throw new Error("Expected '" + identifier + "' to be an array, [start, end].");
    } else if (_angular_core.isDevMode() && !isBlank(value)) {
      var start_1 = value[0];
      var end_1 = value[1];
      INTERPOLATION_BLACKLIST_REGEXPS.forEach(function(regexp) {
        if (regexp.test(start_1) || regexp.test(end_1)) {
          throw new Error("['" + start_1 + "', '" + end_1 + "'] contains unusable interpolation symbol.");
        }
      });
    }
  }
  var InterpolationConfig = (function() {
    function InterpolationConfig(start, end) {
      this.start = start;
      this.end = end;
    }
    InterpolationConfig.fromArray = function(markers) {
      if (!markers) {
        return DEFAULT_INTERPOLATION_CONFIG;
      }
      assertInterpolationSymbols('interpolation', markers);
      return new InterpolationConfig(markers[0], markers[1]);
    };
    ;
    return InterpolationConfig;
  }());
  var DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');
  var __extends$1 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ParserError = (function() {
    function ParserError(message, input, errLocation, ctxLocation) {
      this.input = input;
      this.errLocation = errLocation;
      this.ctxLocation = ctxLocation;
      this.message = "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation;
    }
    return ParserError;
  }());
  var ParseSpan = (function() {
    function ParseSpan(start, end) {
      this.start = start;
      this.end = end;
    }
    return ParseSpan;
  }());
  var AST = (function() {
    function AST(span) {
      this.span = span;
    }
    AST.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return null;
    };
    AST.prototype.toString = function() {
      return 'AST';
    };
    return AST;
  }());
  var Quote = (function(_super) {
    __extends$1(Quote, _super);
    function Quote(span, prefix, uninterpretedExpression, location) {
      _super.call(this, span);
      this.prefix = prefix;
      this.uninterpretedExpression = uninterpretedExpression;
      this.location = location;
    }
    Quote.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitQuote(this, context);
    };
    Quote.prototype.toString = function() {
      return 'Quote';
    };
    return Quote;
  }(AST));
  var EmptyExpr = (function(_super) {
    __extends$1(EmptyExpr, _super);
    function EmptyExpr() {
      _super.apply(this, arguments);
    }
    EmptyExpr.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
    };
    return EmptyExpr;
  }(AST));
  var ImplicitReceiver = (function(_super) {
    __extends$1(ImplicitReceiver, _super);
    function ImplicitReceiver() {
      _super.apply(this, arguments);
    }
    ImplicitReceiver.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitImplicitReceiver(this, context);
    };
    return ImplicitReceiver;
  }(AST));
  var Chain = (function(_super) {
    __extends$1(Chain, _super);
    function Chain(span, expressions) {
      _super.call(this, span);
      this.expressions = expressions;
    }
    Chain.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitChain(this, context);
    };
    return Chain;
  }(AST));
  var Conditional = (function(_super) {
    __extends$1(Conditional, _super);
    function Conditional(span, condition, trueExp, falseExp) {
      _super.call(this, span);
      this.condition = condition;
      this.trueExp = trueExp;
      this.falseExp = falseExp;
    }
    Conditional.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitConditional(this, context);
    };
    return Conditional;
  }(AST));
  var PropertyRead = (function(_super) {
    __extends$1(PropertyRead, _super);
    function PropertyRead(span, receiver, name) {
      _super.call(this, span);
      this.receiver = receiver;
      this.name = name;
    }
    PropertyRead.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitPropertyRead(this, context);
    };
    return PropertyRead;
  }(AST));
  var PropertyWrite = (function(_super) {
    __extends$1(PropertyWrite, _super);
    function PropertyWrite(span, receiver, name, value) {
      _super.call(this, span);
      this.receiver = receiver;
      this.name = name;
      this.value = value;
    }
    PropertyWrite.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitPropertyWrite(this, context);
    };
    return PropertyWrite;
  }(AST));
  var SafePropertyRead = (function(_super) {
    __extends$1(SafePropertyRead, _super);
    function SafePropertyRead(span, receiver, name) {
      _super.call(this, span);
      this.receiver = receiver;
      this.name = name;
    }
    SafePropertyRead.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitSafePropertyRead(this, context);
    };
    return SafePropertyRead;
  }(AST));
  var KeyedRead = (function(_super) {
    __extends$1(KeyedRead, _super);
    function KeyedRead(span, obj, key) {
      _super.call(this, span);
      this.obj = obj;
      this.key = key;
    }
    KeyedRead.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitKeyedRead(this, context);
    };
    return KeyedRead;
  }(AST));
  var KeyedWrite = (function(_super) {
    __extends$1(KeyedWrite, _super);
    function KeyedWrite(span, obj, key, value) {
      _super.call(this, span);
      this.obj = obj;
      this.key = key;
      this.value = value;
    }
    KeyedWrite.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitKeyedWrite(this, context);
    };
    return KeyedWrite;
  }(AST));
  var BindingPipe = (function(_super) {
    __extends$1(BindingPipe, _super);
    function BindingPipe(span, exp, name, args) {
      _super.call(this, span);
      this.exp = exp;
      this.name = name;
      this.args = args;
    }
    BindingPipe.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitPipe(this, context);
    };
    return BindingPipe;
  }(AST));
  var LiteralPrimitive = (function(_super) {
    __extends$1(LiteralPrimitive, _super);
    function LiteralPrimitive(span, value) {
      _super.call(this, span);
      this.value = value;
    }
    LiteralPrimitive.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitLiteralPrimitive(this, context);
    };
    return LiteralPrimitive;
  }(AST));
  var LiteralArray = (function(_super) {
    __extends$1(LiteralArray, _super);
    function LiteralArray(span, expressions) {
      _super.call(this, span);
      this.expressions = expressions;
    }
    LiteralArray.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitLiteralArray(this, context);
    };
    return LiteralArray;
  }(AST));
  var LiteralMap = (function(_super) {
    __extends$1(LiteralMap, _super);
    function LiteralMap(span, keys, values) {
      _super.call(this, span);
      this.keys = keys;
      this.values = values;
    }
    LiteralMap.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitLiteralMap(this, context);
    };
    return LiteralMap;
  }(AST));
  var Interpolation = (function(_super) {
    __extends$1(Interpolation, _super);
    function Interpolation(span, strings, expressions) {
      _super.call(this, span);
      this.strings = strings;
      this.expressions = expressions;
    }
    Interpolation.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitInterpolation(this, context);
    };
    return Interpolation;
  }(AST));
  var Binary = (function(_super) {
    __extends$1(Binary, _super);
    function Binary(span, operation, left, right) {
      _super.call(this, span);
      this.operation = operation;
      this.left = left;
      this.right = right;
    }
    Binary.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitBinary(this, context);
    };
    return Binary;
  }(AST));
  var PrefixNot = (function(_super) {
    __extends$1(PrefixNot, _super);
    function PrefixNot(span, expression) {
      _super.call(this, span);
      this.expression = expression;
    }
    PrefixNot.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitPrefixNot(this, context);
    };
    return PrefixNot;
  }(AST));
  var MethodCall = (function(_super) {
    __extends$1(MethodCall, _super);
    function MethodCall(span, receiver, name, args) {
      _super.call(this, span);
      this.receiver = receiver;
      this.name = name;
      this.args = args;
    }
    MethodCall.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitMethodCall(this, context);
    };
    return MethodCall;
  }(AST));
  var SafeMethodCall = (function(_super) {
    __extends$1(SafeMethodCall, _super);
    function SafeMethodCall(span, receiver, name, args) {
      _super.call(this, span);
      this.receiver = receiver;
      this.name = name;
      this.args = args;
    }
    SafeMethodCall.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitSafeMethodCall(this, context);
    };
    return SafeMethodCall;
  }(AST));
  var FunctionCall = (function(_super) {
    __extends$1(FunctionCall, _super);
    function FunctionCall(span, target, args) {
      _super.call(this, span);
      this.target = target;
      this.args = args;
    }
    FunctionCall.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitFunctionCall(this, context);
    };
    return FunctionCall;
  }(AST));
  var ASTWithSource = (function(_super) {
    __extends$1(ASTWithSource, _super);
    function ASTWithSource(ast, source, location, errors) {
      _super.call(this, new ParseSpan(0, isBlank(source) ? 0 : source.length));
      this.ast = ast;
      this.source = source;
      this.location = location;
      this.errors = errors;
    }
    ASTWithSource.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return this.ast.visit(visitor, context);
    };
    ASTWithSource.prototype.toString = function() {
      return this.source + " in " + this.location;
    };
    return ASTWithSource;
  }(AST));
  var TemplateBinding = (function() {
    function TemplateBinding(span, key, keyIsVar, name, expression) {
      this.span = span;
      this.key = key;
      this.keyIsVar = keyIsVar;
      this.name = name;
      this.expression = expression;
    }
    return TemplateBinding;
  }());
  var RecursiveAstVisitor = (function() {
    function RecursiveAstVisitor() {}
    RecursiveAstVisitor.prototype.visitBinary = function(ast, context) {
      ast.left.visit(this);
      ast.right.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitChain = function(ast, context) {
      return this.visitAll(ast.expressions, context);
    };
    RecursiveAstVisitor.prototype.visitConditional = function(ast, context) {
      ast.condition.visit(this);
      ast.trueExp.visit(this);
      ast.falseExp.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitPipe = function(ast, context) {
      ast.exp.visit(this);
      this.visitAll(ast.args, context);
      return null;
    };
    RecursiveAstVisitor.prototype.visitFunctionCall = function(ast, context) {
      ast.target.visit(this);
      this.visitAll(ast.args, context);
      return null;
    };
    RecursiveAstVisitor.prototype.visitImplicitReceiver = function(ast, context) {
      return null;
    };
    RecursiveAstVisitor.prototype.visitInterpolation = function(ast, context) {
      return this.visitAll(ast.expressions, context);
    };
    RecursiveAstVisitor.prototype.visitKeyedRead = function(ast, context) {
      ast.obj.visit(this);
      ast.key.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitKeyedWrite = function(ast, context) {
      ast.obj.visit(this);
      ast.key.visit(this);
      ast.value.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitLiteralArray = function(ast, context) {
      return this.visitAll(ast.expressions, context);
    };
    RecursiveAstVisitor.prototype.visitLiteralMap = function(ast, context) {
      return this.visitAll(ast.values, context);
    };
    RecursiveAstVisitor.prototype.visitLiteralPrimitive = function(ast, context) {
      return null;
    };
    RecursiveAstVisitor.prototype.visitMethodCall = function(ast, context) {
      ast.receiver.visit(this);
      return this.visitAll(ast.args, context);
    };
    RecursiveAstVisitor.prototype.visitPrefixNot = function(ast, context) {
      ast.expression.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitPropertyRead = function(ast, context) {
      ast.receiver.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitPropertyWrite = function(ast, context) {
      ast.receiver.visit(this);
      ast.value.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitSafePropertyRead = function(ast, context) {
      ast.receiver.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitSafeMethodCall = function(ast, context) {
      ast.receiver.visit(this);
      return this.visitAll(ast.args, context);
    };
    RecursiveAstVisitor.prototype.visitAll = function(asts, context) {
      var _this = this;
      asts.forEach(function(ast) {
        return ast.visit(_this, context);
      });
      return null;
    };
    RecursiveAstVisitor.prototype.visitQuote = function(ast, context) {
      return null;
    };
    return RecursiveAstVisitor;
  }());
  exports.TokenType;
  (function(TokenType) {
    TokenType[TokenType["Character"] = 0] = "Character";
    TokenType[TokenType["Identifier"] = 1] = "Identifier";
    TokenType[TokenType["Keyword"] = 2] = "Keyword";
    TokenType[TokenType["String"] = 3] = "String";
    TokenType[TokenType["Operator"] = 4] = "Operator";
    TokenType[TokenType["Number"] = 5] = "Number";
    TokenType[TokenType["Error"] = 6] = "Error";
  })(exports.TokenType || (exports.TokenType = {}));
  var KEYWORDS = ['var', 'let', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];
  var Lexer = (function() {
    function Lexer() {}
    Lexer.prototype.tokenize = function(text) {
      var scanner = new _Scanner(text);
      var tokens = [];
      var token = scanner.scanToken();
      while (token != null) {
        tokens.push(token);
        token = scanner.scanToken();
      }
      return tokens;
    };
    Lexer.decorators = [{type: _angular_core.Injectable}];
    Lexer.ctorParameters = [];
    return Lexer;
  }());
  var Token = (function() {
    function Token(index, type, numValue, strValue) {
      this.index = index;
      this.type = type;
      this.numValue = numValue;
      this.strValue = strValue;
    }
    Token.prototype.isCharacter = function(code) {
      return this.type == exports.TokenType.Character && this.numValue == code;
    };
    Token.prototype.isNumber = function() {
      return this.type == exports.TokenType.Number;
    };
    Token.prototype.isString = function() {
      return this.type == exports.TokenType.String;
    };
    Token.prototype.isOperator = function(operater) {
      return this.type == exports.TokenType.Operator && this.strValue == operater;
    };
    Token.prototype.isIdentifier = function() {
      return this.type == exports.TokenType.Identifier;
    };
    Token.prototype.isKeyword = function() {
      return this.type == exports.TokenType.Keyword;
    };
    Token.prototype.isKeywordLet = function() {
      return this.type == exports.TokenType.Keyword && this.strValue == 'let';
    };
    Token.prototype.isKeywordNull = function() {
      return this.type == exports.TokenType.Keyword && this.strValue == 'null';
    };
    Token.prototype.isKeywordUndefined = function() {
      return this.type == exports.TokenType.Keyword && this.strValue == 'undefined';
    };
    Token.prototype.isKeywordTrue = function() {
      return this.type == exports.TokenType.Keyword && this.strValue == 'true';
    };
    Token.prototype.isKeywordFalse = function() {
      return this.type == exports.TokenType.Keyword && this.strValue == 'false';
    };
    Token.prototype.isKeywordThis = function() {
      return this.type == exports.TokenType.Keyword && this.strValue == 'this';
    };
    Token.prototype.isError = function() {
      return this.type == exports.TokenType.Error;
    };
    Token.prototype.toNumber = function() {
      return this.type == exports.TokenType.Number ? this.numValue : -1;
    };
    Token.prototype.toString = function() {
      switch (this.type) {
        case exports.TokenType.Character:
        case exports.TokenType.Identifier:
        case exports.TokenType.Keyword:
        case exports.TokenType.Operator:
        case exports.TokenType.String:
        case exports.TokenType.Error:
          return this.strValue;
        case exports.TokenType.Number:
          return this.numValue.toString();
        default:
          return null;
      }
    };
    return Token;
  }());
  function newCharacterToken(index, code) {
    return new Token(index, exports.TokenType.Character, code, String.fromCharCode(code));
  }
  function newIdentifierToken(index, text) {
    return new Token(index, exports.TokenType.Identifier, 0, text);
  }
  function newKeywordToken(index, text) {
    return new Token(index, exports.TokenType.Keyword, 0, text);
  }
  function newOperatorToken(index, text) {
    return new Token(index, exports.TokenType.Operator, 0, text);
  }
  function newStringToken(index, text) {
    return new Token(index, exports.TokenType.String, 0, text);
  }
  function newNumberToken(index, n) {
    return new Token(index, exports.TokenType.Number, n, '');
  }
  function newErrorToken(index, message) {
    return new Token(index, exports.TokenType.Error, 0, message);
  }
  var EOF = new Token(-1, exports.TokenType.Character, 0, '');
  var _Scanner = (function() {
    function _Scanner(input) {
      this.input = input;
      this.peek = 0;
      this.index = -1;
      this.length = input.length;
      this.advance();
    }
    _Scanner.prototype.advance = function() {
      this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);
    };
    _Scanner.prototype.scanToken = function() {
      var input = this.input,
          length = this.length;
      var peek = this.peek,
          index = this.index;
      while (peek <= $SPACE) {
        if (++index >= length) {
          peek = $EOF;
          break;
        } else {
          peek = input.charCodeAt(index);
        }
      }
      this.peek = peek;
      this.index = index;
      if (index >= length) {
        return null;
      }
      if (isIdentifierStart(peek))
        return this.scanIdentifier();
      if (isDigit(peek))
        return this.scanNumber(index);
      var start = index;
      switch (peek) {
        case $PERIOD:
          this.advance();
          return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, $PERIOD);
        case $LPAREN:
        case $RPAREN:
        case $LBRACE:
        case $RBRACE:
        case $LBRACKET:
        case $RBRACKET:
        case $COMMA:
        case $COLON:
        case $SEMICOLON:
          return this.scanCharacter(start, peek);
        case $SQ:
        case $DQ:
          return this.scanString();
        case $HASH:
        case $PLUS:
        case $MINUS:
        case $STAR:
        case $SLASH:
        case $PERCENT:
        case $CARET:
          return this.scanOperator(start, String.fromCharCode(peek));
        case $QUESTION:
          return this.scanComplexOperator(start, '?', $PERIOD, '.');
        case $LT:
        case $GT:
          return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=');
        case $BANG:
        case $EQ:
          return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=', $EQ, '=');
        case $AMPERSAND:
          return this.scanComplexOperator(start, '&', $AMPERSAND, '&');
        case $BAR:
          return this.scanComplexOperator(start, '|', $BAR, '|');
        case $NBSP:
          while (isWhitespace(this.peek))
            this.advance();
          return this.scanToken();
      }
      this.advance();
      return this.error("Unexpected character [" + String.fromCharCode(peek) + "]", 0);
    };
    _Scanner.prototype.scanCharacter = function(start, code) {
      this.advance();
      return newCharacterToken(start, code);
    };
    _Scanner.prototype.scanOperator = function(start, str) {
      this.advance();
      return newOperatorToken(start, str);
    };
    _Scanner.prototype.scanComplexOperator = function(start, one, twoCode, two, threeCode, three) {
      this.advance();
      var str = one;
      if (this.peek == twoCode) {
        this.advance();
        str += two;
      }
      if (isPresent(threeCode) && this.peek == threeCode) {
        this.advance();
        str += three;
      }
      return newOperatorToken(start, str);
    };
    _Scanner.prototype.scanIdentifier = function() {
      var start = this.index;
      this.advance();
      while (isIdentifierPart(this.peek))
        this.advance();
      var str = this.input.substring(start, this.index);
      return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) : newIdentifierToken(start, str);
    };
    _Scanner.prototype.scanNumber = function(start) {
      var simple = (this.index === start);
      this.advance();
      while (true) {
        if (isDigit(this.peek)) {} else if (this.peek == $PERIOD) {
          simple = false;
        } else if (isExponentStart(this.peek)) {
          this.advance();
          if (isExponentSign(this.peek))
            this.advance();
          if (!isDigit(this.peek))
            return this.error('Invalid exponent', -1);
          simple = false;
        } else {
          break;
        }
        this.advance();
      }
      var str = this.input.substring(start, this.index);
      var value = simple ? NumberWrapper.parseIntAutoRadix(str) : parseFloat(str);
      return newNumberToken(start, value);
    };
    _Scanner.prototype.scanString = function() {
      var start = this.index;
      var quote = this.peek;
      this.advance();
      var buffer = '';
      var marker = this.index;
      var input = this.input;
      while (this.peek != quote) {
        if (this.peek == $BACKSLASH) {
          buffer += input.substring(marker, this.index);
          this.advance();
          var unescapedCode = void 0;
          if (this.peek == $u) {
            var hex = input.substring(this.index + 1, this.index + 5);
            if (/^[0-9a-f]+$/i.test(hex)) {
              unescapedCode = parseInt(hex, 16);
            } else {
              return this.error("Invalid unicode escape [\\u" + hex + "]", 0);
            }
            for (var i = 0; i < 5; i++) {
              this.advance();
            }
          } else {
            unescapedCode = unescape(this.peek);
            this.advance();
          }
          buffer += String.fromCharCode(unescapedCode);
          marker = this.index;
        } else if (this.peek == $EOF) {
          return this.error('Unterminated quote', 0);
        } else {
          this.advance();
        }
      }
      var last = input.substring(marker, this.index);
      this.advance();
      return newStringToken(start, buffer + last);
    };
    _Scanner.prototype.error = function(message, offset) {
      var position = this.index + offset;
      return newErrorToken(position, "Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
    };
    return _Scanner;
  }());
  function isIdentifierStart(code) {
    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || (code == $_) || (code == $$);
  }
  function isIdentifier(input) {
    if (input.length == 0)
      return false;
    var scanner = new _Scanner(input);
    if (!isIdentifierStart(scanner.peek))
      return false;
    scanner.advance();
    while (scanner.peek !== $EOF) {
      if (!isIdentifierPart(scanner.peek))
        return false;
      scanner.advance();
    }
    return true;
  }
  function isIdentifierPart(code) {
    return isAsciiLetter(code) || isDigit(code) || (code == $_) || (code == $$);
  }
  function isExponentStart(code) {
    return code == $e || code == $E;
  }
  function isExponentSign(code) {
    return code == $MINUS || code == $PLUS;
  }
  function isQuote(code) {
    return code === $SQ || code === $DQ || code === $BT;
  }
  function unescape(code) {
    switch (code) {
      case $n:
        return $LF;
      case $f:
        return $FF;
      case $r:
        return $CR;
      case $t:
        return $TAB;
      case $v:
        return $VTAB;
      default:
        return code;
    }
  }
  var SplitInterpolation = (function() {
    function SplitInterpolation(strings, expressions, offsets) {
      this.strings = strings;
      this.expressions = expressions;
      this.offsets = offsets;
    }
    return SplitInterpolation;
  }());
  var TemplateBindingParseResult = (function() {
    function TemplateBindingParseResult(templateBindings, warnings, errors) {
      this.templateBindings = templateBindings;
      this.warnings = warnings;
      this.errors = errors;
    }
    return TemplateBindingParseResult;
  }());
  function _createInterpolateRegExp(config) {
    var pattern = escapeRegExp(config.start) + '([\\s\\S]*?)' + escapeRegExp(config.end);
    return new RegExp(pattern, 'g');
  }
  var Parser = (function() {
    function Parser(_lexer) {
      this._lexer = _lexer;
      this.errors = [];
    }
    Parser.prototype.parseAction = function(input, location, interpolationConfig) {
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      this._checkNoInterpolation(input, location, interpolationConfig);
      var sourceToLex = this._stripComments(input);
      var tokens = this._lexer.tokenize(this._stripComments(input));
      var ast = new _ParseAST(input, location, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length).parseChain();
      return new ASTWithSource(ast, input, location, this.errors);
    };
    Parser.prototype.parseBinding = function(input, location, interpolationConfig) {
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      var ast = this._parseBindingAst(input, location, interpolationConfig);
      return new ASTWithSource(ast, input, location, this.errors);
    };
    Parser.prototype.parseSimpleBinding = function(input, location, interpolationConfig) {
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      var ast = this._parseBindingAst(input, location, interpolationConfig);
      var errors = SimpleExpressionChecker.check(ast);
      if (errors.length > 0) {
        this._reportError("Host binding expression cannot contain " + errors.join(' '), input, location);
      }
      return new ASTWithSource(ast, input, location, this.errors);
    };
    Parser.prototype._reportError = function(message, input, errLocation, ctxLocation) {
      this.errors.push(new ParserError(message, input, errLocation, ctxLocation));
    };
    Parser.prototype._parseBindingAst = function(input, location, interpolationConfig) {
      var quote = this._parseQuote(input, location);
      if (isPresent(quote)) {
        return quote;
      }
      this._checkNoInterpolation(input, location, interpolationConfig);
      var sourceToLex = this._stripComments(input);
      var tokens = this._lexer.tokenize(sourceToLex);
      return new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length).parseChain();
    };
    Parser.prototype._parseQuote = function(input, location) {
      if (isBlank(input))
        return null;
      var prefixSeparatorIndex = input.indexOf(':');
      if (prefixSeparatorIndex == -1)
        return null;
      var prefix = input.substring(0, prefixSeparatorIndex).trim();
      if (!isIdentifier(prefix))
        return null;
      var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
      return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);
    };
    Parser.prototype.parseTemplateBindings = function(prefixToken, input, location) {
      var tokens = this._lexer.tokenize(input);
      if (prefixToken) {
        var prefixTokens = this._lexer.tokenize(prefixToken).map(function(t) {
          t.index = 0;
          return t;
        });
        tokens.unshift.apply(tokens, prefixTokens);
      }
      return new _ParseAST(input, location, tokens, input.length, false, this.errors, 0).parseTemplateBindings();
    };
    Parser.prototype.parseInterpolation = function(input, location, interpolationConfig) {
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      var split = this.splitInterpolation(input, location, interpolationConfig);
      if (split == null)
        return null;
      var expressions = [];
      for (var i = 0; i < split.expressions.length; ++i) {
        var expressionText = split.expressions[i];
        var sourceToLex = this._stripComments(expressionText);
        var tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));
        var ast = new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length)).parseChain();
        expressions.push(ast);
      }
      return new ASTWithSource(new Interpolation(new ParseSpan(0, isBlank(input) ? 0 : input.length), split.strings, expressions), input, location, this.errors);
    };
    Parser.prototype.splitInterpolation = function(input, location, interpolationConfig) {
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      var regexp = _createInterpolateRegExp(interpolationConfig);
      var parts = input.split(regexp);
      if (parts.length <= 1) {
        return null;
      }
      var strings = [];
      var expressions = [];
      var offsets = [];
      var offset = 0;
      for (var i = 0; i < parts.length; i++) {
        var part = parts[i];
        if (i % 2 === 0) {
          strings.push(part);
          offset += part.length;
        } else if (part.trim().length > 0) {
          offset += interpolationConfig.start.length;
          expressions.push(part);
          offsets.push(offset);
          offset += part.length + interpolationConfig.end.length;
        } else {
          this._reportError('Blank expressions are not allowed in interpolated strings', input, "at column " + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + " in", location);
          expressions.push('$implict');
          offsets.push(offset);
        }
      }
      return new SplitInterpolation(strings, expressions, offsets);
    };
    Parser.prototype.wrapLiteralPrimitive = function(input, location) {
      return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, isBlank(input) ? 0 : input.length), input), input, location, this.errors);
    };
    Parser.prototype._stripComments = function(input) {
      var i = this._commentStart(input);
      return isPresent(i) ? input.substring(0, i).trim() : input;
    };
    Parser.prototype._commentStart = function(input) {
      var outerQuote = null;
      for (var i = 0; i < input.length - 1; i++) {
        var char = input.charCodeAt(i);
        var nextChar = input.charCodeAt(i + 1);
        if (char === $SLASH && nextChar == $SLASH && isBlank(outerQuote))
          return i;
        if (outerQuote === char) {
          outerQuote = null;
        } else if (isBlank(outerQuote) && isQuote(char)) {
          outerQuote = char;
        }
      }
      return null;
    };
    Parser.prototype._checkNoInterpolation = function(input, location, interpolationConfig) {
      var regexp = _createInterpolateRegExp(interpolationConfig);
      var parts = input.split(regexp);
      if (parts.length > 1) {
        this._reportError("Got interpolation (" + interpolationConfig.start + interpolationConfig.end + ") where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + " in", location);
      }
    };
    Parser.prototype._findInterpolationErrorColumn = function(parts, partInErrIdx, interpolationConfig) {
      var errLocation = '';
      for (var j = 0; j < partInErrIdx; j++) {
        errLocation += j % 2 === 0 ? parts[j] : "" + interpolationConfig.start + parts[j] + interpolationConfig.end;
      }
      return errLocation.length;
    };
    Parser.decorators = [{type: _angular_core.Injectable}];
    Parser.ctorParameters = [{type: Lexer}];
    return Parser;
  }());
  var _ParseAST = (function() {
    function _ParseAST(input, location, tokens, inputLength, parseAction, errors, offset) {
      this.input = input;
      this.location = location;
      this.tokens = tokens;
      this.inputLength = inputLength;
      this.parseAction = parseAction;
      this.errors = errors;
      this.offset = offset;
      this.rparensExpected = 0;
      this.rbracketsExpected = 0;
      this.rbracesExpected = 0;
      this.index = 0;
    }
    _ParseAST.prototype.peek = function(offset) {
      var i = this.index + offset;
      return i < this.tokens.length ? this.tokens[i] : EOF;
    };
    Object.defineProperty(_ParseAST.prototype, "next", {
      get: function() {
        return this.peek(0);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(_ParseAST.prototype, "inputIndex", {
      get: function() {
        return (this.index < this.tokens.length) ? this.next.index + this.offset : this.inputLength + this.offset;
      },
      enumerable: true,
      configurable: true
    });
    _ParseAST.prototype.span = function(start) {
      return new ParseSpan(start, this.inputIndex);
    };
    _ParseAST.prototype.advance = function() {
      this.index++;
    };
    _ParseAST.prototype.optionalCharacter = function(code) {
      if (this.next.isCharacter(code)) {
        this.advance();
        return true;
      } else {
        return false;
      }
    };
    _ParseAST.prototype.peekKeywordLet = function() {
      return this.next.isKeywordLet();
    };
    _ParseAST.prototype.expectCharacter = function(code) {
      if (this.optionalCharacter(code))
        return;
      this.error("Missing expected " + String.fromCharCode(code));
    };
    _ParseAST.prototype.optionalOperator = function(op) {
      if (this.next.isOperator(op)) {
        this.advance();
        return true;
      } else {
        return false;
      }
    };
    _ParseAST.prototype.expectOperator = function(operator) {
      if (this.optionalOperator(operator))
        return;
      this.error("Missing expected operator " + operator);
    };
    _ParseAST.prototype.expectIdentifierOrKeyword = function() {
      var n = this.next;
      if (!n.isIdentifier() && !n.isKeyword()) {
        this.error("Unexpected token " + n + ", expected identifier or keyword");
        return '';
      }
      this.advance();
      return n.toString();
    };
    _ParseAST.prototype.expectIdentifierOrKeywordOrString = function() {
      var n = this.next;
      if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
        this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
        return '';
      }
      this.advance();
      return n.toString();
    };
    _ParseAST.prototype.parseChain = function() {
      var exprs = [];
      var start = this.inputIndex;
      while (this.index < this.tokens.length) {
        var expr = this.parsePipe();
        exprs.push(expr);
        if (this.optionalCharacter($SEMICOLON)) {
          if (!this.parseAction) {
            this.error('Binding expression cannot contain chained expression');
          }
          while (this.optionalCharacter($SEMICOLON)) {}
        } else if (this.index < this.tokens.length) {
          this.error("Unexpected token '" + this.next + "'");
        }
      }
      if (exprs.length == 0)
        return new EmptyExpr(this.span(start));
      if (exprs.length == 1)
        return exprs[0];
      return new Chain(this.span(start), exprs);
    };
    _ParseAST.prototype.parsePipe = function() {
      var result = this.parseExpression();
      if (this.optionalOperator('|')) {
        if (this.parseAction) {
          this.error('Cannot have a pipe in an action expression');
        }
        do {
          var name_1 = this.expectIdentifierOrKeyword();
          var args = [];
          while (this.optionalCharacter($COLON)) {
            args.push(this.parseExpression());
          }
          result = new BindingPipe(this.span(result.span.start - this.offset), result, name_1, args);
        } while (this.optionalOperator('|'));
      }
      return result;
    };
    _ParseAST.prototype.parseExpression = function() {
      return this.parseConditional();
    };
    _ParseAST.prototype.parseConditional = function() {
      var start = this.inputIndex;
      var result = this.parseLogicalOr();
      if (this.optionalOperator('?')) {
        var yes = this.parsePipe();
        var no = void 0;
        if (!this.optionalCharacter($COLON)) {
          var end = this.inputIndex;
          var expression = this.input.substring(start, end);
          this.error("Conditional expression " + expression + " requires all 3 expressions");
          no = new EmptyExpr(this.span(start));
        } else {
          no = this.parsePipe();
        }
        return new Conditional(this.span(start), result, yes, no);
      } else {
        return result;
      }
    };
    _ParseAST.prototype.parseLogicalOr = function() {
      var result = this.parseLogicalAnd();
      while (this.optionalOperator('||')) {
        var right = this.parseLogicalAnd();
        result = new Binary(this.span(result.span.start), '||', result, right);
      }
      return result;
    };
    _ParseAST.prototype.parseLogicalAnd = function() {
      var result = this.parseEquality();
      while (this.optionalOperator('&&')) {
        var right = this.parseEquality();
        result = new Binary(this.span(result.span.start), '&&', result, right);
      }
      return result;
    };
    _ParseAST.prototype.parseEquality = function() {
      var result = this.parseRelational();
      while (this.next.type == exports.TokenType.Operator) {
        var operator = this.next.strValue;
        switch (operator) {
          case '==':
          case '===':
          case '!=':
          case '!==':
            this.advance();
            var right = this.parseRelational();
            result = new Binary(this.span(result.span.start), operator, result, right);
            continue;
        }
        break;
      }
      return result;
    };
    _ParseAST.prototype.parseRelational = function() {
      var result = this.parseAdditive();
      while (this.next.type == exports.TokenType.Operator) {
        var operator = this.next.strValue;
        switch (operator) {
          case '<':
          case '>':
          case '<=':
          case '>=':
            this.advance();
            var right = this.parseAdditive();
            result = new Binary(this.span(result.span.start), operator, result, right);
            continue;
        }
        break;
      }
      return result;
    };
    _ParseAST.prototype.parseAdditive = function() {
      var result = this.parseMultiplicative();
      while (this.next.type == exports.TokenType.Operator) {
        var operator = this.next.strValue;
        switch (operator) {
          case '+':
          case '-':
            this.advance();
            var right = this.parseMultiplicative();
            result = new Binary(this.span(result.span.start), operator, result, right);
            continue;
        }
        break;
      }
      return result;
    };
    _ParseAST.prototype.parseMultiplicative = function() {
      var result = this.parsePrefix();
      while (this.next.type == exports.TokenType.Operator) {
        var operator = this.next.strValue;
        switch (operator) {
          case '*':
          case '%':
          case '/':
            this.advance();
            var right = this.parsePrefix();
            result = new Binary(this.span(result.span.start), operator, result, right);
            continue;
        }
        break;
      }
      return result;
    };
    _ParseAST.prototype.parsePrefix = function() {
      if (this.next.type == exports.TokenType.Operator) {
        var start = this.inputIndex;
        var operator = this.next.strValue;
        var result = void 0;
        switch (operator) {
          case '+':
            this.advance();
            return this.parsePrefix();
          case '-':
            this.advance();
            result = this.parsePrefix();
            return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);
          case '!':
            this.advance();
            result = this.parsePrefix();
            return new PrefixNot(this.span(start), result);
        }
      }
      return this.parseCallChain();
    };
    _ParseAST.prototype.parseCallChain = function() {
      var result = this.parsePrimary();
      while (true) {
        if (this.optionalCharacter($PERIOD)) {
          result = this.parseAccessMemberOrMethodCall(result, false);
        } else if (this.optionalOperator('?.')) {
          result = this.parseAccessMemberOrMethodCall(result, true);
        } else if (this.optionalCharacter($LBRACKET)) {
          this.rbracketsExpected++;
          var key = this.parsePipe();
          this.rbracketsExpected--;
          this.expectCharacter($RBRACKET);
          if (this.optionalOperator('=')) {
            var value = this.parseConditional();
            result = new KeyedWrite(this.span(result.span.start), result, key, value);
          } else {
            result = new KeyedRead(this.span(result.span.start), result, key);
          }
        } else if (this.optionalCharacter($LPAREN)) {
          this.rparensExpected++;
          var args = this.parseCallArguments();
          this.rparensExpected--;
          this.expectCharacter($RPAREN);
          result = new FunctionCall(this.span(result.span.start), result, args);
        } else {
          return result;
        }
      }
    };
    _ParseAST.prototype.parsePrimary = function() {
      var start = this.inputIndex;
      if (this.optionalCharacter($LPAREN)) {
        this.rparensExpected++;
        var result = this.parsePipe();
        this.rparensExpected--;
        this.expectCharacter($RPAREN);
        return result;
      } else if (this.next.isKeywordNull()) {
        this.advance();
        return new LiteralPrimitive(this.span(start), null);
      } else if (this.next.isKeywordUndefined()) {
        this.advance();
        return new LiteralPrimitive(this.span(start), void 0);
      } else if (this.next.isKeywordTrue()) {
        this.advance();
        return new LiteralPrimitive(this.span(start), true);
      } else if (this.next.isKeywordFalse()) {
        this.advance();
        return new LiteralPrimitive(this.span(start), false);
      } else if (this.next.isKeywordThis()) {
        this.advance();
        return new ImplicitReceiver(this.span(start));
      } else if (this.optionalCharacter($LBRACKET)) {
        this.rbracketsExpected++;
        var elements = this.parseExpressionList($RBRACKET);
        this.rbracketsExpected--;
        this.expectCharacter($RBRACKET);
        return new LiteralArray(this.span(start), elements);
      } else if (this.next.isCharacter($LBRACE)) {
        return this.parseLiteralMap();
      } else if (this.next.isIdentifier()) {
        return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);
      } else if (this.next.isNumber()) {
        var value = this.next.toNumber();
        this.advance();
        return new LiteralPrimitive(this.span(start), value);
      } else if (this.next.isString()) {
        var literalValue = this.next.toString();
        this.advance();
        return new LiteralPrimitive(this.span(start), literalValue);
      } else if (this.index >= this.tokens.length) {
        this.error("Unexpected end of expression: " + this.input);
        return new EmptyExpr(this.span(start));
      } else {
        this.error("Unexpected token " + this.next);
        return new EmptyExpr(this.span(start));
      }
    };
    _ParseAST.prototype.parseExpressionList = function(terminator) {
      var result = [];
      if (!this.next.isCharacter(terminator)) {
        do {
          result.push(this.parsePipe());
        } while (this.optionalCharacter($COMMA));
      }
      return result;
    };
    _ParseAST.prototype.parseLiteralMap = function() {
      var keys = [];
      var values = [];
      var start = this.inputIndex;
      this.expectCharacter($LBRACE);
      if (!this.optionalCharacter($RBRACE)) {
        this.rbracesExpected++;
        do {
          var key = this.expectIdentifierOrKeywordOrString();
          keys.push(key);
          this.expectCharacter($COLON);
          values.push(this.parsePipe());
        } while (this.optionalCharacter($COMMA));
        this.rbracesExpected--;
        this.expectCharacter($RBRACE);
      }
      return new LiteralMap(this.span(start), keys, values);
    };
    _ParseAST.prototype.parseAccessMemberOrMethodCall = function(receiver, isSafe) {
      if (isSafe === void 0) {
        isSafe = false;
      }
      var start = receiver.span.start;
      var id = this.expectIdentifierOrKeyword();
      if (this.optionalCharacter($LPAREN)) {
        this.rparensExpected++;
        var args = this.parseCallArguments();
        this.expectCharacter($RPAREN);
        this.rparensExpected--;
        var span = this.span(start);
        return isSafe ? new SafeMethodCall(span, receiver, id, args) : new MethodCall(span, receiver, id, args);
      } else {
        if (isSafe) {
          if (this.optionalOperator('=')) {
            this.error('The \'?.\' operator cannot be used in the assignment');
            return new EmptyExpr(this.span(start));
          } else {
            return new SafePropertyRead(this.span(start), receiver, id);
          }
        } else {
          if (this.optionalOperator('=')) {
            if (!this.parseAction) {
              this.error('Bindings cannot contain assignments');
              return new EmptyExpr(this.span(start));
            }
            var value = this.parseConditional();
            return new PropertyWrite(this.span(start), receiver, id, value);
          } else {
            return new PropertyRead(this.span(start), receiver, id);
          }
        }
      }
    };
    _ParseAST.prototype.parseCallArguments = function() {
      if (this.next.isCharacter($RPAREN))
        return [];
      var positionals = [];
      do {
        positionals.push(this.parsePipe());
      } while (this.optionalCharacter($COMMA));
      return positionals;
    };
    _ParseAST.prototype.expectTemplateBindingKey = function() {
      var result = '';
      var operatorFound = false;
      do {
        result += this.expectIdentifierOrKeywordOrString();
        operatorFound = this.optionalOperator('-');
        if (operatorFound) {
          result += '-';
        }
      } while (operatorFound);
      return result.toString();
    };
    _ParseAST.prototype.parseTemplateBindings = function() {
      var bindings = [];
      var prefix = null;
      var warnings = [];
      while (this.index < this.tokens.length) {
        var start = this.inputIndex;
        var keyIsVar = this.peekKeywordLet();
        if (keyIsVar) {
          this.advance();
        }
        var key = this.expectTemplateBindingKey();
        if (!keyIsVar) {
          if (prefix == null) {
            prefix = key;
          } else {
            key = prefix + key[0].toUpperCase() + key.substring(1);
          }
        }
        this.optionalCharacter($COLON);
        var name_2 = null;
        var expression = null;
        if (keyIsVar) {
          if (this.optionalOperator('=')) {
            name_2 = this.expectTemplateBindingKey();
          } else {
            name_2 = '\$implicit';
          }
        } else if (this.next !== EOF && !this.peekKeywordLet()) {
          var start_1 = this.inputIndex;
          var ast = this.parsePipe();
          var source = this.input.substring(start_1 - this.offset, this.inputIndex - this.offset);
          expression = new ASTWithSource(ast, source, this.location, this.errors);
        }
        bindings.push(new TemplateBinding(this.span(start), key, keyIsVar, name_2, expression));
        if (!this.optionalCharacter($SEMICOLON)) {
          this.optionalCharacter($COMMA);
        }
      }
      return new TemplateBindingParseResult(bindings, warnings, this.errors);
    };
    _ParseAST.prototype.error = function(message, index) {
      if (index === void 0) {
        index = null;
      }
      this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));
      this.skip();
    };
    _ParseAST.prototype.locationText = function(index) {
      if (index === void 0) {
        index = null;
      }
      if (isBlank(index))
        index = this.index;
      return (index < this.tokens.length) ? "at column " + (this.tokens[index].index + 1) + " in" : "at the end of the expression";
    };
    _ParseAST.prototype.skip = function() {
      var n = this.next;
      while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) && (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) && (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) && (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET))) {
        if (this.next.isError()) {
          this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));
        }
        this.advance();
        n = this.next;
      }
    };
    return _ParseAST;
  }());
  var SimpleExpressionChecker = (function() {
    function SimpleExpressionChecker() {
      this.errors = [];
    }
    SimpleExpressionChecker.check = function(ast) {
      var s = new SimpleExpressionChecker();
      ast.visit(s);
      return s.errors;
    };
    SimpleExpressionChecker.prototype.visitImplicitReceiver = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitInterpolation = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitLiteralPrimitive = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitPropertyRead = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitPropertyWrite = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitSafePropertyRead = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitMethodCall = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitSafeMethodCall = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitFunctionCall = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitLiteralArray = function(ast, context) {
      this.visitAll(ast.expressions);
    };
    SimpleExpressionChecker.prototype.visitLiteralMap = function(ast, context) {
      this.visitAll(ast.values);
    };
    SimpleExpressionChecker.prototype.visitBinary = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitPrefixNot = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitConditional = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitPipe = function(ast, context) {
      this.errors.push('pipes');
    };
    SimpleExpressionChecker.prototype.visitKeyedRead = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitKeyedWrite = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitAll = function(asts) {
      var _this = this;
      return asts.map(function(node) {
        return node.visit(_this);
      });
    };
    SimpleExpressionChecker.prototype.visitChain = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitQuote = function(ast, context) {};
    return SimpleExpressionChecker;
  }());
  var ParseLocation = (function() {
    function ParseLocation(file, offset, line, col) {
      this.file = file;
      this.offset = offset;
      this.line = line;
      this.col = col;
    }
    ParseLocation.prototype.toString = function() {
      return isPresent(this.offset) ? this.file.url + "@" + this.line + ":" + this.col : this.file.url;
    };
    return ParseLocation;
  }());
  var ParseSourceFile = (function() {
    function ParseSourceFile(content, url) {
      this.content = content;
      this.url = url;
    }
    return ParseSourceFile;
  }());
  var ParseSourceSpan = (function() {
    function ParseSourceSpan(start, end, details) {
      if (details === void 0) {
        details = null;
      }
      this.start = start;
      this.end = end;
      this.details = details;
    }
    ParseSourceSpan.prototype.toString = function() {
      return this.start.file.content.substring(this.start.offset, this.end.offset);
    };
    return ParseSourceSpan;
  }());
  exports.ParseErrorLevel;
  (function(ParseErrorLevel) {
    ParseErrorLevel[ParseErrorLevel["WARNING"] = 0] = "WARNING";
    ParseErrorLevel[ParseErrorLevel["FATAL"] = 1] = "FATAL";
  })(exports.ParseErrorLevel || (exports.ParseErrorLevel = {}));
  var ParseError = (function() {
    function ParseError(span, msg, level) {
      if (level === void 0) {
        level = exports.ParseErrorLevel.FATAL;
      }
      this.span = span;
      this.msg = msg;
      this.level = level;
    }
    ParseError.prototype.toString = function() {
      var source = this.span.start.file.content;
      var ctxStart = this.span.start.offset;
      var contextStr = '';
      var details = '';
      if (isPresent(ctxStart)) {
        if (ctxStart > source.length - 1) {
          ctxStart = source.length - 1;
        }
        var ctxEnd = ctxStart;
        var ctxLen = 0;
        var ctxLines = 0;
        while (ctxLen < 100 && ctxStart > 0) {
          ctxStart--;
          ctxLen++;
          if (source[ctxStart] == '\n') {
            if (++ctxLines == 3) {
              break;
            }
          }
        }
        ctxLen = 0;
        ctxLines = 0;
        while (ctxLen < 100 && ctxEnd < source.length - 1) {
          ctxEnd++;
          ctxLen++;
          if (source[ctxEnd] == '\n') {
            if (++ctxLines == 3) {
              break;
            }
          }
        }
        var context = source.substring(ctxStart, this.span.start.offset) + '[ERROR ->]' + source.substring(this.span.start.offset, ctxEnd + 1);
        contextStr = " (\"" + context + "\")";
      }
      if (this.span.details) {
        details = ", " + this.span.details;
      }
      return "" + this.msg + contextStr + ": " + this.span.start + details;
    };
    return ParseError;
  }());
  var Text = (function() {
    function Text(value, sourceSpan) {
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    Text.prototype.visit = function(visitor, context) {
      return visitor.visitText(this, context);
    };
    return Text;
  }());
  var Expansion = (function() {
    function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
      this.switchValue = switchValue;
      this.type = type;
      this.cases = cases;
      this.sourceSpan = sourceSpan;
      this.switchValueSourceSpan = switchValueSourceSpan;
    }
    Expansion.prototype.visit = function(visitor, context) {
      return visitor.visitExpansion(this, context);
    };
    return Expansion;
  }());
  var ExpansionCase = (function() {
    function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
      this.value = value;
      this.expression = expression;
      this.sourceSpan = sourceSpan;
      this.valueSourceSpan = valueSourceSpan;
      this.expSourceSpan = expSourceSpan;
    }
    ExpansionCase.prototype.visit = function(visitor, context) {
      return visitor.visitExpansionCase(this, context);
    };
    return ExpansionCase;
  }());
  var Attribute$1 = (function() {
    function Attribute(name, value, sourceSpan, valueSpan) {
      this.name = name;
      this.value = value;
      this.sourceSpan = sourceSpan;
      this.valueSpan = valueSpan;
    }
    Attribute.prototype.visit = function(visitor, context) {
      return visitor.visitAttribute(this, context);
    };
    return Attribute;
  }());
  var Element = (function() {
    function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
      this.name = name;
      this.attrs = attrs;
      this.children = children;
      this.sourceSpan = sourceSpan;
      this.startSourceSpan = startSourceSpan;
      this.endSourceSpan = endSourceSpan;
    }
    Element.prototype.visit = function(visitor, context) {
      return visitor.visitElement(this, context);
    };
    return Element;
  }());
  var Comment = (function() {
    function Comment(value, sourceSpan) {
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    Comment.prototype.visit = function(visitor, context) {
      return visitor.visitComment(this, context);
    };
    return Comment;
  }());
  function visitAll(visitor, nodes, context) {
    if (context === void 0) {
      context = null;
    }
    var result = [];
    var visit = visitor.visit ? function(ast) {
      return visitor.visit(ast, context) || ast.visit(visitor, context);
    } : function(ast) {
      return ast.visit(visitor, context);
    };
    nodes.forEach(function(ast) {
      var astResult = visit(ast);
      if (astResult) {
        result.push(astResult);
      }
    });
    return result;
  }
  var TagContentType;
  (function(TagContentType) {
    TagContentType[TagContentType["RAW_TEXT"] = 0] = "RAW_TEXT";
    TagContentType[TagContentType["ESCAPABLE_RAW_TEXT"] = 1] = "ESCAPABLE_RAW_TEXT";
    TagContentType[TagContentType["PARSABLE_DATA"] = 2] = "PARSABLE_DATA";
  })(TagContentType || (TagContentType = {}));
  function splitNsName(elementName) {
    if (elementName[0] != ':') {
      return [null, elementName];
    }
    var colonIndex = elementName.indexOf(':', 1);
    if (colonIndex == -1) {
      throw new Error("Unsupported format \"" + elementName + "\" expecting \":namespace:name\"");
    }
    return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
  }
  function getNsPrefix(fullName) {
    return fullName === null ? null : splitNsName(fullName)[0];
  }
  function mergeNsAndName(prefix, localName) {
    return prefix ? ":" + prefix + ":" + localName : localName;
  }
  var NAMED_ENTITIES = {
    'Aacute': '\u00C1',
    'aacute': '\u00E1',
    'Acirc': '\u00C2',
    'acirc': '\u00E2',
    'acute': '\u00B4',
    'AElig': '\u00C6',
    'aelig': '\u00E6',
    'Agrave': '\u00C0',
    'agrave': '\u00E0',
    'alefsym': '\u2135',
    'Alpha': '\u0391',
    'alpha': '\u03B1',
    'amp': '&',
    'and': '\u2227',
    'ang': '\u2220',
    'apos': '\u0027',
    'Aring': '\u00C5',
    'aring': '\u00E5',
    'asymp': '\u2248',
    'Atilde': '\u00C3',
    'atilde': '\u00E3',
    'Auml': '\u00C4',
    'auml': '\u00E4',
    'bdquo': '\u201E',
    'Beta': '\u0392',
    'beta': '\u03B2',
    'brvbar': '\u00A6',
    'bull': '\u2022',
    'cap': '\u2229',
    'Ccedil': '\u00C7',
    'ccedil': '\u00E7',
    'cedil': '\u00B8',
    'cent': '\u00A2',
    'Chi': '\u03A7',
    'chi': '\u03C7',
    'circ': '\u02C6',
    'clubs': '\u2663',
    'cong': '\u2245',
    'copy': '\u00A9',
    'crarr': '\u21B5',
    'cup': '\u222A',
    'curren': '\u00A4',
    'dagger': '\u2020',
    'Dagger': '\u2021',
    'darr': '\u2193',
    'dArr': '\u21D3',
    'deg': '\u00B0',
    'Delta': '\u0394',
    'delta': '\u03B4',
    'diams': '\u2666',
    'divide': '\u00F7',
    'Eacute': '\u00C9',
    'eacute': '\u00E9',
    'Ecirc': '\u00CA',
    'ecirc': '\u00EA',
    'Egrave': '\u00C8',
    'egrave': '\u00E8',
    'empty': '\u2205',
    'emsp': '\u2003',
    'ensp': '\u2002',
    'Epsilon': '\u0395',
    'epsilon': '\u03B5',
    'equiv': '\u2261',
    'Eta': '\u0397',
    'eta': '\u03B7',
    'ETH': '\u00D0',
    'eth': '\u00F0',
    'Euml': '\u00CB',
    'euml': '\u00EB',
    'euro': '\u20AC',
    'exist': '\u2203',
    'fnof': '\u0192',
    'forall': '\u2200',
    'frac12': '\u00BD',
    'frac14': '\u00BC',
    'frac34': '\u00BE',
    'frasl': '\u2044',
    'Gamma': '\u0393',
    'gamma': '\u03B3',
    'ge': '\u2265',
    'gt': '>',
    'harr': '\u2194',
    'hArr': '\u21D4',
    'hearts': '\u2665',
    'hellip': '\u2026',
    'Iacute': '\u00CD',
    'iacute': '\u00ED',
    'Icirc': '\u00CE',
    'icirc': '\u00EE',
    'iexcl': '\u00A1',
    'Igrave': '\u00CC',
    'igrave': '\u00EC',
    'image': '\u2111',
    'infin': '\u221E',
    'int': '\u222B',
    'Iota': '\u0399',
    'iota': '\u03B9',
    'iquest': '\u00BF',
    'isin': '\u2208',
    'Iuml': '\u00CF',
    'iuml': '\u00EF',
    'Kappa': '\u039A',
    'kappa': '\u03BA',
    'Lambda': '\u039B',
    'lambda': '\u03BB',
    'lang': '\u27E8',
    'laquo': '\u00AB',
    'larr': '\u2190',
    'lArr': '\u21D0',
    'lceil': '\u2308',
    'ldquo': '\u201C',
    'le': '\u2264',
    'lfloor': '\u230A',
    'lowast': '\u2217',
    'loz': '\u25CA',
    'lrm': '\u200E',
    'lsaquo': '\u2039',
    'lsquo': '\u2018',
    'lt': '<',
    'macr': '\u00AF',
    'mdash': '\u2014',
    'micro': '\u00B5',
    'middot': '\u00B7',
    'minus': '\u2212',
    'Mu': '\u039C',
    'mu': '\u03BC',
    'nabla': '\u2207',
    'nbsp': '\u00A0',
    'ndash': '\u2013',
    'ne': '\u2260',
    'ni': '\u220B',
    'not': '\u00AC',
    'notin': '\u2209',
    'nsub': '\u2284',
    'Ntilde': '\u00D1',
    'ntilde': '\u00F1',
    'Nu': '\u039D',
    'nu': '\u03BD',
    'Oacute': '\u00D3',
    'oacute': '\u00F3',
    'Ocirc': '\u00D4',
    'ocirc': '\u00F4',
    'OElig': '\u0152',
    'oelig': '\u0153',
    'Ograve': '\u00D2',
    'ograve': '\u00F2',
    'oline': '\u203E',
    'Omega': '\u03A9',
    'omega': '\u03C9',
    'Omicron': '\u039F',
    'omicron': '\u03BF',
    'oplus': '\u2295',
    'or': '\u2228',
    'ordf': '\u00AA',
    'ordm': '\u00BA',
    'Oslash': '\u00D8',
    'oslash': '\u00F8',
    'Otilde': '\u00D5',
    'otilde': '\u00F5',
    'otimes': '\u2297',
    'Ouml': '\u00D6',
    'ouml': '\u00F6',
    'para': '\u00B6',
    'permil': '\u2030',
    'perp': '\u22A5',
    'Phi': '\u03A6',
    'phi': '\u03C6',
    'Pi': '\u03A0',
    'pi': '\u03C0',
    'piv': '\u03D6',
    'plusmn': '\u00B1',
    'pound': '\u00A3',
    'prime': '\u2032',
    'Prime': '\u2033',
    'prod': '\u220F',
    'prop': '\u221D',
    'Psi': '\u03A8',
    'psi': '\u03C8',
    'quot': '\u0022',
    'radic': '\u221A',
    'rang': '\u27E9',
    'raquo': '\u00BB',
    'rarr': '\u2192',
    'rArr': '\u21D2',
    'rceil': '\u2309',
    'rdquo': '\u201D',
    'real': '\u211C',
    'reg': '\u00AE',
    'rfloor': '\u230B',
    'Rho': '\u03A1',
    'rho': '\u03C1',
    'rlm': '\u200F',
    'rsaquo': '\u203A',
    'rsquo': '\u2019',
    'sbquo': '\u201A',
    'Scaron': '\u0160',
    'scaron': '\u0161',
    'sdot': '\u22C5',
    'sect': '\u00A7',
    'shy': '\u00AD',
    'Sigma': '\u03A3',
    'sigma': '\u03C3',
    'sigmaf': '\u03C2',
    'sim': '\u223C',
    'spades': '\u2660',
    'sub': '\u2282',
    'sube': '\u2286',
    'sum': '\u2211',
    'sup': '\u2283',
    'sup1': '\u00B9',
    'sup2': '\u00B2',
    'sup3': '\u00B3',
    'supe': '\u2287',
    'szlig': '\u00DF',
    'Tau': '\u03A4',
    'tau': '\u03C4',
    'there4': '\u2234',
    'Theta': '\u0398',
    'theta': '\u03B8',
    'thetasym': '\u03D1',
    'thinsp': '\u2009',
    'THORN': '\u00DE',
    'thorn': '\u00FE',
    'tilde': '\u02DC',
    'times': '\u00D7',
    'trade': '\u2122',
    'Uacute': '\u00DA',
    'uacute': '\u00FA',
    'uarr': '\u2191',
    'uArr': '\u21D1',
    'Ucirc': '\u00DB',
    'ucirc': '\u00FB',
    'Ugrave': '\u00D9',
    'ugrave': '\u00F9',
    'uml': '\u00A8',
    'upsih': '\u03D2',
    'Upsilon': '\u03A5',
    'upsilon': '\u03C5',
    'Uuml': '\u00DC',
    'uuml': '\u00FC',
    'weierp': '\u2118',
    'Xi': '\u039E',
    'xi': '\u03BE',
    'Yacute': '\u00DD',
    'yacute': '\u00FD',
    'yen': '\u00A5',
    'yuml': '\u00FF',
    'Yuml': '\u0178',
    'Zeta': '\u0396',
    'zeta': '\u03B6',
    'zwj': '\u200D',
    'zwnj': '\u200C'
  };
  var __extends$3 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var TokenType$1;
  (function(TokenType) {
    TokenType[TokenType["TAG_OPEN_START"] = 0] = "TAG_OPEN_START";
    TokenType[TokenType["TAG_OPEN_END"] = 1] = "TAG_OPEN_END";
    TokenType[TokenType["TAG_OPEN_END_VOID"] = 2] = "TAG_OPEN_END_VOID";
    TokenType[TokenType["TAG_CLOSE"] = 3] = "TAG_CLOSE";
    TokenType[TokenType["TEXT"] = 4] = "TEXT";
    TokenType[TokenType["ESCAPABLE_RAW_TEXT"] = 5] = "ESCAPABLE_RAW_TEXT";
    TokenType[TokenType["RAW_TEXT"] = 6] = "RAW_TEXT";
    TokenType[TokenType["COMMENT_START"] = 7] = "COMMENT_START";
    TokenType[TokenType["COMMENT_END"] = 8] = "COMMENT_END";
    TokenType[TokenType["CDATA_START"] = 9] = "CDATA_START";
    TokenType[TokenType["CDATA_END"] = 10] = "CDATA_END";
    TokenType[TokenType["ATTR_NAME"] = 11] = "ATTR_NAME";
    TokenType[TokenType["ATTR_VALUE"] = 12] = "ATTR_VALUE";
    TokenType[TokenType["DOC_TYPE"] = 13] = "DOC_TYPE";
    TokenType[TokenType["EXPANSION_FORM_START"] = 14] = "EXPANSION_FORM_START";
    TokenType[TokenType["EXPANSION_CASE_VALUE"] = 15] = "EXPANSION_CASE_VALUE";
    TokenType[TokenType["EXPANSION_CASE_EXP_START"] = 16] = "EXPANSION_CASE_EXP_START";
    TokenType[TokenType["EXPANSION_CASE_EXP_END"] = 17] = "EXPANSION_CASE_EXP_END";
    TokenType[TokenType["EXPANSION_FORM_END"] = 18] = "EXPANSION_FORM_END";
    TokenType[TokenType["EOF"] = 19] = "EOF";
  })(TokenType$1 || (TokenType$1 = {}));
  var Token$1 = (function() {
    function Token(type, parts, sourceSpan) {
      this.type = type;
      this.parts = parts;
      this.sourceSpan = sourceSpan;
    }
    return Token;
  }());
  var TokenError = (function(_super) {
    __extends$3(TokenError, _super);
    function TokenError(errorMsg, tokenType, span) {
      _super.call(this, span, errorMsg);
      this.tokenType = tokenType;
    }
    return TokenError;
  }(ParseError));
  var TokenizeResult = (function() {
    function TokenizeResult(tokens, errors) {
      this.tokens = tokens;
      this.errors = errors;
    }
    return TokenizeResult;
  }());
  function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {
    if (tokenizeExpansionForms === void 0) {
      tokenizeExpansionForms = false;
    }
    if (interpolationConfig === void 0) {
      interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
    }
    return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig).tokenize();
  }
  var _CR_OR_CRLF_REGEXP = /\r\n?/g;
  function _unexpectedCharacterErrorMsg(charCode) {
    var char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);
    return "Unexpected character \"" + char + "\"";
  }
  function _unknownEntityErrorMsg(entitySrc) {
    return "Unknown entity \"" + entitySrc + "\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax";
  }
  var _ControlFlowError = (function() {
    function _ControlFlowError(error) {
      this.error = error;
    }
    return _ControlFlowError;
  }());
  var _Tokenizer = (function() {
    function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {
      if (_interpolationConfig === void 0) {
        _interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      this._file = _file;
      this._getTagDefinition = _getTagDefinition;
      this._tokenizeIcu = _tokenizeIcu;
      this._interpolationConfig = _interpolationConfig;
      this._peek = -1;
      this._nextPeek = -1;
      this._index = -1;
      this._line = 0;
      this._column = -1;
      this._expansionCaseStack = [];
      this._inInterpolation = false;
      this.tokens = [];
      this.errors = [];
      this._input = _file.content;
      this._length = _file.content.length;
      this._advance();
    }
    _Tokenizer.prototype._processCarriageReturns = function(content) {
      return content.replace(_CR_OR_CRLF_REGEXP, '\n');
    };
    _Tokenizer.prototype.tokenize = function() {
      while (this._peek !== $EOF) {
        var start = this._getLocation();
        try {
          if (this._attemptCharCode($LT)) {
            if (this._attemptCharCode($BANG)) {
              if (this._attemptCharCode($LBRACKET)) {
                this._consumeCdata(start);
              } else if (this._attemptCharCode($MINUS)) {
                this._consumeComment(start);
              } else {
                this._consumeDocType(start);
              }
            } else if (this._attemptCharCode($SLASH)) {
              this._consumeTagClose(start);
            } else {
              this._consumeTagOpen(start);
            }
          } else if (!this._tokenizeIcu || !this._tokenizeExpansionForm()) {
            this._consumeText();
          }
        } catch (e) {
          if (e instanceof _ControlFlowError) {
            this.errors.push(e.error);
          } else {
            throw e;
          }
        }
      }
      this._beginToken(TokenType$1.EOF);
      this._endToken([]);
      return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);
    };
    _Tokenizer.prototype._tokenizeExpansionForm = function() {
      if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
        this._consumeExpansionFormStart();
        return true;
      }
      if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {
        this._consumeExpansionCaseStart();
        return true;
      }
      if (this._peek === $RBRACE) {
        if (this._isInExpansionCase()) {
          this._consumeExpansionCaseEnd();
          return true;
        }
        if (this._isInExpansionForm()) {
          this._consumeExpansionFormEnd();
          return true;
        }
      }
      return false;
    };
    _Tokenizer.prototype._getLocation = function() {
      return new ParseLocation(this._file, this._index, this._line, this._column);
    };
    _Tokenizer.prototype._getSpan = function(start, end) {
      if (start === void 0) {
        start = this._getLocation();
      }
      if (end === void 0) {
        end = this._getLocation();
      }
      return new ParseSourceSpan(start, end);
    };
    _Tokenizer.prototype._beginToken = function(type, start) {
      if (start === void 0) {
        start = this._getLocation();
      }
      this._currentTokenStart = start;
      this._currentTokenType = type;
    };
    _Tokenizer.prototype._endToken = function(parts, end) {
      if (end === void 0) {
        end = this._getLocation();
      }
      var token = new Token$1(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));
      this.tokens.push(token);
      this._currentTokenStart = null;
      this._currentTokenType = null;
      return token;
    };
    _Tokenizer.prototype._createError = function(msg, span) {
      if (this._isInExpansionForm()) {
        msg += " (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)";
      }
      var error = new TokenError(msg, this._currentTokenType, span);
      this._currentTokenStart = null;
      this._currentTokenType = null;
      return new _ControlFlowError(error);
    };
    _Tokenizer.prototype._advance = function() {
      if (this._index >= this._length) {
        throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan());
      }
      if (this._peek === $LF) {
        this._line++;
        this._column = 0;
      } else if (this._peek !== $LF && this._peek !== $CR) {
        this._column++;
      }
      this._index++;
      this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index);
      this._nextPeek = this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1);
    };
    _Tokenizer.prototype._attemptCharCode = function(charCode) {
      if (this._peek === charCode) {
        this._advance();
        return true;
      }
      return false;
    };
    _Tokenizer.prototype._attemptCharCodeCaseInsensitive = function(charCode) {
      if (compareCharCodeCaseInsensitive(this._peek, charCode)) {
        this._advance();
        return true;
      }
      return false;
    };
    _Tokenizer.prototype._requireCharCode = function(charCode) {
      var location = this._getLocation();
      if (!this._attemptCharCode(charCode)) {
        throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));
      }
    };
    _Tokenizer.prototype._attemptStr = function(chars) {
      var len = chars.length;
      if (this._index + len > this._length) {
        return false;
      }
      var initialPosition = this._savePosition();
      for (var i = 0; i < len; i++) {
        if (!this._attemptCharCode(chars.charCodeAt(i))) {
          this._restorePosition(initialPosition);
          return false;
        }
      }
      return true;
    };
    _Tokenizer.prototype._attemptStrCaseInsensitive = function(chars) {
      for (var i = 0; i < chars.length; i++) {
        if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
          return false;
        }
      }
      return true;
    };
    _Tokenizer.prototype._requireStr = function(chars) {
      var location = this._getLocation();
      if (!this._attemptStr(chars)) {
        throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));
      }
    };
    _Tokenizer.prototype._attemptCharCodeUntilFn = function(predicate) {
      while (!predicate(this._peek)) {
        this._advance();
      }
    };
    _Tokenizer.prototype._requireCharCodeUntilFn = function(predicate, len) {
      var start = this._getLocation();
      this._attemptCharCodeUntilFn(predicate);
      if (this._index - start.offset < len) {
        throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));
      }
    };
    _Tokenizer.prototype._attemptUntilChar = function(char) {
      while (this._peek !== char) {
        this._advance();
      }
    };
    _Tokenizer.prototype._readChar = function(decodeEntities) {
      if (decodeEntities && this._peek === $AMPERSAND) {
        return this._decodeEntity();
      } else {
        var index = this._index;
        this._advance();
        return this._input[index];
      }
    };
    _Tokenizer.prototype._decodeEntity = function() {
      var start = this._getLocation();
      this._advance();
      if (this._attemptCharCode($HASH)) {
        var isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
        var numberStart = this._getLocation().offset;
        this._attemptCharCodeUntilFn(isDigitEntityEnd);
        if (this._peek != $SEMICOLON) {
          throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
        }
        this._advance();
        var strNum = this._input.substring(numberStart, this._index - 1);
        try {
          var charCode = parseInt(strNum, isHex ? 16 : 10);
          return String.fromCharCode(charCode);
        } catch (e) {
          var entity = this._input.substring(start.offset + 1, this._index - 1);
          throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));
        }
      } else {
        var startPosition = this._savePosition();
        this._attemptCharCodeUntilFn(isNamedEntityEnd);
        if (this._peek != $SEMICOLON) {
          this._restorePosition(startPosition);
          return '&';
        }
        this._advance();
        var name_1 = this._input.substring(start.offset + 1, this._index - 1);
        var char = NAMED_ENTITIES[name_1];
        if (!char) {
          throw this._createError(_unknownEntityErrorMsg(name_1), this._getSpan(start));
        }
        return char;
      }
    };
    _Tokenizer.prototype._consumeRawText = function(decodeEntities, firstCharOfEnd, attemptEndRest) {
      var tagCloseStart;
      var textStart = this._getLocation();
      this._beginToken(decodeEntities ? TokenType$1.ESCAPABLE_RAW_TEXT : TokenType$1.RAW_TEXT, textStart);
      var parts = [];
      while (true) {
        tagCloseStart = this._getLocation();
        if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
          break;
        }
        if (this._index > tagCloseStart.offset) {
          parts.push(this._input.substring(tagCloseStart.offset, this._index));
        }
        while (this._peek !== firstCharOfEnd) {
          parts.push(this._readChar(decodeEntities));
        }
      }
      return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);
    };
    _Tokenizer.prototype._consumeComment = function(start) {
      var _this = this;
      this._beginToken(TokenType$1.COMMENT_START, start);
      this._requireCharCode($MINUS);
      this._endToken([]);
      var textToken = this._consumeRawText(false, $MINUS, function() {
        return _this._attemptStr('->');
      });
      this._beginToken(TokenType$1.COMMENT_END, textToken.sourceSpan.end);
      this._endToken([]);
    };
    _Tokenizer.prototype._consumeCdata = function(start) {
      var _this = this;
      this._beginToken(TokenType$1.CDATA_START, start);
      this._requireStr('CDATA[');
      this._endToken([]);
      var textToken = this._consumeRawText(false, $RBRACKET, function() {
        return _this._attemptStr(']>');
      });
      this._beginToken(TokenType$1.CDATA_END, textToken.sourceSpan.end);
      this._endToken([]);
    };
    _Tokenizer.prototype._consumeDocType = function(start) {
      this._beginToken(TokenType$1.DOC_TYPE, start);
      this._attemptUntilChar($GT);
      this._advance();
      this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);
    };
    _Tokenizer.prototype._consumePrefixAndName = function() {
      var nameOrPrefixStart = this._index;
      var prefix = null;
      while (this._peek !== $COLON && !isPrefixEnd(this._peek)) {
        this._advance();
      }
      var nameStart;
      if (this._peek === $COLON) {
        this._advance();
        prefix = this._input.substring(nameOrPrefixStart, this._index - 1);
        nameStart = this._index;
      } else {
        nameStart = nameOrPrefixStart;
      }
      this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);
      var name = this._input.substring(nameStart, this._index);
      return [prefix, name];
    };
    _Tokenizer.prototype._consumeTagOpen = function(start) {
      var savedPos = this._savePosition();
      var tagName;
      var lowercaseTagName;
      try {
        if (!isAsciiLetter(this._peek)) {
          throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
        }
        var nameStart = this._index;
        this._consumeTagOpenStart(start);
        tagName = this._input.substring(nameStart, this._index);
        lowercaseTagName = tagName.toLowerCase();
        this._attemptCharCodeUntilFn(isNotWhitespace);
        while (this._peek !== $SLASH && this._peek !== $GT) {
          this._consumeAttributeName();
          this._attemptCharCodeUntilFn(isNotWhitespace);
          if (this._attemptCharCode($EQ)) {
            this._attemptCharCodeUntilFn(isNotWhitespace);
            this._consumeAttributeValue();
          }
          this._attemptCharCodeUntilFn(isNotWhitespace);
        }
        this._consumeTagOpenEnd();
      } catch (e) {
        if (e instanceof _ControlFlowError) {
          this._restorePosition(savedPos);
          this._beginToken(TokenType$1.TEXT, start);
          this._endToken(['<']);
          return;
        }
        throw e;
      }
      var contentTokenType = this._getTagDefinition(tagName).contentType;
      if (contentTokenType === TagContentType.RAW_TEXT) {
        this._consumeRawTextWithTagClose(lowercaseTagName, false);
      } else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
        this._consumeRawTextWithTagClose(lowercaseTagName, true);
      }
    };
    _Tokenizer.prototype._consumeRawTextWithTagClose = function(lowercaseTagName, decodeEntities) {
      var _this = this;
      var textToken = this._consumeRawText(decodeEntities, $LT, function() {
        if (!_this._attemptCharCode($SLASH))
          return false;
        _this._attemptCharCodeUntilFn(isNotWhitespace);
        if (!_this._attemptStrCaseInsensitive(lowercaseTagName))
          return false;
        _this._attemptCharCodeUntilFn(isNotWhitespace);
        return _this._attemptCharCode($GT);
      });
      this._beginToken(TokenType$1.TAG_CLOSE, textToken.sourceSpan.end);
      this._endToken([null, lowercaseTagName]);
    };
    _Tokenizer.prototype._consumeTagOpenStart = function(start) {
      this._beginToken(TokenType$1.TAG_OPEN_START, start);
      var parts = this._consumePrefixAndName();
      this._endToken(parts);
    };
    _Tokenizer.prototype._consumeAttributeName = function() {
      this._beginToken(TokenType$1.ATTR_NAME);
      var prefixAndName = this._consumePrefixAndName();
      this._endToken(prefixAndName);
    };
    _Tokenizer.prototype._consumeAttributeValue = function() {
      this._beginToken(TokenType$1.ATTR_VALUE);
      var value;
      if (this._peek === $SQ || this._peek === $DQ) {
        var quoteChar = this._peek;
        this._advance();
        var parts = [];
        while (this._peek !== quoteChar) {
          parts.push(this._readChar(true));
        }
        value = parts.join('');
        this._advance();
      } else {
        var valueStart = this._index;
        this._requireCharCodeUntilFn(isNameEnd, 1);
        value = this._input.substring(valueStart, this._index);
      }
      this._endToken([this._processCarriageReturns(value)]);
    };
    _Tokenizer.prototype._consumeTagOpenEnd = function() {
      var tokenType = this._attemptCharCode($SLASH) ? TokenType$1.TAG_OPEN_END_VOID : TokenType$1.TAG_OPEN_END;
      this._beginToken(tokenType);
      this._requireCharCode($GT);
      this._endToken([]);
    };
    _Tokenizer.prototype._consumeTagClose = function(start) {
      this._beginToken(TokenType$1.TAG_CLOSE, start);
      this._attemptCharCodeUntilFn(isNotWhitespace);
      var prefixAndName = this._consumePrefixAndName();
      this._attemptCharCodeUntilFn(isNotWhitespace);
      this._requireCharCode($GT);
      this._endToken(prefixAndName);
    };
    _Tokenizer.prototype._consumeExpansionFormStart = function() {
      this._beginToken(TokenType$1.EXPANSION_FORM_START, this._getLocation());
      this._requireCharCode($LBRACE);
      this._endToken([]);
      this._expansionCaseStack.push(TokenType$1.EXPANSION_FORM_START);
      this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
      var condition = this._readUntil($COMMA);
      this._endToken([condition], this._getLocation());
      this._requireCharCode($COMMA);
      this._attemptCharCodeUntilFn(isNotWhitespace);
      this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
      var type = this._readUntil($COMMA);
      this._endToken([type], this._getLocation());
      this._requireCharCode($COMMA);
      this._attemptCharCodeUntilFn(isNotWhitespace);
    };
    _Tokenizer.prototype._consumeExpansionCaseStart = function() {
      this._beginToken(TokenType$1.EXPANSION_CASE_VALUE, this._getLocation());
      var value = this._readUntil($LBRACE).trim();
      this._endToken([value], this._getLocation());
      this._attemptCharCodeUntilFn(isNotWhitespace);
      this._beginToken(TokenType$1.EXPANSION_CASE_EXP_START, this._getLocation());
      this._requireCharCode($LBRACE);
      this._endToken([], this._getLocation());
      this._attemptCharCodeUntilFn(isNotWhitespace);
      this._expansionCaseStack.push(TokenType$1.EXPANSION_CASE_EXP_START);
    };
    _Tokenizer.prototype._consumeExpansionCaseEnd = function() {
      this._beginToken(TokenType$1.EXPANSION_CASE_EXP_END, this._getLocation());
      this._requireCharCode($RBRACE);
      this._endToken([], this._getLocation());
      this._attemptCharCodeUntilFn(isNotWhitespace);
      this._expansionCaseStack.pop();
    };
    _Tokenizer.prototype._consumeExpansionFormEnd = function() {
      this._beginToken(TokenType$1.EXPANSION_FORM_END, this._getLocation());
      this._requireCharCode($RBRACE);
      this._endToken([]);
      this._expansionCaseStack.pop();
    };
    _Tokenizer.prototype._consumeText = function() {
      var start = this._getLocation();
      this._beginToken(TokenType$1.TEXT, start);
      var parts = [];
      do {
        if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
          parts.push(this._interpolationConfig.start);
          this._inInterpolation = true;
        } else if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.end) && this._inInterpolation) {
          parts.push(this._interpolationConfig.end);
          this._inInterpolation = false;
        } else {
          parts.push(this._readChar(true));
        }
      } while (!this._isTextEnd());
      this._endToken([this._processCarriageReturns(parts.join(''))]);
    };
    _Tokenizer.prototype._isTextEnd = function() {
      if (this._peek === $LT || this._peek === $EOF) {
        return true;
      }
      if (this._tokenizeIcu && !this._inInterpolation) {
        if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
          return true;
        }
        if (this._peek === $RBRACE && this._isInExpansionCase()) {
          return true;
        }
      }
      return false;
    };
    _Tokenizer.prototype._savePosition = function() {
      return [this._peek, this._index, this._column, this._line, this.tokens.length];
    };
    _Tokenizer.prototype._readUntil = function(char) {
      var start = this._index;
      this._attemptUntilChar(char);
      return this._input.substring(start, this._index);
    };
    _Tokenizer.prototype._restorePosition = function(position) {
      this._peek = position[0];
      this._index = position[1];
      this._column = position[2];
      this._line = position[3];
      var nbTokens = position[4];
      if (nbTokens < this.tokens.length) {
        this.tokens = this.tokens.slice(0, nbTokens);
      }
    };
    _Tokenizer.prototype._isInExpansionCase = function() {
      return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType$1.EXPANSION_CASE_EXP_START;
    };
    _Tokenizer.prototype._isInExpansionForm = function() {
      return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType$1.EXPANSION_FORM_START;
    };
    return _Tokenizer;
  }());
  function isNotWhitespace(code) {
    return !isWhitespace(code) || code === $EOF;
  }
  function isNameEnd(code) {
    return isWhitespace(code) || code === $GT || code === $SLASH || code === $SQ || code === $DQ || code === $EQ;
  }
  function isPrefixEnd(code) {
    return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);
  }
  function isDigitEntityEnd(code) {
    return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
  }
  function isNamedEntityEnd(code) {
    return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
  }
  function isExpansionFormStart(input, offset, interpolationConfig) {
    var isInterpolationStart = interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;
    return input.charCodeAt(offset) == $LBRACE && !isInterpolationStart;
  }
  function isExpansionCaseStart(peek) {
    return peek === $EQ || isAsciiLetter(peek);
  }
  function compareCharCodeCaseInsensitive(code1, code2) {
    return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
  }
  function toUpperCaseCharCode(code) {
    return code >= $a && code <= $z ? code - $a + $A : code;
  }
  function mergeTextTokens(srcTokens) {
    var dstTokens = [];
    var lastDstToken;
    for (var i = 0; i < srcTokens.length; i++) {
      var token = srcTokens[i];
      if (lastDstToken && lastDstToken.type == TokenType$1.TEXT && token.type == TokenType$1.TEXT) {
        lastDstToken.parts[0] += token.parts[0];
        lastDstToken.sourceSpan.end = token.sourceSpan.end;
      } else {
        lastDstToken = token;
        dstTokens.push(lastDstToken);
      }
    }
    return dstTokens;
  }
  var __extends$2 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var TreeError = (function(_super) {
    __extends$2(TreeError, _super);
    function TreeError(elementName, span, msg) {
      _super.call(this, span, msg);
      this.elementName = elementName;
    }
    TreeError.create = function(elementName, span, msg) {
      return new TreeError(elementName, span, msg);
    };
    return TreeError;
  }(ParseError));
  var ParseTreeResult = (function() {
    function ParseTreeResult(rootNodes, errors) {
      this.rootNodes = rootNodes;
      this.errors = errors;
    }
    return ParseTreeResult;
  }());
  var Parser$1 = (function() {
    function Parser(getTagDefinition) {
      this.getTagDefinition = getTagDefinition;
    }
    Parser.prototype.parse = function(source, url, parseExpansionForms, interpolationConfig) {
      if (parseExpansionForms === void 0) {
        parseExpansionForms = false;
      }
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      var tokensAndErrors = tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);
      var treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();
      return new ParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors.concat(treeAndErrors.errors));
    };
    return Parser;
  }());
  var _TreeBuilder = (function() {
    function _TreeBuilder(tokens, getTagDefinition) {
      this.tokens = tokens;
      this.getTagDefinition = getTagDefinition;
      this._index = -1;
      this._rootNodes = [];
      this._errors = [];
      this._elementStack = [];
      this._advance();
    }
    _TreeBuilder.prototype.build = function() {
      while (this._peek.type !== TokenType$1.EOF) {
        if (this._peek.type === TokenType$1.TAG_OPEN_START) {
          this._consumeStartTag(this._advance());
        } else if (this._peek.type === TokenType$1.TAG_CLOSE) {
          this._consumeEndTag(this._advance());
        } else if (this._peek.type === TokenType$1.CDATA_START) {
          this._closeVoidElement();
          this._consumeCdata(this._advance());
        } else if (this._peek.type === TokenType$1.COMMENT_START) {
          this._closeVoidElement();
          this._consumeComment(this._advance());
        } else if (this._peek.type === TokenType$1.TEXT || this._peek.type === TokenType$1.RAW_TEXT || this._peek.type === TokenType$1.ESCAPABLE_RAW_TEXT) {
          this._closeVoidElement();
          this._consumeText(this._advance());
        } else if (this._peek.type === TokenType$1.EXPANSION_FORM_START) {
          this._consumeExpansion(this._advance());
        } else {
          this._advance();
        }
      }
      return new ParseTreeResult(this._rootNodes, this._errors);
    };
    _TreeBuilder.prototype._advance = function() {
      var prev = this._peek;
      if (this._index < this.tokens.length - 1) {
        this._index++;
      }
      this._peek = this.tokens[this._index];
      return prev;
    };
    _TreeBuilder.prototype._advanceIf = function(type) {
      if (this._peek.type === type) {
        return this._advance();
      }
      return null;
    };
    _TreeBuilder.prototype._consumeCdata = function(startToken) {
      this._consumeText(this._advance());
      this._advanceIf(TokenType$1.CDATA_END);
    };
    _TreeBuilder.prototype._consumeComment = function(token) {
      var text = this._advanceIf(TokenType$1.RAW_TEXT);
      this._advanceIf(TokenType$1.COMMENT_END);
      var value = isPresent(text) ? text.parts[0].trim() : null;
      this._addToParent(new Comment(value, token.sourceSpan));
    };
    _TreeBuilder.prototype._consumeExpansion = function(token) {
      var switchValue = this._advance();
      var type = this._advance();
      var cases = [];
      while (this._peek.type === TokenType$1.EXPANSION_CASE_VALUE) {
        var expCase = this._parseExpansionCase();
        if (!expCase)
          return;
        cases.push(expCase);
      }
      if (this._peek.type !== TokenType$1.EXPANSION_FORM_END) {
        this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'."));
        return;
      }
      var sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);
      this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
      this._advance();
    };
    _TreeBuilder.prototype._parseExpansionCase = function() {
      var value = this._advance();
      if (this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START) {
        this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'."));
        return null;
      }
      var start = this._advance();
      var exp = this._collectExpansionExpTokens(start);
      if (!exp)
        return null;
      var end = this._advance();
      exp.push(new Token$1(TokenType$1.EOF, [], end.sourceSpan));
      var parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();
      if (parsedExp.errors.length > 0) {
        this._errors = this._errors.concat(parsedExp.errors);
        return null;
      }
      var sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);
      var expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
      return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
    };
    _TreeBuilder.prototype._collectExpansionExpTokens = function(start) {
      var exp = [];
      var expansionFormStack = [TokenType$1.EXPANSION_CASE_EXP_START];
      while (true) {
        if (this._peek.type === TokenType$1.EXPANSION_FORM_START || this._peek.type === TokenType$1.EXPANSION_CASE_EXP_START) {
          expansionFormStack.push(this._peek.type);
        }
        if (this._peek.type === TokenType$1.EXPANSION_CASE_EXP_END) {
          if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_CASE_EXP_START)) {
            expansionFormStack.pop();
            if (expansionFormStack.length == 0)
              return exp;
          } else {
            this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
            return null;
          }
        }
        if (this._peek.type === TokenType$1.EXPANSION_FORM_END) {
          if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_FORM_START)) {
            expansionFormStack.pop();
          } else {
            this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
            return null;
          }
        }
        if (this._peek.type === TokenType$1.EOF) {
          this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
          return null;
        }
        exp.push(this._advance());
      }
    };
    _TreeBuilder.prototype._consumeText = function(token) {
      var text = token.parts[0];
      if (text.length > 0 && text[0] == '\n') {
        var parent_1 = this._getParentElement();
        if (isPresent(parent_1) && parent_1.children.length == 0 && this.getTagDefinition(parent_1.name).ignoreFirstLf) {
          text = text.substring(1);
        }
      }
      if (text.length > 0) {
        this._addToParent(new Text(text, token.sourceSpan));
      }
    };
    _TreeBuilder.prototype._closeVoidElement = function() {
      if (this._elementStack.length > 0) {
        var el = this._elementStack[this._elementStack.length - 1];
        if (this.getTagDefinition(el.name).isVoid) {
          this._elementStack.pop();
        }
      }
    };
    _TreeBuilder.prototype._consumeStartTag = function(startTagToken) {
      var prefix = startTagToken.parts[0];
      var name = startTagToken.parts[1];
      var attrs = [];
      while (this._peek.type === TokenType$1.ATTR_NAME) {
        attrs.push(this._consumeAttr(this._advance()));
      }
      var fullName = this._getElementFullName(prefix, name, this._getParentElement());
      var selfClosing = false;
      if (this._peek.type === TokenType$1.TAG_OPEN_END_VOID) {
        this._advance();
        selfClosing = true;
        var tagDef = this.getTagDefinition(fullName);
        if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {
          this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, "Only void and foreign elements can be self closed \"" + startTagToken.parts[1] + "\""));
        }
      } else if (this._peek.type === TokenType$1.TAG_OPEN_END) {
        this._advance();
        selfClosing = false;
      }
      var end = this._peek.sourceSpan.start;
      var span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);
      var el = new Element(fullName, attrs, [], span, span, null);
      this._pushElement(el);
      if (selfClosing) {
        this._popElement(fullName);
        el.endSourceSpan = span;
      }
    };
    _TreeBuilder.prototype._pushElement = function(el) {
      if (this._elementStack.length > 0) {
        var parentEl = this._elementStack[this._elementStack.length - 1];
        if (this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {
          this._elementStack.pop();
        }
      }
      var tagDef = this.getTagDefinition(el.name);
      var _a = this._getParentElementSkippingContainers(),
          parent = _a.parent,
          container = _a.container;
      if (isPresent(parent) && tagDef.requireExtraParent(parent.name)) {
        var newParent = new Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
        this._insertBeforeContainer(parent, container, newParent);
      }
      this._addToParent(el);
      this._elementStack.push(el);
    };
    _TreeBuilder.prototype._consumeEndTag = function(endTagToken) {
      var fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
      if (this._getParentElement()) {
        this._getParentElement().endSourceSpan = endTagToken.sourceSpan;
      }
      if (this.getTagDefinition(fullName).isVoid) {
        this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Void elements do not have end tags \"" + endTagToken.parts[1] + "\""));
      } else if (!this._popElement(fullName)) {
        this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Unexpected closing tag \"" + endTagToken.parts[1] + "\""));
      }
    };
    _TreeBuilder.prototype._popElement = function(fullName) {
      for (var stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
        var el = this._elementStack[stackIndex];
        if (el.name == fullName) {
          this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);
          return true;
        }
        if (!this.getTagDefinition(el.name).closedByParent) {
          return false;
        }
      }
      return false;
    };
    _TreeBuilder.prototype._consumeAttr = function(attrName) {
      var fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
      var end = attrName.sourceSpan.end;
      var value = '';
      var valueSpan;
      if (this._peek.type === TokenType$1.ATTR_VALUE) {
        var valueToken = this._advance();
        value = valueToken.parts[0];
        end = valueToken.sourceSpan.end;
        valueSpan = valueToken.sourceSpan;
      }
      return new Attribute$1(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);
    };
    _TreeBuilder.prototype._getParentElement = function() {
      return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;
    };
    _TreeBuilder.prototype._getParentElementSkippingContainers = function() {
      var container = null;
      for (var i = this._elementStack.length - 1; i >= 0; i--) {
        if (this._elementStack[i].name !== 'ng-container') {
          return {
            parent: this._elementStack[i],
            container: container
          };
        }
        container = this._elementStack[i];
      }
      return {
        parent: this._elementStack[this._elementStack.length - 1],
        container: container
      };
    };
    _TreeBuilder.prototype._addToParent = function(node) {
      var parent = this._getParentElement();
      if (isPresent(parent)) {
        parent.children.push(node);
      } else {
        this._rootNodes.push(node);
      }
    };
    _TreeBuilder.prototype._insertBeforeContainer = function(parent, container, node) {
      if (!container) {
        this._addToParent(node);
        this._elementStack.push(node);
      } else {
        if (parent) {
          var index = parent.children.indexOf(container);
          parent.children[index] = node;
        } else {
          this._rootNodes.push(node);
        }
        node.children.push(container);
        this._elementStack.splice(this._elementStack.indexOf(container), 0, node);
      }
    };
    _TreeBuilder.prototype._getElementFullName = function(prefix, localName, parentElement) {
      if (isBlank(prefix)) {
        prefix = this.getTagDefinition(localName).implicitNamespacePrefix;
        if (isBlank(prefix) && isPresent(parentElement)) {
          prefix = getNsPrefix(parentElement.name);
        }
      }
      return mergeNsAndName(prefix, localName);
    };
    return _TreeBuilder;
  }());
  function lastOnStack(stack, element) {
    return stack.length > 0 && stack[stack.length - 1] === element;
  }
  function digestMessage(message) {
    return sha1(serializeNodes(message.nodes).join('') + ("[" + message.meaning + "]"));
  }
  var _SerializerVisitor = (function() {
    function _SerializerVisitor() {}
    _SerializerVisitor.prototype.visitText = function(text, context) {
      return text.value;
    };
    _SerializerVisitor.prototype.visitContainer = function(container, context) {
      var _this = this;
      return "[" + container.children.map(function(child) {
        return child.visit(_this);
      }).join(', ') + "]";
    };
    _SerializerVisitor.prototype.visitIcu = function(icu, context) {
      var _this = this;
      var strCases = Object.keys(icu.cases).map(function(k) {
        return (k + " {" + icu.cases[k].visit(_this) + "}");
      });
      return "{" + icu.expression + ", " + icu.type + ", " + strCases.join(', ') + "}";
    };
    _SerializerVisitor.prototype.visitTagPlaceholder = function(ph, context) {
      var _this = this;
      return ph.isVoid ? "<ph tag name=\"" + ph.startName + "\"/>" : "<ph tag name=\"" + ph.startName + "\">" + ph.children.map(function(child) {
        return child.visit(_this);
      }).join(', ') + "</ph name=\"" + ph.closeName + "\">";
    };
    _SerializerVisitor.prototype.visitPlaceholder = function(ph, context) {
      return "<ph name=\"" + ph.name + "\">" + ph.value + "</ph>";
    };
    _SerializerVisitor.prototype.visitIcuPlaceholder = function(ph, context) {
      return "<ph icu name=\"" + ph.name + "\">" + ph.value.visit(this) + "</ph>";
    };
    return _SerializerVisitor;
  }());
  var serializerVisitor = new _SerializerVisitor();
  function serializeNodes(nodes) {
    return nodes.map(function(a) {
      return a.visit(serializerVisitor, null);
    });
  }
  function sha1(str) {
    var utf8 = utf8Encode(str);
    var words32 = stringToWords32(utf8);
    var len = utf8.length * 8;
    var w = new Array(80);
    var _a = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0],
        a = _a[0],
        b = _a[1],
        c = _a[2],
        d = _a[3],
        e = _a[4];
    words32[len >> 5] |= 0x80 << (24 - len % 32);
    words32[((len + 64 >> 9) << 4) + 15] = len;
    for (var i = 0; i < words32.length; i += 16) {
      var _b = [a, b, c, d, e],
          h0 = _b[0],
          h1 = _b[1],
          h2 = _b[2],
          h3 = _b[3],
          h4 = _b[4];
      for (var j = 0; j < 80; j++) {
        if (j < 16) {
          w[j] = words32[i + j];
        } else {
          w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
        }
        var _c = fk(j, b, c, d),
            f = _c[0],
            k = _c[1];
        var temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);
        _d = [d, c, rol32(b, 30), a, temp], e = _d[0], d = _d[1], c = _d[2], b = _d[3], a = _d[4];
      }
      _e = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)], a = _e[0], b = _e[1], c = _e[2], d = _e[3], e = _e[4];
    }
    var sha1 = words32ToString([a, b, c, d, e]);
    var hex = '';
    for (var i = 0; i < sha1.length; i++) {
      var b_1 = sha1.charCodeAt(i);
      hex += (b_1 >>> 4 & 0x0f).toString(16) + (b_1 & 0x0f).toString(16);
    }
    return hex.toLowerCase();
    var _d,
        _e;
  }
  function utf8Encode(str) {
    var encoded = '';
    for (var index = 0; index < str.length; index++) {
      var codePoint = decodeSurrogatePairs(str, index);
      if (codePoint <= 0x7f) {
        encoded += String.fromCharCode(codePoint);
      } else if (codePoint <= 0x7ff) {
        encoded += String.fromCharCode(0xc0 | codePoint >>> 6, 0x80 | codePoint & 0x3f);
      } else if (codePoint <= 0xffff) {
        encoded += String.fromCharCode(0xe0 | codePoint >>> 12, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
      } else if (codePoint <= 0x1fffff) {
        encoded += String.fromCharCode(0xf0 | codePoint >>> 18, 0x80 | codePoint >>> 12 & 0x3f, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
      }
    }
    return encoded;
  }
  function decodeSurrogatePairs(str, index) {
    if (index < 0 || index >= str.length) {
      throw new Error("index=" + index + " is out of range in \"" + str + "\"");
    }
    var high = str.charCodeAt(index);
    var low;
    if (high >= 0xd800 && high <= 0xdfff && str.length > index + 1) {
      low = str.charCodeAt(index + 1);
      if (low >= 0xdc00 && low <= 0xdfff) {
        return (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;
      }
    }
    return high;
  }
  function stringToWords32(str) {
    var words32 = Array(str.length >>> 2);
    for (var i = 0; i < words32.length; i++) {
      words32[i] = 0;
    }
    for (var i = 0; i < str.length; i++) {
      words32[i >>> 2] |= (str.charCodeAt(i) & 0xff) << 8 * (3 - i & 0x3);
    }
    return words32;
  }
  function words32ToString(words32) {
    var str = '';
    for (var i = 0; i < words32.length * 4; i++) {
      str += String.fromCharCode((words32[i >>> 2] >>> 8 * (3 - i & 0x3)) & 0xff);
    }
    return str;
  }
  function fk(index, b, c, d) {
    if (index < 20) {
      return [(b & c) | (~b & d), 0x5a827999];
    }
    if (index < 40) {
      return [b ^ c ^ d, 0x6ed9eba1];
    }
    if (index < 60) {
      return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];
    }
    return [b ^ c ^ d, 0xca62c1d6];
  }
  function add32(a, b) {
    var low = (a & 0xffff) + (b & 0xffff);
    var high = (a >> 16) + (b >> 16) + (low >> 16);
    return (high << 16) | (low & 0xffff);
  }
  function rol32(a, count) {
    return (a << count) | (a >>> (32 - count));
  }
  var Message = (function() {
    function Message(nodes, placeholders, placeholderToMsgIds, meaning, description) {
      this.nodes = nodes;
      this.placeholders = placeholders;
      this.placeholderToMsgIds = placeholderToMsgIds;
      this.meaning = meaning;
      this.description = description;
    }
    return Message;
  }());
  var Text$1 = (function() {
    function Text(value, sourceSpan) {
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    Text.prototype.visit = function(visitor, context) {
      return visitor.visitText(this, context);
    };
    return Text;
  }());
  var Container = (function() {
    function Container(children, sourceSpan) {
      this.children = children;
      this.sourceSpan = sourceSpan;
    }
    Container.prototype.visit = function(visitor, context) {
      return visitor.visitContainer(this, context);
    };
    return Container;
  }());
  var Icu = (function() {
    function Icu(expression, type, cases, sourceSpan) {
      this.expression = expression;
      this.type = type;
      this.cases = cases;
      this.sourceSpan = sourceSpan;
    }
    Icu.prototype.visit = function(visitor, context) {
      return visitor.visitIcu(this, context);
    };
    return Icu;
  }());
  var TagPlaceholder = (function() {
    function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {
      this.tag = tag;
      this.attrs = attrs;
      this.startName = startName;
      this.closeName = closeName;
      this.children = children;
      this.isVoid = isVoid;
      this.sourceSpan = sourceSpan;
    }
    TagPlaceholder.prototype.visit = function(visitor, context) {
      return visitor.visitTagPlaceholder(this, context);
    };
    return TagPlaceholder;
  }());
  var Placeholder = (function() {
    function Placeholder(value, name, sourceSpan) {
      if (name === void 0) {
        name = '';
      }
      this.value = value;
      this.name = name;
      this.sourceSpan = sourceSpan;
    }
    Placeholder.prototype.visit = function(visitor, context) {
      return visitor.visitPlaceholder(this, context);
    };
    return Placeholder;
  }());
  var IcuPlaceholder = (function() {
    function IcuPlaceholder(value, name, sourceSpan) {
      if (name === void 0) {
        name = '';
      }
      this.value = value;
      this.name = name;
      this.sourceSpan = sourceSpan;
    }
    IcuPlaceholder.prototype.visit = function(visitor, context) {
      return visitor.visitIcuPlaceholder(this, context);
    };
    return IcuPlaceholder;
  }());
  var HtmlTagDefinition = (function() {
    function HtmlTagDefinition(_a) {
      var _this = this;
      var _b = _a === void 0 ? {} : _a,
          closedByChildren = _b.closedByChildren,
          requiredParents = _b.requiredParents,
          implicitNamespacePrefix = _b.implicitNamespacePrefix,
          _c = _b.contentType,
          contentType = _c === void 0 ? TagContentType.PARSABLE_DATA : _c,
          _d = _b.closedByParent,
          closedByParent = _d === void 0 ? false : _d,
          _e = _b.isVoid,
          isVoid = _e === void 0 ? false : _e,
          _f = _b.ignoreFirstLf,
          ignoreFirstLf = _f === void 0 ? false : _f;
      this.closedByChildren = {};
      this.closedByParent = false;
      this.canSelfClose = false;
      if (closedByChildren && closedByChildren.length > 0) {
        closedByChildren.forEach(function(tagName) {
          return _this.closedByChildren[tagName] = true;
        });
      }
      this.isVoid = isVoid;
      this.closedByParent = closedByParent || isVoid;
      if (requiredParents && requiredParents.length > 0) {
        this.requiredParents = {};
        this.parentToAdd = requiredParents[0];
        requiredParents.forEach(function(tagName) {
          return _this.requiredParents[tagName] = true;
        });
      }
      this.implicitNamespacePrefix = implicitNamespacePrefix;
      this.contentType = contentType;
      this.ignoreFirstLf = ignoreFirstLf;
    }
    HtmlTagDefinition.prototype.requireExtraParent = function(currentParent) {
      if (!this.requiredParents) {
        return false;
      }
      if (!currentParent) {
        return true;
      }
      var lcParent = currentParent.toLowerCase();
      return this.requiredParents[lcParent] != true && lcParent != 'template';
    };
    HtmlTagDefinition.prototype.isClosedByChild = function(name) {
      return this.isVoid || name.toLowerCase() in this.closedByChildren;
    };
    return HtmlTagDefinition;
  }());
  var TAG_DEFINITIONS = {
    'base': new HtmlTagDefinition({isVoid: true}),
    'meta': new HtmlTagDefinition({isVoid: true}),
    'area': new HtmlTagDefinition({isVoid: true}),
    'embed': new HtmlTagDefinition({isVoid: true}),
    'link': new HtmlTagDefinition({isVoid: true}),
    'img': new HtmlTagDefinition({isVoid: true}),
    'input': new HtmlTagDefinition({isVoid: true}),
    'param': new HtmlTagDefinition({isVoid: true}),
    'hr': new HtmlTagDefinition({isVoid: true}),
    'br': new HtmlTagDefinition({isVoid: true}),
    'source': new HtmlTagDefinition({isVoid: true}),
    'track': new HtmlTagDefinition({isVoid: true}),
    'wbr': new HtmlTagDefinition({isVoid: true}),
    'p': new HtmlTagDefinition({
      closedByChildren: ['address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'],
      closedByParent: true
    }),
    'thead': new HtmlTagDefinition({closedByChildren: ['tbody', 'tfoot']}),
    'tbody': new HtmlTagDefinition({
      closedByChildren: ['tbody', 'tfoot'],
      closedByParent: true
    }),
    'tfoot': new HtmlTagDefinition({
      closedByChildren: ['tbody'],
      closedByParent: true
    }),
    'tr': new HtmlTagDefinition({
      closedByChildren: ['tr'],
      requiredParents: ['tbody', 'tfoot', 'thead'],
      closedByParent: true
    }),
    'td': new HtmlTagDefinition({
      closedByChildren: ['td', 'th'],
      closedByParent: true
    }),
    'th': new HtmlTagDefinition({
      closedByChildren: ['td', 'th'],
      closedByParent: true
    }),
    'col': new HtmlTagDefinition({
      requiredParents: ['colgroup'],
      isVoid: true
    }),
    'svg': new HtmlTagDefinition({implicitNamespacePrefix: 'svg'}),
    'math': new HtmlTagDefinition({implicitNamespacePrefix: 'math'}),
    'li': new HtmlTagDefinition({
      closedByChildren: ['li'],
      closedByParent: true
    }),
    'dt': new HtmlTagDefinition({closedByChildren: ['dt', 'dd']}),
    'dd': new HtmlTagDefinition({
      closedByChildren: ['dt', 'dd'],
      closedByParent: true
    }),
    'rb': new HtmlTagDefinition({
      closedByChildren: ['rb', 'rt', 'rtc', 'rp'],
      closedByParent: true
    }),
    'rt': new HtmlTagDefinition({
      closedByChildren: ['rb', 'rt', 'rtc', 'rp'],
      closedByParent: true
    }),
    'rtc': new HtmlTagDefinition({
      closedByChildren: ['rb', 'rtc', 'rp'],
      closedByParent: true
    }),
    'rp': new HtmlTagDefinition({
      closedByChildren: ['rb', 'rt', 'rtc', 'rp'],
      closedByParent: true
    }),
    'optgroup': new HtmlTagDefinition({
      closedByChildren: ['optgroup'],
      closedByParent: true
    }),
    'option': new HtmlTagDefinition({
      closedByChildren: ['option', 'optgroup'],
      closedByParent: true
    }),
    'pre': new HtmlTagDefinition({ignoreFirstLf: true}),
    'listing': new HtmlTagDefinition({ignoreFirstLf: true}),
    'style': new HtmlTagDefinition({contentType: TagContentType.RAW_TEXT}),
    'script': new HtmlTagDefinition({contentType: TagContentType.RAW_TEXT}),
    'title': new HtmlTagDefinition({contentType: TagContentType.ESCAPABLE_RAW_TEXT}),
    'textarea': new HtmlTagDefinition({
      contentType: TagContentType.ESCAPABLE_RAW_TEXT,
      ignoreFirstLf: true
    })
  };
  var _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
  function getHtmlTagDefinition(tagName) {
    return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;
  }
  var TAG_TO_PLACEHOLDER_NAMES = {
    'A': 'LINK',
    'B': 'BOLD_TEXT',
    'BR': 'LINE_BREAK',
    'EM': 'EMPHASISED_TEXT',
    'H1': 'HEADING_LEVEL1',
    'H2': 'HEADING_LEVEL2',
    'H3': 'HEADING_LEVEL3',
    'H4': 'HEADING_LEVEL4',
    'H5': 'HEADING_LEVEL5',
    'H6': 'HEADING_LEVEL6',
    'HR': 'HORIZONTAL_RULE',
    'I': 'ITALIC_TEXT',
    'LI': 'LIST_ITEM',
    'LINK': 'MEDIA_LINK',
    'OL': 'ORDERED_LIST',
    'P': 'PARAGRAPH',
    'Q': 'QUOTATION',
    'S': 'STRIKETHROUGH_TEXT',
    'SMALL': 'SMALL_TEXT',
    'SUB': 'SUBSTRIPT',
    'SUP': 'SUPERSCRIPT',
    'TBODY': 'TABLE_BODY',
    'TD': 'TABLE_CELL',
    'TFOOT': 'TABLE_FOOTER',
    'TH': 'TABLE_HEADER_CELL',
    'THEAD': 'TABLE_HEADER',
    'TR': 'TABLE_ROW',
    'TT': 'MONOSPACED_TEXT',
    'U': 'UNDERLINED_TEXT',
    'UL': 'UNORDERED_LIST'
  };
  var PlaceholderRegistry = (function() {
    function PlaceholderRegistry() {
      this._placeHolderNameCounts = {};
      this._signatureToName = {};
    }
    PlaceholderRegistry.prototype.getStartTagPlaceholderName = function(tag, attrs, isVoid) {
      var signature = this._hashTag(tag, attrs, isVoid);
      if (this._signatureToName[signature]) {
        return this._signatureToName[signature];
      }
      var upperTag = tag.toUpperCase();
      var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
      var name = this._generateUniqueName(isVoid ? baseName : "START_" + baseName);
      this._signatureToName[signature] = name;
      return name;
    };
    PlaceholderRegistry.prototype.getCloseTagPlaceholderName = function(tag) {
      var signature = this._hashClosingTag(tag);
      if (this._signatureToName[signature]) {
        return this._signatureToName[signature];
      }
      var upperTag = tag.toUpperCase();
      var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
      var name = this._generateUniqueName("CLOSE_" + baseName);
      this._signatureToName[signature] = name;
      return name;
    };
    PlaceholderRegistry.prototype.getPlaceholderName = function(name, content) {
      var upperName = name.toUpperCase();
      var signature = "PH: " + upperName + "=" + content;
      if (this._signatureToName[signature]) {
        return this._signatureToName[signature];
      }
      var uniqueName = this._generateUniqueName(upperName);
      this._signatureToName[signature] = uniqueName;
      return uniqueName;
    };
    PlaceholderRegistry.prototype._hashTag = function(tag, attrs, isVoid) {
      var start = "<" + tag;
      var strAttrs = Object.keys(attrs).sort().map(function(name) {
        return (" " + name + "=" + attrs[name]);
      }).join('');
      var end = isVoid ? '/>' : "></" + tag + ">";
      return start + strAttrs + end;
    };
    PlaceholderRegistry.prototype._hashClosingTag = function(tag) {
      return this._hashTag("/" + tag, {}, false);
    };
    PlaceholderRegistry.prototype._generateUniqueName = function(base) {
      var name = base;
      var next = this._placeHolderNameCounts[name];
      if (!next) {
        next = 1;
      } else {
        name += "_" + next;
        next++;
      }
      this._placeHolderNameCounts[base] = next;
      return name;
    };
    return PlaceholderRegistry;
  }());
  var _expParser = new Parser(new Lexer());
  function createI18nMessageFactory(interpolationConfig) {
    var visitor = new _I18nVisitor(_expParser, interpolationConfig);
    return function(nodes, meaning, description) {
      return visitor.toI18nMessage(nodes, meaning, description);
    };
  }
  var _I18nVisitor = (function() {
    function _I18nVisitor(_expressionParser, _interpolationConfig) {
      this._expressionParser = _expressionParser;
      this._interpolationConfig = _interpolationConfig;
    }
    _I18nVisitor.prototype.toI18nMessage = function(nodes, meaning, description) {
      this._isIcu = nodes.length == 1 && nodes[0] instanceof Expansion;
      this._icuDepth = 0;
      this._placeholderRegistry = new PlaceholderRegistry();
      this._placeholderToContent = {};
      this._placeholderToIds = {};
      var i18nodes = visitAll(this, nodes, {});
      return new Message(i18nodes, this._placeholderToContent, this._placeholderToIds, meaning, description);
    };
    _I18nVisitor.prototype.visitElement = function(el, context) {
      var children = visitAll(this, el.children);
      var attrs = {};
      el.attrs.forEach(function(attr) {
        attrs[attr.name] = attr.value;
      });
      var isVoid = getHtmlTagDefinition(el.name).isVoid;
      var startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
      this._placeholderToContent[startPhName] = el.sourceSpan.toString();
      var closePhName = '';
      if (!isVoid) {
        closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);
        this._placeholderToContent[closePhName] = "</" + el.name + ">";
      }
      return new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);
    };
    _I18nVisitor.prototype.visitAttribute = function(attribute, context) {
      return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);
    };
    _I18nVisitor.prototype.visitText = function(text, context) {
      return this._visitTextWithInterpolation(text.value, text.sourceSpan);
    };
    _I18nVisitor.prototype.visitComment = function(comment, context) {
      return null;
    };
    _I18nVisitor.prototype.visitExpansion = function(icu, context) {
      var _this = this;
      this._icuDepth++;
      var i18nIcuCases = {};
      var i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
      icu.cases.forEach(function(caze) {
        i18nIcuCases[caze.value] = new Container(caze.expression.map(function(node) {
          return node.visit(_this, {});
        }), caze.expSourceSpan);
      });
      this._icuDepth--;
      if (this._isIcu || this._icuDepth > 0) {
        return i18nIcu;
      }
      var phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());
      var visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);
      this._placeholderToIds[phName] = digestMessage(visitor.toI18nMessage([icu], '', ''));
      return new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
    };
    _I18nVisitor.prototype.visitExpansionCase = function(icuCase, context) {
      throw new Error('Unreachable code');
    };
    _I18nVisitor.prototype._visitTextWithInterpolation = function(text, sourceSpan) {
      var splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);
      if (!splitInterpolation) {
        return new Text$1(text, sourceSpan);
      }
      var nodes = [];
      var container = new Container(nodes, sourceSpan);
      var _a = this._interpolationConfig,
          sDelimiter = _a.start,
          eDelimiter = _a.end;
      for (var i = 0; i < splitInterpolation.strings.length - 1; i++) {
        var expression = splitInterpolation.expressions[i];
        var baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';
        var phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);
        if (splitInterpolation.strings[i].length) {
          nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan));
        }
        nodes.push(new Placeholder(expression, phName, sourceSpan));
        this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;
      }
      var lastStringIdx = splitInterpolation.strings.length - 1;
      if (splitInterpolation.strings[lastStringIdx].length) {
        nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan));
      }
      return container;
    };
    return _I18nVisitor;
  }());
  var _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*"([\s\S]*?)"[\s\S]*\)/g;
  function _extractPlaceholderName(input) {
    return input.split(_CUSTOM_PH_EXP)[1];
  }
  var __extends$4 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var I18nError = (function(_super) {
    __extends$4(I18nError, _super);
    function I18nError(span, msg) {
      _super.call(this, span, msg);
    }
    return I18nError;
  }(ParseError));
  var _I18N_ATTR = 'i18n';
  var _I18N_ATTR_PREFIX = 'i18n-';
  var _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;
  function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {
    var visitor = new _Visitor(implicitTags, implicitAttrs);
    return visitor.extract(nodes, interpolationConfig);
  }
  function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {
    var visitor = new _Visitor(implicitTags, implicitAttrs);
    return visitor.merge(nodes, translations, interpolationConfig);
  }
  var ExtractionResult = (function() {
    function ExtractionResult(messages, errors) {
      this.messages = messages;
      this.errors = errors;
    }
    return ExtractionResult;
  }());
  var _VisitorMode;
  (function(_VisitorMode) {
    _VisitorMode[_VisitorMode["Extract"] = 0] = "Extract";
    _VisitorMode[_VisitorMode["Merge"] = 1] = "Merge";
  })(_VisitorMode || (_VisitorMode = {}));
  var _Visitor = (function() {
    function _Visitor(_implicitTags, _implicitAttrs) {
      this._implicitTags = _implicitTags;
      this._implicitAttrs = _implicitAttrs;
    }
    _Visitor.prototype.extract = function(nodes, interpolationConfig) {
      var _this = this;
      this._init(_VisitorMode.Extract, interpolationConfig);
      nodes.forEach(function(node) {
        return node.visit(_this, null);
      });
      if (this._inI18nBlock) {
        this._reportError(nodes[nodes.length - 1], 'Unclosed block');
      }
      return new ExtractionResult(this._messages, this._errors);
    };
    _Visitor.prototype.merge = function(nodes, translations, interpolationConfig) {
      this._init(_VisitorMode.Merge, interpolationConfig);
      this._translations = translations;
      var wrapper = new Element('wrapper', [], nodes, null, null, null);
      var translatedNode = wrapper.visit(this, null);
      if (this._inI18nBlock) {
        this._reportError(nodes[nodes.length - 1], 'Unclosed block');
      }
      return new ParseTreeResult(translatedNode.children, this._errors);
    };
    _Visitor.prototype.visitExpansionCase = function(icuCase, context) {
      var expression = visitAll(this, icuCase.expression, context);
      if (this._mode === _VisitorMode.Merge) {
        return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
      }
    };
    _Visitor.prototype.visitExpansion = function(icu, context) {
      this._mayBeAddBlockChildren(icu);
      var wasInIcu = this._inIcu;
      if (!this._inIcu) {
        if (this._isInTranslatableSection) {
          this._addMessage([icu]);
        }
        this._inIcu = true;
      }
      var cases = visitAll(this, icu.cases, context);
      if (this._mode === _VisitorMode.Merge) {
        icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);
      }
      this._inIcu = wasInIcu;
      return icu;
    };
    _Visitor.prototype.visitComment = function(comment, context) {
      var isOpening = _isOpeningComment(comment);
      if (isOpening && this._isInTranslatableSection) {
        this._reportError(comment, 'Could not start a block inside a translatable section');
        return;
      }
      var isClosing = _isClosingComment(comment);
      if (isClosing && !this._inI18nBlock) {
        this._reportError(comment, 'Trying to close an unopened block');
        return;
      }
      if (!this._inI18nNode && !this._inIcu) {
        if (!this._inI18nBlock) {
          if (isOpening) {
            this._inI18nBlock = true;
            this._blockStartDepth = this._depth;
            this._blockChildren = [];
            this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();
            this._openTranslatableSection(comment);
          }
        } else {
          if (isClosing) {
            if (this._depth == this._blockStartDepth) {
              this._closeTranslatableSection(comment, this._blockChildren);
              this._inI18nBlock = false;
              var message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);
              var nodes = this._translateMessage(comment, message);
              return visitAll(this, nodes);
            } else {
              this._reportError(comment, 'I18N blocks should not cross element boundaries');
              return;
            }
          }
        }
      }
    };
    _Visitor.prototype.visitText = function(text, context) {
      if (this._isInTranslatableSection) {
        this._mayBeAddBlockChildren(text);
      }
      return text;
    };
    _Visitor.prototype.visitElement = function(el, context) {
      var _this = this;
      this._mayBeAddBlockChildren(el);
      this._depth++;
      var wasInI18nNode = this._inI18nNode;
      var wasInImplicitNode = this._inImplicitNode;
      var childNodes;
      var i18nAttr = _getI18nAttr(el);
      var isImplicit = this._implicitTags.some(function(tag) {
        return el.name === tag;
      }) && !this._inIcu && !this._isInTranslatableSection;
      var isTopLevelImplicit = !wasInImplicitNode && isImplicit;
      this._inImplicitNode = this._inImplicitNode || isImplicit;
      if (!this._isInTranslatableSection && !this._inIcu) {
        if (i18nAttr) {
          this._inI18nNode = true;
          var message = this._addMessage(el.children, i18nAttr.value);
          childNodes = this._translateMessage(el, message);
        } else if (isTopLevelImplicit) {
          this._inI18nNode = true;
          var message = this._addMessage(el.children);
          childNodes = this._translateMessage(el, message);
        }
        if (this._mode == _VisitorMode.Extract) {
          var isTranslatable = i18nAttr || isTopLevelImplicit;
          if (isTranslatable) {
            this._openTranslatableSection(el);
          }
          visitAll(this, el.children);
          if (isTranslatable) {
            this._closeTranslatableSection(el, el.children);
          }
        }
        if (this._mode === _VisitorMode.Merge && !i18nAttr && !isTopLevelImplicit) {
          childNodes = [];
          el.children.forEach(function(child) {
            var visited = child.visit(_this, context);
            if (visited && !_this._isInTranslatableSection) {
              childNodes = childNodes.concat(visited);
            }
          });
        }
      } else {
        if (i18nAttr || isTopLevelImplicit) {
          this._reportError(el, 'Could not mark an element as translatable inside a translatable section');
        }
        if (this._mode == _VisitorMode.Extract) {
          visitAll(this, el.children);
        }
        if (this._mode == _VisitorMode.Merge) {
          childNodes = [];
          el.children.forEach(function(child) {
            var visited = child.visit(_this, context);
            if (visited && !_this._isInTranslatableSection) {
              childNodes = childNodes.concat(visited);
            }
          });
        }
      }
      this._visitAttributesOf(el);
      this._depth--;
      this._inI18nNode = wasInI18nNode;
      this._inImplicitNode = wasInImplicitNode;
      if (this._mode === _VisitorMode.Merge) {
        var translatedAttrs = this._translateAttributes(el);
        return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
      }
    };
    _Visitor.prototype.visitAttribute = function(attribute, context) {
      throw new Error('unreachable code');
    };
    _Visitor.prototype._init = function(mode, interpolationConfig) {
      this._mode = mode;
      this._inI18nBlock = false;
      this._inI18nNode = false;
      this._depth = 0;
      this._inIcu = false;
      this._msgCountAtSectionStart = void 0;
      this._errors = [];
      this._messages = [];
      this._inImplicitNode = false;
      this._createI18nMessage = createI18nMessageFactory(interpolationConfig);
    };
    _Visitor.prototype._visitAttributesOf = function(el) {
      var _this = this;
      var explicitAttrNameToValue = {};
      var implicitAttrNames = this._implicitAttrs[el.name] || [];
      el.attrs.filter(function(attr) {
        return attr.name.startsWith(_I18N_ATTR_PREFIX);
      }).forEach(function(attr) {
        return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] = attr.value;
      });
      el.attrs.forEach(function(attr) {
        if (attr.name in explicitAttrNameToValue) {
          _this._addMessage([attr], explicitAttrNameToValue[attr.name]);
        } else if (implicitAttrNames.some(function(name) {
          return attr.name === name;
        })) {
          _this._addMessage([attr]);
        }
      });
    };
    _Visitor.prototype._addMessage = function(ast, meaningAndDesc) {
      if (ast.length == 0 || ast.length == 1 && ast[0] instanceof Attribute$1 && !ast[0].value) {
        return;
      }
      var _a = _splitMeaningAndDesc(meaningAndDesc),
          meaning = _a[0],
          description = _a[1];
      var message = this._createI18nMessage(ast, meaning, description);
      this._messages.push(message);
      return message;
    };
    _Visitor.prototype._translateMessage = function(el, message) {
      if (message && this._mode === _VisitorMode.Merge) {
        var id = digestMessage(message);
        var nodes = this._translations.get(id);
        if (nodes) {
          return nodes;
        }
        this._reportError(el, "Translation unavailable for message id=\"" + id + "\"");
      }
      return [];
    };
    _Visitor.prototype._translateAttributes = function(el) {
      var _this = this;
      var attributes = el.attrs;
      var i18nAttributeMeanings = {};
      attributes.forEach(function(attr) {
        if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {
          i18nAttributeMeanings[attr.name.slice(_I18N_ATTR_PREFIX.length)] = _splitMeaningAndDesc(attr.value)[0];
        }
      });
      var translatedAttributes = [];
      attributes.forEach(function(attr) {
        if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {
          return;
        }
        if (attr.value && attr.value != '' && i18nAttributeMeanings.hasOwnProperty(attr.name)) {
          var meaning = i18nAttributeMeanings[attr.name];
          var message = _this._createI18nMessage([attr], meaning, '');
          var id = digestMessage(message);
          var nodes = _this._translations.get(id);
          if (nodes) {
            if (nodes[0] instanceof Text) {
              var value = nodes[0].value;
              translatedAttributes.push(new Attribute$1(attr.name, value, attr.sourceSpan));
            } else {
              _this._reportError(el, "Unexpected translation for attribute \"" + attr.name + "\" (id=\"" + id + "\")");
            }
          } else {
            _this._reportError(el, "Translation unavailable for attribute \"" + attr.name + "\" (id=\"" + id + "\")");
          }
        } else {
          translatedAttributes.push(attr);
        }
      });
      return translatedAttributes;
    };
    _Visitor.prototype._mayBeAddBlockChildren = function(node) {
      if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {
        this._blockChildren.push(node);
      }
    };
    _Visitor.prototype._openTranslatableSection = function(node) {
      if (this._isInTranslatableSection) {
        this._reportError(node, 'Unexpected section start');
      } else {
        this._msgCountAtSectionStart = this._messages.length;
      }
    };
    Object.defineProperty(_Visitor.prototype, "_isInTranslatableSection", {
      get: function() {
        return this._msgCountAtSectionStart !== void 0;
      },
      enumerable: true,
      configurable: true
    });
    _Visitor.prototype._closeTranslatableSection = function(node, directChildren) {
      if (!this._isInTranslatableSection) {
        this._reportError(node, 'Unexpected section end');
        return;
      }
      var startIndex = this._msgCountAtSectionStart;
      var significantChildren = directChildren.reduce(function(count, node) {
        return count + (node instanceof Comment ? 0 : 1);
      }, 0);
      if (significantChildren == 1) {
        for (var i = this._messages.length - 1; i >= startIndex; i--) {
          var ast = this._messages[i].nodes;
          if (!(ast.length == 1 && ast[0] instanceof Text$1)) {
            this._messages.splice(i, 1);
            break;
          }
        }
      }
      this._msgCountAtSectionStart = void 0;
    };
    _Visitor.prototype._reportError = function(node, msg) {
      this._errors.push(new I18nError(node.sourceSpan, msg));
    };
    return _Visitor;
  }());
  function _isOpeningComment(n) {
    return n instanceof Comment && n.value && n.value.startsWith('i18n');
  }
  function _isClosingComment(n) {
    return n instanceof Comment && n.value && n.value === '/i18n';
  }
  function _getI18nAttr(p) {
    return p.attrs.find(function(attr) {
      return attr.name === _I18N_ATTR;
    }) || null;
  }
  function _splitMeaningAndDesc(i18n) {
    if (!i18n)
      return ['', ''];
    var pipeIndex = i18n.indexOf('|');
    return pipeIndex == -1 ? ['', i18n] : [i18n.slice(0, pipeIndex), i18n.slice(pipeIndex + 1)];
  }
  var MessageBundle = (function() {
    function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs) {
      this._htmlParser = _htmlParser;
      this._implicitTags = _implicitTags;
      this._implicitAttrs = _implicitAttrs;
      this._messageMap = {};
    }
    MessageBundle.prototype.updateFromTemplate = function(html, url, interpolationConfig) {
      var _this = this;
      var htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);
      if (htmlParserResult.errors.length) {
        return htmlParserResult.errors;
      }
      var i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);
      if (i18nParserResult.errors.length) {
        return i18nParserResult.errors;
      }
      i18nParserResult.messages.forEach(function(message) {
        _this._messageMap[digestMessage(message)] = message;
      });
    };
    MessageBundle.prototype.getMessageMap = function() {
      return this._messageMap;
    };
    MessageBundle.prototype.write = function(serializer) {
      return serializer.write(this._messageMap);
    };
    return MessageBundle;
  }());
  var XmlTagDefinition = (function() {
    function XmlTagDefinition() {
      this.closedByParent = false;
      this.contentType = TagContentType.PARSABLE_DATA;
      this.isVoid = false;
      this.ignoreFirstLf = false;
      this.canSelfClose = true;
    }
    XmlTagDefinition.prototype.requireExtraParent = function(currentParent) {
      return false;
    };
    XmlTagDefinition.prototype.isClosedByChild = function(name) {
      return false;
    };
    return XmlTagDefinition;
  }());
  var _TAG_DEFINITION = new XmlTagDefinition();
  function getXmlTagDefinition(tagName) {
    return _TAG_DEFINITION;
  }
  var __extends$5 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var XmlParser = (function(_super) {
    __extends$5(XmlParser, _super);
    function XmlParser() {
      _super.call(this, getXmlTagDefinition);
    }
    XmlParser.prototype.parse = function(source, url, parseExpansionForms) {
      if (parseExpansionForms === void 0) {
        parseExpansionForms = false;
      }
      return _super.prototype.parse.call(this, source, url, parseExpansionForms, null);
    };
    return XmlParser;
  }(Parser$1));
  function extractPlaceholders(messageBundle) {
    var messageMap = messageBundle.getMessageMap();
    var placeholders = {};
    Object.keys(messageMap).forEach(function(msgId) {
      placeholders[msgId] = messageMap[msgId].placeholders;
    });
    return placeholders;
  }
  function extractPlaceholderToIds(messageBundle) {
    var messageMap = messageBundle.getMessageMap();
    var placeholderToIds = {};
    Object.keys(messageMap).forEach(function(msgId) {
      placeholderToIds[msgId] = messageMap[msgId].placeholderToMsgIds;
    });
    return placeholderToIds;
  }
  var __extends$6 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var _Visitor$1 = (function() {
    function _Visitor() {}
    _Visitor.prototype.visitTag = function(tag) {
      var _this = this;
      var strAttrs = this._serializeAttributes(tag.attrs);
      if (tag.children.length == 0) {
        return "<" + tag.name + strAttrs + "/>";
      }
      var strChildren = tag.children.map(function(node) {
        return node.visit(_this);
      });
      return "<" + tag.name + strAttrs + ">" + strChildren.join('') + "</" + tag.name + ">";
    };
    _Visitor.prototype.visitText = function(text) {
      return text.value;
    };
    _Visitor.prototype.visitDeclaration = function(decl) {
      return "<?xml" + this._serializeAttributes(decl.attrs) + " ?>";
    };
    _Visitor.prototype._serializeAttributes = function(attrs) {
      var strAttrs = Object.keys(attrs).map(function(name) {
        return (name + "=\"" + attrs[name] + "\"");
      }).join(' ');
      return strAttrs.length > 0 ? ' ' + strAttrs : '';
    };
    _Visitor.prototype.visitDoctype = function(doctype) {
      return "<!DOCTYPE " + doctype.rootTag + " [\n" + doctype.dtd + "\n]>";
    };
    return _Visitor;
  }());
  var _visitor = new _Visitor$1();
  function serialize(nodes) {
    return nodes.map(function(node) {
      return node.visit(_visitor);
    }).join('');
  }
  var Declaration = (function() {
    function Declaration(unescapedAttrs) {
      var _this = this;
      this.attrs = {};
      Object.keys(unescapedAttrs).forEach(function(k) {
        _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
      });
    }
    Declaration.prototype.visit = function(visitor) {
      return visitor.visitDeclaration(this);
    };
    return Declaration;
  }());
  var Doctype = (function() {
    function Doctype(rootTag, dtd) {
      this.rootTag = rootTag;
      this.dtd = dtd;
    }
    ;
    Doctype.prototype.visit = function(visitor) {
      return visitor.visitDoctype(this);
    };
    return Doctype;
  }());
  var Tag = (function() {
    function Tag(name, unescapedAttrs, children) {
      var _this = this;
      if (unescapedAttrs === void 0) {
        unescapedAttrs = {};
      }
      if (children === void 0) {
        children = [];
      }
      this.name = name;
      this.children = children;
      this.attrs = {};
      Object.keys(unescapedAttrs).forEach(function(k) {
        _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
      });
    }
    Tag.prototype.visit = function(visitor) {
      return visitor.visitTag(this);
    };
    return Tag;
  }());
  var Text$2 = (function() {
    function Text(unescapedValue) {
      this.value = _escapeXml(unescapedValue);
    }
    ;
    Text.prototype.visit = function(visitor) {
      return visitor.visitText(this);
    };
    return Text;
  }());
  var CR = (function(_super) {
    __extends$6(CR, _super);
    function CR(ws) {
      if (ws === void 0) {
        ws = 0;
      }
      _super.call(this, "\n" + new Array(ws + 1).join(' '));
    }
    return CR;
  }(Text$2));
  var _ESCAPED_CHARS = [[/&/g, '&amp;'], [/"/g, '&quot;'], [/'/g, '&apos;'], [/</g, '&lt;'], [/>/g, '&gt;']];
  function _escapeXml(text) {
    return _ESCAPED_CHARS.reduce(function(text, entry) {
      return text.replace(entry[0], entry[1]);
    }, text);
  }
  var _VERSION = '1.2';
  var _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2';
  var _SOURCE_LANG = 'en';
  var _PLACEHOLDER_TAG = 'x';
  var _SOURCE_TAG = 'source';
  var _TARGET_TAG = 'target';
  var _UNIT_TAG = 'trans-unit';
  var Xliff = (function() {
    function Xliff(_htmlParser, _interpolationConfig) {
      this._htmlParser = _htmlParser;
      this._interpolationConfig = _interpolationConfig;
    }
    Xliff.prototype.write = function(messageMap) {
      var visitor = new _WriteVisitor();
      var transUnits = [];
      Object.keys(messageMap).forEach(function(id) {
        var message = messageMap[id];
        var transUnit = new Tag(_UNIT_TAG, {
          id: id,
          datatype: 'html'
        });
        transUnit.children.push(new CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new CR(8), new Tag(_TARGET_TAG));
        if (message.description) {
          transUnit.children.push(new CR(8), new Tag('note', {
            priority: '1',
            from: 'description'
          }, [new Text$2(message.description)]));
        }
        if (message.meaning) {
          transUnit.children.push(new CR(8), new Tag('note', {
            priority: '1',
            from: 'meaning'
          }, [new Text$2(message.meaning)]));
        }
        transUnit.children.push(new CR(6));
        transUnits.push(new CR(6), transUnit);
      });
      var body = new Tag('body', {}, transUnits.concat([new CR(4)]));
      var file = new Tag('file', {
        'source-language': _SOURCE_LANG,
        datatype: 'plaintext',
        original: 'ng2.template'
      }, [new CR(4), body, new CR(2)]);
      var xliff = new Tag('xliff', {
        version: _VERSION,
        xmlns: _XMLNS
      }, [new CR(2), file, new CR()]);
      return serialize([new Declaration({
        version: '1.0',
        encoding: 'UTF-8'
      }), new CR(), xliff, new CR()]);
    };
    Xliff.prototype.load = function(content, url, messageBundle) {
      var _this = this;
      var result = new XmlParser().parse(content, url);
      if (result.errors.length) {
        throw new Error("xtb parse errors:\n" + result.errors.join('\n'));
      }
      var _a = new _LoadVisitor().parse(result.rootNodes, messageBundle),
          messages = _a.messages,
          errors = _a.errors;
      if (errors.length) {
        throw new Error("xtb parse errors:\n" + errors.join('\n'));
      }
      var messageMap = {};
      var parseErrors = [];
      Object.keys(messages).forEach(function(id) {
        var res = _this._htmlParser.parse(messages[id], url, true, _this._interpolationConfig);
        parseErrors.push.apply(parseErrors, res.errors);
        messageMap[id] = res.rootNodes;
      });
      if (parseErrors.length) {
        throw new Error("xtb parse errors:\n" + parseErrors.join('\n'));
      }
      return messageMap;
    };
    return Xliff;
  }());
  var _WriteVisitor = (function() {
    function _WriteVisitor() {}
    _WriteVisitor.prototype.visitText = function(text, context) {
      return [new Text$2(text.value)];
    };
    _WriteVisitor.prototype.visitContainer = function(container, context) {
      var _this = this;
      var nodes = [];
      container.children.forEach(function(node) {
        return nodes.push.apply(nodes, node.visit(_this));
      });
      return nodes;
    };
    _WriteVisitor.prototype.visitIcu = function(icu, context) {
      if (this._isInIcu) {
        throw new Error('xliff does not support nested ICU messages');
      }
      this._isInIcu = true;
      var nodes = [];
      this._isInIcu = false;
      return nodes;
    };
    _WriteVisitor.prototype.visitTagPlaceholder = function(ph, context) {
      var ctype = getCtypeForTag(ph.tag);
      var startTagPh = new Tag(_PLACEHOLDER_TAG, {
        id: ph.startName,
        ctype: ctype
      });
      if (ph.isVoid) {
        return [startTagPh];
      }
      var closeTagPh = new Tag(_PLACEHOLDER_TAG, {
        id: ph.closeName,
        ctype: ctype
      });
      return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
    };
    _WriteVisitor.prototype.visitPlaceholder = function(ph, context) {
      return [new Tag(_PLACEHOLDER_TAG, {id: ph.name})];
    };
    _WriteVisitor.prototype.visitIcuPlaceholder = function(ph, context) {
      return [new Tag(_PLACEHOLDER_TAG, {id: ph.name})];
    };
    _WriteVisitor.prototype.serialize = function(nodes) {
      var _this = this;
      this._isInIcu = false;
      return (_a = []).concat.apply(_a, nodes.map(function(node) {
        return node.visit(_this);
      }));
      var _a;
    };
    return _WriteVisitor;
  }());
  var _LoadVisitor = (function() {
    function _LoadVisitor() {}
    _LoadVisitor.prototype.parse = function(nodes, messageBundle) {
      var _this = this;
      this._messageNodes = [];
      this._translatedMessages = {};
      this._msgId = '';
      this._target = [];
      this._errors = [];
      visitAll(this, nodes, null);
      var messageMap = messageBundle.getMessageMap();
      var placeholders = extractPlaceholders(messageBundle);
      var placeholderToIds = extractPlaceholderToIds(messageBundle);
      this._messageNodes.filter(function(message) {
        return messageMap.hasOwnProperty(message[0]);
      }).sort(function(a, b) {
        if (Object.keys(messageMap[a[0]].placeholderToMsgIds).length == 0) {
          return -1;
        }
        if (Object.keys(messageMap[b[0]].placeholderToMsgIds).length == 0) {
          return 1;
        }
        return 0;
      }).forEach(function(message) {
        var id = message[0];
        _this._placeholders = placeholders[id] || {};
        _this._placeholderToIds = placeholderToIds[id] || {};
        _this._translatedMessages[id] = visitAll(_this, message[1]).join('');
      });
      return {
        messages: this._translatedMessages,
        errors: this._errors
      };
    };
    _LoadVisitor.prototype.visitElement = function(element, context) {
      switch (element.name) {
        case _UNIT_TAG:
          this._target = null;
          var msgId = element.attrs.find(function(attr) {
            return attr.name === 'id';
          });
          if (!msgId) {
            this._addError(element, "<" + _UNIT_TAG + "> misses the \"id\" attribute");
          } else {
            this._msgId = msgId.value;
          }
          visitAll(this, element.children, null);
          if (this._msgId !== null) {
            this._messageNodes.push([this._msgId, this._target]);
          }
          break;
        case _SOURCE_TAG:
          break;
        case _TARGET_TAG:
          this._target = element.children;
          break;
        case _PLACEHOLDER_TAG:
          var idAttr = element.attrs.find(function(attr) {
            return attr.name === 'id';
          });
          if (!idAttr) {
            this._addError(element, "<" + _PLACEHOLDER_TAG + "> misses the \"id\" attribute");
          } else {
            var id = idAttr.value;
            if (this._placeholders.hasOwnProperty(id)) {
              return this._placeholders[id];
            }
            if (this._placeholderToIds.hasOwnProperty(id) && this._translatedMessages.hasOwnProperty(this._placeholderToIds[id])) {
              return this._translatedMessages[this._placeholderToIds[id]];
            }
            this._addError(element, "The placeholder \"" + id + "\" does not exists in the source message");
          }
          break;
        default:
          visitAll(this, element.children, null);
      }
    };
    _LoadVisitor.prototype.visitAttribute = function(attribute, context) {
      throw new Error('unreachable code');
    };
    _LoadVisitor.prototype.visitText = function(text, context) {
      return text.value;
    };
    _LoadVisitor.prototype.visitComment = function(comment, context) {
      return '';
    };
    _LoadVisitor.prototype.visitExpansion = function(expansion, context) {
      throw new Error('unreachable code');
    };
    _LoadVisitor.prototype.visitExpansionCase = function(expansionCase, context) {
      throw new Error('unreachable code');
    };
    _LoadVisitor.prototype._addError = function(node, message) {
      this._errors.push(new I18nError(node.sourceSpan, message));
    };
    return _LoadVisitor;
  }());
  function getCtypeForTag(tag) {
    switch (tag.toLowerCase()) {
      case 'br':
        return 'lb';
      case 'img':
        return 'image';
      default:
        return "x-" + tag;
    }
  }
  var _MESSAGES_TAG = 'messagebundle';
  var _MESSAGE_TAG = 'msg';
  var _PLACEHOLDER_TAG$1 = 'ph';
  var _EXEMPLE_TAG = 'ex';
  var _DOCTYPE = "<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>";
  var Xmb = (function() {
    function Xmb() {}
    Xmb.prototype.write = function(messageMap) {
      var visitor = new _Visitor$2();
      var rootNode = new Tag(_MESSAGES_TAG);
      Object.keys(messageMap).forEach(function(id) {
        var message = messageMap[id];
        var attrs = {id: id};
        if (message.description) {
          attrs['desc'] = message.description;
        }
        if (message.meaning) {
          attrs['meaning'] = message.meaning;
        }
        rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, visitor.serialize(message.nodes)));
      });
      rootNode.children.push(new CR());
      return serialize([new Declaration({
        version: '1.0',
        encoding: 'UTF-8'
      }), new CR(), new Doctype(_MESSAGES_TAG, _DOCTYPE), new CR(), rootNode, new CR()]);
    };
    Xmb.prototype.load = function(content, url, messageBundle) {
      throw new Error('Unsupported');
    };
    return Xmb;
  }());
  var _Visitor$2 = (function() {
    function _Visitor() {}
    _Visitor.prototype.visitText = function(text, context) {
      return [new Text$2(text.value)];
    };
    _Visitor.prototype.visitContainer = function(container, context) {
      var _this = this;
      var nodes = [];
      container.children.forEach(function(node) {
        return nodes.push.apply(nodes, node.visit(_this));
      });
      return nodes;
    };
    _Visitor.prototype.visitIcu = function(icu, context) {
      var _this = this;
      var nodes = [new Text$2("{" + icu.expression + ", " + icu.type + ", ")];
      Object.keys(icu.cases).forEach(function(c) {
        nodes.push.apply(nodes, [new Text$2(c + " {")].concat(icu.cases[c].visit(_this), [new Text$2("} ")]));
      });
      nodes.push(new Text$2("}"));
      return nodes;
    };
    _Visitor.prototype.visitTagPlaceholder = function(ph, context) {
      var startEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("<" + ph.tag + ">")]);
      var startTagPh = new Tag(_PLACEHOLDER_TAG$1, {name: ph.startName}, [startEx]);
      if (ph.isVoid) {
        return [startTagPh];
      }
      var closeEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("</" + ph.tag + ">")]);
      var closeTagPh = new Tag(_PLACEHOLDER_TAG$1, {name: ph.closeName}, [closeEx]);
      return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
    };
    _Visitor.prototype.visitPlaceholder = function(ph, context) {
      return [new Tag(_PLACEHOLDER_TAG$1, {name: ph.name})];
    };
    _Visitor.prototype.visitIcuPlaceholder = function(ph, context) {
      return [new Tag(_PLACEHOLDER_TAG$1, {name: ph.name})];
    };
    _Visitor.prototype.serialize = function(nodes) {
      var _this = this;
      return (_a = []).concat.apply(_a, nodes.map(function(node) {
        return node.visit(_this);
      }));
      var _a;
    };
    return _Visitor;
  }());
  var _TRANSLATIONS_TAG = 'translationbundle';
  var _TRANSLATION_TAG = 'translation';
  var _PLACEHOLDER_TAG$2 = 'ph';
  var Xtb = (function() {
    function Xtb(_htmlParser, _interpolationConfig) {
      this._htmlParser = _htmlParser;
      this._interpolationConfig = _interpolationConfig;
    }
    Xtb.prototype.write = function(messageMap) {
      throw new Error('Unsupported');
    };
    Xtb.prototype.load = function(content, url, messageBundle) {
      var _this = this;
      var result = new XmlParser().parse(content, url);
      if (result.errors.length) {
        throw new Error("xtb parse errors:\n" + result.errors.join('\n'));
      }
      var _a = new _Visitor$3().parse(result.rootNodes, messageBundle),
          messages = _a.messages,
          errors = _a.errors;
      if (errors.length) {
        throw new Error("xtb parse errors:\n" + errors.join('\n'));
      }
      var messageMap = {};
      var parseErrors = [];
      Object.keys(messages).forEach(function(id) {
        var res = _this._htmlParser.parse(messages[id], url, true, _this._interpolationConfig);
        parseErrors.push.apply(parseErrors, res.errors);
        messageMap[id] = res.rootNodes;
      });
      if (parseErrors.length) {
        throw new Error("xtb parse errors:\n" + parseErrors.join('\n'));
      }
      return messageMap;
    };
    return Xtb;
  }());
  var _Visitor$3 = (function() {
    function _Visitor() {}
    _Visitor.prototype.parse = function(nodes, messageBundle) {
      var _this = this;
      this._messageNodes = [];
      this._translatedMessages = {};
      this._bundleDepth = 0;
      this._translationDepth = 0;
      this._errors = [];
      visitAll(this, nodes, null);
      var messageMap = messageBundle.getMessageMap();
      var placeholders = extractPlaceholders(messageBundle);
      var placeholderToIds = extractPlaceholderToIds(messageBundle);
      this._messageNodes.filter(function(message) {
        return messageMap.hasOwnProperty(message[0]);
      }).sort(function(a, b) {
        if (Object.keys(messageMap[a[0]].placeholderToMsgIds).length == 0) {
          return -1;
        }
        if (Object.keys(messageMap[b[0]].placeholderToMsgIds).length == 0) {
          return 1;
        }
        return 0;
      }).forEach(function(message) {
        var id = message[0];
        _this._placeholders = placeholders[id] || {};
        _this._placeholderToIds = placeholderToIds[id] || {};
        _this._translatedMessages[id] = visitAll(_this, message[1]).join('');
      });
      return {
        messages: this._translatedMessages,
        errors: this._errors
      };
    };
    _Visitor.prototype.visitElement = function(element, context) {
      switch (element.name) {
        case _TRANSLATIONS_TAG:
          this._bundleDepth++;
          if (this._bundleDepth > 1) {
            this._addError(element, "<" + _TRANSLATIONS_TAG + "> elements can not be nested");
          }
          visitAll(this, element.children, null);
          this._bundleDepth--;
          break;
        case _TRANSLATION_TAG:
          this._translationDepth++;
          if (this._translationDepth > 1) {
            this._addError(element, "<" + _TRANSLATION_TAG + "> elements can not be nested");
          }
          var idAttr = element.attrs.find(function(attr) {
            return attr.name === 'id';
          });
          if (!idAttr) {
            this._addError(element, "<" + _TRANSLATION_TAG + "> misses the \"id\" attribute");
          } else {
            this._messageNodes.push([idAttr.value, element.children]);
          }
          this._translationDepth--;
          break;
        case _PLACEHOLDER_TAG$2:
          var nameAttr = element.attrs.find(function(attr) {
            return attr.name === 'name';
          });
          if (!nameAttr) {
            this._addError(element, "<" + _PLACEHOLDER_TAG$2 + "> misses the \"name\" attribute");
          } else {
            var name_1 = nameAttr.value;
            if (this._placeholders.hasOwnProperty(name_1)) {
              return this._placeholders[name_1];
            }
            if (this._placeholderToIds.hasOwnProperty(name_1) && this._translatedMessages.hasOwnProperty(this._placeholderToIds[name_1])) {
              return this._translatedMessages[this._placeholderToIds[name_1]];
            }
            this._addError(element, "The placeholder \"" + name_1 + "\" does not exists in the source message");
          }
          break;
        default:
          this._addError(element, 'Unexpected tag');
      }
    };
    _Visitor.prototype.visitAttribute = function(attribute, context) {
      throw new Error('unreachable code');
    };
    _Visitor.prototype.visitText = function(text, context) {
      return text.value;
    };
    _Visitor.prototype.visitComment = function(comment, context) {
      return '';
    };
    _Visitor.prototype.visitExpansion = function(expansion, context) {
      var _this = this;
      var strCases = expansion.cases.map(function(c) {
        return c.visit(_this, null);
      });
      return "{" + expansion.switchValue + ", " + expansion.type + ", strCases.join(' ')}";
    };
    _Visitor.prototype.visitExpansionCase = function(expansionCase, context) {
      return expansionCase.value + " {" + visitAll(this, expansionCase.expression, null) + "}";
    };
    _Visitor.prototype._addError = function(node, message) {
      this._errors.push(new I18nError(node.sourceSpan, message));
    };
    return _Visitor;
  }());
  var TranslationBundle = (function() {
    function TranslationBundle(_messageMap) {
      if (_messageMap === void 0) {
        _messageMap = {};
      }
      this._messageMap = _messageMap;
    }
    TranslationBundle.load = function(content, url, messageBundle, serializer) {
      return new TranslationBundle(serializer.load(content, url, messageBundle));
    };
    TranslationBundle.prototype.get = function(id) {
      return this._messageMap[id];
    };
    TranslationBundle.prototype.has = function(id) {
      return id in this._messageMap;
    };
    return TranslationBundle;
  }());
  var I18NHtmlParser = (function() {
    function I18NHtmlParser(_htmlParser, _translations, _translationsFormat) {
      this._htmlParser = _htmlParser;
      this._translations = _translations;
      this._translationsFormat = _translationsFormat;
    }
    I18NHtmlParser.prototype.parse = function(source, url, parseExpansionForms, interpolationConfig) {
      if (parseExpansionForms === void 0) {
        parseExpansionForms = false;
      }
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      var parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);
      if (!this._translations || this._translations === '') {
        return parseResult;
      }
      var messageBundle = new MessageBundle(this._htmlParser, [], {});
      var errors = messageBundle.updateFromTemplate(source, url, interpolationConfig);
      if (errors && errors.length) {
        return new ParseTreeResult(parseResult.rootNodes, parseResult.errors.concat(errors));
      }
      var serializer = this._createSerializer(interpolationConfig);
      var translationBundle = TranslationBundle.load(this._translations, url, messageBundle, serializer);
      return mergeTranslations(parseResult.rootNodes, translationBundle, interpolationConfig, [], {});
    };
    I18NHtmlParser.prototype._createSerializer = function(interpolationConfig) {
      var format = (this._translationsFormat || 'xlf').toLowerCase();
      switch (format) {
        case 'xmb':
          return new Xmb();
        case 'xtb':
          return new Xtb(this._htmlParser, interpolationConfig);
        case 'xliff':
        case 'xlf':
        default:
          return new Xliff(this._htmlParser, interpolationConfig);
      }
    };
    return I18NHtmlParser;
  }());
  var StringMapWrapper = (function() {
    function StringMapWrapper() {}
    StringMapWrapper.merge = function(m1, m2) {
      var m = {};
      for (var _i = 0,
          _a = Object.keys(m1); _i < _a.length; _i++) {
        var k = _a[_i];
        m[k] = m1[k];
      }
      for (var _b = 0,
          _c = Object.keys(m2); _b < _c.length; _b++) {
        var k = _c[_b];
        m[k] = m2[k];
      }
      return m;
    };
    StringMapWrapper.equals = function(m1, m2) {
      var k1 = Object.keys(m1);
      var k2 = Object.keys(m2);
      if (k1.length != k2.length) {
        return false;
      }
      for (var i = 0; i < k1.length; i++) {
        var key = k1[i];
        if (m1[key] !== m2[key]) {
          return false;
        }
      }
      return true;
    };
    return StringMapWrapper;
  }());
  var ListWrapper = (function() {
    function ListWrapper() {}
    ListWrapper.removeAll = function(list, items) {
      for (var i = 0; i < items.length; ++i) {
        var index = list.indexOf(items[i]);
        if (index > -1) {
          list.splice(index, 1);
        }
      }
    };
    ListWrapper.remove = function(list, el) {
      var index = list.indexOf(el);
      if (index > -1) {
        list.splice(index, 1);
        return true;
      }
      return false;
    };
    ListWrapper.equals = function(a, b) {
      if (a.length != b.length)
        return false;
      for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i])
          return false;
      }
      return true;
    };
    ListWrapper.flatten = function(list) {
      return list.reduce(function(flat, item) {
        var flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
        return flat.concat(flatItem);
      }, []);
    };
    return ListWrapper;
  }());
  var _SELECTOR_REGEXP = new RegExp('(\\:not\\()|' + '([-\\w]+)|' + '(?:\\.([-\\w]+))|' + '(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|' + '(\\))|' + '(\\s*,\\s*)', 'g');
  var CssSelector = (function() {
    function CssSelector() {
      this.element = null;
      this.classNames = [];
      this.attrs = [];
      this.notSelectors = [];
    }
    CssSelector.parse = function(selector) {
      var results = [];
      var _addResult = function(res, cssSel) {
        if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 && cssSel.attrs.length == 0) {
          cssSel.element = '*';
        }
        res.push(cssSel);
      };
      var cssSelector = new CssSelector();
      var match;
      var current = cssSelector;
      var inNot = false;
      _SELECTOR_REGEXP.lastIndex = 0;
      while (match = _SELECTOR_REGEXP.exec(selector)) {
        if (match[1]) {
          if (inNot) {
            throw new Error('Nesting :not is not allowed in a selector');
          }
          inNot = true;
          current = new CssSelector();
          cssSelector.notSelectors.push(current);
        }
        if (match[2]) {
          current.setElement(match[2]);
        }
        if (match[3]) {
          current.addClassName(match[3]);
        }
        if (match[4]) {
          current.addAttribute(match[4], match[5]);
        }
        if (match[6]) {
          inNot = false;
          current = cssSelector;
        }
        if (match[7]) {
          if (inNot) {
            throw new Error('Multiple selectors in :not are not supported');
          }
          _addResult(results, cssSelector);
          cssSelector = current = new CssSelector();
        }
      }
      _addResult(results, cssSelector);
      return results;
    };
    CssSelector.prototype.isElementSelector = function() {
      return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 && this.notSelectors.length === 0;
    };
    CssSelector.prototype.hasElementSelector = function() {
      return !!this.element;
    };
    CssSelector.prototype.setElement = function(element) {
      if (element === void 0) {
        element = null;
      }
      this.element = element;
    };
    CssSelector.prototype.getMatchingElementTemplate = function() {
      var tagName = this.element || 'div';
      var classAttr = this.classNames.length > 0 ? " class=\"" + this.classNames.join(' ') + "\"" : '';
      var attrs = '';
      for (var i = 0; i < this.attrs.length; i += 2) {
        var attrName = this.attrs[i];
        var attrValue = this.attrs[i + 1] !== '' ? "=\"" + this.attrs[i + 1] + "\"" : '';
        attrs += " " + attrName + attrValue;
      }
      return getHtmlTagDefinition(tagName).isVoid ? "<" + tagName + classAttr + attrs + "/>" : "<" + tagName + classAttr + attrs + "></" + tagName + ">";
    };
    CssSelector.prototype.addAttribute = function(name, value) {
      if (value === void 0) {
        value = '';
      }
      this.attrs.push(name, value && value.toLowerCase() || '');
    };
    CssSelector.prototype.addClassName = function(name) {
      this.classNames.push(name.toLowerCase());
    };
    CssSelector.prototype.toString = function() {
      var res = this.element || '';
      if (this.classNames) {
        this.classNames.forEach(function(klass) {
          return res += "." + klass;
        });
      }
      if (this.attrs) {
        for (var i = 0; i < this.attrs.length; i += 2) {
          var name_1 = this.attrs[i];
          var value = this.attrs[i + 1];
          res += "[" + name_1 + (value ? '=' + value : '') + "]";
        }
      }
      this.notSelectors.forEach(function(notSelector) {
        return res += ":not(" + notSelector + ")";
      });
      return res;
    };
    return CssSelector;
  }());
  var SelectorMatcher = (function() {
    function SelectorMatcher() {
      this._elementMap = new Map();
      this._elementPartialMap = new Map();
      this._classMap = new Map();
      this._classPartialMap = new Map();
      this._attrValueMap = new Map();
      this._attrValuePartialMap = new Map();
      this._listContexts = [];
    }
    SelectorMatcher.createNotMatcher = function(notSelectors) {
      var notMatcher = new SelectorMatcher();
      notMatcher.addSelectables(notSelectors, null);
      return notMatcher;
    };
    SelectorMatcher.prototype.addSelectables = function(cssSelectors, callbackCtxt) {
      var listContext = null;
      if (cssSelectors.length > 1) {
        listContext = new SelectorListContext(cssSelectors);
        this._listContexts.push(listContext);
      }
      for (var i = 0; i < cssSelectors.length; i++) {
        this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
      }
    };
    SelectorMatcher.prototype._addSelectable = function(cssSelector, callbackCtxt, listContext) {
      var matcher = this;
      var element = cssSelector.element;
      var classNames = cssSelector.classNames;
      var attrs = cssSelector.attrs;
      var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
      if (element) {
        var isTerminal = attrs.length === 0 && classNames.length === 0;
        if (isTerminal) {
          this._addTerminal(matcher._elementMap, element, selectable);
        } else {
          matcher = this._addPartial(matcher._elementPartialMap, element);
        }
      }
      if (classNames) {
        for (var i = 0; i < classNames.length; i++) {
          var isTerminal = attrs.length === 0 && i === classNames.length - 1;
          var className = classNames[i];
          if (isTerminal) {
            this._addTerminal(matcher._classMap, className, selectable);
          } else {
            matcher = this._addPartial(matcher._classPartialMap, className);
          }
        }
      }
      if (attrs) {
        for (var i = 0; i < attrs.length; i += 2) {
          var isTerminal = i === attrs.length - 2;
          var name_2 = attrs[i];
          var value = attrs[i + 1];
          if (isTerminal) {
            var terminalMap = matcher._attrValueMap;
            var terminalValuesMap = terminalMap.get(name_2);
            if (!terminalValuesMap) {
              terminalValuesMap = new Map();
              terminalMap.set(name_2, terminalValuesMap);
            }
            this._addTerminal(terminalValuesMap, value, selectable);
          } else {
            var partialMap = matcher._attrValuePartialMap;
            var partialValuesMap = partialMap.get(name_2);
            if (!partialValuesMap) {
              partialValuesMap = new Map();
              partialMap.set(name_2, partialValuesMap);
            }
            matcher = this._addPartial(partialValuesMap, value);
          }
        }
      }
    };
    SelectorMatcher.prototype._addTerminal = function(map, name, selectable) {
      var terminalList = map.get(name);
      if (!terminalList) {
        terminalList = [];
        map.set(name, terminalList);
      }
      terminalList.push(selectable);
    };
    SelectorMatcher.prototype._addPartial = function(map, name) {
      var matcher = map.get(name);
      if (!matcher) {
        matcher = new SelectorMatcher();
        map.set(name, matcher);
      }
      return matcher;
    };
    SelectorMatcher.prototype.match = function(cssSelector, matchedCallback) {
      var result = false;
      var element = cssSelector.element;
      var classNames = cssSelector.classNames;
      var attrs = cssSelector.attrs;
      for (var i = 0; i < this._listContexts.length; i++) {
        this._listContexts[i].alreadyMatched = false;
      }
      result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
      result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result;
      if (classNames) {
        for (var i = 0; i < classNames.length; i++) {
          var className = classNames[i];
          result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
          result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
        }
      }
      if (attrs) {
        for (var i = 0; i < attrs.length; i += 2) {
          var name_3 = attrs[i];
          var value = attrs[i + 1];
          var terminalValuesMap = this._attrValueMap.get(name_3);
          if (value) {
            result = this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;
          }
          result = this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;
          var partialValuesMap = this._attrValuePartialMap.get(name_3);
          if (value) {
            result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;
          }
          result = this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;
        }
      }
      return result;
    };
    SelectorMatcher.prototype._matchTerminal = function(map, name, cssSelector, matchedCallback) {
      if (!map || typeof name !== 'string') {
        return false;
      }
      var selectables = map.get(name);
      var starSelectables = map.get('*');
      if (starSelectables) {
        selectables = selectables.concat(starSelectables);
      }
      if (!selectables) {
        return false;
      }
      var selectable;
      var result = false;
      for (var i = 0; i < selectables.length; i++) {
        selectable = selectables[i];
        result = selectable.finalize(cssSelector, matchedCallback) || result;
      }
      return result;
    };
    SelectorMatcher.prototype._matchPartial = function(map, name, cssSelector, matchedCallback) {
      if (!map || typeof name !== 'string') {
        return false;
      }
      var nestedSelector = map.get(name);
      if (!nestedSelector) {
        return false;
      }
      return nestedSelector.match(cssSelector, matchedCallback);
    };
    return SelectorMatcher;
  }());
  var SelectorListContext = (function() {
    function SelectorListContext(selectors) {
      this.selectors = selectors;
      this.alreadyMatched = false;
    }
    return SelectorListContext;
  }());
  var SelectorContext = (function() {
    function SelectorContext(selector, cbContext, listContext) {
      this.selector = selector;
      this.cbContext = cbContext;
      this.listContext = listContext;
      this.notSelectors = selector.notSelectors;
    }
    SelectorContext.prototype.finalize = function(cssSelector, callback) {
      var result = true;
      if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {
        var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
        result = !notMatcher.match(cssSelector, null);
      }
      if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {
        if (this.listContext) {
          this.listContext.alreadyMatched = true;
        }
        callback(this.selector, this.cbContext);
      }
      return result;
    };
    return SelectorContext;
  }());
  var MODULE_SUFFIX = '';
  var DASH_CASE_REGEXP = /-+([a-z0-9])/g;
  function dashCaseToCamelCase(input) {
    return input.replace(DASH_CASE_REGEXP, function() {
      var m = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        m[_i - 0] = arguments[_i];
      }
      return m[1].toUpperCase();
    });
  }
  function splitAtColon(input, defaultValues) {
    return _splitAt(input, ':', defaultValues);
  }
  function splitAtPeriod(input, defaultValues) {
    return _splitAt(input, '.', defaultValues);
  }
  function _splitAt(input, character, defaultValues) {
    var characterIndex = input.indexOf(character);
    if (characterIndex == -1)
      return defaultValues;
    return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];
  }
  function sanitizeIdentifier(name) {
    return name.replace(/\W/g, '_');
  }
  function visitValue(value, visitor, context) {
    if (Array.isArray(value)) {
      return visitor.visitArray(value, context);
    }
    if (isStrictStringMap(value)) {
      return visitor.visitStringMap(value, context);
    }
    if (isBlank(value) || isPrimitive(value)) {
      return visitor.visitPrimitive(value, context);
    }
    return visitor.visitOther(value, context);
  }
  var ValueTransformer = (function() {
    function ValueTransformer() {}
    ValueTransformer.prototype.visitArray = function(arr, context) {
      var _this = this;
      return arr.map(function(value) {
        return visitValue(value, _this, context);
      });
    };
    ValueTransformer.prototype.visitStringMap = function(map, context) {
      var _this = this;
      var result = {};
      Object.keys(map).forEach(function(key) {
        result[key] = visitValue(map[key], _this, context);
      });
      return result;
    };
    ValueTransformer.prototype.visitPrimitive = function(value, context) {
      return value;
    };
    ValueTransformer.prototype.visitOther = function(value, context) {
      return value;
    };
    return ValueTransformer;
  }());
  var SyncAsyncResult = (function() {
    function SyncAsyncResult(syncResult, asyncResult) {
      if (asyncResult === void 0) {
        asyncResult = null;
      }
      this.syncResult = syncResult;
      this.asyncResult = asyncResult;
      if (!asyncResult) {
        this.asyncResult = Promise.resolve(syncResult);
      }
    }
    return SyncAsyncResult;
  }());
  var __extends$7 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  function unimplemented() {
    throw new Error('unimplemented');
  }
  var HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;
  var CompileMetadataWithIdentifier = (function() {
    function CompileMetadataWithIdentifier() {}
    Object.defineProperty(CompileMetadataWithIdentifier.prototype, "identifier", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    return CompileMetadataWithIdentifier;
  }());
  var CompileAnimationEntryMetadata = (function() {
    function CompileAnimationEntryMetadata(name, definitions) {
      if (name === void 0) {
        name = null;
      }
      if (definitions === void 0) {
        definitions = null;
      }
      this.name = name;
      this.definitions = definitions;
    }
    return CompileAnimationEntryMetadata;
  }());
  var CompileAnimationStateMetadata = (function() {
    function CompileAnimationStateMetadata() {}
    return CompileAnimationStateMetadata;
  }());
  var CompileAnimationStateDeclarationMetadata = (function(_super) {
    __extends$7(CompileAnimationStateDeclarationMetadata, _super);
    function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) {
      _super.call(this);
      this.stateNameExpr = stateNameExpr;
      this.styles = styles;
    }
    return CompileAnimationStateDeclarationMetadata;
  }(CompileAnimationStateMetadata));
  var CompileAnimationStateTransitionMetadata = (function(_super) {
    __extends$7(CompileAnimationStateTransitionMetadata, _super);
    function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) {
      _super.call(this);
      this.stateChangeExpr = stateChangeExpr;
      this.steps = steps;
    }
    return CompileAnimationStateTransitionMetadata;
  }(CompileAnimationStateMetadata));
  var CompileAnimationMetadata = (function() {
    function CompileAnimationMetadata() {}
    return CompileAnimationMetadata;
  }());
  var CompileAnimationKeyframesSequenceMetadata = (function(_super) {
    __extends$7(CompileAnimationKeyframesSequenceMetadata, _super);
    function CompileAnimationKeyframesSequenceMetadata(steps) {
      if (steps === void 0) {
        steps = [];
      }
      _super.call(this);
      this.steps = steps;
    }
    return CompileAnimationKeyframesSequenceMetadata;
  }(CompileAnimationMetadata));
  var CompileAnimationStyleMetadata = (function(_super) {
    __extends$7(CompileAnimationStyleMetadata, _super);
    function CompileAnimationStyleMetadata(offset, styles) {
      if (styles === void 0) {
        styles = null;
      }
      _super.call(this);
      this.offset = offset;
      this.styles = styles;
    }
    return CompileAnimationStyleMetadata;
  }(CompileAnimationMetadata));
  var CompileAnimationAnimateMetadata = (function(_super) {
    __extends$7(CompileAnimationAnimateMetadata, _super);
    function CompileAnimationAnimateMetadata(timings, styles) {
      if (timings === void 0) {
        timings = 0;
      }
      if (styles === void 0) {
        styles = null;
      }
      _super.call(this);
      this.timings = timings;
      this.styles = styles;
    }
    return CompileAnimationAnimateMetadata;
  }(CompileAnimationMetadata));
  var CompileAnimationWithStepsMetadata = (function(_super) {
    __extends$7(CompileAnimationWithStepsMetadata, _super);
    function CompileAnimationWithStepsMetadata(steps) {
      if (steps === void 0) {
        steps = null;
      }
      _super.call(this);
      this.steps = steps;
    }
    return CompileAnimationWithStepsMetadata;
  }(CompileAnimationMetadata));
  var CompileAnimationSequenceMetadata = (function(_super) {
    __extends$7(CompileAnimationSequenceMetadata, _super);
    function CompileAnimationSequenceMetadata(steps) {
      if (steps === void 0) {
        steps = null;
      }
      _super.call(this, steps);
    }
    return CompileAnimationSequenceMetadata;
  }(CompileAnimationWithStepsMetadata));
  var CompileAnimationGroupMetadata = (function(_super) {
    __extends$7(CompileAnimationGroupMetadata, _super);
    function CompileAnimationGroupMetadata(steps) {
      if (steps === void 0) {
        steps = null;
      }
      _super.call(this, steps);
    }
    return CompileAnimationGroupMetadata;
  }(CompileAnimationWithStepsMetadata));
  var CompileIdentifierMetadata = (function() {
    function CompileIdentifierMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          reference = _b.reference,
          name = _b.name,
          moduleUrl = _b.moduleUrl,
          prefix = _b.prefix,
          value = _b.value;
      this.reference = reference;
      this.name = name;
      this.prefix = prefix;
      this.moduleUrl = moduleUrl;
      this.value = value;
    }
    Object.defineProperty(CompileIdentifierMetadata.prototype, "identifier", {
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    return CompileIdentifierMetadata;
  }());
  var CompileDiDependencyMetadata = (function() {
    function CompileDiDependencyMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          isAttribute = _b.isAttribute,
          isSelf = _b.isSelf,
          isHost = _b.isHost,
          isSkipSelf = _b.isSkipSelf,
          isOptional = _b.isOptional,
          isValue = _b.isValue,
          token = _b.token,
          value = _b.value;
      this.isAttribute = !!isAttribute;
      this.isSelf = !!isSelf;
      this.isHost = !!isHost;
      this.isSkipSelf = !!isSkipSelf;
      this.isOptional = !!isOptional;
      this.isValue = !!isValue;
      this.token = token;
      this.value = value;
    }
    return CompileDiDependencyMetadata;
  }());
  var CompileProviderMetadata = (function() {
    function CompileProviderMetadata(_a) {
      var token = _a.token,
          useClass = _a.useClass,
          useValue = _a.useValue,
          useExisting = _a.useExisting,
          useFactory = _a.useFactory,
          deps = _a.deps,
          multi = _a.multi;
      this.token = token;
      this.useClass = useClass;
      this.useValue = useValue;
      this.useExisting = useExisting;
      this.useFactory = useFactory;
      this.deps = deps || null;
      this.multi = !!multi;
    }
    return CompileProviderMetadata;
  }());
  var CompileFactoryMetadata = (function(_super) {
    __extends$7(CompileFactoryMetadata, _super);
    function CompileFactoryMetadata(_a) {
      var reference = _a.reference,
          name = _a.name,
          moduleUrl = _a.moduleUrl,
          prefix = _a.prefix,
          diDeps = _a.diDeps,
          value = _a.value;
      _super.call(this, {
        reference: reference,
        name: name,
        prefix: prefix,
        moduleUrl: moduleUrl,
        value: value
      });
      this.diDeps = _normalizeArray(diDeps);
    }
    return CompileFactoryMetadata;
  }(CompileIdentifierMetadata));
  var CompileTokenMetadata = (function() {
    function CompileTokenMetadata(_a) {
      var value = _a.value,
          identifier = _a.identifier,
          identifierIsInstance = _a.identifierIsInstance;
      this.value = value;
      this.identifier = identifier;
      this.identifierIsInstance = !!identifierIsInstance;
    }
    Object.defineProperty(CompileTokenMetadata.prototype, "reference", {
      get: function() {
        if (isPresent(this.identifier)) {
          return this.identifier.reference;
        } else {
          return this.value;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CompileTokenMetadata.prototype, "name", {
      get: function() {
        return isPresent(this.value) ? sanitizeIdentifier(this.value) : this.identifier.name;
      },
      enumerable: true,
      configurable: true
    });
    return CompileTokenMetadata;
  }());
  var CompileTypeMetadata = (function(_super) {
    __extends$7(CompileTypeMetadata, _super);
    function CompileTypeMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          reference = _b.reference,
          name = _b.name,
          moduleUrl = _b.moduleUrl,
          prefix = _b.prefix,
          isHost = _b.isHost,
          value = _b.value,
          diDeps = _b.diDeps,
          lifecycleHooks = _b.lifecycleHooks;
      _super.call(this, {
        reference: reference,
        name: name,
        moduleUrl: moduleUrl,
        prefix: prefix,
        value: value
      });
      this.isHost = !!isHost;
      this.diDeps = _normalizeArray(diDeps);
      this.lifecycleHooks = _normalizeArray(lifecycleHooks);
    }
    return CompileTypeMetadata;
  }(CompileIdentifierMetadata));
  var CompileQueryMetadata = (function() {
    function CompileQueryMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          selectors = _b.selectors,
          descendants = _b.descendants,
          first = _b.first,
          propertyName = _b.propertyName,
          read = _b.read;
      this.selectors = selectors;
      this.descendants = !!descendants;
      this.first = !!first;
      this.propertyName = propertyName;
      this.read = read;
    }
    return CompileQueryMetadata;
  }());
  var CompileStylesheetMetadata = (function() {
    function CompileStylesheetMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          moduleUrl = _b.moduleUrl,
          styles = _b.styles,
          styleUrls = _b.styleUrls;
      this.moduleUrl = moduleUrl;
      this.styles = _normalizeArray(styles);
      this.styleUrls = _normalizeArray(styleUrls);
    }
    return CompileStylesheetMetadata;
  }());
  var CompileTemplateMetadata = (function() {
    function CompileTemplateMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          encapsulation = _b.encapsulation,
          template = _b.template,
          templateUrl = _b.templateUrl,
          styles = _b.styles,
          styleUrls = _b.styleUrls,
          externalStylesheets = _b.externalStylesheets,
          animations = _b.animations,
          ngContentSelectors = _b.ngContentSelectors,
          interpolation = _b.interpolation;
      this.encapsulation = encapsulation;
      this.template = template;
      this.templateUrl = templateUrl;
      this.styles = _normalizeArray(styles);
      this.styleUrls = _normalizeArray(styleUrls);
      this.externalStylesheets = _normalizeArray(externalStylesheets);
      this.animations = animations ? ListWrapper.flatten(animations) : [];
      this.ngContentSelectors = ngContentSelectors || [];
      if (interpolation && interpolation.length != 2) {
        throw new Error("'interpolation' should have a start and an end symbol.");
      }
      this.interpolation = interpolation;
    }
    CompileTemplateMetadata.prototype.toSummary = function() {
      return {
        isSummary: true,
        animations: this.animations.map(function(anim) {
          return anim.name;
        }),
        ngContentSelectors: this.ngContentSelectors,
        encapsulation: this.encapsulation
      };
    };
    return CompileTemplateMetadata;
  }());
  var CompileDirectiveMetadata = (function() {
    function CompileDirectiveMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          type = _b.type,
          isComponent = _b.isComponent,
          selector = _b.selector,
          exportAs = _b.exportAs,
          changeDetection = _b.changeDetection,
          inputs = _b.inputs,
          outputs = _b.outputs,
          hostListeners = _b.hostListeners,
          hostProperties = _b.hostProperties,
          hostAttributes = _b.hostAttributes,
          providers = _b.providers,
          viewProviders = _b.viewProviders,
          queries = _b.queries,
          viewQueries = _b.viewQueries,
          entryComponents = _b.entryComponents,
          template = _b.template;
      this.type = type;
      this.isComponent = isComponent;
      this.selector = selector;
      this.exportAs = exportAs;
      this.changeDetection = changeDetection;
      this.inputs = inputs;
      this.outputs = outputs;
      this.hostListeners = hostListeners;
      this.hostProperties = hostProperties;
      this.hostAttributes = hostAttributes;
      this.providers = _normalizeArray(providers);
      this.viewProviders = _normalizeArray(viewProviders);
      this.queries = _normalizeArray(queries);
      this.viewQueries = _normalizeArray(viewQueries);
      this.entryComponents = _normalizeArray(entryComponents);
      this.template = template;
    }
    CompileDirectiveMetadata.create = function(_a) {
      var _b = _a === void 0 ? {} : _a,
          type = _b.type,
          isComponent = _b.isComponent,
          selector = _b.selector,
          exportAs = _b.exportAs,
          changeDetection = _b.changeDetection,
          inputs = _b.inputs,
          outputs = _b.outputs,
          host = _b.host,
          providers = _b.providers,
          viewProviders = _b.viewProviders,
          queries = _b.queries,
          viewQueries = _b.viewQueries,
          entryComponents = _b.entryComponents,
          template = _b.template;
      var hostListeners = {};
      var hostProperties = {};
      var hostAttributes = {};
      if (isPresent(host)) {
        Object.keys(host).forEach(function(key) {
          var value = host[key];
          var matches = key.match(HOST_REG_EXP);
          if (matches === null) {
            hostAttributes[key] = value;
          } else if (isPresent(matches[1])) {
            hostProperties[matches[1]] = value;
          } else if (isPresent(matches[2])) {
            hostListeners[matches[2]] = value;
          }
        });
      }
      var inputsMap = {};
      if (isPresent(inputs)) {
        inputs.forEach(function(bindConfig) {
          var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
          inputsMap[parts[0]] = parts[1];
        });
      }
      var outputsMap = {};
      if (isPresent(outputs)) {
        outputs.forEach(function(bindConfig) {
          var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
          outputsMap[parts[0]] = parts[1];
        });
      }
      return new CompileDirectiveMetadata({
        type: type,
        isComponent: !!isComponent,
        selector: selector,
        exportAs: exportAs,
        changeDetection: changeDetection,
        inputs: inputsMap,
        outputs: outputsMap,
        hostListeners: hostListeners,
        hostProperties: hostProperties,
        hostAttributes: hostAttributes,
        providers: providers,
        viewProviders: viewProviders,
        queries: queries,
        viewQueries: viewQueries,
        entryComponents: entryComponents,
        template: template
      });
    };
    Object.defineProperty(CompileDirectiveMetadata.prototype, "identifier", {
      get: function() {
        return this.type;
      },
      enumerable: true,
      configurable: true
    });
    CompileDirectiveMetadata.prototype.toSummary = function() {
      return {
        isSummary: true,
        type: this.type,
        isComponent: this.isComponent,
        selector: this.selector,
        exportAs: this.exportAs,
        inputs: this.inputs,
        outputs: this.outputs,
        hostListeners: this.hostListeners,
        hostProperties: this.hostProperties,
        hostAttributes: this.hostAttributes,
        providers: this.providers,
        viewProviders: this.viewProviders,
        queries: this.queries,
        entryComponents: this.entryComponents,
        changeDetection: this.changeDetection,
        template: this.template && this.template.toSummary()
      };
    };
    return CompileDirectiveMetadata;
  }());
  function createHostComponentMeta(compMeta) {
    var template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();
    return CompileDirectiveMetadata.create({
      type: new CompileTypeMetadata({
        reference: Object,
        name: compMeta.type.name + "_Host",
        moduleUrl: compMeta.type.moduleUrl,
        isHost: true
      }),
      template: new CompileTemplateMetadata({
        encapsulation: _angular_core.ViewEncapsulation.None,
        template: template,
        templateUrl: '',
        styles: [],
        styleUrls: [],
        ngContentSelectors: [],
        animations: []
      }),
      changeDetection: _angular_core.ChangeDetectionStrategy.Default,
      inputs: [],
      outputs: [],
      host: {},
      isComponent: true,
      selector: '*',
      providers: [],
      viewProviders: [],
      queries: [],
      viewQueries: []
    });
  }
  var CompilePipeMetadata = (function() {
    function CompilePipeMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          type = _b.type,
          name = _b.name,
          pure = _b.pure;
      this.type = type;
      this.name = name;
      this.pure = !!pure;
    }
    Object.defineProperty(CompilePipeMetadata.prototype, "identifier", {
      get: function() {
        return this.type;
      },
      enumerable: true,
      configurable: true
    });
    CompilePipeMetadata.prototype.toSummary = function() {
      return {
        isSummary: true,
        type: this.type,
        name: this.name,
        pure: this.pure
      };
    };
    return CompilePipeMetadata;
  }());
  var CompileNgModuleMetadata = (function() {
    function CompileNgModuleMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          type = _b.type,
          providers = _b.providers,
          declaredDirectives = _b.declaredDirectives,
          exportedDirectives = _b.exportedDirectives,
          declaredPipes = _b.declaredPipes,
          exportedPipes = _b.exportedPipes,
          entryComponents = _b.entryComponents,
          bootstrapComponents = _b.bootstrapComponents,
          importedModules = _b.importedModules,
          exportedModules = _b.exportedModules,
          schemas = _b.schemas,
          transitiveModule = _b.transitiveModule,
          id = _b.id;
      this.type = type;
      this.declaredDirectives = _normalizeArray(declaredDirectives);
      this.exportedDirectives = _normalizeArray(exportedDirectives);
      this.declaredPipes = _normalizeArray(declaredPipes);
      this.exportedPipes = _normalizeArray(exportedPipes);
      this.providers = _normalizeArray(providers);
      this.entryComponents = _normalizeArray(entryComponents);
      this.bootstrapComponents = _normalizeArray(bootstrapComponents);
      this.importedModules = _normalizeArray(importedModules);
      this.exportedModules = _normalizeArray(exportedModules);
      this.schemas = _normalizeArray(schemas);
      this.id = id;
      this.transitiveModule = transitiveModule;
    }
    Object.defineProperty(CompileNgModuleMetadata.prototype, "identifier", {
      get: function() {
        return this.type;
      },
      enumerable: true,
      configurable: true
    });
    CompileNgModuleMetadata.prototype.toSummary = function() {
      return {
        isSummary: true,
        type: this.type,
        entryComponents: this.entryComponents,
        providers: this.providers,
        importedModules: this.importedModules,
        exportedModules: this.exportedModules,
        exportedDirectives: this.exportedDirectives,
        exportedPipes: this.exportedPipes,
        directiveLoaders: this.transitiveModule.directiveLoaders
      };
    };
    CompileNgModuleMetadata.prototype.toInjectorSummary = function() {
      return {
        isSummary: true,
        type: this.type,
        entryComponents: this.entryComponents,
        providers: this.providers,
        importedModules: this.importedModules,
        exportedModules: this.exportedModules
      };
    };
    CompileNgModuleMetadata.prototype.toDirectiveSummary = function() {
      return {
        isSummary: true,
        type: this.type,
        exportedDirectives: this.exportedDirectives,
        exportedPipes: this.exportedPipes,
        exportedModules: this.exportedModules,
        directiveLoaders: this.transitiveModule.directiveLoaders
      };
    };
    return CompileNgModuleMetadata;
  }());
  var TransitiveCompileNgModuleMetadata = (function() {
    function TransitiveCompileNgModuleMetadata(modules, providers, entryComponents, directives, pipes, directiveLoaders) {
      var _this = this;
      this.modules = modules;
      this.providers = providers;
      this.entryComponents = entryComponents;
      this.directives = directives;
      this.pipes = pipes;
      this.directiveLoaders = directiveLoaders;
      this.directivesSet = new Set();
      this.pipesSet = new Set();
      directives.forEach(function(dir) {
        return _this.directivesSet.add(dir.reference);
      });
      pipes.forEach(function(pipe) {
        return _this.pipesSet.add(pipe.reference);
      });
    }
    return TransitiveCompileNgModuleMetadata;
  }());
  function removeIdentifierDuplicates(items) {
    var map = new Map();
    items.forEach(function(item) {
      if (!map.get(item.identifier.reference)) {
        map.set(item.identifier.reference, item);
      }
    });
    return Array.from(map.values());
  }
  function _normalizeArray(obj) {
    return obj || [];
  }
  function isStaticSymbol(value) {
    return typeof value === 'object' && value !== null && value['name'] && value['filePath'];
  }
  var ProviderMeta = (function() {
    function ProviderMeta(token, _a) {
      var useClass = _a.useClass,
          useValue = _a.useValue,
          useExisting = _a.useExisting,
          useFactory = _a.useFactory,
          deps = _a.deps,
          multi = _a.multi;
      this.token = token;
      this.useClass = useClass;
      this.useValue = useValue;
      this.useExisting = useExisting;
      this.useFactory = useFactory;
      this.dependencies = deps;
      this.multi = !!multi;
    }
    return ProviderMeta;
  }());
  var isDefaultChangeDetectionStrategy = _angular_core.__core_private__.isDefaultChangeDetectionStrategy;
  var ChangeDetectorStatus = _angular_core.__core_private__.ChangeDetectorStatus;
  var LifecycleHooks = _angular_core.__core_private__.LifecycleHooks;
  var LIFECYCLE_HOOKS_VALUES = _angular_core.__core_private__.LIFECYCLE_HOOKS_VALUES;
  var ReflectorReader = _angular_core.__core_private__.ReflectorReader;
  var ViewContainer = _angular_core.__core_private__.ViewContainer;
  var CodegenComponentFactoryResolver = _angular_core.__core_private__.CodegenComponentFactoryResolver;
  var ComponentRef_ = _angular_core.__core_private__.ComponentRef_;
  var AppView = _angular_core.__core_private__.AppView;
  var DebugAppView = _angular_core.__core_private__.DebugAppView;
  var NgModuleInjector = _angular_core.__core_private__.NgModuleInjector;
  var registerModuleFactory = _angular_core.__core_private__.registerModuleFactory;
  var ViewType = _angular_core.__core_private__.ViewType;
  var view_utils = _angular_core.__core_private__.view_utils;
  var DebugContext = _angular_core.__core_private__.DebugContext;
  var StaticNodeDebugInfo = _angular_core.__core_private__.StaticNodeDebugInfo;
  var devModeEqual = _angular_core.__core_private__.devModeEqual;
  var UNINITIALIZED = _angular_core.__core_private__.UNINITIALIZED;
  var ValueUnwrapper = _angular_core.__core_private__.ValueUnwrapper;
  var TemplateRef_ = _angular_core.__core_private__.TemplateRef_;
  var Console = _angular_core.__core_private__.Console;
  var reflector = _angular_core.__core_private__.reflector;
  var Reflector = _angular_core.__core_private__.Reflector;
  var ReflectionCapabilities = _angular_core.__core_private__.ReflectionCapabilities;
  var NoOpAnimationPlayer = _angular_core.__core_private__.NoOpAnimationPlayer;
  var AnimationSequencePlayer = _angular_core.__core_private__.AnimationSequencePlayer;
  var AnimationGroupPlayer = _angular_core.__core_private__.AnimationGroupPlayer;
  var AnimationKeyframe = _angular_core.__core_private__.AnimationKeyframe;
  var AnimationStyles = _angular_core.__core_private__.AnimationStyles;
  var ANY_STATE = _angular_core.__core_private__.ANY_STATE;
  var DEFAULT_STATE = _angular_core.__core_private__.DEFAULT_STATE;
  var EMPTY_ANIMATION_STATE = _angular_core.__core_private__.EMPTY_STATE;
  var FILL_STYLE_FLAG = _angular_core.__core_private__.FILL_STYLE_FLAG;
  var prepareFinalAnimationStyles = _angular_core.__core_private__.prepareFinalAnimationStyles;
  var balanceAnimationKeyframes = _angular_core.__core_private__.balanceAnimationKeyframes;
  var clearStyles = _angular_core.__core_private__.clearStyles;
  var collectAndResolveStyles = _angular_core.__core_private__.collectAndResolveStyles;
  var renderStyles = _angular_core.__core_private__.renderStyles;
  var ComponentStillLoadingError = _angular_core.__core_private__.ComponentStillLoadingError;
  var AnimationTransition = _angular_core.__core_private__.AnimationTransition;
  var APP_VIEW_MODULE_URL = assetUrl('core', 'linker/view');
  var VIEW_UTILS_MODULE_URL = assetUrl('core', 'linker/view_utils');
  var CD_MODULE_URL = assetUrl('core', 'change_detection/change_detection');
  var ANIMATION_STYLE_UTIL_ASSET_URL = assetUrl('core', 'animation/animation_style_util');
  var Identifiers = (function() {
    function Identifiers() {}
    Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {
      name: 'ANALYZE_FOR_ENTRY_COMPONENTS',
      moduleUrl: assetUrl('core', 'metadata/di'),
      runtime: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS
    };
    Identifiers.ViewUtils = {
      name: 'ViewUtils',
      moduleUrl: assetUrl('core', 'linker/view_utils'),
      runtime: view_utils.ViewUtils
    };
    Identifiers.AppView = {
      name: 'AppView',
      moduleUrl: APP_VIEW_MODULE_URL,
      runtime: AppView
    };
    Identifiers.DebugAppView = {
      name: 'DebugAppView',
      moduleUrl: APP_VIEW_MODULE_URL,
      runtime: DebugAppView
    };
    Identifiers.ViewContainer = {
      name: 'ViewContainer',
      moduleUrl: assetUrl('core', 'linker/view_container'),
      runtime: ViewContainer
    };
    Identifiers.ElementRef = {
      name: 'ElementRef',
      moduleUrl: assetUrl('core', 'linker/element_ref'),
      runtime: _angular_core.ElementRef
    };
    Identifiers.ViewContainerRef = {
      name: 'ViewContainerRef',
      moduleUrl: assetUrl('core', 'linker/view_container_ref'),
      runtime: _angular_core.ViewContainerRef
    };
    Identifiers.ChangeDetectorRef = {
      name: 'ChangeDetectorRef',
      moduleUrl: assetUrl('core', 'change_detection/change_detector_ref'),
      runtime: _angular_core.ChangeDetectorRef
    };
    Identifiers.RenderComponentType = {
      name: 'RenderComponentType',
      moduleUrl: assetUrl('core', 'render/api'),
      runtime: _angular_core.RenderComponentType
    };
    Identifiers.QueryList = {
      name: 'QueryList',
      moduleUrl: assetUrl('core', 'linker/query_list'),
      runtime: _angular_core.QueryList
    };
    Identifiers.TemplateRef = {
      name: 'TemplateRef',
      moduleUrl: assetUrl('core', 'linker/template_ref'),
      runtime: _angular_core.TemplateRef
    };
    Identifiers.TemplateRef_ = {
      name: 'TemplateRef_',
      moduleUrl: assetUrl('core', 'linker/template_ref'),
      runtime: TemplateRef_
    };
    Identifiers.CodegenComponentFactoryResolver = {
      name: 'CodegenComponentFactoryResolver',
      moduleUrl: assetUrl('core', 'linker/component_factory_resolver'),
      runtime: CodegenComponentFactoryResolver
    };
    Identifiers.ComponentFactoryResolver = {
      name: 'ComponentFactoryResolver',
      moduleUrl: assetUrl('core', 'linker/component_factory_resolver'),
      runtime: _angular_core.ComponentFactoryResolver
    };
    Identifiers.ComponentFactory = {
      name: 'ComponentFactory',
      runtime: _angular_core.ComponentFactory,
      moduleUrl: assetUrl('core', 'linker/component_factory')
    };
    Identifiers.ComponentRef_ = {
      name: 'ComponentRef_',
      runtime: ComponentRef_,
      moduleUrl: assetUrl('core', 'linker/component_factory')
    };
    Identifiers.ComponentRef = {
      name: 'ComponentRef',
      runtime: _angular_core.ComponentRef,
      moduleUrl: assetUrl('core', 'linker/component_factory')
    };
    Identifiers.NgModuleFactory = {
      name: 'NgModuleFactory',
      runtime: _angular_core.NgModuleFactory,
      moduleUrl: assetUrl('core', 'linker/ng_module_factory')
    };
    Identifiers.NgModuleInjector = {
      name: 'NgModuleInjector',
      runtime: NgModuleInjector,
      moduleUrl: assetUrl('core', 'linker/ng_module_factory')
    };
    Identifiers.RegisterModuleFactoryFn = {
      name: 'registerModuleFactory',
      runtime: registerModuleFactory,
      moduleUrl: assetUrl('core', 'linker/ng_module_factory_loader')
    };
    Identifiers.ValueUnwrapper = {
      name: 'ValueUnwrapper',
      moduleUrl: CD_MODULE_URL,
      runtime: ValueUnwrapper
    };
    Identifiers.Injector = {
      name: 'Injector',
      moduleUrl: assetUrl('core', 'di/injector'),
      runtime: _angular_core.Injector
    };
    Identifiers.ViewEncapsulation = {
      name: 'ViewEncapsulation',
      moduleUrl: assetUrl('core', 'metadata/view'),
      runtime: _angular_core.ViewEncapsulation
    };
    Identifiers.ViewType = {
      name: 'ViewType',
      moduleUrl: assetUrl('core', 'linker/view_type'),
      runtime: ViewType
    };
    Identifiers.ChangeDetectionStrategy = {
      name: 'ChangeDetectionStrategy',
      moduleUrl: CD_MODULE_URL,
      runtime: _angular_core.ChangeDetectionStrategy
    };
    Identifiers.StaticNodeDebugInfo = {
      name: 'StaticNodeDebugInfo',
      moduleUrl: assetUrl('core', 'linker/debug_context'),
      runtime: StaticNodeDebugInfo
    };
    Identifiers.DebugContext = {
      name: 'DebugContext',
      moduleUrl: assetUrl('core', 'linker/debug_context'),
      runtime: DebugContext
    };
    Identifiers.Renderer = {
      name: 'Renderer',
      moduleUrl: assetUrl('core', 'render/api'),
      runtime: _angular_core.Renderer
    };
    Identifiers.SimpleChange = {
      name: 'SimpleChange',
      moduleUrl: CD_MODULE_URL,
      runtime: _angular_core.SimpleChange
    };
    Identifiers.UNINITIALIZED = {
      name: 'UNINITIALIZED',
      moduleUrl: CD_MODULE_URL,
      runtime: UNINITIALIZED
    };
    Identifiers.ChangeDetectorStatus = {
      name: 'ChangeDetectorStatus',
      moduleUrl: CD_MODULE_URL,
      runtime: ChangeDetectorStatus
    };
    Identifiers.checkBinding = {
      name: 'checkBinding',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.checkBinding
    };
    Identifiers.devModeEqual = {
      name: 'devModeEqual',
      moduleUrl: CD_MODULE_URL,
      runtime: devModeEqual
    };
    Identifiers.inlineInterpolate = {
      name: 'inlineInterpolate',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.inlineInterpolate
    };
    Identifiers.interpolate = {
      name: 'interpolate',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.interpolate
    };
    Identifiers.castByValue = {
      name: 'castByValue',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.castByValue
    };
    Identifiers.EMPTY_ARRAY = {
      name: 'EMPTY_ARRAY',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.EMPTY_ARRAY
    };
    Identifiers.EMPTY_MAP = {
      name: 'EMPTY_MAP',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.EMPTY_MAP
    };
    Identifiers.createRenderElement = {
      name: 'createRenderElement',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.createRenderElement
    };
    Identifiers.selectOrCreateRenderHostElement = {
      name: 'selectOrCreateRenderHostElement',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.selectOrCreateRenderHostElement
    };
    Identifiers.pureProxies = [null, {
      name: 'pureProxy1',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.pureProxy1
    }, {
      name: 'pureProxy2',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.pureProxy2
    }, {
      name: 'pureProxy3',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.pureProxy3
    }, {
      name: 'pureProxy4',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.pureProxy4
    }, {
      name: 'pureProxy5',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.pureProxy5
    }, {
      name: 'pureProxy6',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.pureProxy6
    }, {
      name: 'pureProxy7',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.pureProxy7
    }, {
      name: 'pureProxy8',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.pureProxy8
    }, {
      name: 'pureProxy9',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.pureProxy9
    }, {
      name: 'pureProxy10',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.pureProxy10
    }];
    Identifiers.SecurityContext = {
      name: 'SecurityContext',
      moduleUrl: assetUrl('core', 'security'),
      runtime: _angular_core.SecurityContext
    };
    Identifiers.AnimationKeyframe = {
      name: 'AnimationKeyframe',
      moduleUrl: assetUrl('core', 'animation/animation_keyframe'),
      runtime: AnimationKeyframe
    };
    Identifiers.AnimationStyles = {
      name: 'AnimationStyles',
      moduleUrl: assetUrl('core', 'animation/animation_styles'),
      runtime: AnimationStyles
    };
    Identifiers.NoOpAnimationPlayer = {
      name: 'NoOpAnimationPlayer',
      moduleUrl: assetUrl('core', 'animation/animation_player'),
      runtime: NoOpAnimationPlayer
    };
    Identifiers.AnimationGroupPlayer = {
      name: 'AnimationGroupPlayer',
      moduleUrl: assetUrl('core', 'animation/animation_group_player'),
      runtime: AnimationGroupPlayer
    };
    Identifiers.AnimationSequencePlayer = {
      name: 'AnimationSequencePlayer',
      moduleUrl: assetUrl('core', 'animation/animation_sequence_player'),
      runtime: AnimationSequencePlayer
    };
    Identifiers.prepareFinalAnimationStyles = {
      name: 'prepareFinalAnimationStyles',
      moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
      runtime: prepareFinalAnimationStyles
    };
    Identifiers.balanceAnimationKeyframes = {
      name: 'balanceAnimationKeyframes',
      moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
      runtime: balanceAnimationKeyframes
    };
    Identifiers.clearStyles = {
      name: 'clearStyles',
      moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
      runtime: clearStyles
    };
    Identifiers.renderStyles = {
      name: 'renderStyles',
      moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
      runtime: renderStyles
    };
    Identifiers.collectAndResolveStyles = {
      name: 'collectAndResolveStyles',
      moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
      runtime: collectAndResolveStyles
    };
    Identifiers.LOCALE_ID = {
      name: 'LOCALE_ID',
      moduleUrl: assetUrl('core', 'i18n/tokens'),
      runtime: _angular_core.LOCALE_ID
    };
    Identifiers.TRANSLATIONS_FORMAT = {
      name: 'TRANSLATIONS_FORMAT',
      moduleUrl: assetUrl('core', 'i18n/tokens'),
      runtime: _angular_core.TRANSLATIONS_FORMAT
    };
    Identifiers.setBindingDebugInfo = {
      name: 'setBindingDebugInfo',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.setBindingDebugInfo
    };
    Identifiers.setBindingDebugInfoForChanges = {
      name: 'setBindingDebugInfoForChanges',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.setBindingDebugInfoForChanges
    };
    Identifiers.AnimationTransition = {
      name: 'AnimationTransition',
      moduleUrl: assetUrl('core', 'animation/animation_transition'),
      runtime: AnimationTransition
    };
    Identifiers.InlineArray = {
      name: 'InlineArray',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: null
    };
    Identifiers.inlineArrays = [{
      name: 'InlineArray2',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.InlineArray2
    }, {
      name: 'InlineArray2',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.InlineArray2
    }, {
      name: 'InlineArray4',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.InlineArray4
    }, {
      name: 'InlineArray8',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.InlineArray8
    }, {
      name: 'InlineArray16',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.InlineArray16
    }];
    Identifiers.EMPTY_INLINE_ARRAY = {
      name: 'EMPTY_INLINE_ARRAY',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.EMPTY_INLINE_ARRAY
    };
    Identifiers.InlineArrayDynamic = {
      name: 'InlineArrayDynamic',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.InlineArrayDynamic
    };
    Identifiers.subscribeToRenderElement = {
      name: 'subscribeToRenderElement',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.subscribeToRenderElement
    };
    Identifiers.createRenderComponentType = {
      name: 'createRenderComponentType',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.createRenderComponentType
    };
    Identifiers.noop = {
      name: 'noop',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.noop
    };
    return Identifiers;
  }());
  function assetUrl(pkg, path, type) {
    if (path === void 0) {
      path = null;
    }
    if (type === void 0) {
      type = 'src';
    }
    if (path == null) {
      return "asset:@angular/lib/" + pkg + "/index";
    } else {
      return "asset:@angular/lib/" + pkg + "/src/" + path;
    }
  }
  function resolveIdentifier(identifier) {
    return new CompileIdentifierMetadata({
      name: identifier.name,
      moduleUrl: identifier.moduleUrl,
      reference: reflector.resolveIdentifier(identifier.name, identifier.moduleUrl, identifier.runtime)
    });
  }
  function identifierToken(identifier) {
    return new CompileTokenMetadata({identifier: identifier});
  }
  function resolveIdentifierToken(identifier) {
    return identifierToken(resolveIdentifier(identifier));
  }
  function resolveEnumIdentifier(enumType, name) {
    var resolvedEnum = reflector.resolveEnum(enumType.reference, name);
    return new CompileIdentifierMetadata({
      name: enumType.name + "." + name,
      moduleUrl: enumType.moduleUrl,
      reference: resolvedEnum
    });
  }
  var __extends$8 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HtmlParser = (function(_super) {
    __extends$8(HtmlParser, _super);
    function HtmlParser() {
      _super.call(this, getHtmlTagDefinition);
    }
    HtmlParser.prototype.parse = function(source, url, parseExpansionForms, interpolationConfig) {
      if (parseExpansionForms === void 0) {
        parseExpansionForms = false;
      }
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      return _super.prototype.parse.call(this, source, url, parseExpansionForms, interpolationConfig);
    };
    HtmlParser.decorators = [{type: _angular_core.Injectable}];
    HtmlParser.ctorParameters = [];
    return HtmlParser;
  }(Parser$1));
  var __extends$9 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];
  function expandNodes(nodes) {
    var expander = new _Expander();
    return new ExpansionResult(visitAll(expander, nodes), expander.isExpanded, expander.errors);
  }
  var ExpansionResult = (function() {
    function ExpansionResult(nodes, expanded, errors) {
      this.nodes = nodes;
      this.expanded = expanded;
      this.errors = errors;
    }
    return ExpansionResult;
  }());
  var ExpansionError = (function(_super) {
    __extends$9(ExpansionError, _super);
    function ExpansionError(span, errorMsg) {
      _super.call(this, span, errorMsg);
    }
    return ExpansionError;
  }(ParseError));
  var _Expander = (function() {
    function _Expander() {
      this.isExpanded = false;
      this.errors = [];
    }
    _Expander.prototype.visitElement = function(element, context) {
      return new Element(element.name, element.attrs, visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
    };
    _Expander.prototype.visitAttribute = function(attribute, context) {
      return attribute;
    };
    _Expander.prototype.visitText = function(text, context) {
      return text;
    };
    _Expander.prototype.visitComment = function(comment, context) {
      return comment;
    };
    _Expander.prototype.visitExpansion = function(icu, context) {
      this.isExpanded = true;
      return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) : _expandDefaultForm(icu, this.errors);
    };
    _Expander.prototype.visitExpansionCase = function(icuCase, context) {
      throw new Error('Should not be reached');
    };
    return _Expander;
  }());
  function _expandPluralForm(ast, errors) {
    var children = ast.cases.map(function(c) {
      if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\d+$/)) {
        errors.push(new ExpansionError(c.valueSourceSpan, "Plural cases should be \"=<number>\" or one of " + PLURAL_CASES.join(", ")));
      }
      var expansionResult = expandNodes(c.expression);
      errors.push.apply(errors, expansionResult.errors);
      return new Element("template", [new Attribute$1('ngPluralCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
    });
    var switchAttr = new Attribute$1('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);
    return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
  }
  function _expandDefaultForm(ast, errors) {
    var children = ast.cases.map(function(c) {
      var expansionResult = expandNodes(c.expression);
      errors.push.apply(errors, expansionResult.errors);
      if (c.value === 'other') {
        return new Element("template", [new Attribute$1('ngSwitchDefault', '', c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
      }
      return new Element("template", [new Attribute$1('ngSwitchCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
    });
    var switchAttr = new Attribute$1('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);
    return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
  }
  var __extends$10 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ProviderError = (function(_super) {
    __extends$10(ProviderError, _super);
    function ProviderError(message, span) {
      _super.call(this, span, message);
    }
    return ProviderError;
  }(ParseError));
  var ProviderViewContext = (function() {
    function ProviderViewContext(component, sourceSpan) {
      var _this = this;
      this.component = component;
      this.sourceSpan = sourceSpan;
      this.errors = [];
      this.viewQueries = _getViewQueries(component);
      this.viewProviders = new Map();
      _normalizeProviders(component.viewProviders, sourceSpan, this.errors).forEach(function(provider) {
        if (isBlank(_this.viewProviders.get(provider.token.reference))) {
          _this.viewProviders.set(provider.token.reference, true);
        }
      });
    }
    return ProviderViewContext;
  }());
  var ProviderElementContext = (function() {
    function ProviderElementContext(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, _sourceSpan) {
      var _this = this;
      this.viewContext = viewContext;
      this._parent = _parent;
      this._isViewRoot = _isViewRoot;
      this._directiveAsts = _directiveAsts;
      this._sourceSpan = _sourceSpan;
      this._transformedProviders = new Map();
      this._seenProviders = new Map();
      this._hasViewContainer = false;
      this._attrs = {};
      attrs.forEach(function(attrAst) {
        return _this._attrs[attrAst.name] = attrAst.value;
      });
      var directivesMeta = _directiveAsts.map(function(directiveAst) {
        return directiveAst.directive;
      });
      this._allProviders = _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);
      this._contentQueries = _getContentQueries(directivesMeta);
      var queriedTokens = new Map();
      Array.from(this._allProviders.values()).forEach(function(provider) {
        _this._addQueryReadsTo(provider.token, queriedTokens);
      });
      refs.forEach(function(refAst) {
        _this._addQueryReadsTo(new CompileTokenMetadata({value: refAst.name}), queriedTokens);
      });
      if (isPresent(queriedTokens.get(resolveIdentifierToken(Identifiers.ViewContainerRef).reference))) {
        this._hasViewContainer = true;
      }
      Array.from(this._allProviders.values()).forEach(function(provider) {
        var eager = provider.eager || isPresent(queriedTokens.get(provider.token.reference));
        if (eager) {
          _this._getOrCreateLocalProvider(provider.providerType, provider.token, true);
        }
      });
    }
    ProviderElementContext.prototype.afterElement = function() {
      var _this = this;
      Array.from(this._allProviders.values()).forEach(function(provider) {
        _this._getOrCreateLocalProvider(provider.providerType, provider.token, false);
      });
    };
    Object.defineProperty(ProviderElementContext.prototype, "transformProviders", {
      get: function() {
        return Array.from(this._transformedProviders.values());
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ProviderElementContext.prototype, "transformedDirectiveAsts", {
      get: function() {
        var sortedProviderTypes = this.transformProviders.map(function(provider) {
          return provider.token.identifier;
        });
        var sortedDirectives = this._directiveAsts.slice();
        sortedDirectives.sort(function(dir1, dir2) {
          return sortedProviderTypes.indexOf(dir1.directive.type) - sortedProviderTypes.indexOf(dir2.directive.type);
        });
        return sortedDirectives;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ProviderElementContext.prototype, "transformedHasViewContainer", {
      get: function() {
        return this._hasViewContainer;
      },
      enumerable: true,
      configurable: true
    });
    ProviderElementContext.prototype._addQueryReadsTo = function(token, queryReadTokens) {
      this._getQueriesFor(token).forEach(function(query) {
        var queryReadToken = query.read || token;
        if (isBlank(queryReadTokens.get(queryReadToken.reference))) {
          queryReadTokens.set(queryReadToken.reference, true);
        }
      });
    };
    ProviderElementContext.prototype._getQueriesFor = function(token) {
      var result = [];
      var currentEl = this;
      var distance = 0;
      var queries;
      while (currentEl !== null) {
        queries = currentEl._contentQueries.get(token.reference);
        if (isPresent(queries)) {
          result.push.apply(result, queries.filter(function(query) {
            return query.descendants || distance <= 1;
          }));
        }
        if (currentEl._directiveAsts.length > 0) {
          distance++;
        }
        currentEl = currentEl._parent;
      }
      queries = this.viewContext.viewQueries.get(token.reference);
      if (isPresent(queries)) {
        result.push.apply(result, queries);
      }
      return result;
    };
    ProviderElementContext.prototype._getOrCreateLocalProvider = function(requestingProviderType, token, eager) {
      var _this = this;
      var resolvedProvider = this._allProviders.get(token.reference);
      if (!resolvedProvider || ((requestingProviderType === exports.ProviderAstType.Directive || requestingProviderType === exports.ProviderAstType.PublicService) && resolvedProvider.providerType === exports.ProviderAstType.PrivateService) || ((requestingProviderType === exports.ProviderAstType.PrivateService || requestingProviderType === exports.ProviderAstType.PublicService) && resolvedProvider.providerType === exports.ProviderAstType.Builtin)) {
        return null;
      }
      var transformedProviderAst = this._transformedProviders.get(token.reference);
      if (isPresent(transformedProviderAst)) {
        return transformedProviderAst;
      }
      if (isPresent(this._seenProviders.get(token.reference))) {
        this.viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + token.name, this._sourceSpan));
        return null;
      }
      this._seenProviders.set(token.reference, true);
      var transformedProviders = resolvedProvider.providers.map(function(provider) {
        var transformedUseValue = provider.useValue;
        var transformedUseExisting = provider.useExisting;
        var transformedDeps;
        if (isPresent(provider.useExisting)) {
          var existingDiDep = _this._getDependency(resolvedProvider.providerType, new CompileDiDependencyMetadata({token: provider.useExisting}), eager);
          if (isPresent(existingDiDep.token)) {
            transformedUseExisting = existingDiDep.token;
          } else {
            transformedUseExisting = null;
            transformedUseValue = existingDiDep.value;
          }
        } else if (isPresent(provider.useFactory)) {
          var deps = provider.deps || provider.useFactory.diDeps;
          transformedDeps = deps.map(function(dep) {
            return _this._getDependency(resolvedProvider.providerType, dep, eager);
          });
        } else if (isPresent(provider.useClass)) {
          var deps = provider.deps || provider.useClass.diDeps;
          transformedDeps = deps.map(function(dep) {
            return _this._getDependency(resolvedProvider.providerType, dep, eager);
          });
        }
        return _transformProvider(provider, {
          useExisting: transformedUseExisting,
          useValue: transformedUseValue,
          deps: transformedDeps
        });
      });
      transformedProviderAst = _transformProviderAst(resolvedProvider, {
        eager: eager,
        providers: transformedProviders
      });
      this._transformedProviders.set(token.reference, transformedProviderAst);
      return transformedProviderAst;
    };
    ProviderElementContext.prototype._getLocalDependency = function(requestingProviderType, dep, eager) {
      if (eager === void 0) {
        eager = null;
      }
      if (dep.isAttribute) {
        var attrValue = this._attrs[dep.token.value];
        return new CompileDiDependencyMetadata({
          isValue: true,
          value: attrValue == null ? null : attrValue
        });
      }
      if (isPresent(dep.token)) {
        if ((requestingProviderType === exports.ProviderAstType.Directive || requestingProviderType === exports.ProviderAstType.Component)) {
          if (dep.token.reference === resolveIdentifierToken(Identifiers.Renderer).reference || dep.token.reference === resolveIdentifierToken(Identifiers.ElementRef).reference || dep.token.reference === resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference || dep.token.reference === resolveIdentifierToken(Identifiers.TemplateRef).reference) {
            return dep;
          }
          if (dep.token.reference === resolveIdentifierToken(Identifiers.ViewContainerRef).reference) {
            this._hasViewContainer = true;
          }
        }
        if (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference) {
          return dep;
        }
        if (isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {
          return dep;
        }
      }
      return null;
    };
    ProviderElementContext.prototype._getDependency = function(requestingProviderType, dep, eager) {
      if (eager === void 0) {
        eager = null;
      }
      var currElement = this;
      var currEager = eager;
      var result = null;
      if (!dep.isSkipSelf) {
        result = this._getLocalDependency(requestingProviderType, dep, eager);
      }
      if (dep.isSelf) {
        if (!result && dep.isOptional) {
          result = new CompileDiDependencyMetadata({
            isValue: true,
            value: null
          });
        }
      } else {
        while (!result && isPresent(currElement._parent)) {
          var prevElement = currElement;
          currElement = currElement._parent;
          if (prevElement._isViewRoot) {
            currEager = false;
          }
          result = currElement._getLocalDependency(exports.ProviderAstType.PublicService, dep, currEager);
        }
        if (!result) {
          if (!dep.isHost || this.viewContext.component.type.isHost || this.viewContext.component.type.reference === dep.token.reference || isPresent(this.viewContext.viewProviders.get(dep.token.reference))) {
            result = dep;
          } else {
            result = dep.isOptional ? result = new CompileDiDependencyMetadata({
              isValue: true,
              value: null
            }) : null;
          }
        }
      }
      if (!result) {
        this.viewContext.errors.push(new ProviderError("No provider for " + dep.token.name, this._sourceSpan));
      }
      return result;
    };
    return ProviderElementContext;
  }());
  var NgModuleProviderAnalyzer = (function() {
    function NgModuleProviderAnalyzer(ngModule, extraProviders, sourceSpan) {
      var _this = this;
      this._transformedProviders = new Map();
      this._seenProviders = new Map();
      this._errors = [];
      this._allProviders = new Map();
      var ngModuleTypes = ngModule.transitiveModule.modules.map(function(moduleMeta) {
        return moduleMeta.type;
      });
      ngModuleTypes.forEach(function(ngModuleType) {
        var ngModuleProvider = new CompileProviderMetadata({
          token: new CompileTokenMetadata({identifier: ngModuleType}),
          useClass: ngModuleType
        });
        _resolveProviders([ngModuleProvider], exports.ProviderAstType.PublicService, true, sourceSpan, _this._errors, _this._allProviders);
      });
      _resolveProviders(_normalizeProviders(ngModule.transitiveModule.providers.concat(extraProviders), sourceSpan, this._errors), exports.ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);
    }
    NgModuleProviderAnalyzer.prototype.parse = function() {
      var _this = this;
      Array.from(this._allProviders.values()).forEach(function(provider) {
        _this._getOrCreateLocalProvider(provider.token, provider.eager);
      });
      if (this._errors.length > 0) {
        var errorString = this._errors.join('\n');
        throw new Error("Provider parse errors:\n" + errorString);
      }
      return Array.from(this._transformedProviders.values());
    };
    NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = function(token, eager) {
      var _this = this;
      var resolvedProvider = this._allProviders.get(token.reference);
      if (!resolvedProvider) {
        return null;
      }
      var transformedProviderAst = this._transformedProviders.get(token.reference);
      if (isPresent(transformedProviderAst)) {
        return transformedProviderAst;
      }
      if (isPresent(this._seenProviders.get(token.reference))) {
        this._errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + token.name, resolvedProvider.sourceSpan));
        return null;
      }
      this._seenProviders.set(token.reference, true);
      var transformedProviders = resolvedProvider.providers.map(function(provider) {
        var transformedUseValue = provider.useValue;
        var transformedUseExisting = provider.useExisting;
        var transformedDeps;
        if (isPresent(provider.useExisting)) {
          var existingDiDep = _this._getDependency(new CompileDiDependencyMetadata({token: provider.useExisting}), eager, resolvedProvider.sourceSpan);
          if (isPresent(existingDiDep.token)) {
            transformedUseExisting = existingDiDep.token;
          } else {
            transformedUseExisting = null;
            transformedUseValue = existingDiDep.value;
          }
        } else if (isPresent(provider.useFactory)) {
          var deps = provider.deps || provider.useFactory.diDeps;
          transformedDeps = deps.map(function(dep) {
            return _this._getDependency(dep, eager, resolvedProvider.sourceSpan);
          });
        } else if (isPresent(provider.useClass)) {
          var deps = provider.deps || provider.useClass.diDeps;
          transformedDeps = deps.map(function(dep) {
            return _this._getDependency(dep, eager, resolvedProvider.sourceSpan);
          });
        }
        return _transformProvider(provider, {
          useExisting: transformedUseExisting,
          useValue: transformedUseValue,
          deps: transformedDeps
        });
      });
      transformedProviderAst = _transformProviderAst(resolvedProvider, {
        eager: eager,
        providers: transformedProviders
      });
      this._transformedProviders.set(token.reference, transformedProviderAst);
      return transformedProviderAst;
    };
    NgModuleProviderAnalyzer.prototype._getDependency = function(dep, eager, requestorSourceSpan) {
      if (eager === void 0) {
        eager = null;
      }
      var foundLocal = false;
      if (!dep.isSkipSelf && isPresent(dep.token)) {
        if (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference || dep.token.reference === resolveIdentifierToken(Identifiers.ComponentFactoryResolver).reference) {
          foundLocal = true;
        } else if (isPresent(this._getOrCreateLocalProvider(dep.token, eager))) {
          foundLocal = true;
        }
      }
      var result = dep;
      if (dep.isSelf && !foundLocal) {
        if (dep.isOptional) {
          result = new CompileDiDependencyMetadata({
            isValue: true,
            value: null
          });
        } else {
          this._errors.push(new ProviderError("No provider for " + dep.token.name, requestorSourceSpan));
        }
      }
      return result;
    };
    return NgModuleProviderAnalyzer;
  }());
  function _transformProvider(provider, _a) {
    var useExisting = _a.useExisting,
        useValue = _a.useValue,
        deps = _a.deps;
    return new CompileProviderMetadata({
      token: provider.token,
      useClass: provider.useClass,
      useExisting: useExisting,
      useFactory: provider.useFactory,
      useValue: useValue,
      deps: deps,
      multi: provider.multi
    });
  }
  function _transformProviderAst(provider, _a) {
    var eager = _a.eager,
        providers = _a.providers;
    return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan);
  }
  function _normalizeProviders(providers, sourceSpan, targetErrors, targetProviders) {
    if (targetProviders === void 0) {
      targetProviders = null;
    }
    if (!targetProviders) {
      targetProviders = [];
    }
    if (isPresent(providers)) {
      providers.forEach(function(provider) {
        if (Array.isArray(provider)) {
          _normalizeProviders(provider, sourceSpan, targetErrors, targetProviders);
        } else {
          var normalizeProvider = void 0;
          if (provider instanceof CompileProviderMetadata) {
            normalizeProvider = provider;
          } else if (provider instanceof CompileTypeMetadata) {
            normalizeProvider = new CompileProviderMetadata({
              token: new CompileTokenMetadata({identifier: provider}),
              useClass: provider
            });
          } else {
            targetErrors.push(new ProviderError("Unknown provider type " + provider, sourceSpan));
          }
          if (isPresent(normalizeProvider)) {
            targetProviders.push(normalizeProvider);
          }
        }
      });
    }
    return targetProviders;
  }
  function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
    var providersByToken = new Map();
    directives.forEach(function(directive) {
      var dirProvider = new CompileProviderMetadata({
        token: new CompileTokenMetadata({identifier: directive.type}),
        useClass: directive.type
      });
      _resolveProviders([dirProvider], directive.isComponent ? exports.ProviderAstType.Component : exports.ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken);
    });
    var directivesWithComponentFirst = directives.filter(function(dir) {
      return dir.isComponent;
    }).concat(directives.filter(function(dir) {
      return !dir.isComponent;
    }));
    directivesWithComponentFirst.forEach(function(directive) {
      _resolveProviders(_normalizeProviders(directive.providers, sourceSpan, targetErrors), exports.ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);
      _resolveProviders(_normalizeProviders(directive.viewProviders, sourceSpan, targetErrors), exports.ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);
    });
    return providersByToken;
  }
  function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {
    providers.forEach(function(provider) {
      var resolvedProvider = targetProvidersByToken.get(provider.token.reference);
      if (isPresent(resolvedProvider) && resolvedProvider.multiProvider !== provider.multi) {
        targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token " + resolvedProvider.token.name, sourceSpan));
      }
      if (!resolvedProvider) {
        var lifecycleHooks = provider.token.identifier && provider.token.identifier instanceof CompileTypeMetadata ? provider.token.identifier.lifecycleHooks : [];
        resolvedProvider = new ProviderAst(provider.token, provider.multi, eager || lifecycleHooks.length > 0, [provider], providerType, lifecycleHooks, sourceSpan);
        targetProvidersByToken.set(provider.token.reference, resolvedProvider);
      } else {
        if (!provider.multi) {
          resolvedProvider.providers.length = 0;
        }
        resolvedProvider.providers.push(provider);
      }
    });
  }
  function _getViewQueries(component) {
    var viewQueries = new Map();
    if (isPresent(component.viewQueries)) {
      component.viewQueries.forEach(function(query) {
        return _addQueryToTokenMap(viewQueries, query);
      });
    }
    return viewQueries;
  }
  function _getContentQueries(directives) {
    var contentQueries = new Map();
    directives.forEach(function(directive) {
      if (isPresent(directive.queries)) {
        directive.queries.forEach(function(query) {
          return _addQueryToTokenMap(contentQueries, query);
        });
      }
    });
    return contentQueries;
  }
  function _addQueryToTokenMap(map, query) {
    query.selectors.forEach(function(token) {
      var entry = map.get(token.reference);
      if (!entry) {
        entry = [];
        map.set(token.reference, entry);
      }
      entry.push(query);
    });
  }
  var ElementSchemaRegistry = (function() {
    function ElementSchemaRegistry() {}
    return ElementSchemaRegistry;
  }());
  var StyleWithImports = (function() {
    function StyleWithImports(style, styleUrls) {
      this.style = style;
      this.styleUrls = styleUrls;
    }
    return StyleWithImports;
  }());
  function isStyleUrlResolvable(url) {
    if (isBlank(url) || url.length === 0 || url[0] == '/')
      return false;
    var schemeMatch = url.match(_urlWithSchemaRe);
    return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';
  }
  function extractStyleUrls(resolver, baseUrl, cssText) {
    var foundUrls = [];
    var modifiedCssText = cssText.replace(_cssImportRe, function() {
      var m = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        m[_i - 0] = arguments[_i];
      }
      var url = m[1] || m[2];
      if (!isStyleUrlResolvable(url)) {
        return m[0];
      }
      foundUrls.push(resolver.resolve(baseUrl, url));
      return '';
    });
    return new StyleWithImports(modifiedCssText, foundUrls);
  }
  var _cssImportRe = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
  var _urlWithSchemaRe = /^([^:/?#]+):/;
  var __extends$11 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var PROPERTY_PARTS_SEPARATOR = '.';
  var ATTRIBUTE_PREFIX = 'attr';
  var CLASS_PREFIX = 'class';
  var STYLE_PREFIX = 'style';
  var ANIMATE_PROP_PREFIX = 'animate-';
  var BoundPropertyType;
  (function(BoundPropertyType) {
    BoundPropertyType[BoundPropertyType["DEFAULT"] = 0] = "DEFAULT";
    BoundPropertyType[BoundPropertyType["LITERAL_ATTR"] = 1] = "LITERAL_ATTR";
    BoundPropertyType[BoundPropertyType["ANIMATION"] = 2] = "ANIMATION";
  })(BoundPropertyType || (BoundPropertyType = {}));
  var BoundProperty = (function() {
    function BoundProperty(name, expression, type, sourceSpan) {
      this.name = name;
      this.expression = expression;
      this.type = type;
      this.sourceSpan = sourceSpan;
    }
    Object.defineProperty(BoundProperty.prototype, "isLiteral", {
      get: function() {
        return this.type === BoundPropertyType.LITERAL_ATTR;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BoundProperty.prototype, "isAnimation", {
      get: function() {
        return this.type === BoundPropertyType.ANIMATION;
      },
      enumerable: true,
      configurable: true
    });
    return BoundProperty;
  }());
  var BindingParser = (function() {
    function BindingParser(_exprParser, _interpolationConfig, _schemaRegistry, pipes, _targetErrors) {
      var _this = this;
      this._exprParser = _exprParser;
      this._interpolationConfig = _interpolationConfig;
      this._schemaRegistry = _schemaRegistry;
      this._targetErrors = _targetErrors;
      this.pipesByName = new Map();
      pipes.forEach(function(pipe) {
        return _this.pipesByName.set(pipe.name, pipe);
      });
    }
    BindingParser.prototype.createDirectiveHostPropertyAsts = function(dirMeta, sourceSpan) {
      var _this = this;
      if (dirMeta.hostProperties) {
        var boundProps_1 = [];
        Object.keys(dirMeta.hostProperties).forEach(function(propName) {
          var expression = dirMeta.hostProperties[propName];
          if (typeof expression === 'string') {
            _this.parsePropertyBinding(propName, expression, true, sourceSpan, [], boundProps_1);
          } else {
            _this._reportError("Value of the host property binding \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
          }
        });
        return boundProps_1.map(function(prop) {
          return _this.createElementPropertyAst(dirMeta.selector, prop);
        });
      }
    };
    BindingParser.prototype.createDirectiveHostEventAsts = function(dirMeta, sourceSpan) {
      var _this = this;
      if (dirMeta.hostListeners) {
        var targetEventAsts_1 = [];
        Object.keys(dirMeta.hostListeners).forEach(function(propName) {
          var expression = dirMeta.hostListeners[propName];
          if (typeof expression === 'string') {
            _this.parseEvent(propName, expression, sourceSpan, [], targetEventAsts_1);
          } else {
            _this._reportError("Value of the host listener \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
          }
        });
        return targetEventAsts_1;
      }
    };
    BindingParser.prototype.parseInterpolation = function(value, sourceSpan) {
      var sourceInfo = sourceSpan.start.toString();
      try {
        var ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);
        if (ast)
          this._reportExpressionParserErrors(ast.errors, sourceSpan);
        this._checkPipes(ast, sourceSpan);
        return ast;
      } catch (e) {
        this._reportError("" + e, sourceSpan);
        return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
      }
    };
    BindingParser.prototype.parseInlineTemplateBinding = function(name, prefixToken, value, sourceSpan, targetMatchableAttrs, targetProps, targetVars) {
      var bindings = this._parseTemplateBindings(prefixToken, value, sourceSpan);
      for (var i = 0; i < bindings.length; i++) {
        var binding = bindings[i];
        if (binding.keyIsVar) {
          targetVars.push(new VariableAst(binding.key, binding.name, sourceSpan));
        } else if (isPresent(binding.expression)) {
          this._parsePropertyAst(binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps);
        } else {
          targetMatchableAttrs.push([binding.key, '']);
          this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps);
        }
      }
    };
    BindingParser.prototype._parseTemplateBindings = function(prefixToken, value, sourceSpan) {
      var _this = this;
      var sourceInfo = sourceSpan.start.toString();
      try {
        var bindingsResult = this._exprParser.parseTemplateBindings(prefixToken, value, sourceInfo);
        this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);
        bindingsResult.templateBindings.forEach(function(binding) {
          if (isPresent(binding.expression)) {
            _this._checkPipes(binding.expression, sourceSpan);
          }
        });
        bindingsResult.warnings.forEach(function(warning) {
          _this._reportError(warning, sourceSpan, exports.ParseErrorLevel.WARNING);
        });
        return bindingsResult.templateBindings;
      } catch (e) {
        this._reportError("" + e, sourceSpan);
        return [];
      }
    };
    BindingParser.prototype.parseLiteralAttr = function(name, value, sourceSpan, targetMatchableAttrs, targetProps) {
      if (_isAnimationLabel(name)) {
        name = name.substring(1);
        if (value) {
          this._reportError("Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid." + " Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.", sourceSpan, exports.ParseErrorLevel.FATAL);
        }
        this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps);
      } else {
        targetProps.push(new BoundProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), BoundPropertyType.LITERAL_ATTR, sourceSpan));
      }
    };
    BindingParser.prototype.parsePropertyBinding = function(name, expression, isHost, sourceSpan, targetMatchableAttrs, targetProps) {
      var isAnimationProp = false;
      if (name.startsWith(ANIMATE_PROP_PREFIX)) {
        isAnimationProp = true;
        name = name.substring(ANIMATE_PROP_PREFIX.length);
      } else if (_isAnimationLabel(name)) {
        isAnimationProp = true;
        name = name.substring(1);
      }
      if (isAnimationProp) {
        this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps);
      } else {
        this._parsePropertyAst(name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
      }
    };
    BindingParser.prototype.parsePropertyInterpolation = function(name, value, sourceSpan, targetMatchableAttrs, targetProps) {
      var expr = this.parseInterpolation(value, sourceSpan);
      if (isPresent(expr)) {
        this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);
        return true;
      }
      return false;
    };
    BindingParser.prototype._parsePropertyAst = function(name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
      targetMatchableAttrs.push([name, ast.source]);
      targetProps.push(new BoundProperty(name, ast, BoundPropertyType.DEFAULT, sourceSpan));
    };
    BindingParser.prototype._parseAnimation = function(name, expression, sourceSpan, targetMatchableAttrs, targetProps) {
      var ast = this._parseBinding(expression || 'null', false, sourceSpan);
      targetMatchableAttrs.push([name, ast.source]);
      targetProps.push(new BoundProperty(name, ast, BoundPropertyType.ANIMATION, sourceSpan));
    };
    BindingParser.prototype._parseBinding = function(value, isHostBinding, sourceSpan) {
      var sourceInfo = sourceSpan.start.toString();
      try {
        var ast = isHostBinding ? this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) : this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);
        if (ast)
          this._reportExpressionParserErrors(ast.errors, sourceSpan);
        this._checkPipes(ast, sourceSpan);
        return ast;
      } catch (e) {
        this._reportError("" + e, sourceSpan);
        return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
      }
    };
    BindingParser.prototype.createElementPropertyAst = function(elementSelector, boundProp) {
      if (boundProp.isAnimation) {
        return new BoundElementPropertyAst(boundProp.name, exports.PropertyBindingType.Animation, _angular_core.SecurityContext.NONE, false, boundProp.expression, null, boundProp.sourceSpan);
      }
      var unit = null;
      var bindingType;
      var boundPropertyName;
      var parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);
      var securityContexts;
      if (parts.length === 1) {
        var partValue = parts[0];
        boundPropertyName = this._schemaRegistry.getMappedPropName(partValue);
        securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, false);
        bindingType = exports.PropertyBindingType.Property;
        this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, false);
      } else {
        if (parts[0] == ATTRIBUTE_PREFIX) {
          boundPropertyName = parts[1];
          this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);
          securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);
          var nsSeparatorIdx = boundPropertyName.indexOf(':');
          if (nsSeparatorIdx > -1) {
            var ns = boundPropertyName.substring(0, nsSeparatorIdx);
            var name_1 = boundPropertyName.substring(nsSeparatorIdx + 1);
            boundPropertyName = mergeNsAndName(ns, name_1);
          }
          bindingType = exports.PropertyBindingType.Attribute;
        } else if (parts[0] == CLASS_PREFIX) {
          boundPropertyName = parts[1];
          bindingType = exports.PropertyBindingType.Class;
          securityContexts = [_angular_core.SecurityContext.NONE];
        } else if (parts[0] == STYLE_PREFIX) {
          unit = parts.length > 2 ? parts[2] : null;
          boundPropertyName = parts[1];
          bindingType = exports.PropertyBindingType.Style;
          securityContexts = [_angular_core.SecurityContext.STYLE];
        } else {
          this._reportError("Invalid property name '" + boundProp.name + "'", boundProp.sourceSpan);
          bindingType = null;
          securityContexts = [];
        }
      }
      return new BoundElementPropertyAst(boundPropertyName, bindingType, securityContexts.length === 1 ? securityContexts[0] : null, securityContexts.length > 1, boundProp.expression, unit, boundProp.sourceSpan);
    };
    BindingParser.prototype.parseEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
      if (_isAnimationLabel(name)) {
        name = name.substr(1);
        this._parseAnimationEvent(name, expression, sourceSpan, targetEvents);
      } else {
        this._parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents);
      }
    };
    BindingParser.prototype._parseAnimationEvent = function(name, expression, sourceSpan, targetEvents) {
      var matches = splitAtPeriod(name, [name, '']);
      var eventName = matches[0];
      var phase = matches[1].toLowerCase();
      if (phase) {
        switch (phase) {
          case 'start':
          case 'done':
            var ast = this._parseAction(expression, sourceSpan);
            targetEvents.push(new BoundEventAst(eventName, null, phase, ast, sourceSpan));
            break;
          default:
            this._reportError("The provided animation output phase value \"" + phase + "\" for \"@" + eventName + "\" is not supported (use start or done)", sourceSpan);
            break;
        }
      } else {
        this._reportError("The animation trigger output event (@" + eventName + ") is missing its phase value name (start or done are currently supported)", sourceSpan);
      }
    };
    BindingParser.prototype._parseEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
      var _a = splitAtColon(name, [null, name]),
          target = _a[0],
          eventName = _a[1];
      var ast = this._parseAction(expression, sourceSpan);
      targetMatchableAttrs.push([name, ast.source]);
      targetEvents.push(new BoundEventAst(eventName, target, null, ast, sourceSpan));
    };
    BindingParser.prototype._parseAction = function(value, sourceSpan) {
      var sourceInfo = sourceSpan.start.toString();
      try {
        var ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);
        if (ast) {
          this._reportExpressionParserErrors(ast.errors, sourceSpan);
        }
        if (!ast || ast.ast instanceof EmptyExpr) {
          this._reportError("Empty expressions are not allowed", sourceSpan);
          return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
        }
        this._checkPipes(ast, sourceSpan);
        return ast;
      } catch (e) {
        this._reportError("" + e, sourceSpan);
        return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
      }
    };
    BindingParser.prototype._reportError = function(message, sourceSpan, level) {
      if (level === void 0) {
        level = exports.ParseErrorLevel.FATAL;
      }
      this._targetErrors.push(new ParseError(sourceSpan, message, level));
    };
    BindingParser.prototype._reportExpressionParserErrors = function(errors, sourceSpan) {
      for (var _i = 0,
          errors_1 = errors; _i < errors_1.length; _i++) {
        var error = errors_1[_i];
        this._reportError(error.message, sourceSpan);
      }
    };
    BindingParser.prototype._checkPipes = function(ast, sourceSpan) {
      var _this = this;
      if (isPresent(ast)) {
        var collector = new PipeCollector();
        ast.visit(collector);
        collector.pipes.forEach(function(pipeName) {
          if (!_this.pipesByName.has(pipeName)) {
            _this._reportError("The pipe '" + pipeName + "' could not be found", sourceSpan);
          }
        });
      }
    };
    BindingParser.prototype._validatePropertyOrAttributeName = function(propName, sourceSpan, isAttr) {
      var report = isAttr ? this._schemaRegistry.validateAttribute(propName) : this._schemaRegistry.validateProperty(propName);
      if (report.error) {
        this._reportError(report.msg, sourceSpan, exports.ParseErrorLevel.FATAL);
      }
    };
    return BindingParser;
  }());
  var PipeCollector = (function(_super) {
    __extends$11(PipeCollector, _super);
    function PipeCollector() {
      _super.apply(this, arguments);
      this.pipes = new Set();
    }
    PipeCollector.prototype.visitPipe = function(ast, context) {
      this.pipes.add(ast.name);
      ast.exp.visit(this);
      this.visitAll(ast.args, context);
      return null;
    };
    return PipeCollector;
  }(RecursiveAstVisitor));
  function _isAnimationLabel(name) {
    return name[0] == '@';
  }
  function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {
    var ctxs = [];
    CssSelector.parse(selector).forEach(function(selector) {
      var elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();
      var notElementNames = new Set(selector.notSelectors.filter(function(selector) {
        return selector.isElementSelector();
      }).map(function(selector) {
        return selector.element;
      }));
      var possibleElementNames = elementNames.filter(function(elementName) {
        return !notElementNames.has(elementName);
      });
      ctxs.push.apply(ctxs, possibleElementNames.map(function(elementName) {
        return registry.securityContext(elementName, propName, isAttribute);
      }));
    });
    return ctxs.length === 0 ? [_angular_core.SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();
  }
  var NG_CONTENT_SELECT_ATTR = 'select';
  var NG_CONTENT_ELEMENT = 'ng-content';
  var LINK_ELEMENT = 'link';
  var LINK_STYLE_REL_ATTR = 'rel';
  var LINK_STYLE_HREF_ATTR = 'href';
  var LINK_STYLE_REL_VALUE = 'stylesheet';
  var STYLE_ELEMENT = 'style';
  var SCRIPT_ELEMENT = 'script';
  var NG_NON_BINDABLE_ATTR = 'ngNonBindable';
  var NG_PROJECT_AS = 'ngProjectAs';
  function preparseElement(ast) {
    var selectAttr = null;
    var hrefAttr = null;
    var relAttr = null;
    var nonBindable = false;
    var projectAs = null;
    ast.attrs.forEach(function(attr) {
      var lcAttrName = attr.name.toLowerCase();
      if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
        selectAttr = attr.value;
      } else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
        hrefAttr = attr.value;
      } else if (lcAttrName == LINK_STYLE_REL_ATTR) {
        relAttr = attr.value;
      } else if (attr.name == NG_NON_BINDABLE_ATTR) {
        nonBindable = true;
      } else if (attr.name == NG_PROJECT_AS) {
        if (attr.value.length > 0) {
          projectAs = attr.value;
        }
      }
    });
    selectAttr = normalizeNgContentSelect(selectAttr);
    var nodeName = ast.name.toLowerCase();
    var type = PreparsedElementType.OTHER;
    if (splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT) {
      type = PreparsedElementType.NG_CONTENT;
    } else if (nodeName == STYLE_ELEMENT) {
      type = PreparsedElementType.STYLE;
    } else if (nodeName == SCRIPT_ELEMENT) {
      type = PreparsedElementType.SCRIPT;
    } else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
      type = PreparsedElementType.STYLESHEET;
    }
    return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
  }
  var PreparsedElementType;
  (function(PreparsedElementType) {
    PreparsedElementType[PreparsedElementType["NG_CONTENT"] = 0] = "NG_CONTENT";
    PreparsedElementType[PreparsedElementType["STYLE"] = 1] = "STYLE";
    PreparsedElementType[PreparsedElementType["STYLESHEET"] = 2] = "STYLESHEET";
    PreparsedElementType[PreparsedElementType["SCRIPT"] = 3] = "SCRIPT";
    PreparsedElementType[PreparsedElementType["OTHER"] = 4] = "OTHER";
  })(PreparsedElementType || (PreparsedElementType = {}));
  var PreparsedElement = (function() {
    function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
      this.type = type;
      this.selectAttr = selectAttr;
      this.hrefAttr = hrefAttr;
      this.nonBindable = nonBindable;
      this.projectAs = projectAs;
    }
    return PreparsedElement;
  }());
  function normalizeNgContentSelect(selectAttr) {
    if (selectAttr === null || selectAttr.length === 0) {
      return '*';
    }
    return selectAttr;
  }
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/;
  var KW_BIND_IDX = 1;
  var KW_LET_IDX = 2;
  var KW_REF_IDX = 3;
  var KW_ON_IDX = 4;
  var KW_BINDON_IDX = 5;
  var KW_AT_IDX = 6;
  var IDENT_KW_IDX = 7;
  var IDENT_BANANA_BOX_IDX = 8;
  var IDENT_PROPERTY_IDX = 9;
  var IDENT_EVENT_IDX = 10;
  var TEMPLATE_ELEMENT = 'template';
  var TEMPLATE_ATTR = 'template';
  var TEMPLATE_ATTR_PREFIX = '*';
  var CLASS_ATTR = 'class';
  var TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];
  var TEMPLATE_TRANSFORMS = new _angular_core.OpaqueToken('TemplateTransforms');
  var TemplateParseError = (function(_super) {
    __extends(TemplateParseError, _super);
    function TemplateParseError(message, span, level) {
      _super.call(this, span, message, level);
    }
    return TemplateParseError;
  }(ParseError));
  var TemplateParseResult = (function() {
    function TemplateParseResult(templateAst, errors) {
      this.templateAst = templateAst;
      this.errors = errors;
    }
    return TemplateParseResult;
  }());
  var TemplateParser = (function() {
    function TemplateParser(_exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
      this._exprParser = _exprParser;
      this._schemaRegistry = _schemaRegistry;
      this._htmlParser = _htmlParser;
      this._console = _console;
      this.transforms = transforms;
    }
    TemplateParser.prototype.parse = function(component, template, directives, pipes, schemas, templateUrl) {
      var result = this.tryParse(component, template, directives, pipes, schemas, templateUrl);
      var warnings = result.errors.filter(function(error) {
        return error.level === exports.ParseErrorLevel.WARNING;
      });
      var errors = result.errors.filter(function(error) {
        return error.level === exports.ParseErrorLevel.FATAL;
      });
      if (warnings.length > 0) {
        this._console.warn("Template parse warnings:\n" + warnings.join('\n'));
      }
      if (errors.length > 0) {
        var errorString = errors.join('\n');
        throw new Error("Template parse errors:\n" + errorString);
      }
      return result.templateAst;
    };
    TemplateParser.prototype.tryParse = function(component, template, directives, pipes, schemas, templateUrl) {
      return this.tryParseHtml(this.expandHtml(this._htmlParser.parse(template, templateUrl, true, this.getInterpolationConfig(component))), component, template, directives, pipes, schemas, templateUrl);
    };
    TemplateParser.prototype.tryParseHtml = function(htmlAstWithErrors, component, template, directives, pipes, schemas, templateUrl) {
      var result;
      var errors = htmlAstWithErrors.errors;
      if (htmlAstWithErrors.rootNodes.length > 0) {
        var uniqDirectives = removeSummaryDuplicates(directives);
        var uniqPipes = removeSummaryDuplicates(pipes);
        var providerViewContext = new ProviderViewContext(component, htmlAstWithErrors.rootNodes[0].sourceSpan);
        var interpolationConfig = void 0;
        if (component.template && component.template.interpolation) {
          interpolationConfig = {
            start: component.template.interpolation[0],
            end: component.template.interpolation[1]
          };
        }
        var bindingParser = new BindingParser(this._exprParser, interpolationConfig, this._schemaRegistry, uniqPipes, errors);
        var parseVisitor = new TemplateParseVisitor(providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);
        result = visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);
        errors.push.apply(errors, providerViewContext.errors);
      } else {
        result = [];
      }
      this._assertNoReferenceDuplicationOnTemplate(result, errors);
      if (errors.length > 0) {
        return new TemplateParseResult(result, errors);
      }
      if (isPresent(this.transforms)) {
        this.transforms.forEach(function(transform) {
          result = templateVisitAll(transform, result);
        });
      }
      return new TemplateParseResult(result, errors);
    };
    TemplateParser.prototype.expandHtml = function(htmlAstWithErrors, forced) {
      if (forced === void 0) {
        forced = false;
      }
      var errors = htmlAstWithErrors.errors;
      if (errors.length == 0 || forced) {
        var expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);
        errors.push.apply(errors, expandedHtmlAst.errors);
        htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);
      }
      return htmlAstWithErrors;
    };
    TemplateParser.prototype.getInterpolationConfig = function(component) {
      if (component.template) {
        return InterpolationConfig.fromArray(component.template.interpolation);
      }
    };
    TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function(result, errors) {
      var existingReferences = [];
      result.filter(function(element) {
        return !!element.references;
      }).forEach(function(element) {
        return element.references.forEach(function(reference) {
          var name = reference.name;
          if (existingReferences.indexOf(name) < 0) {
            existingReferences.push(name);
          } else {
            var error = new TemplateParseError("Reference \"#" + name + "\" is defined several times", reference.sourceSpan, exports.ParseErrorLevel.FATAL);
            errors.push(error);
          }
        });
      });
    };
    TemplateParser.decorators = [{type: _angular_core.Injectable}];
    TemplateParser.ctorParameters = [{type: Parser}, {type: ElementSchemaRegistry}, {type: I18NHtmlParser}, {type: Console}, {
      type: Array,
      decorators: [{type: _angular_core.Optional}, {
        type: _angular_core.Inject,
        args: [TEMPLATE_TRANSFORMS]
      }]
    }];
    return TemplateParser;
  }());
  var TemplateParseVisitor = (function() {
    function TemplateParseVisitor(providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {
      var _this = this;
      this.providerViewContext = providerViewContext;
      this._bindingParser = _bindingParser;
      this._schemaRegistry = _schemaRegistry;
      this._schemas = _schemas;
      this._targetErrors = _targetErrors;
      this.selectorMatcher = new SelectorMatcher();
      this.directivesIndex = new Map();
      this.ngContentCount = 0;
      directives.forEach(function(directive, index) {
        var selector = CssSelector.parse(directive.selector);
        _this.selectorMatcher.addSelectables(selector, directive);
        _this.directivesIndex.set(directive, index);
      });
    }
    TemplateParseVisitor.prototype.visitExpansion = function(expansion, context) {
      return null;
    };
    TemplateParseVisitor.prototype.visitExpansionCase = function(expansionCase, context) {
      return null;
    };
    TemplateParseVisitor.prototype.visitText = function(text, parent) {
      var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
      var expr = this._bindingParser.parseInterpolation(text.value, text.sourceSpan);
      if (isPresent(expr)) {
        return new BoundTextAst(expr, ngContentIndex, text.sourceSpan);
      } else {
        return new TextAst(text.value, ngContentIndex, text.sourceSpan);
      }
    };
    TemplateParseVisitor.prototype.visitAttribute = function(attribute, context) {
      return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
    };
    TemplateParseVisitor.prototype.visitComment = function(comment, context) {
      return null;
    };
    TemplateParseVisitor.prototype.visitElement = function(element, parent) {
      var _this = this;
      var nodeName = element.name;
      var preparsedElement = preparseElement(element);
      if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE) {
        return null;
      }
      if (preparsedElement.type === PreparsedElementType.STYLESHEET && isStyleUrlResolvable(preparsedElement.hrefAttr)) {
        return null;
      }
      var matchableAttrs = [];
      var elementOrDirectiveProps = [];
      var elementOrDirectiveRefs = [];
      var elementVars = [];
      var events = [];
      var templateElementOrDirectiveProps = [];
      var templateMatchableAttrs = [];
      var templateElementVars = [];
      var hasInlineTemplates = false;
      var attrs = [];
      var lcElName = splitNsName(nodeName.toLowerCase())[1];
      var isTemplateElement = lcElName == TEMPLATE_ELEMENT;
      element.attrs.forEach(function(attr) {
        var hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);
        var templateBindingsSource = undefined;
        var prefixToken = undefined;
        if (_this._normalizeAttributeName(attr.name) == TEMPLATE_ATTR) {
          templateBindingsSource = attr.value;
        } else if (attr.name.startsWith(TEMPLATE_ATTR_PREFIX)) {
          templateBindingsSource = attr.value;
          prefixToken = attr.name.substring(TEMPLATE_ATTR_PREFIX.length);
        }
        var hasTemplateBinding = isPresent(templateBindingsSource);
        if (hasTemplateBinding) {
          if (hasInlineTemplates) {
            _this._reportError("Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *", attr.sourceSpan);
          }
          hasInlineTemplates = true;
          _this._bindingParser.parseInlineTemplateBinding(attr.name, prefixToken, templateBindingsSource, attr.sourceSpan, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);
        }
        if (!hasBinding && !hasTemplateBinding) {
          attrs.push(_this.visitAttribute(attr, null));
          matchableAttrs.push([attr.name, attr.value]);
        }
      });
      var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
      var _a = this._parseDirectives(this.selectorMatcher, elementCssSelector),
          directiveMetas = _a.directives,
          matchElement = _a.matchElement;
      var references = [];
      var directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references);
      var elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directiveAsts);
      var isViewRoot = parent.isTemplateElement || hasInlineTemplates;
      var providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, element.sourceSpan);
      var children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));
      providerContext.afterElement();
      var projectionSelector = isPresent(preparsedElement.projectAs) ? CssSelector.parse(preparsedElement.projectAs)[0] : elementCssSelector;
      var ngContentIndex = parent.findNgContentIndex(projectionSelector);
      var parsedElement;
      if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
        if (element.children && !element.children.every(_isEmptyTextNode)) {
          this._reportError("<ng-content> element cannot have content.", element.sourceSpan);
        }
        parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
      } else if (isTemplateElement) {
        this._assertAllEventsPublishedByDirectives(directiveAsts, events);
        this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);
        parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
      } else {
        this._assertElementExists(matchElement, element);
        this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);
        var ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);
        parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan, element.endSourceSpan);
        this._findComponentDirectives(directiveAsts).forEach(function(componentDirectiveAst) {
          return _this._validateElementAnimationInputOutputs(componentDirectiveAst.hostProperties, componentDirectiveAst.hostEvents, componentDirectiveAst.directive.template);
        });
        var componentTemplate = providerContext.viewContext.component.template;
        this._validateElementAnimationInputOutputs(elementProps, events, componentTemplate.toSummary());
      }
      if (hasInlineTemplates) {
        var templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
        var templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateCssSelector).directives;
        var templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, []);
        var templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectiveAsts);
        this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);
        var templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], element.sourceSpan);
        templateProviderContext.afterElement();
        parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, [parsedElement], ngContentIndex, element.sourceSpan);
      }
      return parsedElement;
    };
    TemplateParseVisitor.prototype._validateElementAnimationInputOutputs = function(inputs, outputs, template) {
      var _this = this;
      var triggerLookup = new Set();
      template.animations.forEach(function(entry) {
        triggerLookup.add(entry);
      });
      var animationInputs = inputs.filter(function(input) {
        return input.isAnimation;
      });
      animationInputs.forEach(function(input) {
        var name = input.name;
        if (!triggerLookup.has(name)) {
          _this._reportError("Couldn't find an animation entry for \"" + name + "\"", input.sourceSpan);
        }
      });
      outputs.forEach(function(output) {
        if (output.isAnimation) {
          var found = animationInputs.find(function(input) {
            return input.name == output.name;
          });
          if (!found) {
            _this._reportError("Unable to listen on (@" + output.name + "." + output.phase + ") because the animation trigger [@" + output.name + "] isn't being used on the same element", output.sourceSpan);
          }
        }
      });
    };
    TemplateParseVisitor.prototype._parseAttr = function(isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {
      var name = this._normalizeAttributeName(attr.name);
      var value = attr.value;
      var srcSpan = attr.sourceSpan;
      var bindParts = name.match(BIND_NAME_REGEXP);
      var hasBinding = false;
      if (bindParts !== null) {
        hasBinding = true;
        if (isPresent(bindParts[KW_BIND_IDX])) {
          this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
        } else if (bindParts[KW_LET_IDX]) {
          if (isTemplateElement) {
            var identifier = bindParts[IDENT_KW_IDX];
            this._parseVariable(identifier, value, srcSpan, targetVars);
          } else {
            this._reportError("\"let-\" is only supported on template elements.", srcSpan);
          }
        } else if (bindParts[KW_REF_IDX]) {
          var identifier = bindParts[IDENT_KW_IDX];
          this._parseReference(identifier, value, srcSpan, targetRefs);
        } else if (bindParts[KW_ON_IDX]) {
          this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
        } else if (bindParts[KW_BINDON_IDX]) {
          this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
          this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
        } else if (bindParts[KW_AT_IDX]) {
          this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
        } else if (bindParts[IDENT_BANANA_BOX_IDX]) {
          this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
          this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
        } else if (bindParts[IDENT_PROPERTY_IDX]) {
          this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
        } else if (bindParts[IDENT_EVENT_IDX]) {
          this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
        }
      } else {
        hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);
      }
      if (!hasBinding) {
        this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
      }
      return hasBinding;
    };
    TemplateParseVisitor.prototype._normalizeAttributeName = function(attrName) {
      return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;
    };
    TemplateParseVisitor.prototype._parseVariable = function(identifier, value, sourceSpan, targetVars) {
      if (identifier.indexOf('-') > -1) {
        this._reportError("\"-\" is not allowed in variable names", sourceSpan);
      }
      targetVars.push(new VariableAst(identifier, value, sourceSpan));
    };
    TemplateParseVisitor.prototype._parseReference = function(identifier, value, sourceSpan, targetRefs) {
      if (identifier.indexOf('-') > -1) {
        this._reportError("\"-\" is not allowed in reference names", sourceSpan);
      }
      targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
    };
    TemplateParseVisitor.prototype._parseAssignmentEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
      this._bindingParser.parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
    };
    TemplateParseVisitor.prototype._parseDirectives = function(selectorMatcher, elementCssSelector) {
      var _this = this;
      var directives = new Array(this.directivesIndex.size);
      var matchElement = false;
      selectorMatcher.match(elementCssSelector, function(selector, directive) {
        directives[_this.directivesIndex.get(directive)] = directive;
        matchElement = matchElement || selector.hasElementSelector();
      });
      return {
        directives: directives.filter(function(dir) {
          return !!dir;
        }),
        matchElement: matchElement
      };
    };
    TemplateParseVisitor.prototype._createDirectiveAsts = function(isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences) {
      var _this = this;
      var matchedReferences = new Set();
      var component = null;
      var directiveAsts = directives.map(function(directive) {
        var sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, "Directive " + directive.type.name);
        if (directive.isComponent) {
          component = directive;
        }
        var directiveProperties = [];
        var hostProperties = _this._bindingParser.createDirectiveHostPropertyAsts(directive, sourceSpan);
        _this._checkPropertiesInSchema(elementName, hostProperties);
        var hostEvents = _this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan);
        _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties);
        elementOrDirectiveRefs.forEach(function(elOrDirRef) {
          if ((elOrDirRef.value.length === 0 && directive.isComponent) || (directive.exportAs == elOrDirRef.value)) {
            targetReferences.push(new ReferenceAst(elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan));
            matchedReferences.add(elOrDirRef.name);
          }
        });
        return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, sourceSpan);
      });
      elementOrDirectiveRefs.forEach(function(elOrDirRef) {
        if (elOrDirRef.value.length > 0) {
          if (!matchedReferences.has(elOrDirRef.name)) {
            _this._reportError("There is no directive with \"exportAs\" set to \"" + elOrDirRef.value + "\"", elOrDirRef.sourceSpan);
          }
        } else if (!component) {
          var refToken = null;
          if (isTemplateElement) {
            refToken = resolveIdentifierToken(Identifiers.TemplateRef);
          }
          targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));
        }
      });
      return directiveAsts;
    };
    TemplateParseVisitor.prototype._createDirectivePropertyAsts = function(directiveProperties, boundProps, targetBoundDirectiveProps) {
      if (directiveProperties) {
        var boundPropsByName_1 = new Map();
        boundProps.forEach(function(boundProp) {
          var prevValue = boundPropsByName_1.get(boundProp.name);
          if (!prevValue || prevValue.isLiteral) {
            boundPropsByName_1.set(boundProp.name, boundProp);
          }
        });
        Object.keys(directiveProperties).forEach(function(dirProp) {
          var elProp = directiveProperties[dirProp];
          var boundProp = boundPropsByName_1.get(elProp);
          if (boundProp) {
            targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
          }
        });
      }
    };
    TemplateParseVisitor.prototype._createElementPropertyAsts = function(elementName, props, directives) {
      var _this = this;
      var boundElementProps = [];
      var boundDirectivePropsIndex = new Map();
      directives.forEach(function(directive) {
        directive.inputs.forEach(function(prop) {
          boundDirectivePropsIndex.set(prop.templateName, prop);
        });
      });
      props.forEach(function(prop) {
        if (!prop.isLiteral && !boundDirectivePropsIndex.get(prop.name)) {
          boundElementProps.push(_this._bindingParser.createElementPropertyAst(elementName, prop));
        }
      });
      this._checkPropertiesInSchema(elementName, boundElementProps);
      return boundElementProps;
    };
    TemplateParseVisitor.prototype._findComponentDirectives = function(directives) {
      return directives.filter(function(directive) {
        return directive.directive.isComponent;
      });
    };
    TemplateParseVisitor.prototype._findComponentDirectiveNames = function(directives) {
      return this._findComponentDirectives(directives).map(function(directive) {
        return directive.directive.type.name;
      });
    };
    TemplateParseVisitor.prototype._assertOnlyOneComponent = function(directives, sourceSpan) {
      var componentTypeNames = this._findComponentDirectiveNames(directives);
      if (componentTypeNames.length > 1) {
        this._reportError("More than one component matched on this element.\n" + "Make sure that only one component's selector can match a given element.\n" + ("Conflicting components: " + componentTypeNames.join(',')), sourceSpan);
      }
    };
    TemplateParseVisitor.prototype._assertElementExists = function(matchElement, element) {
      var elName = element.name.replace(/^:xhtml:/, '');
      if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {
        var errorMsg = ("'" + elName + "' is not a known element:\n") + ("1. If '" + elName + "' is an Angular component, then verify that it is part of this module.\n") + ("2. If '" + elName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schemas' of this component to suppress this message.");
        this._reportError(errorMsg, element.sourceSpan);
      }
    };
    TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function(directives, elementProps, sourceSpan) {
      var _this = this;
      var componentTypeNames = this._findComponentDirectiveNames(directives);
      if (componentTypeNames.length > 0) {
        this._reportError("Components on an embedded template: " + componentTypeNames.join(','), sourceSpan);
      }
      elementProps.forEach(function(prop) {
        _this._reportError("Property binding " + prop.name + " not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \"directives\" section.", sourceSpan);
      });
    };
    TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function(directives, events) {
      var _this = this;
      var allDirectiveEvents = new Set();
      directives.forEach(function(directive) {
        Object.keys(directive.directive.outputs).forEach(function(k) {
          var eventName = directive.directive.outputs[k];
          allDirectiveEvents.add(eventName);
        });
      });
      events.forEach(function(event) {
        if (isPresent(event.target) || !allDirectiveEvents.has(event.name)) {
          _this._reportError("Event binding " + event.fullName + " not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \"directives\" section.", event.sourceSpan);
        }
      });
    };
    TemplateParseVisitor.prototype._checkPropertiesInSchema = function(elementName, boundProps) {
      var _this = this;
      boundProps.forEach(function(boundProp) {
        if (boundProp.type === exports.PropertyBindingType.Property && !_this._schemaRegistry.hasProperty(elementName, boundProp.name, _this._schemas)) {
          var errorMsg = "Can't bind to '" + boundProp.name + "' since it isn't a known property of '" + elementName + "'.";
          if (elementName.indexOf('-') > -1) {
            errorMsg += ("\n1. If '" + elementName + "' is an Angular component and it has '" + boundProp.name + "' input, then verify that it is part of this module.") + ("\n2. If '" + elementName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schemas' of this component to suppress this message.\n");
          }
          _this._reportError(errorMsg, boundProp.sourceSpan);
        }
      });
    };
    TemplateParseVisitor.prototype._reportError = function(message, sourceSpan, level) {
      if (level === void 0) {
        level = exports.ParseErrorLevel.FATAL;
      }
      this._targetErrors.push(new ParseError(sourceSpan, message, level));
    };
    return TemplateParseVisitor;
  }());
  var NonBindableVisitor = (function() {
    function NonBindableVisitor() {}
    NonBindableVisitor.prototype.visitElement = function(ast, parent) {
      var preparsedElement = preparseElement(ast);
      if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE || preparsedElement.type === PreparsedElementType.STYLESHEET) {
        return null;
      }
      var attrNameAndValues = ast.attrs.map(function(attrAst) {
        return [attrAst.name, attrAst.value];
      });
      var selector = createElementCssSelector(ast.name, attrNameAndValues);
      var ngContentIndex = parent.findNgContentIndex(selector);
      var children = visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);
      return new ElementAst(ast.name, visitAll(this, ast.attrs), [], [], [], [], [], false, children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);
    };
    NonBindableVisitor.prototype.visitComment = function(comment, context) {
      return null;
    };
    NonBindableVisitor.prototype.visitAttribute = function(attribute, context) {
      return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
    };
    NonBindableVisitor.prototype.visitText = function(text, parent) {
      var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
      return new TextAst(text.value, ngContentIndex, text.sourceSpan);
    };
    NonBindableVisitor.prototype.visitExpansion = function(expansion, context) {
      return expansion;
    };
    NonBindableVisitor.prototype.visitExpansionCase = function(expansionCase, context) {
      return expansionCase;
    };
    return NonBindableVisitor;
  }());
  var ElementOrDirectiveRef = (function() {
    function ElementOrDirectiveRef(name, value, sourceSpan) {
      this.name = name;
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    return ElementOrDirectiveRef;
  }());
  function splitClasses(classAttrValue) {
    return classAttrValue.trim().split(/\s+/g);
  }
  var ElementContext = (function() {
    function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
      this.isTemplateElement = isTemplateElement;
      this._ngContentIndexMatcher = _ngContentIndexMatcher;
      this._wildcardNgContentIndex = _wildcardNgContentIndex;
      this.providerContext = providerContext;
    }
    ElementContext.create = function(isTemplateElement, directives, providerContext) {
      var matcher = new SelectorMatcher();
      var wildcardNgContentIndex = null;
      var component = directives.find(function(directive) {
        return directive.directive.isComponent;
      });
      if (component) {
        var ngContentSelectors = component.directive.template.ngContentSelectors;
        for (var i = 0; i < ngContentSelectors.length; i++) {
          var selector = ngContentSelectors[i];
          if (selector === '*') {
            wildcardNgContentIndex = i;
          } else {
            matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);
          }
        }
      }
      return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
    };
    ElementContext.prototype.findNgContentIndex = function(selector) {
      var ngContentIndices = [];
      this._ngContentIndexMatcher.match(selector, function(selector, ngContentIndex) {
        ngContentIndices.push(ngContentIndex);
      });
      ngContentIndices.sort();
      if (isPresent(this._wildcardNgContentIndex)) {
        ngContentIndices.push(this._wildcardNgContentIndex);
      }
      return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
    };
    return ElementContext;
  }());
  function createElementCssSelector(elementName, matchableAttrs) {
    var cssSelector = new CssSelector();
    var elNameNoNs = splitNsName(elementName)[1];
    cssSelector.setElement(elNameNoNs);
    for (var i = 0; i < matchableAttrs.length; i++) {
      var attrName = matchableAttrs[i][0];
      var attrNameNoNs = splitNsName(attrName)[1];
      var attrValue = matchableAttrs[i][1];
      cssSelector.addAttribute(attrNameNoNs, attrValue);
      if (attrName.toLowerCase() == CLASS_ATTR) {
        var classes = splitClasses(attrValue);
        classes.forEach(function(className) {
          return cssSelector.addClassName(className);
        });
      }
    }
    return cssSelector;
  }
  var EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);
  var NON_BINDABLE_VISITOR = new NonBindableVisitor();
  function _isEmptyTextNode(node) {
    return node instanceof Text && node.value.trim().length == 0;
  }
  function removeSummaryDuplicates(items) {
    var map = new Map();
    items.forEach(function(item) {
      if (!map.get(item.type.reference)) {
        map.set(item.type.reference, item);
      }
    });
    return Array.from(map.values());
  }
  function unimplemented$1() {
    throw new Error('unimplemented');
  }
  var CompilerConfig = (function() {
    function CompilerConfig(_a) {
      var _b = _a === void 0 ? {} : _a,
          _c = _b.renderTypes,
          renderTypes = _c === void 0 ? new DefaultRenderTypes() : _c,
          _d = _b.defaultEncapsulation,
          defaultEncapsulation = _d === void 0 ? _angular_core.ViewEncapsulation.Emulated : _d,
          genDebugInfo = _b.genDebugInfo,
          logBindingUpdate = _b.logBindingUpdate,
          _e = _b.useJit,
          useJit = _e === void 0 ? true : _e;
      this.renderTypes = renderTypes;
      this.defaultEncapsulation = defaultEncapsulation;
      this._genDebugInfo = genDebugInfo;
      this._logBindingUpdate = logBindingUpdate;
      this.useJit = useJit;
    }
    Object.defineProperty(CompilerConfig.prototype, "genDebugInfo", {
      get: function() {
        return this._genDebugInfo === void 0 ? _angular_core.isDevMode() : this._genDebugInfo;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CompilerConfig.prototype, "logBindingUpdate", {
      get: function() {
        return this._logBindingUpdate === void 0 ? _angular_core.isDevMode() : this._logBindingUpdate;
      },
      enumerable: true,
      configurable: true
    });
    return CompilerConfig;
  }());
  var RenderTypes = (function() {
    function RenderTypes() {}
    Object.defineProperty(RenderTypes.prototype, "renderer", {
      get: function() {
        return unimplemented$1();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderTypes.prototype, "renderText", {
      get: function() {
        return unimplemented$1();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderTypes.prototype, "renderElement", {
      get: function() {
        return unimplemented$1();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderTypes.prototype, "renderComment", {
      get: function() {
        return unimplemented$1();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderTypes.prototype, "renderNode", {
      get: function() {
        return unimplemented$1();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderTypes.prototype, "renderEvent", {
      get: function() {
        return unimplemented$1();
      },
      enumerable: true,
      configurable: true
    });
    return RenderTypes;
  }());
  var DefaultRenderTypes = (function() {
    function DefaultRenderTypes() {
      this.renderText = null;
      this.renderElement = null;
      this.renderComment = null;
      this.renderNode = null;
      this.renderEvent = null;
    }
    Object.defineProperty(DefaultRenderTypes.prototype, "renderer", {
      get: function() {
        return resolveIdentifier(Identifiers.Renderer);
      },
      enumerable: true,
      configurable: true
    });
    ;
    return DefaultRenderTypes;
  }());
  var __extends$12 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var TypeModifier;
  (function(TypeModifier) {
    TypeModifier[TypeModifier["Const"] = 0] = "Const";
  })(TypeModifier || (TypeModifier = {}));
  var Type$1 = (function() {
    function Type(modifiers) {
      if (modifiers === void 0) {
        modifiers = null;
      }
      this.modifiers = modifiers;
      if (!modifiers) {
        this.modifiers = [];
      }
    }
    Type.prototype.hasModifier = function(modifier) {
      return this.modifiers.indexOf(modifier) !== -1;
    };
    return Type;
  }());
  var BuiltinTypeName;
  (function(BuiltinTypeName) {
    BuiltinTypeName[BuiltinTypeName["Dynamic"] = 0] = "Dynamic";
    BuiltinTypeName[BuiltinTypeName["Bool"] = 1] = "Bool";
    BuiltinTypeName[BuiltinTypeName["String"] = 2] = "String";
    BuiltinTypeName[BuiltinTypeName["Int"] = 3] = "Int";
    BuiltinTypeName[BuiltinTypeName["Number"] = 4] = "Number";
    BuiltinTypeName[BuiltinTypeName["Function"] = 5] = "Function";
    BuiltinTypeName[BuiltinTypeName["Null"] = 6] = "Null";
  })(BuiltinTypeName || (BuiltinTypeName = {}));
  var BuiltinType = (function(_super) {
    __extends$12(BuiltinType, _super);
    function BuiltinType(name, modifiers) {
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, modifiers);
      this.name = name;
    }
    BuiltinType.prototype.visitType = function(visitor, context) {
      return visitor.visitBuiltintType(this, context);
    };
    return BuiltinType;
  }(Type$1));
  var ExternalType = (function(_super) {
    __extends$12(ExternalType, _super);
    function ExternalType(value, typeParams, modifiers) {
      if (typeParams === void 0) {
        typeParams = null;
      }
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, modifiers);
      this.value = value;
      this.typeParams = typeParams;
    }
    ExternalType.prototype.visitType = function(visitor, context) {
      return visitor.visitExternalType(this, context);
    };
    return ExternalType;
  }(Type$1));
  var ArrayType = (function(_super) {
    __extends$12(ArrayType, _super);
    function ArrayType(of, modifiers) {
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, modifiers);
      this.of = of;
    }
    ArrayType.prototype.visitType = function(visitor, context) {
      return visitor.visitArrayType(this, context);
    };
    return ArrayType;
  }(Type$1));
  var MapType = (function(_super) {
    __extends$12(MapType, _super);
    function MapType(valueType, modifiers) {
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, modifiers);
      this.valueType = valueType;
    }
    MapType.prototype.visitType = function(visitor, context) {
      return visitor.visitMapType(this, context);
    };
    return MapType;
  }(Type$1));
  var DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
  var BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
  var INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
  var NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
  var STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
  var FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
  var NULL_TYPE = new BuiltinType(BuiltinTypeName.Null);
  var BinaryOperator;
  (function(BinaryOperator) {
    BinaryOperator[BinaryOperator["Equals"] = 0] = "Equals";
    BinaryOperator[BinaryOperator["NotEquals"] = 1] = "NotEquals";
    BinaryOperator[BinaryOperator["Identical"] = 2] = "Identical";
    BinaryOperator[BinaryOperator["NotIdentical"] = 3] = "NotIdentical";
    BinaryOperator[BinaryOperator["Minus"] = 4] = "Minus";
    BinaryOperator[BinaryOperator["Plus"] = 5] = "Plus";
    BinaryOperator[BinaryOperator["Divide"] = 6] = "Divide";
    BinaryOperator[BinaryOperator["Multiply"] = 7] = "Multiply";
    BinaryOperator[BinaryOperator["Modulo"] = 8] = "Modulo";
    BinaryOperator[BinaryOperator["And"] = 9] = "And";
    BinaryOperator[BinaryOperator["Or"] = 10] = "Or";
    BinaryOperator[BinaryOperator["Lower"] = 11] = "Lower";
    BinaryOperator[BinaryOperator["LowerEquals"] = 12] = "LowerEquals";
    BinaryOperator[BinaryOperator["Bigger"] = 13] = "Bigger";
    BinaryOperator[BinaryOperator["BiggerEquals"] = 14] = "BiggerEquals";
  })(BinaryOperator || (BinaryOperator = {}));
  var Expression = (function() {
    function Expression(type) {
      this.type = type;
    }
    Expression.prototype.prop = function(name) {
      return new ReadPropExpr(this, name);
    };
    Expression.prototype.key = function(index, type) {
      if (type === void 0) {
        type = null;
      }
      return new ReadKeyExpr(this, index, type);
    };
    Expression.prototype.callMethod = function(name, params) {
      return new InvokeMethodExpr(this, name, params);
    };
    Expression.prototype.callFn = function(params) {
      return new InvokeFunctionExpr(this, params);
    };
    Expression.prototype.instantiate = function(params, type) {
      if (type === void 0) {
        type = null;
      }
      return new InstantiateExpr(this, params, type);
    };
    Expression.prototype.conditional = function(trueCase, falseCase) {
      if (falseCase === void 0) {
        falseCase = null;
      }
      return new ConditionalExpr(this, trueCase, falseCase);
    };
    Expression.prototype.equals = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs);
    };
    Expression.prototype.notEquals = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs);
    };
    Expression.prototype.identical = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs);
    };
    Expression.prototype.notIdentical = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs);
    };
    Expression.prototype.minus = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs);
    };
    Expression.prototype.plus = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs);
    };
    Expression.prototype.divide = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs);
    };
    Expression.prototype.multiply = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs);
    };
    Expression.prototype.modulo = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs);
    };
    Expression.prototype.and = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.And, this, rhs);
    };
    Expression.prototype.or = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs);
    };
    Expression.prototype.lower = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs);
    };
    Expression.prototype.lowerEquals = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs);
    };
    Expression.prototype.bigger = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs);
    };
    Expression.prototype.biggerEquals = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs);
    };
    Expression.prototype.isBlank = function() {
      return this.equals(TYPED_NULL_EXPR);
    };
    Expression.prototype.cast = function(type) {
      return new CastExpr(this, type);
    };
    Expression.prototype.toStmt = function() {
      return new ExpressionStatement(this);
    };
    return Expression;
  }());
  var BuiltinVar;
  (function(BuiltinVar) {
    BuiltinVar[BuiltinVar["This"] = 0] = "This";
    BuiltinVar[BuiltinVar["Super"] = 1] = "Super";
    BuiltinVar[BuiltinVar["CatchError"] = 2] = "CatchError";
    BuiltinVar[BuiltinVar["CatchStack"] = 3] = "CatchStack";
  })(BuiltinVar || (BuiltinVar = {}));
  var ReadVarExpr = (function(_super) {
    __extends$12(ReadVarExpr, _super);
    function ReadVarExpr(name, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      if (typeof name === 'string') {
        this.name = name;
        this.builtin = null;
      } else {
        this.name = null;
        this.builtin = name;
      }
    }
    ReadVarExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitReadVarExpr(this, context);
    };
    ReadVarExpr.prototype.set = function(value) {
      return new WriteVarExpr(this.name, value);
    };
    return ReadVarExpr;
  }(Expression));
  var WriteVarExpr = (function(_super) {
    __extends$12(WriteVarExpr, _super);
    function WriteVarExpr(name, value, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type || value.type);
      this.name = name;
      this.value = value;
    }
    WriteVarExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitWriteVarExpr(this, context);
    };
    WriteVarExpr.prototype.toDeclStmt = function(type, modifiers) {
      if (type === void 0) {
        type = null;
      }
      if (modifiers === void 0) {
        modifiers = null;
      }
      return new DeclareVarStmt(this.name, this.value, type, modifiers);
    };
    return WriteVarExpr;
  }(Expression));
  var WriteKeyExpr = (function(_super) {
    __extends$12(WriteKeyExpr, _super);
    function WriteKeyExpr(receiver, index, value, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type || value.type);
      this.receiver = receiver;
      this.index = index;
      this.value = value;
    }
    WriteKeyExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitWriteKeyExpr(this, context);
    };
    return WriteKeyExpr;
  }(Expression));
  var WritePropExpr = (function(_super) {
    __extends$12(WritePropExpr, _super);
    function WritePropExpr(receiver, name, value, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type || value.type);
      this.receiver = receiver;
      this.name = name;
      this.value = value;
    }
    WritePropExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitWritePropExpr(this, context);
    };
    return WritePropExpr;
  }(Expression));
  var BuiltinMethod;
  (function(BuiltinMethod) {
    BuiltinMethod[BuiltinMethod["ConcatArray"] = 0] = "ConcatArray";
    BuiltinMethod[BuiltinMethod["SubscribeObservable"] = 1] = "SubscribeObservable";
    BuiltinMethod[BuiltinMethod["Bind"] = 2] = "Bind";
  })(BuiltinMethod || (BuiltinMethod = {}));
  var InvokeMethodExpr = (function(_super) {
    __extends$12(InvokeMethodExpr, _super);
    function InvokeMethodExpr(receiver, method, args, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.receiver = receiver;
      this.args = args;
      if (typeof method === 'string') {
        this.name = method;
        this.builtin = null;
      } else {
        this.name = null;
        this.builtin = method;
      }
    }
    InvokeMethodExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitInvokeMethodExpr(this, context);
    };
    return InvokeMethodExpr;
  }(Expression));
  var InvokeFunctionExpr = (function(_super) {
    __extends$12(InvokeFunctionExpr, _super);
    function InvokeFunctionExpr(fn, args, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.fn = fn;
      this.args = args;
    }
    InvokeFunctionExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitInvokeFunctionExpr(this, context);
    };
    return InvokeFunctionExpr;
  }(Expression));
  var InstantiateExpr = (function(_super) {
    __extends$12(InstantiateExpr, _super);
    function InstantiateExpr(classExpr, args, type) {
      _super.call(this, type);
      this.classExpr = classExpr;
      this.args = args;
    }
    InstantiateExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitInstantiateExpr(this, context);
    };
    return InstantiateExpr;
  }(Expression));
  var LiteralExpr = (function(_super) {
    __extends$12(LiteralExpr, _super);
    function LiteralExpr(value, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.value = value;
    }
    LiteralExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitLiteralExpr(this, context);
    };
    return LiteralExpr;
  }(Expression));
  var ExternalExpr = (function(_super) {
    __extends$12(ExternalExpr, _super);
    function ExternalExpr(value, type, typeParams) {
      if (type === void 0) {
        type = null;
      }
      if (typeParams === void 0) {
        typeParams = null;
      }
      _super.call(this, type);
      this.value = value;
      this.typeParams = typeParams;
    }
    ExternalExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitExternalExpr(this, context);
    };
    return ExternalExpr;
  }(Expression));
  var ConditionalExpr = (function(_super) {
    __extends$12(ConditionalExpr, _super);
    function ConditionalExpr(condition, trueCase, falseCase, type) {
      if (falseCase === void 0) {
        falseCase = null;
      }
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type || trueCase.type);
      this.condition = condition;
      this.falseCase = falseCase;
      this.trueCase = trueCase;
    }
    ConditionalExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitConditionalExpr(this, context);
    };
    return ConditionalExpr;
  }(Expression));
  var NotExpr = (function(_super) {
    __extends$12(NotExpr, _super);
    function NotExpr(condition) {
      _super.call(this, BOOL_TYPE);
      this.condition = condition;
    }
    NotExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitNotExpr(this, context);
    };
    return NotExpr;
  }(Expression));
  var CastExpr = (function(_super) {
    __extends$12(CastExpr, _super);
    function CastExpr(value, type) {
      _super.call(this, type);
      this.value = value;
    }
    CastExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitCastExpr(this, context);
    };
    return CastExpr;
  }(Expression));
  var FnParam = (function() {
    function FnParam(name, type) {
      if (type === void 0) {
        type = null;
      }
      this.name = name;
      this.type = type;
    }
    return FnParam;
  }());
  var FunctionExpr = (function(_super) {
    __extends$12(FunctionExpr, _super);
    function FunctionExpr(params, statements, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.params = params;
      this.statements = statements;
    }
    FunctionExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitFunctionExpr(this, context);
    };
    FunctionExpr.prototype.toDeclStmt = function(name, modifiers) {
      if (modifiers === void 0) {
        modifiers = null;
      }
      return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers);
    };
    return FunctionExpr;
  }(Expression));
  var BinaryOperatorExpr = (function(_super) {
    __extends$12(BinaryOperatorExpr, _super);
    function BinaryOperatorExpr(operator, lhs, rhs, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type || lhs.type);
      this.operator = operator;
      this.rhs = rhs;
      this.lhs = lhs;
    }
    BinaryOperatorExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitBinaryOperatorExpr(this, context);
    };
    return BinaryOperatorExpr;
  }(Expression));
  var ReadPropExpr = (function(_super) {
    __extends$12(ReadPropExpr, _super);
    function ReadPropExpr(receiver, name, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.receiver = receiver;
      this.name = name;
    }
    ReadPropExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitReadPropExpr(this, context);
    };
    ReadPropExpr.prototype.set = function(value) {
      return new WritePropExpr(this.receiver, this.name, value);
    };
    return ReadPropExpr;
  }(Expression));
  var ReadKeyExpr = (function(_super) {
    __extends$12(ReadKeyExpr, _super);
    function ReadKeyExpr(receiver, index, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.receiver = receiver;
      this.index = index;
    }
    ReadKeyExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitReadKeyExpr(this, context);
    };
    ReadKeyExpr.prototype.set = function(value) {
      return new WriteKeyExpr(this.receiver, this.index, value);
    };
    return ReadKeyExpr;
  }(Expression));
  var LiteralArrayExpr = (function(_super) {
    __extends$12(LiteralArrayExpr, _super);
    function LiteralArrayExpr(entries, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.entries = entries;
    }
    LiteralArrayExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitLiteralArrayExpr(this, context);
    };
    return LiteralArrayExpr;
  }(Expression));
  var LiteralMapExpr = (function(_super) {
    __extends$12(LiteralMapExpr, _super);
    function LiteralMapExpr(entries, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.entries = entries;
      this.valueType = null;
      if (isPresent(type)) {
        this.valueType = type.valueType;
      }
    }
    LiteralMapExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitLiteralMapExpr(this, context);
    };
    return LiteralMapExpr;
  }(Expression));
  var THIS_EXPR = new ReadVarExpr(BuiltinVar.This);
  var SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super);
  var CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError);
  var CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack);
  var NULL_EXPR = new LiteralExpr(null, null);
  var TYPED_NULL_EXPR = new LiteralExpr(null, NULL_TYPE);
  var StmtModifier;
  (function(StmtModifier) {
    StmtModifier[StmtModifier["Final"] = 0] = "Final";
    StmtModifier[StmtModifier["Private"] = 1] = "Private";
  })(StmtModifier || (StmtModifier = {}));
  var Statement = (function() {
    function Statement(modifiers) {
      if (modifiers === void 0) {
        modifiers = null;
      }
      this.modifiers = modifiers;
      if (!modifiers) {
        this.modifiers = [];
      }
    }
    Statement.prototype.hasModifier = function(modifier) {
      return this.modifiers.indexOf(modifier) !== -1;
    };
    return Statement;
  }());
  var DeclareVarStmt = (function(_super) {
    __extends$12(DeclareVarStmt, _super);
    function DeclareVarStmt(name, value, type, modifiers) {
      if (type === void 0) {
        type = null;
      }
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, modifiers);
      this.name = name;
      this.value = value;
      this.type = type || value.type;
    }
    DeclareVarStmt.prototype.visitStatement = function(visitor, context) {
      return visitor.visitDeclareVarStmt(this, context);
    };
    return DeclareVarStmt;
  }(Statement));
  var DeclareFunctionStmt = (function(_super) {
    __extends$12(DeclareFunctionStmt, _super);
    function DeclareFunctionStmt(name, params, statements, type, modifiers) {
      if (type === void 0) {
        type = null;
      }
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, modifiers);
      this.name = name;
      this.params = params;
      this.statements = statements;
      this.type = type;
    }
    DeclareFunctionStmt.prototype.visitStatement = function(visitor, context) {
      return visitor.visitDeclareFunctionStmt(this, context);
    };
    return DeclareFunctionStmt;
  }(Statement));
  var ExpressionStatement = (function(_super) {
    __extends$12(ExpressionStatement, _super);
    function ExpressionStatement(expr) {
      _super.call(this);
      this.expr = expr;
    }
    ExpressionStatement.prototype.visitStatement = function(visitor, context) {
      return visitor.visitExpressionStmt(this, context);
    };
    return ExpressionStatement;
  }(Statement));
  var ReturnStatement = (function(_super) {
    __extends$12(ReturnStatement, _super);
    function ReturnStatement(value) {
      _super.call(this);
      this.value = value;
    }
    ReturnStatement.prototype.visitStatement = function(visitor, context) {
      return visitor.visitReturnStmt(this, context);
    };
    return ReturnStatement;
  }(Statement));
  var AbstractClassPart = (function() {
    function AbstractClassPart(type, modifiers) {
      if (type === void 0) {
        type = null;
      }
      this.type = type;
      this.modifiers = modifiers;
      if (!modifiers) {
        this.modifiers = [];
      }
    }
    AbstractClassPart.prototype.hasModifier = function(modifier) {
      return this.modifiers.indexOf(modifier) !== -1;
    };
    return AbstractClassPart;
  }());
  var ClassField = (function(_super) {
    __extends$12(ClassField, _super);
    function ClassField(name, type, modifiers) {
      if (type === void 0) {
        type = null;
      }
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, type, modifiers);
      this.name = name;
    }
    return ClassField;
  }(AbstractClassPart));
  var ClassMethod = (function(_super) {
    __extends$12(ClassMethod, _super);
    function ClassMethod(name, params, body, type, modifiers) {
      if (type === void 0) {
        type = null;
      }
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, type, modifiers);
      this.name = name;
      this.params = params;
      this.body = body;
    }
    return ClassMethod;
  }(AbstractClassPart));
  var ClassGetter = (function(_super) {
    __extends$12(ClassGetter, _super);
    function ClassGetter(name, body, type, modifiers) {
      if (type === void 0) {
        type = null;
      }
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, type, modifiers);
      this.name = name;
      this.body = body;
    }
    return ClassGetter;
  }(AbstractClassPart));
  var ClassStmt = (function(_super) {
    __extends$12(ClassStmt, _super);
    function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers) {
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, modifiers);
      this.name = name;
      this.parent = parent;
      this.fields = fields;
      this.getters = getters;
      this.constructorMethod = constructorMethod;
      this.methods = methods;
    }
    ClassStmt.prototype.visitStatement = function(visitor, context) {
      return visitor.visitDeclareClassStmt(this, context);
    };
    return ClassStmt;
  }(Statement));
  var IfStmt = (function(_super) {
    __extends$12(IfStmt, _super);
    function IfStmt(condition, trueCase, falseCase) {
      if (falseCase === void 0) {
        falseCase = [];
      }
      _super.call(this);
      this.condition = condition;
      this.trueCase = trueCase;
      this.falseCase = falseCase;
    }
    IfStmt.prototype.visitStatement = function(visitor, context) {
      return visitor.visitIfStmt(this, context);
    };
    return IfStmt;
  }(Statement));
  var CommentStmt = (function(_super) {
    __extends$12(CommentStmt, _super);
    function CommentStmt(comment) {
      _super.call(this);
      this.comment = comment;
    }
    CommentStmt.prototype.visitStatement = function(visitor, context) {
      return visitor.visitCommentStmt(this, context);
    };
    return CommentStmt;
  }(Statement));
  var TryCatchStmt = (function(_super) {
    __extends$12(TryCatchStmt, _super);
    function TryCatchStmt(bodyStmts, catchStmts) {
      _super.call(this);
      this.bodyStmts = bodyStmts;
      this.catchStmts = catchStmts;
    }
    TryCatchStmt.prototype.visitStatement = function(visitor, context) {
      return visitor.visitTryCatchStmt(this, context);
    };
    return TryCatchStmt;
  }(Statement));
  var ThrowStmt = (function(_super) {
    __extends$12(ThrowStmt, _super);
    function ThrowStmt(error) {
      _super.call(this);
      this.error = error;
    }
    ThrowStmt.prototype.visitStatement = function(visitor, context) {
      return visitor.visitThrowStmt(this, context);
    };
    return ThrowStmt;
  }(Statement));
  var ExpressionTransformer = (function() {
    function ExpressionTransformer() {}
    ExpressionTransformer.prototype.visitReadVarExpr = function(ast, context) {
      return ast;
    };
    ExpressionTransformer.prototype.visitWriteVarExpr = function(expr, context) {
      return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitWriteKeyExpr = function(expr, context) {
      return new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitWritePropExpr = function(expr, context) {
      return new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitInvokeMethodExpr = function(ast, context) {
      var method = ast.builtin || ast.name;
      return new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type);
    };
    ExpressionTransformer.prototype.visitInvokeFunctionExpr = function(ast, context) {
      return new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
    };
    ExpressionTransformer.prototype.visitInstantiateExpr = function(ast, context) {
      return new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
    };
    ExpressionTransformer.prototype.visitLiteralExpr = function(ast, context) {
      return ast;
    };
    ExpressionTransformer.prototype.visitExternalExpr = function(ast, context) {
      return ast;
    };
    ExpressionTransformer.prototype.visitConditionalExpr = function(ast, context) {
      return new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitNotExpr = function(ast, context) {
      return new NotExpr(ast.condition.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitCastExpr = function(ast, context) {
      return new CastExpr(ast.value.visitExpression(this, context), context);
    };
    ExpressionTransformer.prototype.visitFunctionExpr = function(ast, context) {
      return ast;
    };
    ExpressionTransformer.prototype.visitBinaryOperatorExpr = function(ast, context) {
      return new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type);
    };
    ExpressionTransformer.prototype.visitReadPropExpr = function(ast, context) {
      return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type);
    };
    ExpressionTransformer.prototype.visitReadKeyExpr = function(ast, context) {
      return new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type);
    };
    ExpressionTransformer.prototype.visitLiteralArrayExpr = function(ast, context) {
      return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context));
    };
    ExpressionTransformer.prototype.visitLiteralMapExpr = function(ast, context) {
      var _this = this;
      var entries = ast.entries.map(function(entry) {
        return [entry[0], entry[1].visitExpression(_this, context)];
      });
      return new LiteralMapExpr(entries);
    };
    ExpressionTransformer.prototype.visitAllExpressions = function(exprs, context) {
      var _this = this;
      return exprs.map(function(expr) {
        return expr.visitExpression(_this, context);
      });
    };
    ExpressionTransformer.prototype.visitDeclareVarStmt = function(stmt, context) {
      return new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers);
    };
    ExpressionTransformer.prototype.visitDeclareFunctionStmt = function(stmt, context) {
      return stmt;
    };
    ExpressionTransformer.prototype.visitExpressionStmt = function(stmt, context) {
      return new ExpressionStatement(stmt.expr.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitReturnStmt = function(stmt, context) {
      return new ReturnStatement(stmt.value.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitDeclareClassStmt = function(stmt, context) {
      return stmt;
    };
    ExpressionTransformer.prototype.visitIfStmt = function(stmt, context) {
      return new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context));
    };
    ExpressionTransformer.prototype.visitTryCatchStmt = function(stmt, context) {
      return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context));
    };
    ExpressionTransformer.prototype.visitThrowStmt = function(stmt, context) {
      return new ThrowStmt(stmt.error.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitCommentStmt = function(stmt, context) {
      return stmt;
    };
    ExpressionTransformer.prototype.visitAllStatements = function(stmts, context) {
      var _this = this;
      return stmts.map(function(stmt) {
        return stmt.visitStatement(_this, context);
      });
    };
    return ExpressionTransformer;
  }());
  var RecursiveExpressionVisitor = (function() {
    function RecursiveExpressionVisitor() {}
    RecursiveExpressionVisitor.prototype.visitReadVarExpr = function(ast, context) {
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitWriteVarExpr = function(expr, context) {
      expr.value.visitExpression(this, context);
      return expr;
    };
    RecursiveExpressionVisitor.prototype.visitWriteKeyExpr = function(expr, context) {
      expr.receiver.visitExpression(this, context);
      expr.index.visitExpression(this, context);
      expr.value.visitExpression(this, context);
      return expr;
    };
    RecursiveExpressionVisitor.prototype.visitWritePropExpr = function(expr, context) {
      expr.receiver.visitExpression(this, context);
      expr.value.visitExpression(this, context);
      return expr;
    };
    RecursiveExpressionVisitor.prototype.visitInvokeMethodExpr = function(ast, context) {
      ast.receiver.visitExpression(this, context);
      this.visitAllExpressions(ast.args, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitInvokeFunctionExpr = function(ast, context) {
      ast.fn.visitExpression(this, context);
      this.visitAllExpressions(ast.args, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitInstantiateExpr = function(ast, context) {
      ast.classExpr.visitExpression(this, context);
      this.visitAllExpressions(ast.args, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitLiteralExpr = function(ast, context) {
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitExternalExpr = function(ast, context) {
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitConditionalExpr = function(ast, context) {
      ast.condition.visitExpression(this, context);
      ast.trueCase.visitExpression(this, context);
      ast.falseCase.visitExpression(this, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitNotExpr = function(ast, context) {
      ast.condition.visitExpression(this, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitCastExpr = function(ast, context) {
      ast.value.visitExpression(this, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitFunctionExpr = function(ast, context) {
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitBinaryOperatorExpr = function(ast, context) {
      ast.lhs.visitExpression(this, context);
      ast.rhs.visitExpression(this, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitReadPropExpr = function(ast, context) {
      ast.receiver.visitExpression(this, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitReadKeyExpr = function(ast, context) {
      ast.receiver.visitExpression(this, context);
      ast.index.visitExpression(this, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitLiteralArrayExpr = function(ast, context) {
      this.visitAllExpressions(ast.entries, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitLiteralMapExpr = function(ast, context) {
      var _this = this;
      ast.entries.forEach(function(entry) {
        return entry[1].visitExpression(_this, context);
      });
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitAllExpressions = function(exprs, context) {
      var _this = this;
      exprs.forEach(function(expr) {
        return expr.visitExpression(_this, context);
      });
    };
    RecursiveExpressionVisitor.prototype.visitDeclareVarStmt = function(stmt, context) {
      stmt.value.visitExpression(this, context);
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitDeclareFunctionStmt = function(stmt, context) {
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitExpressionStmt = function(stmt, context) {
      stmt.expr.visitExpression(this, context);
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitReturnStmt = function(stmt, context) {
      stmt.value.visitExpression(this, context);
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitDeclareClassStmt = function(stmt, context) {
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitIfStmt = function(stmt, context) {
      stmt.condition.visitExpression(this, context);
      this.visitAllStatements(stmt.trueCase, context);
      this.visitAllStatements(stmt.falseCase, context);
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitTryCatchStmt = function(stmt, context) {
      this.visitAllStatements(stmt.bodyStmts, context);
      this.visitAllStatements(stmt.catchStmts, context);
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitThrowStmt = function(stmt, context) {
      stmt.error.visitExpression(this, context);
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitCommentStmt = function(stmt, context) {
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitAllStatements = function(stmts, context) {
      var _this = this;
      stmts.forEach(function(stmt) {
        return stmt.visitStatement(_this, context);
      });
    };
    return RecursiveExpressionVisitor;
  }());
  function replaceVarInExpression(varName, newValue, expression) {
    var transformer = new _ReplaceVariableTransformer(varName, newValue);
    return expression.visitExpression(transformer, null);
  }
  var _ReplaceVariableTransformer = (function(_super) {
    __extends$12(_ReplaceVariableTransformer, _super);
    function _ReplaceVariableTransformer(_varName, _newValue) {
      _super.call(this);
      this._varName = _varName;
      this._newValue = _newValue;
    }
    _ReplaceVariableTransformer.prototype.visitReadVarExpr = function(ast, context) {
      return ast.name == this._varName ? this._newValue : ast;
    };
    return _ReplaceVariableTransformer;
  }(ExpressionTransformer));
  function findReadVarNames(stmts) {
    var finder = new _VariableFinder();
    finder.visitAllStatements(stmts, null);
    return finder.varNames;
  }
  var _VariableFinder = (function(_super) {
    __extends$12(_VariableFinder, _super);
    function _VariableFinder() {
      _super.apply(this, arguments);
      this.varNames = new Set();
    }
    _VariableFinder.prototype.visitReadVarExpr = function(ast, context) {
      this.varNames.add(ast.name);
      return null;
    };
    return _VariableFinder;
  }(RecursiveExpressionVisitor));
  function variable(name, type) {
    if (type === void 0) {
      type = null;
    }
    return new ReadVarExpr(name, type);
  }
  function importExpr(id, typeParams) {
    if (typeParams === void 0) {
      typeParams = null;
    }
    return new ExternalExpr(id, null, typeParams);
  }
  function importType(id, typeParams, typeModifiers) {
    if (typeParams === void 0) {
      typeParams = null;
    }
    if (typeModifiers === void 0) {
      typeModifiers = null;
    }
    return isPresent(id) ? new ExternalType(id, typeParams, typeModifiers) : null;
  }
  function literalArr(values, type) {
    if (type === void 0) {
      type = null;
    }
    return new LiteralArrayExpr(values, type);
  }
  function literalMap(values, type) {
    if (type === void 0) {
      type = null;
    }
    return new LiteralMapExpr(values, type);
  }
  function not(expr) {
    return new NotExpr(expr);
  }
  function fn(params, body, type) {
    if (type === void 0) {
      type = null;
    }
    return new FunctionExpr(params, body, type);
  }
  function literal(value, type) {
    if (type === void 0) {
      type = null;
    }
    return new LiteralExpr(value, type);
  }
  var __extends$13 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AnimationAst = (function() {
    function AnimationAst() {
      this.startTime = 0;
      this.playTime = 0;
    }
    return AnimationAst;
  }());
  var AnimationStateAst = (function(_super) {
    __extends$13(AnimationStateAst, _super);
    function AnimationStateAst() {
      _super.apply(this, arguments);
    }
    return AnimationStateAst;
  }(AnimationAst));
  var AnimationEntryAst = (function(_super) {
    __extends$13(AnimationEntryAst, _super);
    function AnimationEntryAst(name, stateDeclarations, stateTransitions) {
      _super.call(this);
      this.name = name;
      this.stateDeclarations = stateDeclarations;
      this.stateTransitions = stateTransitions;
    }
    AnimationEntryAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationEntry(this, context);
    };
    return AnimationEntryAst;
  }(AnimationAst));
  var AnimationStateDeclarationAst = (function(_super) {
    __extends$13(AnimationStateDeclarationAst, _super);
    function AnimationStateDeclarationAst(stateName, styles) {
      _super.call(this);
      this.stateName = stateName;
      this.styles = styles;
    }
    AnimationStateDeclarationAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationStateDeclaration(this, context);
    };
    return AnimationStateDeclarationAst;
  }(AnimationStateAst));
  var AnimationStateTransitionExpression = (function() {
    function AnimationStateTransitionExpression(fromState, toState) {
      this.fromState = fromState;
      this.toState = toState;
    }
    return AnimationStateTransitionExpression;
  }());
  var AnimationStateTransitionAst = (function(_super) {
    __extends$13(AnimationStateTransitionAst, _super);
    function AnimationStateTransitionAst(stateChanges, animation) {
      _super.call(this);
      this.stateChanges = stateChanges;
      this.animation = animation;
    }
    AnimationStateTransitionAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationStateTransition(this, context);
    };
    return AnimationStateTransitionAst;
  }(AnimationStateAst));
  var AnimationStepAst = (function(_super) {
    __extends$13(AnimationStepAst, _super);
    function AnimationStepAst(startingStyles, keyframes, duration, delay, easing) {
      _super.call(this);
      this.startingStyles = startingStyles;
      this.keyframes = keyframes;
      this.duration = duration;
      this.delay = delay;
      this.easing = easing;
    }
    AnimationStepAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationStep(this, context);
    };
    return AnimationStepAst;
  }(AnimationAst));
  var AnimationStylesAst = (function(_super) {
    __extends$13(AnimationStylesAst, _super);
    function AnimationStylesAst(styles) {
      _super.call(this);
      this.styles = styles;
    }
    AnimationStylesAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationStyles(this, context);
    };
    return AnimationStylesAst;
  }(AnimationAst));
  var AnimationKeyframeAst = (function(_super) {
    __extends$13(AnimationKeyframeAst, _super);
    function AnimationKeyframeAst(offset, styles) {
      _super.call(this);
      this.offset = offset;
      this.styles = styles;
    }
    AnimationKeyframeAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationKeyframe(this, context);
    };
    return AnimationKeyframeAst;
  }(AnimationAst));
  var AnimationWithStepsAst = (function(_super) {
    __extends$13(AnimationWithStepsAst, _super);
    function AnimationWithStepsAst(steps) {
      _super.call(this);
      this.steps = steps;
    }
    return AnimationWithStepsAst;
  }(AnimationAst));
  var AnimationGroupAst = (function(_super) {
    __extends$13(AnimationGroupAst, _super);
    function AnimationGroupAst(steps) {
      _super.call(this, steps);
    }
    AnimationGroupAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationGroup(this, context);
    };
    return AnimationGroupAst;
  }(AnimationWithStepsAst));
  var AnimationSequenceAst = (function(_super) {
    __extends$13(AnimationSequenceAst, _super);
    function AnimationSequenceAst(steps) {
      _super.call(this, steps);
    }
    AnimationSequenceAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationSequence(this, context);
    };
    return AnimationSequenceAst;
  }(AnimationWithStepsAst));
  var AnimationEntryCompileResult = (function() {
    function AnimationEntryCompileResult(name, statements, fnExp) {
      this.name = name;
      this.statements = statements;
      this.fnExp = fnExp;
    }
    return AnimationEntryCompileResult;
  }());
  var AnimationCompiler = (function() {
    function AnimationCompiler() {}
    AnimationCompiler.prototype.compile = function(factoryNamePrefix, parsedAnimations) {
      return parsedAnimations.map(function(entry) {
        var factoryName = factoryNamePrefix + "_" + entry.name;
        var visitor = new _AnimationBuilder(entry.name, factoryName);
        return visitor.build(entry);
      });
    };
    return AnimationCompiler;
  }());
  var _ANIMATION_FACTORY_ELEMENT_VAR = variable('element');
  var _ANIMATION_DEFAULT_STATE_VAR = variable('defaultStateStyles');
  var _ANIMATION_FACTORY_VIEW_VAR = variable('view');
  var _ANIMATION_FACTORY_VIEW_CONTEXT = _ANIMATION_FACTORY_VIEW_VAR.prop('animationContext');
  var _ANIMATION_FACTORY_RENDERER_VAR = _ANIMATION_FACTORY_VIEW_VAR.prop('renderer');
  var _ANIMATION_CURRENT_STATE_VAR = variable('currentState');
  var _ANIMATION_NEXT_STATE_VAR = variable('nextState');
  var _ANIMATION_PLAYER_VAR = variable('player');
  var _ANIMATION_TIME_VAR = variable('totalTime');
  var _ANIMATION_START_STATE_STYLES_VAR = variable('startStateStyles');
  var _ANIMATION_END_STATE_STYLES_VAR = variable('endStateStyles');
  var _ANIMATION_COLLECTED_STYLES = variable('collectedStyles');
  var _PREVIOUS_ANIMATION_PLAYERS = variable('previousPlayers');
  var _EMPTY_MAP = literalMap([]);
  var _EMPTY_ARRAY = literalArr([]);
  var _AnimationBuilder = (function() {
    function _AnimationBuilder(animationName, factoryName) {
      this.animationName = animationName;
      this._fnVarName = factoryName + '_factory';
      this._statesMapVarName = factoryName + '_states';
      this._statesMapVar = variable(this._statesMapVarName);
    }
    _AnimationBuilder.prototype.visitAnimationStyles = function(ast, context) {
      var stylesArr = [];
      if (context.isExpectingFirstStyleStep) {
        stylesArr.push(_ANIMATION_START_STATE_STYLES_VAR);
        context.isExpectingFirstStyleStep = false;
      }
      ast.styles.forEach(function(entry) {
        var entries = Object.keys(entry).map(function(key) {
          return [key, literal(entry[key])];
        });
        stylesArr.push(literalMap(entries));
      });
      return importExpr(resolveIdentifier(Identifiers.AnimationStyles)).instantiate([importExpr(resolveIdentifier(Identifiers.collectAndResolveStyles)).callFn([_ANIMATION_COLLECTED_STYLES, literalArr(stylesArr)])]);
    };
    _AnimationBuilder.prototype.visitAnimationKeyframe = function(ast, context) {
      return importExpr(resolveIdentifier(Identifiers.AnimationKeyframe)).instantiate([literal(ast.offset), ast.styles.visit(this, context)]);
    };
    _AnimationBuilder.prototype.visitAnimationStep = function(ast, context) {
      var _this = this;
      if (context.endStateAnimateStep === ast) {
        return this._visitEndStateAnimation(ast, context);
      }
      var startingStylesExpr = ast.startingStyles.visit(this, context);
      var keyframeExpressions = ast.keyframes.map(function(keyframeEntry) {
        return keyframeEntry.visit(_this, context);
      });
      return this._callAnimateMethod(ast, startingStylesExpr, literalArr(keyframeExpressions), context);
    };
    _AnimationBuilder.prototype._visitEndStateAnimation = function(ast, context) {
      var _this = this;
      var startingStylesExpr = ast.startingStyles.visit(this, context);
      var keyframeExpressions = ast.keyframes.map(function(keyframe) {
        return keyframe.visit(_this, context);
      });
      var keyframesExpr = importExpr(resolveIdentifier(Identifiers.balanceAnimationKeyframes)).callFn([_ANIMATION_COLLECTED_STYLES, _ANIMATION_END_STATE_STYLES_VAR, literalArr(keyframeExpressions)]);
      return this._callAnimateMethod(ast, startingStylesExpr, keyframesExpr, context);
    };
    _AnimationBuilder.prototype._callAnimateMethod = function(ast, startingStylesExpr, keyframesExpr, context) {
      var previousStylesValue = _EMPTY_ARRAY;
      if (context.isExpectingFirstAnimateStep) {
        previousStylesValue = _PREVIOUS_ANIMATION_PLAYERS;
        context.isExpectingFirstAnimateStep = false;
      }
      context.totalTransitionTime += ast.duration + ast.delay;
      return _ANIMATION_FACTORY_RENDERER_VAR.callMethod('animate', [_ANIMATION_FACTORY_ELEMENT_VAR, startingStylesExpr, keyframesExpr, literal(ast.duration), literal(ast.delay), literal(ast.easing), previousStylesValue]);
    };
    _AnimationBuilder.prototype.visitAnimationSequence = function(ast, context) {
      var _this = this;
      var playerExprs = ast.steps.map(function(step) {
        return step.visit(_this, context);
      });
      return importExpr(resolveIdentifier(Identifiers.AnimationSequencePlayer)).instantiate([literalArr(playerExprs)]);
    };
    _AnimationBuilder.prototype.visitAnimationGroup = function(ast, context) {
      var _this = this;
      var playerExprs = ast.steps.map(function(step) {
        return step.visit(_this, context);
      });
      return importExpr(resolveIdentifier(Identifiers.AnimationGroupPlayer)).instantiate([literalArr(playerExprs)]);
    };
    _AnimationBuilder.prototype.visitAnimationStateDeclaration = function(ast, context) {
      var flatStyles = {};
      _getStylesArray(ast).forEach(function(entry) {
        Object.keys(entry).forEach(function(key) {
          flatStyles[key] = entry[key];
        });
      });
      context.stateMap.registerState(ast.stateName, flatStyles);
    };
    _AnimationBuilder.prototype.visitAnimationStateTransition = function(ast, context) {
      var steps = ast.animation.steps;
      var lastStep = steps[steps.length - 1];
      if (_isEndStateAnimateStep(lastStep)) {
        context.endStateAnimateStep = lastStep;
      }
      context.totalTransitionTime = 0;
      context.isExpectingFirstStyleStep = true;
      context.isExpectingFirstAnimateStep = true;
      var stateChangePreconditions = [];
      ast.stateChanges.forEach(function(stateChange) {
        stateChangePreconditions.push(_compareToAnimationStateExpr(_ANIMATION_CURRENT_STATE_VAR, stateChange.fromState).and(_compareToAnimationStateExpr(_ANIMATION_NEXT_STATE_VAR, stateChange.toState)));
        if (stateChange.fromState != ANY_STATE) {
          context.stateMap.registerState(stateChange.fromState);
        }
        if (stateChange.toState != ANY_STATE) {
          context.stateMap.registerState(stateChange.toState);
        }
      });
      var animationPlayerExpr = ast.animation.visit(this, context);
      var reducedStateChangesPrecondition = stateChangePreconditions.reduce(function(a, b) {
        return a.or(b);
      });
      var precondition = _ANIMATION_PLAYER_VAR.equals(NULL_EXPR).and(reducedStateChangesPrecondition);
      var animationStmt = _ANIMATION_PLAYER_VAR.set(animationPlayerExpr).toStmt();
      var totalTimeStmt = _ANIMATION_TIME_VAR.set(literal(context.totalTransitionTime)).toStmt();
      return new IfStmt(precondition, [animationStmt, totalTimeStmt]);
    };
    _AnimationBuilder.prototype.visitAnimationEntry = function(ast, context) {
      var _this = this;
      ast.stateDeclarations.forEach(function(def) {
        return def.visit(_this, context);
      });
      context.stateMap.registerState(DEFAULT_STATE, {});
      var statements = [];
      statements.push(_PREVIOUS_ANIMATION_PLAYERS.set(_ANIMATION_FACTORY_VIEW_CONTEXT.callMethod('getAnimationPlayers', [_ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName), _ANIMATION_NEXT_STATE_VAR.equals(literal(EMPTY_ANIMATION_STATE))])).toDeclStmt());
      statements.push(_ANIMATION_COLLECTED_STYLES.set(_EMPTY_MAP).toDeclStmt());
      statements.push(_ANIMATION_PLAYER_VAR.set(NULL_EXPR).toDeclStmt());
      statements.push(_ANIMATION_TIME_VAR.set(literal(0)).toDeclStmt());
      statements.push(_ANIMATION_DEFAULT_STATE_VAR.set(this._statesMapVar.key(literal(DEFAULT_STATE))).toDeclStmt());
      statements.push(_ANIMATION_START_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_CURRENT_STATE_VAR)).toDeclStmt());
      statements.push(new IfStmt(_ANIMATION_START_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_START_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
      statements.push(_ANIMATION_END_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_NEXT_STATE_VAR)).toDeclStmt());
      statements.push(new IfStmt(_ANIMATION_END_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_END_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
      var RENDER_STYLES_FN = importExpr(resolveIdentifier(Identifiers.renderStyles));
      ast.stateTransitions.forEach(function(transAst) {
        return statements.push(transAst.visit(_this, context));
      });
      statements.push(new IfStmt(_ANIMATION_PLAYER_VAR.equals(NULL_EXPR), [_ANIMATION_PLAYER_VAR.set(importExpr(resolveIdentifier(Identifiers.NoOpAnimationPlayer)).instantiate([])).toStmt()]));
      statements.push(_ANIMATION_PLAYER_VAR.callMethod('onDone', [fn([], [_ANIMATION_PLAYER_VAR.callMethod('destroy', []).toStmt(), RENDER_STYLES_FN.callFn([_ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR, importExpr(resolveIdentifier(Identifiers.prepareFinalAnimationStyles)).callFn([_ANIMATION_START_STATE_STYLES_VAR, _ANIMATION_END_STATE_STYLES_VAR])]).toStmt()])]).toStmt());
      statements.push(importExpr(resolveIdentifier(Identifiers.AnimationSequencePlayer)).instantiate([_PREVIOUS_ANIMATION_PLAYERS]).callMethod('destroy', []).toStmt());
      statements.push(RENDER_STYLES_FN.callFn([_ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR, importExpr(resolveIdentifier(Identifiers.clearStyles)).callFn([_ANIMATION_START_STATE_STYLES_VAR])]).toStmt());
      statements.push(_ANIMATION_FACTORY_VIEW_CONTEXT.callMethod('queueAnimation', [_ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName), _ANIMATION_PLAYER_VAR]).toStmt());
      statements.push(new ReturnStatement(importExpr(resolveIdentifier(Identifiers.AnimationTransition)).instantiate([_ANIMATION_PLAYER_VAR, _ANIMATION_CURRENT_STATE_VAR, _ANIMATION_NEXT_STATE_VAR, _ANIMATION_TIME_VAR])));
      return fn([new FnParam(_ANIMATION_FACTORY_VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(_ANIMATION_FACTORY_ELEMENT_VAR.name, DYNAMIC_TYPE), new FnParam(_ANIMATION_CURRENT_STATE_VAR.name, DYNAMIC_TYPE), new FnParam(_ANIMATION_NEXT_STATE_VAR.name, DYNAMIC_TYPE)], statements, importType(resolveIdentifier(Identifiers.AnimationTransition)));
    };
    _AnimationBuilder.prototype.build = function(ast) {
      var context = new _AnimationBuilderContext();
      var fnStatement = ast.visit(this, context).toDeclStmt(this._fnVarName);
      var fnVariable = variable(this._fnVarName);
      var lookupMap = [];
      Object.keys(context.stateMap.states).forEach(function(stateName) {
        var value = context.stateMap.states[stateName];
        var variableValue = _EMPTY_MAP;
        if (isPresent(value)) {
          var styleMap_1 = [];
          Object.keys(value).forEach(function(key) {
            styleMap_1.push([key, literal(value[key])]);
          });
          variableValue = literalMap(styleMap_1);
        }
        lookupMap.push([stateName, variableValue]);
      });
      var compiledStatesMapStmt = this._statesMapVar.set(literalMap(lookupMap)).toDeclStmt();
      var statements = [compiledStatesMapStmt, fnStatement];
      return new AnimationEntryCompileResult(this.animationName, statements, fnVariable);
    };
    return _AnimationBuilder;
  }());
  var _AnimationBuilderContext = (function() {
    function _AnimationBuilderContext() {
      this.stateMap = new _AnimationBuilderStateMap();
      this.endStateAnimateStep = null;
      this.isExpectingFirstStyleStep = false;
      this.isExpectingFirstAnimateStep = false;
      this.totalTransitionTime = 0;
    }
    return _AnimationBuilderContext;
  }());
  var _AnimationBuilderStateMap = (function() {
    function _AnimationBuilderStateMap() {
      this._states = {};
    }
    Object.defineProperty(_AnimationBuilderStateMap.prototype, "states", {
      get: function() {
        return this._states;
      },
      enumerable: true,
      configurable: true
    });
    _AnimationBuilderStateMap.prototype.registerState = function(name, value) {
      if (value === void 0) {
        value = null;
      }
      var existingEntry = this._states[name];
      if (!existingEntry) {
        this._states[name] = value;
      }
    };
    return _AnimationBuilderStateMap;
  }());
  function _compareToAnimationStateExpr(value, animationState) {
    var emptyStateLiteral = literal(EMPTY_ANIMATION_STATE);
    switch (animationState) {
      case EMPTY_ANIMATION_STATE:
        return value.equals(emptyStateLiteral);
      case ANY_STATE:
        return literal(true);
      default:
        return value.equals(literal(animationState));
    }
  }
  function _isEndStateAnimateStep(step) {
    if (step instanceof AnimationStepAst && step.duration > 0 && step.keyframes.length == 2) {
      var styles1 = _getStylesArray(step.keyframes[0])[0];
      var styles2 = _getStylesArray(step.keyframes[1])[0];
      return Object.keys(styles1).length === 0 && Object.keys(styles2).length === 0;
    }
    return false;
  }
  function _getStylesArray(obj) {
    return obj.styles.styles;
  }
  function createDiTokenExpression(token) {
    if (isPresent(token.value)) {
      return literal(token.value);
    } else if (token.identifierIsInstance) {
      return importExpr(token.identifier).instantiate([], importType(token.identifier, [], [TypeModifier.Const]));
    } else {
      return importExpr(token.identifier);
    }
  }
  function createInlineArray(values) {
    if (values.length === 0) {
      return importExpr(resolveIdentifier(Identifiers.EMPTY_INLINE_ARRAY));
    }
    var log2 = Math.log(values.length) / Math.log(2);
    var index = Math.ceil(log2);
    var identifierSpec = index < Identifiers.inlineArrays.length ? Identifiers.inlineArrays[index] : Identifiers.InlineArrayDynamic;
    var identifier = resolveIdentifier(identifierSpec);
    return importExpr(identifier).instantiate([literal(values.length)].concat(values));
  }
  function createPureProxy(fn, argCount, pureProxyProp, builder) {
    builder.fields.push(new ClassField(pureProxyProp.name, null));
    var pureProxyId = argCount < Identifiers.pureProxies.length ? Identifiers.pureProxies[argCount] : null;
    if (!pureProxyId) {
      throw new Error("Unsupported number of argument for pure functions: " + argCount);
    }
    builder.ctorStmts.push(THIS_EXPR.prop(pureProxyProp.name).set(importExpr(resolveIdentifier(pureProxyId)).callFn([fn])).toStmt());
  }
  function createEnumExpression(enumType, enumValue) {
    var enumName = Object.keys(enumType.runtime).find(function(propName) {
      return enumType.runtime[propName] === enumValue;
    });
    if (!enumName) {
      throw new Error("Unknown enum value " + enumValue + " in " + enumType.name);
    }
    return importExpr(resolveEnumIdentifier(resolveIdentifier(enumType), enumName));
  }
  var CheckBindingField = (function() {
    function CheckBindingField(expression, bindingId) {
      this.expression = expression;
      this.bindingId = bindingId;
    }
    return CheckBindingField;
  }());
  function createCheckBindingField(builder) {
    var bindingId = "" + builder.fields.length;
    var fieldExpr = createBindFieldExpr(bindingId);
    builder.fields.push(new ClassField(fieldExpr.name, null, [StmtModifier.Private]));
    builder.ctorStmts.push(THIS_EXPR.prop(fieldExpr.name).set(importExpr(resolveIdentifier(Identifiers.UNINITIALIZED))).toStmt());
    return new CheckBindingField(fieldExpr, bindingId);
  }
  function createCheckBindingStmt(evalResult, fieldExpr, throwOnChangeVar, actions) {
    var condition = importExpr(resolveIdentifier(Identifiers.checkBinding)).callFn([throwOnChangeVar, fieldExpr, evalResult.currValExpr]);
    if (evalResult.forceUpdate) {
      condition = evalResult.forceUpdate.or(condition);
    }
    return evalResult.stmts.concat([new IfStmt(condition, actions.concat([THIS_EXPR.prop(fieldExpr.name).set(evalResult.currValExpr).toStmt()]))]);
  }
  function createBindFieldExpr(bindingId) {
    return THIS_EXPR.prop("_expr_" + bindingId);
  }
  var VAL_UNWRAPPER_VAR = variable("valUnwrapper");
  var EventHandlerVars = (function() {
    function EventHandlerVars() {}
    EventHandlerVars.event = variable('$event');
    return EventHandlerVars;
  }());
  var ConvertPropertyBindingResult = (function() {
    function ConvertPropertyBindingResult(stmts, currValExpr, forceUpdate) {
      this.stmts = stmts;
      this.currValExpr = currValExpr;
      this.forceUpdate = forceUpdate;
    }
    return ConvertPropertyBindingResult;
  }());
  function convertPropertyBinding(builder, nameResolver, implicitReceiver, expression, bindingId) {
    var currValExpr = createCurrValueExpr(bindingId);
    var stmts = [];
    if (!nameResolver) {
      nameResolver = new DefaultNameResolver();
    }
    var visitor = new _AstToIrVisitor(builder, nameResolver, implicitReceiver, VAL_UNWRAPPER_VAR, bindingId, false);
    var outputExpr = expression.visit(visitor, _Mode.Expression);
    if (!outputExpr) {
      return null;
    }
    if (visitor.temporaryCount) {
      for (var i = 0; i < visitor.temporaryCount; i++) {
        stmts.push(temporaryDeclaration(bindingId, i));
      }
    }
    if (visitor.needsValueUnwrapper) {
      var initValueUnwrapperStmt = VAL_UNWRAPPER_VAR.callMethod('reset', []).toStmt();
      stmts.push(initValueUnwrapperStmt);
    }
    stmts.push(currValExpr.set(outputExpr).toDeclStmt(null, [StmtModifier.Final]));
    if (visitor.needsValueUnwrapper) {
      return new ConvertPropertyBindingResult(stmts, currValExpr, VAL_UNWRAPPER_VAR.prop('hasWrappedValue'));
    } else {
      return new ConvertPropertyBindingResult(stmts, currValExpr, null);
    }
  }
  var ConvertActionBindingResult = (function() {
    function ConvertActionBindingResult(stmts, preventDefault) {
      this.stmts = stmts;
      this.preventDefault = preventDefault;
    }
    return ConvertActionBindingResult;
  }());
  function convertActionBinding(builder, nameResolver, implicitReceiver, action, bindingId) {
    if (!nameResolver) {
      nameResolver = new DefaultNameResolver();
    }
    var visitor = new _AstToIrVisitor(builder, nameResolver, implicitReceiver, null, bindingId, true);
    var actionStmts = [];
    flattenStatements(action.visit(visitor, _Mode.Statement), actionStmts);
    prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);
    var lastIndex = actionStmts.length - 1;
    var preventDefaultVar = null;
    if (lastIndex >= 0) {
      var lastStatement = actionStmts[lastIndex];
      var returnExpr = convertStmtIntoExpression(lastStatement);
      if (returnExpr) {
        preventDefaultVar = createPreventDefaultVar(bindingId);
        actionStmts[lastIndex] = preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false))).toDeclStmt(null, [StmtModifier.Final]);
      }
    }
    return new ConvertActionBindingResult(actionStmts, preventDefaultVar);
  }
  function createSharedBindingVariablesIfNeeded(stmts) {
    var unwrapperStmts = [];
    var readVars = findReadVarNames(stmts);
    if (readVars.has(VAL_UNWRAPPER_VAR.name)) {
      unwrapperStmts.push(VAL_UNWRAPPER_VAR.set(importExpr(resolveIdentifier(Identifiers.ValueUnwrapper)).instantiate([])).toDeclStmt(null, [StmtModifier.Final]));
    }
    return unwrapperStmts;
  }
  function temporaryName(bindingId, temporaryNumber) {
    return "tmp_" + bindingId + "_" + temporaryNumber;
  }
  function temporaryDeclaration(bindingId, temporaryNumber) {
    return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber), NULL_EXPR);
  }
  function prependTemporaryDecls(temporaryCount, bindingId, statements) {
    for (var i = temporaryCount - 1; i >= 0; i--) {
      statements.unshift(temporaryDeclaration(bindingId, i));
    }
  }
  var _Mode;
  (function(_Mode) {
    _Mode[_Mode["Statement"] = 0] = "Statement";
    _Mode[_Mode["Expression"] = 1] = "Expression";
  })(_Mode || (_Mode = {}));
  function ensureStatementMode(mode, ast) {
    if (mode !== _Mode.Statement) {
      throw new Error("Expected a statement, but saw " + ast);
    }
  }
  function ensureExpressionMode(mode, ast) {
    if (mode !== _Mode.Expression) {
      throw new Error("Expected an expression, but saw " + ast);
    }
  }
  function convertToStatementIfNeeded(mode, expr) {
    if (mode === _Mode.Statement) {
      return expr.toStmt();
    } else {
      return expr;
    }
  }
  var _AstToIrVisitor = (function() {
    function _AstToIrVisitor(_builder, _nameResolver, _implicitReceiver, _valueUnwrapper, bindingId, isAction) {
      this._builder = _builder;
      this._nameResolver = _nameResolver;
      this._implicitReceiver = _implicitReceiver;
      this._valueUnwrapper = _valueUnwrapper;
      this.bindingId = bindingId;
      this.isAction = isAction;
      this._nodeMap = new Map();
      this._resultMap = new Map();
      this._currentTemporary = 0;
      this.needsValueUnwrapper = false;
      this.temporaryCount = 0;
    }
    _AstToIrVisitor.prototype.visitBinary = function(ast, mode) {
      var op;
      switch (ast.operation) {
        case '+':
          op = BinaryOperator.Plus;
          break;
        case '-':
          op = BinaryOperator.Minus;
          break;
        case '*':
          op = BinaryOperator.Multiply;
          break;
        case '/':
          op = BinaryOperator.Divide;
          break;
        case '%':
          op = BinaryOperator.Modulo;
          break;
        case '&&':
          op = BinaryOperator.And;
          break;
        case '||':
          op = BinaryOperator.Or;
          break;
        case '==':
          op = BinaryOperator.Equals;
          break;
        case '!=':
          op = BinaryOperator.NotEquals;
          break;
        case '===':
          op = BinaryOperator.Identical;
          break;
        case '!==':
          op = BinaryOperator.NotIdentical;
          break;
        case '<':
          op = BinaryOperator.Lower;
          break;
        case '>':
          op = BinaryOperator.Bigger;
          break;
        case '<=':
          op = BinaryOperator.LowerEquals;
          break;
        case '>=':
          op = BinaryOperator.BiggerEquals;
          break;
        default:
          throw new Error("Unsupported operation " + ast.operation);
      }
      return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression)));
    };
    _AstToIrVisitor.prototype.visitChain = function(ast, mode) {
      ensureStatementMode(mode, ast);
      return this.visitAll(ast.expressions, mode);
    };
    _AstToIrVisitor.prototype.visitConditional = function(ast, mode) {
      var value = this.visit(ast.condition, _Mode.Expression);
      return convertToStatementIfNeeded(mode, value.conditional(this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression)));
    };
    _AstToIrVisitor.prototype.visitPipe = function(ast, mode) {
      var input = this.visit(ast.exp, _Mode.Expression);
      var args = this.visitAll(ast.args, _Mode.Expression);
      var value = this._nameResolver.callPipe(ast.name, input, args);
      if (!value) {
        throw new Error("Illegal state: Pipe " + ast.name + " is not allowed here!");
      }
      this.needsValueUnwrapper = true;
      return convertToStatementIfNeeded(mode, this._valueUnwrapper.callMethod('unwrap', [value]));
    };
    _AstToIrVisitor.prototype.visitFunctionCall = function(ast, mode) {
      return convertToStatementIfNeeded(mode, this.visit(ast.target, _Mode.Expression).callFn(this.visitAll(ast.args, _Mode.Expression)));
    };
    _AstToIrVisitor.prototype.visitImplicitReceiver = function(ast, mode) {
      ensureExpressionMode(mode, ast);
      return this._implicitReceiver;
    };
    _AstToIrVisitor.prototype.visitInterpolation = function(ast, mode) {
      ensureExpressionMode(mode, ast);
      var args = [literal(ast.expressions.length)];
      for (var i = 0; i < ast.strings.length - 1; i++) {
        args.push(literal(ast.strings[i]));
        args.push(this.visit(ast.expressions[i], _Mode.Expression));
      }
      args.push(literal(ast.strings[ast.strings.length - 1]));
      return ast.expressions.length <= 9 ? importExpr(resolveIdentifier(Identifiers.inlineInterpolate)).callFn(args) : importExpr(resolveIdentifier(Identifiers.interpolate)).callFn([args[0], literalArr(args.slice(1))]);
    };
    _AstToIrVisitor.prototype.visitKeyedRead = function(ast, mode) {
      return convertToStatementIfNeeded(mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression)));
    };
    _AstToIrVisitor.prototype.visitKeyedWrite = function(ast, mode) {
      var obj = this.visit(ast.obj, _Mode.Expression);
      var key = this.visit(ast.key, _Mode.Expression);
      var value = this.visit(ast.value, _Mode.Expression);
      return convertToStatementIfNeeded(mode, obj.key(key).set(value));
    };
    _AstToIrVisitor.prototype.visitLiteralArray = function(ast, mode) {
      var parts = this.visitAll(ast.expressions, mode);
      var literalArr$$ = this.isAction ? literalArr(parts) : createCachedLiteralArray(this._builder, parts);
      return convertToStatementIfNeeded(mode, literalArr$$);
    };
    _AstToIrVisitor.prototype.visitLiteralMap = function(ast, mode) {
      var parts = [];
      for (var i = 0; i < ast.keys.length; i++) {
        parts.push([ast.keys[i], this.visit(ast.values[i], _Mode.Expression)]);
      }
      var literalMap$$ = this.isAction ? literalMap(parts) : createCachedLiteralMap(this._builder, parts);
      return convertToStatementIfNeeded(mode, literalMap$$);
    };
    _AstToIrVisitor.prototype.visitLiteralPrimitive = function(ast, mode) {
      return convertToStatementIfNeeded(mode, literal(ast.value));
    };
    _AstToIrVisitor.prototype._getLocal = function(name) {
      if (this.isAction && name == EventHandlerVars.event.name) {
        return EventHandlerVars.event;
      }
      return this._nameResolver.getLocal(name);
    };
    _AstToIrVisitor.prototype.visitMethodCall = function(ast, mode) {
      var leftMostSafe = this.leftMostSafeNode(ast);
      if (leftMostSafe) {
        return this.convertSafeAccess(ast, leftMostSafe, mode);
      } else {
        var args = this.visitAll(ast.args, _Mode.Expression);
        var result = null;
        var receiver = this.visit(ast.receiver, _Mode.Expression);
        if (receiver === this._implicitReceiver) {
          var varExpr = this._getLocal(ast.name);
          if (isPresent(varExpr)) {
            result = varExpr.callFn(args);
          }
        }
        if (isBlank(result)) {
          result = receiver.callMethod(ast.name, args);
        }
        return convertToStatementIfNeeded(mode, result);
      }
    };
    _AstToIrVisitor.prototype.visitPrefixNot = function(ast, mode) {
      return convertToStatementIfNeeded(mode, not(this.visit(ast.expression, _Mode.Expression)));
    };
    _AstToIrVisitor.prototype.visitPropertyRead = function(ast, mode) {
      var leftMostSafe = this.leftMostSafeNode(ast);
      if (leftMostSafe) {
        return this.convertSafeAccess(ast, leftMostSafe, mode);
      } else {
        var result = null;
        var receiver = this.visit(ast.receiver, _Mode.Expression);
        if (receiver === this._implicitReceiver) {
          result = this._getLocal(ast.name);
        }
        if (isBlank(result)) {
          result = receiver.prop(ast.name);
        }
        return convertToStatementIfNeeded(mode, result);
      }
    };
    _AstToIrVisitor.prototype.visitPropertyWrite = function(ast, mode) {
      var receiver = this.visit(ast.receiver, _Mode.Expression);
      if (receiver === this._implicitReceiver) {
        var varExpr = this._getLocal(ast.name);
        if (isPresent(varExpr)) {
          throw new Error('Cannot assign to a reference or variable!');
        }
      }
      return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression)));
    };
    _AstToIrVisitor.prototype.visitSafePropertyRead = function(ast, mode) {
      return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
    };
    _AstToIrVisitor.prototype.visitSafeMethodCall = function(ast, mode) {
      return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
    };
    _AstToIrVisitor.prototype.visitAll = function(asts, mode) {
      var _this = this;
      return asts.map(function(ast) {
        return _this.visit(ast, mode);
      });
    };
    _AstToIrVisitor.prototype.visitQuote = function(ast, mode) {
      throw new Error('Quotes are not supported for evaluation!');
    };
    _AstToIrVisitor.prototype.visit = function(ast, mode) {
      var result = this._resultMap.get(ast);
      if (result)
        return result;
      return (this._nodeMap.get(ast) || ast).visit(this, mode);
    };
    _AstToIrVisitor.prototype.convertSafeAccess = function(ast, leftMostSafe, mode) {
      var guardedExpression = this.visit(leftMostSafe.receiver, _Mode.Expression);
      var temporary;
      if (this.needsTemporary(leftMostSafe.receiver)) {
        temporary = this.allocateTemporary();
        guardedExpression = temporary.set(guardedExpression);
        this._resultMap.set(leftMostSafe.receiver, temporary);
      }
      var condition = guardedExpression.isBlank();
      if (leftMostSafe instanceof SafeMethodCall) {
        this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));
      } else {
        this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));
      }
      var access = this.visit(ast, _Mode.Expression);
      this._nodeMap.delete(leftMostSafe);
      if (temporary) {
        this.releaseTemporary(temporary);
      }
      return convertToStatementIfNeeded(mode, condition.conditional(literal(null), access));
    };
    _AstToIrVisitor.prototype.leftMostSafeNode = function(ast) {
      var _this = this;
      var visit = function(visitor, ast) {
        return (_this._nodeMap.get(ast) || ast).visit(visitor);
      };
      return ast.visit({
        visitBinary: function(ast) {
          return null;
        },
        visitChain: function(ast) {
          return null;
        },
        visitConditional: function(ast) {
          return null;
        },
        visitFunctionCall: function(ast) {
          return null;
        },
        visitImplicitReceiver: function(ast) {
          return null;
        },
        visitInterpolation: function(ast) {
          return null;
        },
        visitKeyedRead: function(ast) {
          return visit(this, ast.obj);
        },
        visitKeyedWrite: function(ast) {
          return null;
        },
        visitLiteralArray: function(ast) {
          return null;
        },
        visitLiteralMap: function(ast) {
          return null;
        },
        visitLiteralPrimitive: function(ast) {
          return null;
        },
        visitMethodCall: function(ast) {
          return visit(this, ast.receiver);
        },
        visitPipe: function(ast) {
          return null;
        },
        visitPrefixNot: function(ast) {
          return null;
        },
        visitPropertyRead: function(ast) {
          return visit(this, ast.receiver);
        },
        visitPropertyWrite: function(ast) {
          return null;
        },
        visitQuote: function(ast) {
          return null;
        },
        visitSafeMethodCall: function(ast) {
          return visit(this, ast.receiver) || ast;
        },
        visitSafePropertyRead: function(ast) {
          return visit(this, ast.receiver) || ast;
        }
      });
    };
    _AstToIrVisitor.prototype.needsTemporary = function(ast) {
      var _this = this;
      var visit = function(visitor, ast) {
        return ast && (_this._nodeMap.get(ast) || ast).visit(visitor);
      };
      var visitSome = function(visitor, ast) {
        return ast.some(function(ast) {
          return visit(visitor, ast);
        });
      };
      return ast.visit({
        visitBinary: function(ast) {
          return visit(this, ast.left) || visit(this, ast.right);
        },
        visitChain: function(ast) {
          return false;
        },
        visitConditional: function(ast) {
          return visit(this, ast.condition) || visit(this, ast.trueExp) || visit(this, ast.falseExp);
        },
        visitFunctionCall: function(ast) {
          return true;
        },
        visitImplicitReceiver: function(ast) {
          return false;
        },
        visitInterpolation: function(ast) {
          return visitSome(this, ast.expressions);
        },
        visitKeyedRead: function(ast) {
          return false;
        },
        visitKeyedWrite: function(ast) {
          return false;
        },
        visitLiteralArray: function(ast) {
          return true;
        },
        visitLiteralMap: function(ast) {
          return true;
        },
        visitLiteralPrimitive: function(ast) {
          return false;
        },
        visitMethodCall: function(ast) {
          return true;
        },
        visitPipe: function(ast) {
          return true;
        },
        visitPrefixNot: function(ast) {
          return visit(this, ast.expression);
        },
        visitPropertyRead: function(ast) {
          return false;
        },
        visitPropertyWrite: function(ast) {
          return false;
        },
        visitQuote: function(ast) {
          return false;
        },
        visitSafeMethodCall: function(ast) {
          return true;
        },
        visitSafePropertyRead: function(ast) {
          return false;
        }
      });
    };
    _AstToIrVisitor.prototype.allocateTemporary = function() {
      var tempNumber = this._currentTemporary++;
      this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);
      return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));
    };
    _AstToIrVisitor.prototype.releaseTemporary = function(temporary) {
      this._currentTemporary--;
      if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {
        throw new Error("Temporary " + temporary.name + " released out of order");
      }
    };
    return _AstToIrVisitor;
  }());
  function flattenStatements(arg, output) {
    if (Array.isArray(arg)) {
      arg.forEach(function(entry) {
        return flattenStatements(entry, output);
      });
    } else {
      output.push(arg);
    }
  }
  function createCachedLiteralArray(builder, values) {
    if (values.length === 0) {
      return importExpr(resolveIdentifier(Identifiers.EMPTY_ARRAY));
    }
    var proxyExpr = THIS_EXPR.prop("_arr_" + builder.fields.length);
    var proxyParams = [];
    var proxyReturnEntries = [];
    for (var i = 0; i < values.length; i++) {
      var paramName = "p" + i;
      proxyParams.push(new FnParam(paramName));
      proxyReturnEntries.push(variable(paramName));
    }
    createPureProxy(fn(proxyParams, [new ReturnStatement(literalArr(proxyReturnEntries))], new ArrayType(DYNAMIC_TYPE)), values.length, proxyExpr, builder);
    return proxyExpr.callFn(values);
  }
  function createCachedLiteralMap(builder, entries) {
    if (entries.length === 0) {
      return importExpr(resolveIdentifier(Identifiers.EMPTY_MAP));
    }
    var proxyExpr = THIS_EXPR.prop("_map_" + builder.fields.length);
    var proxyParams = [];
    var proxyReturnEntries = [];
    var values = [];
    for (var i = 0; i < entries.length; i++) {
      var paramName = "p" + i;
      proxyParams.push(new FnParam(paramName));
      proxyReturnEntries.push([entries[i][0], variable(paramName)]);
      values.push(entries[i][1]);
    }
    createPureProxy(fn(proxyParams, [new ReturnStatement(literalMap(proxyReturnEntries))], new MapType(DYNAMIC_TYPE)), entries.length, proxyExpr, builder);
    return proxyExpr.callFn(values);
  }
  var DefaultNameResolver = (function() {
    function DefaultNameResolver() {}
    DefaultNameResolver.prototype.callPipe = function(name, input, args) {
      return null;
    };
    DefaultNameResolver.prototype.getLocal = function(name) {
      return null;
    };
    return DefaultNameResolver;
  }());
  function createCurrValueExpr(bindingId) {
    return variable("currVal_" + bindingId);
  }
  function createPreventDefaultVar(bindingId) {
    return variable("pd_" + bindingId);
  }
  function convertStmtIntoExpression(stmt) {
    if (stmt instanceof ExpressionStatement) {
      return stmt.expr;
    } else if (stmt instanceof ReturnStatement) {
      return stmt.value;
    }
    return null;
  }
  function writeToRenderer(view, boundProp, renderElement, renderValue, logBindingUpdate, securityContextExpression) {
    var updateStmts = [];
    var renderer = view.prop('renderer');
    renderValue = sanitizedValue(view, boundProp, renderValue, securityContextExpression);
    switch (boundProp.type) {
      case exports.PropertyBindingType.Property:
        if (logBindingUpdate) {
          updateStmts.push(importExpr(resolveIdentifier(Identifiers.setBindingDebugInfo)).callFn([renderer, renderElement, literal(boundProp.name), renderValue]).toStmt());
        }
        updateStmts.push(renderer.callMethod('setElementProperty', [renderElement, literal(boundProp.name), renderValue]).toStmt());
        break;
      case exports.PropertyBindingType.Attribute:
        renderValue = renderValue.isBlank().conditional(NULL_EXPR, renderValue.callMethod('toString', []));
        updateStmts.push(renderer.callMethod('setElementAttribute', [renderElement, literal(boundProp.name), renderValue]).toStmt());
        break;
      case exports.PropertyBindingType.Class:
        updateStmts.push(renderer.callMethod('setElementClass', [renderElement, literal(boundProp.name), renderValue]).toStmt());
        break;
      case exports.PropertyBindingType.Style:
        var strValue = renderValue.callMethod('toString', []);
        if (isPresent(boundProp.unit)) {
          strValue = strValue.plus(literal(boundProp.unit));
        }
        renderValue = renderValue.isBlank().conditional(NULL_EXPR, strValue);
        updateStmts.push(renderer.callMethod('setElementStyle', [renderElement, literal(boundProp.name), renderValue]).toStmt());
        break;
      case exports.PropertyBindingType.Animation:
        throw new Error('Illegal state: Should not come here!');
    }
    return updateStmts;
  }
  function sanitizedValue(view, boundProp, renderValue, securityContextExpression) {
    if (boundProp.securityContext === _angular_core.SecurityContext.NONE) {
      return renderValue;
    }
    if (!boundProp.needsRuntimeSecurityContext) {
      securityContextExpression = createEnumExpression(Identifiers.SecurityContext, boundProp.securityContext);
    }
    if (!securityContextExpression) {
      throw new Error("internal error, no SecurityContext given " + boundProp.name);
    }
    var ctx = view.prop('viewUtils').prop('sanitizer');
    var args = [securityContextExpression, renderValue];
    return ctx.callMethod('sanitize', args);
  }
  function triggerAnimation(view, componentView, boundProp, eventListener, renderElement, renderValue, lastRenderValue) {
    var detachStmts = [];
    var updateStmts = [];
    var animationName = boundProp.name;
    var animationFnExpr = componentView.prop('componentType').prop('animations').key(literal(animationName));
    var emptyStateValue = literal(EMPTY_ANIMATION_STATE);
    var unitializedValue = importExpr(resolveIdentifier(Identifiers.UNINITIALIZED));
    var animationTransitionVar = variable('animationTransition_' + animationName);
    updateStmts.push(animationTransitionVar.set(animationFnExpr.callFn([view, renderElement, lastRenderValue.equals(unitializedValue).conditional(emptyStateValue, lastRenderValue), renderValue.equals(unitializedValue).conditional(emptyStateValue, renderValue)])).toDeclStmt());
    detachStmts.push(animationTransitionVar.set(animationFnExpr.callFn([view, renderElement, lastRenderValue, emptyStateValue])).toDeclStmt());
    var registerStmts = [animationTransitionVar.callMethod('onStart', [eventListener.callMethod(BuiltinMethod.Bind, [view, literal(BoundEventAst.calcFullName(animationName, null, 'start'))])]).toStmt(), animationTransitionVar.callMethod('onDone', [eventListener.callMethod(BuiltinMethod.Bind, [view, literal(BoundEventAst.calcFullName(animationName, null, 'done'))])]).toStmt()];
    updateStmts.push.apply(updateStmts, registerStmts);
    detachStmts.push.apply(detachStmts, registerStmts);
    return {
      updateStmts: updateStmts,
      detachStmts: detachStmts
    };
  }
  function createClassStmt(config) {
    var parentArgs = config.parentArgs || [];
    var superCtorStmts = config.parent ? [SUPER_EXPR.callFn(parentArgs).toStmt()] : [];
    var builder = concatClassBuilderParts(Array.isArray(config.builders) ? config.builders : [config.builders]);
    var ctor = new ClassMethod(null, config.ctorParams || [], superCtorStmts.concat(builder.ctorStmts));
    return new ClassStmt(config.name, config.parent, builder.fields, builder.getters, ctor, builder.methods, config.modifiers || []);
  }
  function concatClassBuilderParts(builders) {
    return {
      fields: (_a = []).concat.apply(_a, builders.map(function(builder) {
        return builder.fields || [];
      })),
      methods: (_b = []).concat.apply(_b, builders.map(function(builder) {
        return builder.methods || [];
      })),
      getters: (_c = []).concat.apply(_c, builders.map(function(builder) {
        return builder.getters || [];
      })),
      ctorStmts: (_d = []).concat.apply(_d, builders.map(function(builder) {
        return builder.ctorStmts || [];
      }))
    };
    var _a,
        _b,
        _c,
        _d;
  }
  var DirectiveWrapperCompileResult = (function() {
    function DirectiveWrapperCompileResult(statements, dirWrapperClassVar) {
      this.statements = statements;
      this.dirWrapperClassVar = dirWrapperClassVar;
    }
    return DirectiveWrapperCompileResult;
  }());
  var CONTEXT_FIELD_NAME = 'context';
  var CHANGES_FIELD_NAME = '_changes';
  var CHANGED_FIELD_NAME = '_changed';
  var EVENT_HANDLER_FIELD_NAME = '_eventHandler';
  var CURR_VALUE_VAR = variable('currValue');
  var THROW_ON_CHANGE_VAR = variable('throwOnChange');
  var FORCE_UPDATE_VAR = variable('forceUpdate');
  var VIEW_VAR = variable('view');
  var COMPONENT_VIEW_VAR = variable('componentView');
  var RENDER_EL_VAR = variable('el');
  var EVENT_NAME_VAR = variable('eventName');
  var RESET_CHANGES_STMT = THIS_EXPR.prop(CHANGES_FIELD_NAME).set(literalMap([])).toStmt();
  var DirectiveWrapperCompiler = (function() {
    function DirectiveWrapperCompiler(compilerConfig, _exprParser, _schemaRegistry, _console) {
      this.compilerConfig = compilerConfig;
      this._exprParser = _exprParser;
      this._schemaRegistry = _schemaRegistry;
      this._console = _console;
    }
    DirectiveWrapperCompiler.dirWrapperClassName = function(id) {
      return "Wrapper_" + id.name;
    };
    DirectiveWrapperCompiler.prototype.compile = function(dirMeta) {
      var hostParseResult = parseHostBindings(dirMeta, this._exprParser, this._schemaRegistry);
      reportParseErrors(hostParseResult.errors, this._console);
      var builder = new DirectiveWrapperBuilder(this.compilerConfig, dirMeta);
      Object.keys(dirMeta.inputs).forEach(function(inputFieldName) {
        addCheckInputMethod(inputFieldName, builder);
      });
      addNgDoCheckMethod(builder);
      addCheckHostMethod(hostParseResult.hostProps, builder);
      addHandleEventMethod(hostParseResult.hostListeners, builder);
      addSubscribeMethod(dirMeta, builder);
      var classStmt = builder.build();
      return new DirectiveWrapperCompileResult([classStmt], classStmt.name);
    };
    DirectiveWrapperCompiler.decorators = [{type: _angular_core.Injectable}];
    DirectiveWrapperCompiler.ctorParameters = [{type: CompilerConfig}, {type: Parser}, {type: ElementSchemaRegistry}, {type: Console}];
    return DirectiveWrapperCompiler;
  }());
  var DirectiveWrapperBuilder = (function() {
    function DirectiveWrapperBuilder(compilerConfig, dirMeta) {
      this.compilerConfig = compilerConfig;
      this.dirMeta = dirMeta;
      this.fields = [];
      this.getters = [];
      this.methods = [];
      this.ctorStmts = [];
      this.detachStmts = [];
      this.destroyStmts = [];
      var dirLifecycleHooks = dirMeta.type.lifecycleHooks;
      this.genChanges = dirLifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1 || this.compilerConfig.logBindingUpdate;
      this.ngOnChanges = dirLifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1;
      this.ngOnInit = dirLifecycleHooks.indexOf(LifecycleHooks.OnInit) !== -1;
      this.ngDoCheck = dirLifecycleHooks.indexOf(LifecycleHooks.DoCheck) !== -1;
      this.ngOnDestroy = dirLifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1;
      if (this.ngOnDestroy) {
        this.destroyStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnDestroy', []).toStmt());
      }
    }
    DirectiveWrapperBuilder.prototype.build = function() {
      var dirDepParamNames = [];
      for (var i = 0; i < this.dirMeta.type.diDeps.length; i++) {
        dirDepParamNames.push("p" + i);
      }
      var methods = [new ClassMethod('ngOnDetach', [new FnParam(VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(COMPONENT_VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE)], this.detachStmts), new ClassMethod('ngOnDestroy', [], this.destroyStmts)];
      var fields = [new ClassField(EVENT_HANDLER_FIELD_NAME, FUNCTION_TYPE, [StmtModifier.Private]), new ClassField(CONTEXT_FIELD_NAME, importType(this.dirMeta.type)), new ClassField(CHANGED_FIELD_NAME, BOOL_TYPE, [StmtModifier.Private])];
      var ctorStmts = [THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(false)).toStmt()];
      if (this.genChanges) {
        fields.push(new ClassField(CHANGES_FIELD_NAME, new MapType(DYNAMIC_TYPE), [StmtModifier.Private]));
        ctorStmts.push(RESET_CHANGES_STMT);
      }
      ctorStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).set(importExpr(this.dirMeta.type).instantiate(dirDepParamNames.map(function(paramName) {
        return variable(paramName);
      }))).toStmt());
      return createClassStmt({
        name: DirectiveWrapperCompiler.dirWrapperClassName(this.dirMeta.type),
        ctorParams: dirDepParamNames.map(function(paramName) {
          return new FnParam(paramName, DYNAMIC_TYPE);
        }),
        builders: [{
          fields: fields,
          ctorStmts: ctorStmts,
          methods: methods
        }, this]
      });
    };
    return DirectiveWrapperBuilder;
  }());
  function addNgDoCheckMethod(builder) {
    var changedVar = variable('changed');
    var stmts = [changedVar.set(THIS_EXPR.prop(CHANGED_FIELD_NAME)).toDeclStmt(), THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(false)).toStmt()];
    var lifecycleStmts = [];
    if (builder.genChanges) {
      var onChangesStmts = [];
      if (builder.ngOnChanges) {
        onChangesStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnChanges', [THIS_EXPR.prop(CHANGES_FIELD_NAME)]).toStmt());
      }
      if (builder.compilerConfig.logBindingUpdate) {
        onChangesStmts.push(importExpr(resolveIdentifier(Identifiers.setBindingDebugInfoForChanges)).callFn([VIEW_VAR.prop('renderer'), RENDER_EL_VAR, THIS_EXPR.prop(CHANGES_FIELD_NAME)]).toStmt());
      }
      onChangesStmts.push(RESET_CHANGES_STMT);
      lifecycleStmts.push(new IfStmt(changedVar, onChangesStmts));
    }
    if (builder.ngOnInit) {
      lifecycleStmts.push(new IfStmt(VIEW_VAR.prop('numberOfChecks').identical(new LiteralExpr(0)), [THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnInit', []).toStmt()]));
    }
    if (builder.ngDoCheck) {
      lifecycleStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngDoCheck', []).toStmt());
    }
    if (lifecycleStmts.length > 0) {
      stmts.push(new IfStmt(not(THROW_ON_CHANGE_VAR), lifecycleStmts));
    }
    stmts.push(new ReturnStatement(changedVar));
    builder.methods.push(new ClassMethod('ngDoCheck', [new FnParam(VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE), new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE)], stmts, BOOL_TYPE));
  }
  function addCheckInputMethod(input, builder) {
    var field = createCheckBindingField(builder);
    var onChangeStatements = [THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(true)).toStmt(), THIS_EXPR.prop(CONTEXT_FIELD_NAME).prop(input).set(CURR_VALUE_VAR).toStmt()];
    if (builder.genChanges) {
      onChangeStatements.push(THIS_EXPR.prop(CHANGES_FIELD_NAME).key(literal(input)).set(importExpr(resolveIdentifier(Identifiers.SimpleChange)).instantiate([field.expression, CURR_VALUE_VAR])).toStmt());
    }
    var methodBody = createCheckBindingStmt({
      currValExpr: CURR_VALUE_VAR,
      forceUpdate: FORCE_UPDATE_VAR,
      stmts: []
    }, field.expression, THROW_ON_CHANGE_VAR, onChangeStatements);
    builder.methods.push(new ClassMethod("check_" + input, [new FnParam(CURR_VALUE_VAR.name, DYNAMIC_TYPE), new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE), new FnParam(FORCE_UPDATE_VAR.name, BOOL_TYPE)], methodBody));
  }
  function addCheckHostMethod(hostProps, builder) {
    var stmts = [];
    var methodParams = [new FnParam(VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(COMPONENT_VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE), new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE)];
    hostProps.forEach(function(hostProp, hostPropIdx) {
      var field = createCheckBindingField(builder);
      var evalResult = convertPropertyBinding(builder, null, THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostProp.value, field.bindingId);
      if (!evalResult) {
        return;
      }
      var securityContextExpr;
      if (hostProp.needsRuntimeSecurityContext) {
        securityContextExpr = variable("secCtx_" + methodParams.length);
        methodParams.push(new FnParam(securityContextExpr.name, importType(resolveIdentifier(Identifiers.SecurityContext))));
      }
      var checkBindingStmts;
      if (hostProp.isAnimation) {
        var _a = triggerAnimation(VIEW_VAR, COMPONENT_VIEW_VAR, hostProp, THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME).or(importExpr(resolveIdentifier(Identifiers.noop))), RENDER_EL_VAR, evalResult.currValExpr, field.expression),
            updateStmts = _a.updateStmts,
            detachStmts = _a.detachStmts;
        checkBindingStmts = updateStmts;
        (_b = builder.detachStmts).push.apply(_b, detachStmts);
      } else {
        checkBindingStmts = writeToRenderer(VIEW_VAR, hostProp, RENDER_EL_VAR, evalResult.currValExpr, builder.compilerConfig.logBindingUpdate, securityContextExpr);
      }
      stmts.push.apply(stmts, createCheckBindingStmt(evalResult, field.expression, THROW_ON_CHANGE_VAR, checkBindingStmts));
      var _b;
    });
    builder.methods.push(new ClassMethod('checkHost', methodParams, stmts));
  }
  function addHandleEventMethod(hostListeners, builder) {
    var resultVar = variable("result");
    var actionStmts = [resultVar.set(literal(true)).toDeclStmt(BOOL_TYPE)];
    hostListeners.forEach(function(hostListener, eventIdx) {
      var evalResult = convertActionBinding(builder, null, THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostListener.handler, "sub_" + eventIdx);
      var trueStmts = evalResult.stmts;
      if (evalResult.preventDefault) {
        trueStmts.push(resultVar.set(evalResult.preventDefault.and(resultVar)).toStmt());
      }
      actionStmts.push(new IfStmt(EVENT_NAME_VAR.equals(literal(hostListener.fullName)), trueStmts));
    });
    actionStmts.push(new ReturnStatement(resultVar));
    builder.methods.push(new ClassMethod('handleEvent', [new FnParam(EVENT_NAME_VAR.name, STRING_TYPE), new FnParam(EventHandlerVars.event.name, DYNAMIC_TYPE)], actionStmts, BOOL_TYPE));
  }
  function addSubscribeMethod(dirMeta, builder) {
    var methodParams = [new FnParam(VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(EVENT_HANDLER_FIELD_NAME, DYNAMIC_TYPE)];
    var stmts = [THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME).set(variable(EVENT_HANDLER_FIELD_NAME)).toStmt()];
    Object.keys(dirMeta.outputs).forEach(function(emitterPropName, emitterIdx) {
      var eventName = dirMeta.outputs[emitterPropName];
      var paramName = "emit" + emitterIdx;
      methodParams.push(new FnParam(paramName, BOOL_TYPE));
      var subscriptionFieldName = "subscription" + emitterIdx;
      builder.fields.push(new ClassField(subscriptionFieldName, DYNAMIC_TYPE));
      stmts.push(new IfStmt(variable(paramName), [THIS_EXPR.prop(subscriptionFieldName).set(THIS_EXPR.prop(CONTEXT_FIELD_NAME).prop(emitterPropName).callMethod(BuiltinMethod.SubscribeObservable, [variable(EVENT_HANDLER_FIELD_NAME).callMethod(BuiltinMethod.Bind, [VIEW_VAR, literal(eventName)])])).toStmt()]));
      builder.destroyStmts.push(THIS_EXPR.prop(subscriptionFieldName).and(THIS_EXPR.prop(subscriptionFieldName).callMethod('unsubscribe', [])).toStmt());
    });
    builder.methods.push(new ClassMethod('subscribe', methodParams, stmts));
  }
  var ParseResult = (function() {
    function ParseResult(hostProps, hostListeners, errors) {
      this.hostProps = hostProps;
      this.hostListeners = hostListeners;
      this.errors = errors;
    }
    return ParseResult;
  }());
  function parseHostBindings(dirMeta, exprParser, schemaRegistry) {
    var errors = [];
    var parser = new BindingParser(exprParser, DEFAULT_INTERPOLATION_CONFIG, schemaRegistry, [], errors);
    var sourceFileName = dirMeta.type.moduleUrl ? "in Directive " + dirMeta.type.name + " in " + dirMeta.type.moduleUrl : "in Directive " + dirMeta.type.name;
    var sourceFile = new ParseSourceFile('', sourceFileName);
    var sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
    var parsedHostProps = parser.createDirectiveHostPropertyAsts(dirMeta.toSummary(), sourceSpan);
    var parsedHostListeners = parser.createDirectiveHostEventAsts(dirMeta.toSummary(), sourceSpan);
    return new ParseResult(parsedHostProps, parsedHostListeners, errors);
  }
  function reportParseErrors(parseErrors, console) {
    var warnings = parseErrors.filter(function(error) {
      return error.level === exports.ParseErrorLevel.WARNING;
    });
    var errors = parseErrors.filter(function(error) {
      return error.level === exports.ParseErrorLevel.FATAL;
    });
    if (warnings.length > 0) {
      this._console.warn("Directive parse warnings:\n" + warnings.join('\n'));
    }
    if (errors.length > 0) {
      throw new Error("Directive parse errors:\n" + errors.join('\n'));
    }
  }
  var DirectiveWrapperExpressions = (function() {
    function DirectiveWrapperExpressions() {}
    DirectiveWrapperExpressions.create = function(dir, depsExpr) {
      return importExpr(dir).instantiate(depsExpr, importType(dir));
    };
    DirectiveWrapperExpressions.context = function(dirWrapper) {
      return dirWrapper.prop(CONTEXT_FIELD_NAME);
    };
    DirectiveWrapperExpressions.ngDoCheck = function(dirWrapper, view, renderElement, throwOnChange) {
      return dirWrapper.callMethod('ngDoCheck', [view, renderElement, throwOnChange]);
    };
    DirectiveWrapperExpressions.checkHost = function(hostProps, dirWrapper, view, componentView, renderElement, throwOnChange, runtimeSecurityContexts) {
      if (hostProps.length) {
        return [dirWrapper.callMethod('checkHost', [view, componentView, renderElement, throwOnChange].concat(runtimeSecurityContexts)).toStmt()];
      } else {
        return [];
      }
    };
    DirectiveWrapperExpressions.ngOnDetach = function(hostProps, dirWrapper, view, componentView, renderEl) {
      if (hostProps.some(function(prop) {
        return prop.isAnimation;
      })) {
        return [dirWrapper.callMethod('ngOnDetach', [view, componentView, renderEl]).toStmt()];
      } else {
        return [];
      }
    };
    DirectiveWrapperExpressions.ngOnDestroy = function(dir, dirWrapper) {
      if (dir.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1 || Object.keys(dir.outputs).length > 0) {
        return [dirWrapper.callMethod('ngOnDestroy', []).toStmt()];
      } else {
        return [];
      }
    };
    DirectiveWrapperExpressions.subscribe = function(dirMeta, hostProps, usedEvents, dirWrapper, view, eventListener) {
      var needsSubscribe = false;
      var eventFlags = [];
      Object.keys(dirMeta.outputs).forEach(function(propName) {
        var eventName = dirMeta.outputs[propName];
        var eventUsed = usedEvents.indexOf(eventName) > -1;
        needsSubscribe = needsSubscribe || eventUsed;
        eventFlags.push(literal(eventUsed));
      });
      hostProps.forEach(function(hostProp) {
        if (hostProp.isAnimation && usedEvents.length > 0) {
          needsSubscribe = true;
        }
      });
      if (needsSubscribe) {
        return [dirWrapper.callMethod('subscribe', [view, eventListener].concat(eventFlags)).toStmt()];
      } else {
        return [];
      }
    };
    DirectiveWrapperExpressions.handleEvent = function(hostEvents, dirWrapper, eventName, event) {
      return dirWrapper.callMethod('handleEvent', [eventName, event]);
    };
    return DirectiveWrapperExpressions;
  }());
  function convertValueToOutputAst(value, type) {
    if (type === void 0) {
      type = null;
    }
    return visitValue(value, new _ValueOutputAstTransformer(), type);
  }
  var _ValueOutputAstTransformer = (function() {
    function _ValueOutputAstTransformer() {}
    _ValueOutputAstTransformer.prototype.visitArray = function(arr, type) {
      var _this = this;
      return literalArr(arr.map(function(value) {
        return visitValue(value, _this, null);
      }), type);
    };
    _ValueOutputAstTransformer.prototype.visitStringMap = function(map, type) {
      var _this = this;
      var entries = [];
      Object.keys(map).forEach(function(key) {
        entries.push([key, visitValue(map[key], _this, null)]);
      });
      return literalMap(entries, type);
    };
    _ValueOutputAstTransformer.prototype.visitPrimitive = function(value, type) {
      return literal(value, type);
    };
    _ValueOutputAstTransformer.prototype.visitOther = function(value, type) {
      if (value instanceof CompileIdentifierMetadata) {
        return importExpr(value);
      } else if (value instanceof Expression) {
        return value;
      } else {
        throw new Error("Illegal state: Don't now how to compile value " + value);
      }
    };
    return _ValueOutputAstTransformer;
  }());
  var _DebugState = (function() {
    function _DebugState(nodeIndex, sourceAst) {
      this.nodeIndex = nodeIndex;
      this.sourceAst = sourceAst;
    }
    return _DebugState;
  }());
  var NULL_DEBUG_STATE = new _DebugState(null, null);
  var CompileMethod = (function() {
    function CompileMethod(_view) {
      this._view = _view;
      this._newState = NULL_DEBUG_STATE;
      this._currState = NULL_DEBUG_STATE;
      this._bodyStatements = [];
      this._debugEnabled = this._view.genConfig.genDebugInfo;
    }
    CompileMethod.prototype._updateDebugContextIfNeeded = function() {
      if (this._newState.nodeIndex !== this._currState.nodeIndex || this._newState.sourceAst !== this._currState.sourceAst) {
        var expr = this._updateDebugContext(this._newState);
        if (isPresent(expr)) {
          this._bodyStatements.push(expr.toStmt());
        }
      }
    };
    CompileMethod.prototype._updateDebugContext = function(newState) {
      this._currState = this._newState = newState;
      if (this._debugEnabled) {
        var sourceLocation = isPresent(newState.sourceAst) ? newState.sourceAst.sourceSpan.start : null;
        return THIS_EXPR.callMethod('debug', [literal(newState.nodeIndex), isPresent(sourceLocation) ? literal(sourceLocation.line) : NULL_EXPR, isPresent(sourceLocation) ? literal(sourceLocation.col) : NULL_EXPR]);
      } else {
        return null;
      }
    };
    CompileMethod.prototype.resetDebugInfoExpr = function(nodeIndex, templateAst) {
      var res = this._updateDebugContext(new _DebugState(nodeIndex, templateAst));
      return res || NULL_EXPR;
    };
    CompileMethod.prototype.resetDebugInfo = function(nodeIndex, templateAst) {
      this._newState = new _DebugState(nodeIndex, templateAst);
    };
    CompileMethod.prototype.push = function() {
      var stmts = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        stmts[_i - 0] = arguments[_i];
      }
      this.addStmts(stmts);
    };
    CompileMethod.prototype.addStmt = function(stmt) {
      this._updateDebugContextIfNeeded();
      this._bodyStatements.push(stmt);
    };
    CompileMethod.prototype.addStmts = function(stmts) {
      this._updateDebugContextIfNeeded();
      (_a = this._bodyStatements).push.apply(_a, stmts);
      var _a;
    };
    CompileMethod.prototype.finish = function() {
      return this._bodyStatements;
    };
    CompileMethod.prototype.isEmpty = function() {
      return this._bodyStatements.length === 0;
    };
    return CompileMethod;
  }());
  var __extends$15 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  function getPropertyInView(property, callingView, definedView) {
    if (callingView === definedView) {
      return property;
    } else {
      var viewProp = THIS_EXPR;
      var currView = callingView;
      while (currView !== definedView && isPresent(currView.declarationElement.view)) {
        currView = currView.declarationElement.view;
        viewProp = viewProp.prop('parentView');
      }
      if (currView !== definedView) {
        throw new Error("Internal error: Could not calculate a property in a parent view: " + property);
      }
      return property.visitExpression(new _ReplaceViewTransformer(viewProp, definedView), null);
    }
  }
  var _ReplaceViewTransformer = (function(_super) {
    __extends$15(_ReplaceViewTransformer, _super);
    function _ReplaceViewTransformer(_viewExpr, _view) {
      _super.call(this);
      this._viewExpr = _viewExpr;
      this._view = _view;
    }
    _ReplaceViewTransformer.prototype._isThis = function(expr) {
      return expr instanceof ReadVarExpr && expr.builtin === BuiltinVar.This;
    };
    _ReplaceViewTransformer.prototype.visitReadVarExpr = function(ast, context) {
      return this._isThis(ast) ? this._viewExpr : ast;
    };
    _ReplaceViewTransformer.prototype.visitReadPropExpr = function(ast, context) {
      if (this._isThis(ast.receiver)) {
        if (this._view.fields.some(function(field) {
          return field.name == ast.name;
        }) || this._view.getters.some(function(field) {
          return field.name == ast.name;
        })) {
          return this._viewExpr.cast(this._view.classType).prop(ast.name);
        }
      }
      return _super.prototype.visitReadPropExpr.call(this, ast, context);
    };
    return _ReplaceViewTransformer;
  }(ExpressionTransformer));
  function injectFromViewParentInjector(view, token, optional) {
    var viewExpr;
    if (view.viewType === ViewType.HOST) {
      viewExpr = THIS_EXPR;
    } else {
      viewExpr = THIS_EXPR.prop('parentView');
    }
    var args = [createDiTokenExpression(token), THIS_EXPR.prop('parentIndex')];
    if (optional) {
      args.push(NULL_EXPR);
    }
    return viewExpr.callMethod('injectorGet', args);
  }
  function getViewClassName(component, embeddedTemplateIndex) {
    return "View_" + component.type.name + embeddedTemplateIndex;
  }
  function getHandleEventMethodName(elementIndex) {
    return "handleEvent_" + elementIndex;
  }
  var ViewQueryValues = (function() {
    function ViewQueryValues(view, values) {
      this.view = view;
      this.values = values;
    }
    return ViewQueryValues;
  }());
  var CompileQuery = (function() {
    function CompileQuery(meta, queryList, ownerDirectiveExpression, view) {
      this.meta = meta;
      this.queryList = queryList;
      this.ownerDirectiveExpression = ownerDirectiveExpression;
      this.view = view;
      this._values = new ViewQueryValues(view, []);
    }
    CompileQuery.prototype.addValue = function(value, view) {
      var currentView = view;
      var elPath = [];
      while (isPresent(currentView) && currentView !== this.view) {
        var parentEl = currentView.declarationElement;
        elPath.unshift(parentEl);
        currentView = parentEl.view;
      }
      var queryListForDirtyExpr = getPropertyInView(this.queryList, view, this.view);
      var viewValues = this._values;
      elPath.forEach(function(el) {
        var last = viewValues.values.length > 0 ? viewValues.values[viewValues.values.length - 1] : null;
        if (last instanceof ViewQueryValues && last.view === el.embeddedView) {
          viewValues = last;
        } else {
          var newViewValues = new ViewQueryValues(el.embeddedView, []);
          viewValues.values.push(newViewValues);
          viewValues = newViewValues;
        }
      });
      viewValues.values.push(value);
      if (elPath.length > 0) {
        view.dirtyParentQueriesMethod.addStmt(queryListForDirtyExpr.callMethod('setDirty', []).toStmt());
      }
    };
    CompileQuery.prototype._isStatic = function() {
      return !this._values.values.some(function(value) {
        return value instanceof ViewQueryValues;
      });
    };
    CompileQuery.prototype.afterChildren = function(targetStaticMethod, targetDynamicMethod) {
      var values = createQueryValues(this._values);
      var updateStmts = [this.queryList.callMethod('reset', [literalArr(values)]).toStmt()];
      if (isPresent(this.ownerDirectiveExpression)) {
        var valueExpr = this.meta.first ? this.queryList.prop('first') : this.queryList;
        updateStmts.push(this.ownerDirectiveExpression.prop(this.meta.propertyName).set(valueExpr).toStmt());
      }
      if (!this.meta.first) {
        updateStmts.push(this.queryList.callMethod('notifyOnChanges', []).toStmt());
      }
      if (this.meta.first && this._isStatic()) {
        targetStaticMethod.addStmts(updateStmts);
      } else {
        targetDynamicMethod.addStmt(new IfStmt(this.queryList.prop('dirty'), updateStmts));
      }
    };
    return CompileQuery;
  }());
  function createQueryValues(viewValues) {
    return ListWrapper.flatten(viewValues.values.map(function(entry) {
      if (entry instanceof ViewQueryValues) {
        return mapNestedViews(entry.view.declarationElement.viewContainer, entry.view, createQueryValues(entry));
      } else {
        return entry;
      }
    }));
  }
  function mapNestedViews(viewContainer, view, expressions) {
    var adjustedExpressions = expressions.map(function(expr) {
      return replaceVarInExpression(THIS_EXPR.name, variable('nestedView'), expr);
    });
    return viewContainer.callMethod('mapNestedViews', [variable(view.className), fn([new FnParam('nestedView', view.classType)], [new ReturnStatement(literalArr(adjustedExpressions))], DYNAMIC_TYPE)]);
  }
  function createQueryList(query, directiveInstance, propertyName, compileView) {
    compileView.fields.push(new ClassField(propertyName, importType(resolveIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE])));
    var expr = THIS_EXPR.prop(propertyName);
    compileView.createMethod.addStmt(THIS_EXPR.prop(propertyName).set(importExpr(resolveIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE]).instantiate([])).toStmt());
    return expr;
  }
  function addQueryToTokenMap(map, query) {
    query.meta.selectors.forEach(function(selector) {
      var entry = map.get(selector.reference);
      if (!entry) {
        entry = [];
        map.set(selector.reference, entry);
      }
      entry.push(query);
    });
  }
  var ViewTypeEnum = (function() {
    function ViewTypeEnum() {}
    ViewTypeEnum.fromValue = function(value) {
      return createEnumExpression(Identifiers.ViewType, value);
    };
    return ViewTypeEnum;
  }());
  var ViewEncapsulationEnum = (function() {
    function ViewEncapsulationEnum() {}
    ViewEncapsulationEnum.fromValue = function(value) {
      return createEnumExpression(Identifiers.ViewEncapsulation, value);
    };
    return ViewEncapsulationEnum;
  }());
  var ChangeDetectorStatusEnum = (function() {
    function ChangeDetectorStatusEnum() {}
    ChangeDetectorStatusEnum.fromValue = function(value) {
      return createEnumExpression(Identifiers.ChangeDetectorStatus, value);
    };
    return ChangeDetectorStatusEnum;
  }());
  var ViewConstructorVars = (function() {
    function ViewConstructorVars() {}
    ViewConstructorVars.viewUtils = variable('viewUtils');
    ViewConstructorVars.parentView = variable('parentView');
    ViewConstructorVars.parentIndex = variable('parentIndex');
    ViewConstructorVars.parentElement = variable('parentElement');
    return ViewConstructorVars;
  }());
  var ViewProperties = (function() {
    function ViewProperties() {}
    ViewProperties.renderer = THIS_EXPR.prop('renderer');
    ViewProperties.viewUtils = THIS_EXPR.prop('viewUtils');
    return ViewProperties;
  }());
  var InjectMethodVars = (function() {
    function InjectMethodVars() {}
    InjectMethodVars.token = variable('token');
    InjectMethodVars.requestNodeIndex = variable('requestNodeIndex');
    InjectMethodVars.notFoundResult = variable('notFoundResult');
    return InjectMethodVars;
  }());
  var DetectChangesVars = (function() {
    function DetectChangesVars() {}
    DetectChangesVars.throwOnChange = variable("throwOnChange");
    DetectChangesVars.changes = variable("changes");
    DetectChangesVars.changed = variable("changed");
    return DetectChangesVars;
  }());
  var ViewClassDependency = (function() {
    function ViewClassDependency(comp, placeholder) {
      this.comp = comp;
      this.placeholder = placeholder;
    }
    return ViewClassDependency;
  }());
  var ComponentFactoryDependency = (function() {
    function ComponentFactoryDependency(comp, placeholder) {
      this.comp = comp;
      this.placeholder = placeholder;
    }
    return ComponentFactoryDependency;
  }());
  var DirectiveWrapperDependency = (function() {
    function DirectiveWrapperDependency(dir, placeholder) {
      this.dir = dir;
      this.placeholder = placeholder;
    }
    return DirectiveWrapperDependency;
  }());
  var __extends$14 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var CompileNode = (function() {
    function CompileNode(parent, view, nodeIndex, renderNode, sourceAst) {
      this.parent = parent;
      this.view = view;
      this.nodeIndex = nodeIndex;
      this.renderNode = renderNode;
      this.sourceAst = sourceAst;
    }
    CompileNode.prototype.isNull = function() {
      return !this.renderNode;
    };
    CompileNode.prototype.isRootElement = function() {
      return this.view != this.parent.view;
    };
    return CompileNode;
  }());
  var CompileElement = (function(_super) {
    __extends$14(CompileElement, _super);
    function CompileElement(parent, view, nodeIndex, renderNode, sourceAst, component, _directives, _resolvedProvidersArray, hasViewContainer, hasEmbeddedView, references, _targetDependencies) {
      var _this = this;
      _super.call(this, parent, view, nodeIndex, renderNode, sourceAst);
      this.component = component;
      this._directives = _directives;
      this._resolvedProvidersArray = _resolvedProvidersArray;
      this.hasViewContainer = hasViewContainer;
      this.hasEmbeddedView = hasEmbeddedView;
      this._targetDependencies = _targetDependencies;
      this.compViewExpr = null;
      this.instances = new Map();
      this.directiveWrapperInstance = new Map();
      this._queryCount = 0;
      this._queries = new Map();
      this.contentNodesByNgContentIndex = null;
      this.referenceTokens = {};
      references.forEach(function(ref) {
        return _this.referenceTokens[ref.name] = ref.value;
      });
      this.elementRef = importExpr(resolveIdentifier(Identifiers.ElementRef)).instantiate([this.renderNode]);
      this.instances.set(resolveIdentifierToken(Identifiers.ElementRef).reference, this.elementRef);
      this.instances.set(resolveIdentifierToken(Identifiers.Injector).reference, THIS_EXPR.callMethod('injector', [literal(this.nodeIndex)]));
      this.instances.set(resolveIdentifierToken(Identifiers.Renderer).reference, THIS_EXPR.prop('renderer'));
      if (this.hasViewContainer || this.hasEmbeddedView) {
        this._createViewContainer();
      }
      if (this.component) {
        this._createComponentFactoryResolver();
      }
    }
    CompileElement.createNull = function() {
      return new CompileElement(null, null, null, null, null, null, [], [], false, false, [], []);
    };
    CompileElement.prototype._createViewContainer = function() {
      var fieldName = "_vc_" + this.nodeIndex;
      var parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;
      this.view.fields.push(new ClassField(fieldName, importType(resolveIdentifier(Identifiers.ViewContainer)), [StmtModifier.Private]));
      var statement = THIS_EXPR.prop(fieldName).set(importExpr(resolveIdentifier(Identifiers.ViewContainer)).instantiate([literal(this.nodeIndex), literal(parentNodeIndex), THIS_EXPR, this.renderNode])).toStmt();
      this.view.createMethod.addStmt(statement);
      this.viewContainer = THIS_EXPR.prop(fieldName);
      this.instances.set(resolveIdentifierToken(Identifiers.ViewContainer).reference, this.viewContainer);
      this.view.viewContainers.push(this.viewContainer);
    };
    CompileElement.prototype._createComponentFactoryResolver = function() {
      var _this = this;
      var entryComponents = this.component.entryComponents.map(function(entryComponent) {
        var id = new CompileIdentifierMetadata({name: entryComponent.name});
        _this._targetDependencies.push(new ComponentFactoryDependency(entryComponent, id));
        return id;
      });
      if (!entryComponents || entryComponents.length === 0) {
        return;
      }
      var createComponentFactoryResolverExpr = importExpr(resolveIdentifier(Identifiers.CodegenComponentFactoryResolver)).instantiate([literalArr(entryComponents.map(function(entryComponent) {
        return importExpr(entryComponent);
      })), injectFromViewParentInjector(this.view, resolveIdentifierToken(Identifiers.ComponentFactoryResolver), false)]);
      var provider = new CompileProviderMetadata({
        token: resolveIdentifierToken(Identifiers.ComponentFactoryResolver),
        useValue: createComponentFactoryResolverExpr
      });
      this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], exports.ProviderAstType.PrivateService, [], this.sourceAst.sourceSpan));
    };
    CompileElement.prototype.setComponentView = function(compViewExpr) {
      this.compViewExpr = compViewExpr;
      this.contentNodesByNgContentIndex = new Array(this.component.template.ngContentSelectors.length);
      for (var i = 0; i < this.contentNodesByNgContentIndex.length; i++) {
        this.contentNodesByNgContentIndex[i] = [];
      }
    };
    CompileElement.prototype.setEmbeddedView = function(embeddedView) {
      this.embeddedView = embeddedView;
      if (isPresent(embeddedView)) {
        var createTemplateRefExpr = importExpr(resolveIdentifier(Identifiers.TemplateRef_)).instantiate([THIS_EXPR, literal(this.nodeIndex), this.renderNode]);
        var provider = new CompileProviderMetadata({
          token: resolveIdentifierToken(Identifiers.TemplateRef),
          useValue: createTemplateRefExpr
        });
        this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], exports.ProviderAstType.Builtin, [], this.sourceAst.sourceSpan));
      }
    };
    CompileElement.prototype.beforeChildren = function() {
      var _this = this;
      if (this.hasViewContainer) {
        this.instances.set(resolveIdentifierToken(Identifiers.ViewContainerRef).reference, this.viewContainer.prop('vcRef'));
      }
      this._resolvedProviders = new Map();
      this._resolvedProvidersArray.forEach(function(provider) {
        return _this._resolvedProviders.set(provider.token.reference, provider);
      });
      Array.from(this._resolvedProviders.values()).forEach(function(resolvedProvider) {
        var isDirectiveWrapper = resolvedProvider.providerType === exports.ProviderAstType.Component || resolvedProvider.providerType === exports.ProviderAstType.Directive;
        var providerValueExpressions = resolvedProvider.providers.map(function(provider) {
          if (provider.useExisting) {
            return _this._getDependency(resolvedProvider.providerType, new CompileDiDependencyMetadata({token: provider.useExisting}));
          } else if (provider.useFactory) {
            var deps = provider.deps || provider.useFactory.diDeps;
            var depsExpr = deps.map(function(dep) {
              return _this._getDependency(resolvedProvider.providerType, dep);
            });
            return importExpr(provider.useFactory).callFn(depsExpr);
          } else if (provider.useClass) {
            var deps = provider.deps || provider.useClass.diDeps;
            var depsExpr = deps.map(function(dep) {
              return _this._getDependency(resolvedProvider.providerType, dep);
            });
            if (isDirectiveWrapper) {
              var directiveWrapperIdentifier = new CompileIdentifierMetadata({name: DirectiveWrapperCompiler.dirWrapperClassName(provider.useClass)});
              _this._targetDependencies.push(new DirectiveWrapperDependency(provider.useClass, directiveWrapperIdentifier));
              return DirectiveWrapperExpressions.create(directiveWrapperIdentifier, depsExpr);
            } else {
              return importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
            }
          } else {
            return convertValueToOutputAst(provider.useValue);
          }
        });
        var propName = "_" + resolvedProvider.token.name + "_" + _this.nodeIndex + "_" + _this.instances.size;
        var instance = createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager, _this);
        if (isDirectiveWrapper) {
          _this.directiveWrapperInstance.set(resolvedProvider.token.reference, instance);
          _this.instances.set(resolvedProvider.token.reference, DirectiveWrapperExpressions.context(instance));
        } else {
          _this.instances.set(resolvedProvider.token.reference, instance);
        }
      });
      var _loop_1 = function(i) {
        var directive = this_1._directives[i];
        var directiveInstance = this_1.instances.get(identifierToken(directive.type).reference);
        directive.queries.forEach(function(queryMeta) {
          _this._addQuery(queryMeta, directiveInstance);
        });
      };
      var this_1 = this;
      for (var i = 0; i < this._directives.length; i++) {
        _loop_1(i);
      }
      var queriesWithReads = [];
      Array.from(this._resolvedProviders.values()).forEach(function(resolvedProvider) {
        var queriesForProvider = _this._getQueriesFor(resolvedProvider.token);
        queriesWithReads.push.apply(queriesWithReads, queriesForProvider.map(function(query) {
          return new _QueryWithRead(query, resolvedProvider.token);
        }));
      });
      Object.keys(this.referenceTokens).forEach(function(varName) {
        var token = _this.referenceTokens[varName];
        var varValue;
        if (token) {
          varValue = _this.instances.get(token.reference);
        } else {
          varValue = _this.renderNode;
        }
        _this.view.locals.set(varName, varValue);
        var varToken = new CompileTokenMetadata({value: varName});
        queriesWithReads.push.apply(queriesWithReads, _this._getQueriesFor(varToken).map(function(query) {
          return new _QueryWithRead(query, varToken);
        }));
      });
      queriesWithReads.forEach(function(queryWithRead) {
        var value;
        if (isPresent(queryWithRead.read.identifier)) {
          value = _this.instances.get(queryWithRead.read.reference);
        } else {
          var token = _this.referenceTokens[queryWithRead.read.value];
          if (isPresent(token)) {
            value = _this.instances.get(token.reference);
          } else {
            value = _this.elementRef;
          }
        }
        if (isPresent(value)) {
          queryWithRead.query.addValue(value, _this.view);
        }
      });
    };
    CompileElement.prototype.afterChildren = function(childNodeCount) {
      var _this = this;
      Array.from(this._resolvedProviders.values()).forEach(function(resolvedProvider) {
        var providerExpr = _this.instances.get(resolvedProvider.token.reference);
        var providerChildNodeCount = resolvedProvider.providerType === exports.ProviderAstType.PrivateService ? 0 : childNodeCount;
        _this.view.injectorGetMethod.addStmt(createInjectInternalCondition(_this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));
      });
      Array.from(this._queries.values()).forEach(function(queries) {
        return queries.forEach(function(q) {
          return q.afterChildren(_this.view.createMethod, _this.view.updateContentQueriesMethod);
        });
      });
    };
    CompileElement.prototype.addContentNode = function(ngContentIndex, nodeExpr) {
      this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);
    };
    CompileElement.prototype.getComponent = function() {
      return isPresent(this.component) ? this.instances.get(identifierToken(this.component.type).reference) : null;
    };
    CompileElement.prototype.getProviderTokens = function() {
      return Array.from(this._resolvedProviders.values()).map(function(resolvedProvider) {
        return createDiTokenExpression(resolvedProvider.token);
      });
    };
    CompileElement.prototype._getQueriesFor = function(token) {
      var result = [];
      var currentEl = this;
      var distance = 0;
      var queries;
      while (!currentEl.isNull()) {
        queries = currentEl._queries.get(token.reference);
        if (isPresent(queries)) {
          result.push.apply(result, queries.filter(function(query) {
            return query.meta.descendants || distance <= 1;
          }));
        }
        if (currentEl._directives.length > 0) {
          distance++;
        }
        currentEl = currentEl.parent;
      }
      queries = this.view.componentView.viewQueries.get(token.reference);
      if (isPresent(queries)) {
        result.push.apply(result, queries);
      }
      return result;
    };
    CompileElement.prototype._addQuery = function(queryMeta, directiveInstance) {
      var propName = "_query_" + queryMeta.selectors[0].name + "_" + this.nodeIndex + "_" + this._queryCount++;
      var queryList = createQueryList(queryMeta, directiveInstance, propName, this.view);
      var query = new CompileQuery(queryMeta, queryList, directiveInstance, this.view);
      addQueryToTokenMap(this._queries, query);
      return query;
    };
    CompileElement.prototype._getLocalDependency = function(requestingProviderType, dep) {
      var result = null;
      if (isPresent(dep.token)) {
        if (!result) {
          if (dep.token.reference === resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference) {
            if (requestingProviderType === exports.ProviderAstType.Component) {
              return this.compViewExpr.prop('ref');
            } else {
              return getPropertyInView(THIS_EXPR.prop('ref'), this.view, this.view.componentView);
            }
          }
        }
        if (!result) {
          var resolvedProvider = this._resolvedProviders.get(dep.token.reference);
          if (resolvedProvider && (requestingProviderType === exports.ProviderAstType.Directive || requestingProviderType === exports.ProviderAstType.PublicService) && resolvedProvider.providerType === exports.ProviderAstType.PrivateService) {
            return null;
          }
          result = this.instances.get(dep.token.reference);
        }
      }
      return result;
    };
    CompileElement.prototype._getDependency = function(requestingProviderType, dep) {
      var currElement = this;
      var result = null;
      if (dep.isValue) {
        result = literal(dep.value);
      }
      if (!result && !dep.isSkipSelf) {
        result = this._getLocalDependency(requestingProviderType, dep);
      }
      while (!result && !currElement.parent.isNull()) {
        currElement = currElement.parent;
        result = currElement._getLocalDependency(exports.ProviderAstType.PublicService, new CompileDiDependencyMetadata({token: dep.token}));
      }
      if (!result) {
        result = injectFromViewParentInjector(this.view, dep.token, dep.isOptional);
      }
      if (!result) {
        result = NULL_EXPR;
      }
      return getPropertyInView(result, this.view, currElement.view);
    };
    return CompileElement;
  }(CompileNode));
  function createInjectInternalCondition(nodeIndex, childNodeCount, provider, providerExpr) {
    var indexCondition;
    if (childNodeCount > 0) {
      indexCondition = literal(nodeIndex).lowerEquals(InjectMethodVars.requestNodeIndex).and(InjectMethodVars.requestNodeIndex.lowerEquals(literal(nodeIndex + childNodeCount)));
    } else {
      indexCondition = literal(nodeIndex).identical(InjectMethodVars.requestNodeIndex);
    }
    return new IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(provider.token)).and(indexCondition), [new ReturnStatement(providerExpr)]);
  }
  function createProviderProperty(propName, provider, providerValueExpressions, isMulti, isEager, compileElement) {
    var view = compileElement.view;
    var resolvedProviderValueExpr;
    var type;
    if (isMulti) {
      resolvedProviderValueExpr = literalArr(providerValueExpressions);
      type = new ArrayType(DYNAMIC_TYPE);
    } else {
      resolvedProviderValueExpr = providerValueExpressions[0];
      type = providerValueExpressions[0].type;
    }
    if (!type) {
      type = DYNAMIC_TYPE;
    }
    if (isEager) {
      view.fields.push(new ClassField(propName, type));
      view.createMethod.addStmt(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
    } else {
      var internalField = "_" + propName;
      view.fields.push(new ClassField(internalField, type));
      var getter = new CompileMethod(view);
      getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
      getter.addStmt(new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]));
      getter.addStmt(new ReturnStatement(THIS_EXPR.prop(internalField)));
      view.getters.push(new ClassGetter(propName, getter.finish(), type));
    }
    return THIS_EXPR.prop(propName);
  }
  var _QueryWithRead = (function() {
    function _QueryWithRead(query, match) {
      this.query = query;
      this.read = query.meta.read || match;
    }
    return _QueryWithRead;
  }());
  var CompilePipe = (function() {
    function CompilePipe(view, meta) {
      var _this = this;
      this.view = view;
      this.meta = meta;
      this._purePipeProxyCount = 0;
      this.instance = THIS_EXPR.prop("_pipe_" + meta.name + "_" + view.pipeCount++);
      var deps = this.meta.type.diDeps.map(function(diDep) {
        if (diDep.token.reference === resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference) {
          return getPropertyInView(THIS_EXPR.prop('ref'), _this.view, _this.view.componentView);
        }
        return injectFromViewParentInjector(view, diDep.token, false);
      });
      this.view.fields.push(new ClassField(this.instance.name, importType(this.meta.type)));
      this.view.createMethod.resetDebugInfo(null, null);
      this.view.createMethod.addStmt(THIS_EXPR.prop(this.instance.name).set(importExpr(this.meta.type).instantiate(deps)).toStmt());
    }
    CompilePipe.call = function(view, name, args) {
      var compView = view.componentView;
      var meta = _findPipeMeta(compView, name);
      var pipe;
      if (meta.pure) {
        pipe = compView.purePipes.get(name);
        if (!pipe) {
          pipe = new CompilePipe(compView, meta);
          compView.purePipes.set(name, pipe);
          compView.pipes.push(pipe);
        }
      } else {
        pipe = new CompilePipe(view, meta);
        view.pipes.push(pipe);
      }
      return pipe._call(view, args);
    };
    Object.defineProperty(CompilePipe.prototype, "pure", {
      get: function() {
        return this.meta.pure;
      },
      enumerable: true,
      configurable: true
    });
    CompilePipe.prototype._call = function(callingView, args) {
      if (this.meta.pure) {
        var purePipeProxyInstance = THIS_EXPR.prop(this.instance.name + "_" + this._purePipeProxyCount++);
        var pipeInstanceSeenFromPureProxy = getPropertyInView(this.instance, callingView, this.view);
        createPureProxy(pipeInstanceSeenFromPureProxy.prop('transform').callMethod(BuiltinMethod.Bind, [pipeInstanceSeenFromPureProxy]), args.length, purePipeProxyInstance, {
          fields: callingView.fields,
          ctorStmts: callingView.createMethod
        });
        return importExpr(resolveIdentifier(Identifiers.castByValue)).callFn([purePipeProxyInstance, pipeInstanceSeenFromPureProxy.prop('transform')]).callFn(args);
      } else {
        return getPropertyInView(this.instance, callingView, this.view).callMethod('transform', args);
      }
    };
    return CompilePipe;
  }());
  function _findPipeMeta(view, name) {
    var pipeMeta = null;
    for (var i = view.pipeMetas.length - 1; i >= 0; i--) {
      var localPipeMeta = view.pipeMetas[i];
      if (localPipeMeta.name == name) {
        pipeMeta = localPipeMeta;
        break;
      }
    }
    if (!pipeMeta) {
      throw new Error("Illegal state: Could not find pipe " + name + " although the parser should have detected this error!");
    }
    return pipeMeta;
  }
  var CompileViewRootNodeType;
  (function(CompileViewRootNodeType) {
    CompileViewRootNodeType[CompileViewRootNodeType["Node"] = 0] = "Node";
    CompileViewRootNodeType[CompileViewRootNodeType["ViewContainer"] = 1] = "ViewContainer";
    CompileViewRootNodeType[CompileViewRootNodeType["NgContent"] = 2] = "NgContent";
  })(CompileViewRootNodeType || (CompileViewRootNodeType = {}));
  var CompileViewRootNode = (function() {
    function CompileViewRootNode(type, expr, ngContentIndex) {
      this.type = type;
      this.expr = expr;
      this.ngContentIndex = ngContentIndex;
    }
    return CompileViewRootNode;
  }());
  var CompileView = (function() {
    function CompileView(component, genConfig, pipeMetas, styles, animations, viewIndex, declarationElement, templateVariableBindings) {
      var _this = this;
      this.component = component;
      this.genConfig = genConfig;
      this.pipeMetas = pipeMetas;
      this.styles = styles;
      this.animations = animations;
      this.viewIndex = viewIndex;
      this.declarationElement = declarationElement;
      this.templateVariableBindings = templateVariableBindings;
      this.viewChildren = [];
      this.nodes = [];
      this.rootNodes = [];
      this.lastRenderNode = NULL_EXPR;
      this.viewContainers = [];
      this.methods = [];
      this.ctorStmts = [];
      this.fields = [];
      this.getters = [];
      this.disposables = [];
      this.purePipes = new Map();
      this.pipes = [];
      this.locals = new Map();
      this.literalArrayCount = 0;
      this.literalMapCount = 0;
      this.pipeCount = 0;
      this.createMethod = new CompileMethod(this);
      this.animationBindingsMethod = new CompileMethod(this);
      this.injectorGetMethod = new CompileMethod(this);
      this.updateContentQueriesMethod = new CompileMethod(this);
      this.dirtyParentQueriesMethod = new CompileMethod(this);
      this.updateViewQueriesMethod = new CompileMethod(this);
      this.detectChangesInInputsMethod = new CompileMethod(this);
      this.detectChangesRenderPropertiesMethod = new CompileMethod(this);
      this.afterContentLifecycleCallbacksMethod = new CompileMethod(this);
      this.afterViewLifecycleCallbacksMethod = new CompileMethod(this);
      this.destroyMethod = new CompileMethod(this);
      this.detachMethod = new CompileMethod(this);
      this.viewType = getViewType(component, viewIndex);
      this.className = getViewClassName(component, viewIndex);
      this.classType = importType(new CompileIdentifierMetadata({name: this.className}));
      this.classExpr = variable(this.className);
      if (this.viewType === ViewType.COMPONENT || this.viewType === ViewType.HOST) {
        this.componentView = this;
      } else {
        this.componentView = this.declarationElement.view.componentView;
      }
      this.componentContext = getPropertyInView(THIS_EXPR.prop('context'), this, this.componentView);
      var viewQueries = new Map();
      if (this.viewType === ViewType.COMPONENT) {
        var directiveInstance_1 = THIS_EXPR.prop('context');
        this.component.viewQueries.forEach(function(queryMeta, queryIndex) {
          var propName = "_viewQuery_" + queryMeta.selectors[0].name + "_" + queryIndex;
          var queryList = createQueryList(queryMeta, directiveInstance_1, propName, _this);
          var query = new CompileQuery(queryMeta, queryList, directiveInstance_1, _this);
          addQueryToTokenMap(viewQueries, query);
        });
      }
      this.viewQueries = viewQueries;
      templateVariableBindings.forEach(function(entry) {
        _this.locals.set(entry[1], THIS_EXPR.prop('context').prop(entry[0]));
      });
      if (!this.declarationElement.isNull()) {
        this.declarationElement.setEmbeddedView(this);
      }
    }
    CompileView.prototype.callPipe = function(name, input, args) {
      return CompilePipe.call(this, name, [input].concat(args));
    };
    CompileView.prototype.getLocal = function(name) {
      if (name == EventHandlerVars.event.name) {
        return EventHandlerVars.event;
      }
      var currView = this;
      var result = currView.locals.get(name);
      while (!result && isPresent(currView.declarationElement.view)) {
        currView = currView.declarationElement.view;
        result = currView.locals.get(name);
      }
      if (isPresent(result)) {
        return getPropertyInView(result, this, currView);
      } else {
        return null;
      }
    };
    CompileView.prototype.afterNodes = function() {
      var _this = this;
      Array.from(this.viewQueries.values()).forEach(function(queries) {
        return queries.forEach(function(q) {
          return q.afterChildren(_this.createMethod, _this.updateViewQueriesMethod);
        });
      });
    };
    return CompileView;
  }());
  function getViewType(component, embeddedTemplateIndex) {
    if (embeddedTemplateIndex > 0) {
      return ViewType.EMBEDDED;
    }
    if (component.type.isHost) {
      return ViewType.HOST;
    }
    return ViewType.COMPONENT;
  }
  function bindOutputs(boundEvents, directives, compileElement, bindToRenderer) {
    var usedEvents = collectEvents(boundEvents, directives);
    if (!usedEvents.size) {
      return false;
    }
    if (bindToRenderer) {
      subscribeToRenderEvents(usedEvents, compileElement);
    }
    subscribeToDirectiveEvents(usedEvents, directives, compileElement);
    generateHandleEventMethod(boundEvents, directives, compileElement);
    return true;
  }
  function collectEvents(boundEvents, directives) {
    var usedEvents = new Map();
    boundEvents.forEach(function(event) {
      usedEvents.set(event.fullName, event);
    });
    directives.forEach(function(dirAst) {
      dirAst.hostEvents.forEach(function(event) {
        usedEvents.set(event.fullName, event);
      });
    });
    return usedEvents;
  }
  function subscribeToRenderEvents(usedEvents, compileElement) {
    var eventAndTargetExprs = [];
    usedEvents.forEach(function(event) {
      if (!event.phase) {
        eventAndTargetExprs.push(literal(event.name), literal(event.target));
      }
    });
    if (eventAndTargetExprs.length) {
      var disposableVar = variable("disposable_" + compileElement.view.disposables.length);
      compileElement.view.disposables.push(disposableVar);
      compileElement.view.createMethod.addStmt(disposableVar.set(importExpr(resolveIdentifier(Identifiers.subscribeToRenderElement)).callFn([THIS_EXPR, compileElement.renderNode, createInlineArray(eventAndTargetExprs), handleEventExpr(compileElement)])).toDeclStmt(FUNCTION_TYPE, [StmtModifier.Private]));
    }
  }
  function subscribeToDirectiveEvents(usedEvents, directives, compileElement) {
    var usedEventNames = Array.from(usedEvents.keys());
    directives.forEach(function(dirAst) {
      var dirWrapper = compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference);
      compileElement.view.createMethod.addStmts(DirectiveWrapperExpressions.subscribe(dirAst.directive, dirAst.hostProperties, usedEventNames, dirWrapper, THIS_EXPR, handleEventExpr(compileElement)));
    });
  }
  function generateHandleEventMethod(boundEvents, directives, compileElement) {
    var hasComponentHostListener = directives.some(function(dirAst) {
      return dirAst.hostEvents.some(function(event) {
        return dirAst.directive.isComponent;
      });
    });
    var markPathToRootStart = hasComponentHostListener ? compileElement.compViewExpr : THIS_EXPR;
    var handleEventStmts = new CompileMethod(compileElement.view);
    handleEventStmts.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
    handleEventStmts.push(markPathToRootStart.callMethod('markPathToRootAsCheckOnce', []).toStmt());
    var eventNameVar = variable('eventName');
    var resultVar = variable('result');
    handleEventStmts.push(resultVar.set(literal(true)).toDeclStmt(BOOL_TYPE));
    directives.forEach(function(dirAst, dirIdx) {
      var dirWrapper = compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference);
      if (dirAst.hostEvents.length > 0) {
        handleEventStmts.push(resultVar.set(DirectiveWrapperExpressions.handleEvent(dirAst.hostEvents, dirWrapper, eventNameVar, EventHandlerVars.event).and(resultVar)).toStmt());
      }
    });
    boundEvents.forEach(function(renderEvent, renderEventIdx) {
      var evalResult = convertActionBinding(compileElement.view, compileElement.view, compileElement.view.componentContext, renderEvent.handler, "sub_" + renderEventIdx);
      var trueStmts = evalResult.stmts;
      if (evalResult.preventDefault) {
        trueStmts.push(resultVar.set(evalResult.preventDefault.and(resultVar)).toStmt());
      }
      handleEventStmts.push(new IfStmt(eventNameVar.equals(literal(renderEvent.fullName)), trueStmts));
    });
    handleEventStmts.push(new ReturnStatement(resultVar));
    compileElement.view.methods.push(new ClassMethod(getHandleEventMethodName(compileElement.nodeIndex), [new FnParam(eventNameVar.name, STRING_TYPE), new FnParam(EventHandlerVars.event.name, DYNAMIC_TYPE)], handleEventStmts.finish(), BOOL_TYPE));
  }
  function handleEventExpr(compileElement) {
    var handleEventMethodName = getHandleEventMethodName(compileElement.nodeIndex);
    return THIS_EXPR.callMethod('eventHandler', [THIS_EXPR.prop(handleEventMethodName)]);
  }
  var STATE_IS_NEVER_CHECKED = THIS_EXPR.prop('numberOfChecks').identical(new LiteralExpr(0));
  var NOT_THROW_ON_CHANGES = not(DetectChangesVars.throwOnChange);
  function bindDirectiveAfterContentLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
    var view = compileElement.view;
    var lifecycleHooks = directiveMeta.type.lifecycleHooks;
    var afterContentLifecycleCallbacksMethod = view.afterContentLifecycleCallbacksMethod;
    afterContentLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
    if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentInit) !== -1) {
      afterContentLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterContentInit', []).toStmt()]));
    }
    if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentChecked) !== -1) {
      afterContentLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterContentChecked', []).toStmt());
    }
  }
  function bindDirectiveAfterViewLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
    var view = compileElement.view;
    var lifecycleHooks = directiveMeta.type.lifecycleHooks;
    var afterViewLifecycleCallbacksMethod = view.afterViewLifecycleCallbacksMethod;
    afterViewLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
    if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewInit) !== -1) {
      afterViewLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterViewInit', []).toStmt()]));
    }
    if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewChecked) !== -1) {
      afterViewLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterViewChecked', []).toStmt());
    }
  }
  function bindDirectiveWrapperLifecycleCallbacks(dir, directiveWrapperIntance, compileElement) {
    compileElement.view.destroyMethod.addStmts(DirectiveWrapperExpressions.ngOnDestroy(dir.directive, directiveWrapperIntance));
    compileElement.view.detachMethod.addStmts(DirectiveWrapperExpressions.ngOnDetach(dir.hostProperties, directiveWrapperIntance, THIS_EXPR, compileElement.compViewExpr || THIS_EXPR, compileElement.renderNode));
  }
  function bindInjectableDestroyLifecycleCallbacks(provider, providerInstance, compileElement) {
    var onDestroyMethod = compileElement.view.destroyMethod;
    onDestroyMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
    if (provider.providerType !== exports.ProviderAstType.Directive && provider.providerType !== exports.ProviderAstType.Component && provider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
      onDestroyMethod.addStmt(providerInstance.callMethod('ngOnDestroy', []).toStmt());
    }
  }
  function bindPipeDestroyLifecycleCallbacks(pipeMeta, pipeInstance, view) {
    var onDestroyMethod = view.destroyMethod;
    if (pipeMeta.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
      onDestroyMethod.addStmt(pipeInstance.callMethod('ngOnDestroy', []).toStmt());
    }
  }
  function bindRenderText(boundText, compileNode, view) {
    var valueField = createCheckBindingField(view);
    var evalResult = convertPropertyBinding(view, view, view.componentContext, boundText.value, valueField.bindingId);
    if (!evalResult) {
      return null;
    }
    view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileNode.nodeIndex, boundText);
    view.detectChangesRenderPropertiesMethod.addStmts(createCheckBindingStmt(evalResult, valueField.expression, DetectChangesVars.throwOnChange, [THIS_EXPR.prop('renderer').callMethod('setText', [compileNode.renderNode, evalResult.currValExpr]).toStmt()]));
  }
  function bindRenderInputs(boundProps, hasEvents, compileElement) {
    var view = compileElement.view;
    var renderNode = compileElement.renderNode;
    boundProps.forEach(function(boundProp) {
      var bindingField = createCheckBindingField(view);
      view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileElement.nodeIndex, boundProp);
      var evalResult = convertPropertyBinding(view, view, compileElement.view.componentContext, boundProp.value, bindingField.bindingId);
      if (!evalResult) {
        return;
      }
      var checkBindingStmts = [];
      var compileMethod = view.detectChangesRenderPropertiesMethod;
      switch (boundProp.type) {
        case exports.PropertyBindingType.Property:
        case exports.PropertyBindingType.Attribute:
        case exports.PropertyBindingType.Class:
        case exports.PropertyBindingType.Style:
          checkBindingStmts.push.apply(checkBindingStmts, writeToRenderer(THIS_EXPR, boundProp, renderNode, evalResult.currValExpr, view.genConfig.logBindingUpdate));
          break;
        case exports.PropertyBindingType.Animation:
          compileMethod = view.animationBindingsMethod;
          var _a = triggerAnimation(THIS_EXPR, THIS_EXPR, boundProp, (hasEvents ? THIS_EXPR.prop(getHandleEventMethodName(compileElement.nodeIndex)) : importExpr(resolveIdentifier(Identifiers.noop))).callMethod(BuiltinMethod.Bind, [THIS_EXPR]), compileElement.renderNode, evalResult.currValExpr, bindingField.expression),
              updateStmts = _a.updateStmts,
              detachStmts = _a.detachStmts;
          checkBindingStmts.push.apply(checkBindingStmts, updateStmts);
          view.detachMethod.addStmts(detachStmts);
          break;
      }
      compileMethod.addStmts(createCheckBindingStmt(evalResult, bindingField.expression, DetectChangesVars.throwOnChange, checkBindingStmts));
    });
  }
  function bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, elementName, schemaRegistry) {
    var runtimeSecurityCtxExprs = directiveAst.hostProperties.filter(function(boundProp) {
      return boundProp.needsRuntimeSecurityContext;
    }).map(function(boundProp) {
      var ctx;
      switch (boundProp.type) {
        case exports.PropertyBindingType.Property:
          ctx = schemaRegistry.securityContext(elementName, boundProp.name, false);
          break;
        case exports.PropertyBindingType.Attribute:
          ctx = schemaRegistry.securityContext(elementName, boundProp.name, true);
          break;
        default:
          throw new Error("Illegal state: Only property / attribute bindings can have an unknown security context! Binding " + boundProp.name);
      }
      return createEnumExpression(Identifiers.SecurityContext, ctx);
    });
    compileElement.view.detectChangesRenderPropertiesMethod.addStmts(DirectiveWrapperExpressions.checkHost(directiveAst.hostProperties, directiveWrapperInstance, THIS_EXPR, compileElement.compViewExpr || THIS_EXPR, compileElement.renderNode, DetectChangesVars.throwOnChange, runtimeSecurityCtxExprs));
  }
  function bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement) {
    var view = compileElement.view;
    var detectChangesInInputsMethod = view.detectChangesInInputsMethod;
    detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
    directiveAst.inputs.forEach(function(input, inputIdx) {
      var bindingId = compileElement.nodeIndex + "_" + dirIndex + "_" + inputIdx;
      detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, input);
      var evalResult = convertPropertyBinding(view, view, view.componentContext, input.value, bindingId);
      if (!evalResult) {
        return;
      }
      detectChangesInInputsMethod.addStmts(evalResult.stmts);
      detectChangesInInputsMethod.addStmt(directiveWrapperInstance.callMethod("check_" + input.directiveName, [evalResult.currValExpr, DetectChangesVars.throwOnChange, evalResult.forceUpdate || literal(false)]).toStmt());
    });
    var isOnPushComp = directiveAst.directive.isComponent && !isDefaultChangeDetectionStrategy(directiveAst.directive.changeDetection);
    var directiveDetectChangesExpr = DirectiveWrapperExpressions.ngDoCheck(directiveWrapperInstance, THIS_EXPR, compileElement.renderNode, DetectChangesVars.throwOnChange);
    var directiveDetectChangesStmt = isOnPushComp ? new IfStmt(directiveDetectChangesExpr, [compileElement.compViewExpr.callMethod('markAsCheckOnce', []).toStmt()]) : directiveDetectChangesExpr.toStmt();
    detectChangesInInputsMethod.addStmt(directiveDetectChangesStmt);
  }
  function bindView(view, parsedTemplate, schemaRegistry) {
    var visitor = new ViewBinderVisitor(view, schemaRegistry);
    templateVisitAll(visitor, parsedTemplate);
    view.pipes.forEach(function(pipe) {
      bindPipeDestroyLifecycleCallbacks(pipe.meta, pipe.instance, pipe.view);
    });
  }
  var ViewBinderVisitor = (function() {
    function ViewBinderVisitor(view, _schemaRegistry) {
      this.view = view;
      this._schemaRegistry = _schemaRegistry;
      this._nodeIndex = 0;
    }
    ViewBinderVisitor.prototype.visitBoundText = function(ast, parent) {
      var node = this.view.nodes[this._nodeIndex++];
      bindRenderText(ast, node, this.view);
      return null;
    };
    ViewBinderVisitor.prototype.visitText = function(ast, parent) {
      this._nodeIndex++;
      return null;
    };
    ViewBinderVisitor.prototype.visitNgContent = function(ast, parent) {
      return null;
    };
    ViewBinderVisitor.prototype.visitElement = function(ast, parent) {
      var _this = this;
      var compileElement = this.view.nodes[this._nodeIndex++];
      var hasEvents = bindOutputs(ast.outputs, ast.directives, compileElement, true);
      bindRenderInputs(ast.inputs, hasEvents, compileElement);
      ast.directives.forEach(function(directiveAst, dirIndex) {
        var directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
        bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement);
        bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, ast.name, _this._schemaRegistry);
      });
      templateVisitAll(this, ast.children, compileElement);
      ast.directives.forEach(function(directiveAst) {
        var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
        var directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
        bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
        bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
        bindDirectiveWrapperLifecycleCallbacks(directiveAst, directiveWrapperInstance, compileElement);
      });
      ast.providers.forEach(function(providerAst) {
        var providerInstance = compileElement.instances.get(providerAst.token.reference);
        bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
      });
      return null;
    };
    ViewBinderVisitor.prototype.visitEmbeddedTemplate = function(ast, parent) {
      var compileElement = this.view.nodes[this._nodeIndex++];
      bindOutputs(ast.outputs, ast.directives, compileElement, false);
      ast.directives.forEach(function(directiveAst, dirIndex) {
        var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
        var directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
        bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement);
        bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
        bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
        bindDirectiveWrapperLifecycleCallbacks(directiveAst, directiveWrapperInstance, compileElement);
      });
      ast.providers.forEach(function(providerAst) {
        var providerInstance = compileElement.instances.get(providerAst.token.reference);
        bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
      });
      bindView(compileElement.embeddedView, ast.children, this._schemaRegistry);
      return null;
    };
    ViewBinderVisitor.prototype.visitAttr = function(ast, ctx) {
      return null;
    };
    ViewBinderVisitor.prototype.visitDirective = function(ast, ctx) {
      return null;
    };
    ViewBinderVisitor.prototype.visitEvent = function(ast, eventTargetAndNames) {
      return null;
    };
    ViewBinderVisitor.prototype.visitReference = function(ast, ctx) {
      return null;
    };
    ViewBinderVisitor.prototype.visitVariable = function(ast, ctx) {
      return null;
    };
    ViewBinderVisitor.prototype.visitDirectiveProperty = function(ast, context) {
      return null;
    };
    ViewBinderVisitor.prototype.visitElementProperty = function(ast, context) {
      return null;
    };
    return ViewBinderVisitor;
  }());
  var IMPLICIT_TEMPLATE_VAR = '\$implicit';
  var CLASS_ATTR$1 = 'class';
  var STYLE_ATTR = 'style';
  var NG_CONTAINER_TAG = 'ng-container';
  var parentRenderNodeVar = variable('parentRenderNode');
  var rootSelectorVar = variable('rootSelector');
  function buildView(view, template, targetDependencies) {
    var builderVisitor = new ViewBuilderVisitor(view, targetDependencies);
    var parentEl = view.declarationElement.isNull() ? view.declarationElement : view.declarationElement.parent;
    templateVisitAll(builderVisitor, template, parentEl);
    if (view.viewType === ViewType.EMBEDDED || view.viewType === ViewType.HOST) {
      view.lastRenderNode = builderVisitor.getOrCreateLastRenderNode();
    }
    return builderVisitor.nestedViewCount;
  }
  function finishView(view, targetStatements) {
    view.afterNodes();
    createViewTopLevelStmts(view, targetStatements);
    view.nodes.forEach(function(node) {
      if (node instanceof CompileElement && node.hasEmbeddedView) {
        finishView(node.embeddedView, targetStatements);
      }
    });
  }
  var ViewBuilderVisitor = (function() {
    function ViewBuilderVisitor(view, targetDependencies) {
      this.view = view;
      this.targetDependencies = targetDependencies;
      this.nestedViewCount = 0;
    }
    ViewBuilderVisitor.prototype._isRootNode = function(parent) {
      return parent.view !== this.view;
    };
    ViewBuilderVisitor.prototype._addRootNodeAndProject = function(node) {
      var projectedNode = _getOuterContainerOrSelf(node);
      var parent = projectedNode.parent;
      var ngContentIndex = projectedNode.sourceAst.ngContentIndex;
      var viewContainer = (node instanceof CompileElement && node.hasViewContainer) ? node.viewContainer : null;
      if (this._isRootNode(parent)) {
        if (this.view.viewType !== ViewType.COMPONENT) {
          this.view.rootNodes.push(new CompileViewRootNode(viewContainer ? CompileViewRootNodeType.ViewContainer : CompileViewRootNodeType.Node, viewContainer || node.renderNode));
        }
      } else if (isPresent(parent.component) && isPresent(ngContentIndex)) {
        parent.addContentNode(ngContentIndex, new CompileViewRootNode(viewContainer ? CompileViewRootNodeType.ViewContainer : CompileViewRootNodeType.Node, viewContainer || node.renderNode));
      }
    };
    ViewBuilderVisitor.prototype._getParentRenderNode = function(parent) {
      parent = _getOuterContainerParentOrSelf(parent);
      if (this._isRootNode(parent)) {
        if (this.view.viewType === ViewType.COMPONENT) {
          return parentRenderNodeVar;
        } else {
          return NULL_EXPR;
        }
      } else {
        return isPresent(parent.component) && parent.component.template.encapsulation !== _angular_core.ViewEncapsulation.Native ? NULL_EXPR : parent.renderNode;
      }
    };
    ViewBuilderVisitor.prototype.getOrCreateLastRenderNode = function() {
      var view = this.view;
      if (view.rootNodes.length === 0 || view.rootNodes[view.rootNodes.length - 1].type !== CompileViewRootNodeType.Node) {
        var fieldName = "_el_" + view.nodes.length;
        view.fields.push(new ClassField(fieldName, importType(view.genConfig.renderTypes.renderElement)));
        view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod('createTemplateAnchor', [NULL_EXPR, NULL_EXPR])).toStmt());
        view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.Node, THIS_EXPR.prop(fieldName)));
      }
      return view.rootNodes[view.rootNodes.length - 1].expr;
    };
    ViewBuilderVisitor.prototype.visitBoundText = function(ast, parent) {
      return this._visitText(ast, '', parent);
    };
    ViewBuilderVisitor.prototype.visitText = function(ast, parent) {
      return this._visitText(ast, ast.value, parent);
    };
    ViewBuilderVisitor.prototype._visitText = function(ast, value, parent) {
      var fieldName = "_text_" + this.view.nodes.length;
      this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderText)));
      var renderNode = THIS_EXPR.prop(fieldName);
      var compileNode = new CompileNode(parent, this.view, this.view.nodes.length, renderNode, ast);
      var createRenderNode = THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod('createText', [this._getParentRenderNode(parent), literal(value), this.view.createMethod.resetDebugInfoExpr(this.view.nodes.length, ast)])).toStmt();
      this.view.nodes.push(compileNode);
      this.view.createMethod.addStmt(createRenderNode);
      this._addRootNodeAndProject(compileNode);
      return renderNode;
    };
    ViewBuilderVisitor.prototype.visitNgContent = function(ast, parent) {
      this.view.createMethod.resetDebugInfo(null, ast);
      var parentRenderNode = this._getParentRenderNode(parent);
      if (parentRenderNode !== NULL_EXPR) {
        this.view.createMethod.addStmt(THIS_EXPR.callMethod('projectNodes', [parentRenderNode, literal(ast.index)]).toStmt());
      } else if (this._isRootNode(parent)) {
        if (this.view.viewType !== ViewType.COMPONENT) {
          this.view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.NgContent, null, ast.index));
        }
      } else {
        if (isPresent(parent.component) && isPresent(ast.ngContentIndex)) {
          parent.addContentNode(ast.ngContentIndex, new CompileViewRootNode(CompileViewRootNodeType.NgContent, null, ast.index));
        }
      }
      return null;
    };
    ViewBuilderVisitor.prototype.visitElement = function(ast, parent) {
      var nodeIndex = this.view.nodes.length;
      var createRenderNodeExpr;
      var debugContextExpr = this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast);
      var directives = ast.directives.map(function(directiveAst) {
        return directiveAst.directive;
      });
      var component = directives.find(function(directive) {
        return directive.isComponent;
      });
      if (ast.name === NG_CONTAINER_TAG) {
        createRenderNodeExpr = ViewProperties.renderer.callMethod('createTemplateAnchor', [this._getParentRenderNode(parent), debugContextExpr]);
      } else {
        var htmlAttrs = _readHtmlAttrs(ast.attrs);
        var attrNameAndValues = createInlineArray(_mergeHtmlAndDirectiveAttrs(htmlAttrs, directives).map(function(v) {
          return literal(v);
        }));
        if (nodeIndex === 0 && this.view.viewType === ViewType.HOST) {
          createRenderNodeExpr = importExpr(resolveIdentifier(Identifiers.selectOrCreateRenderHostElement)).callFn([ViewProperties.renderer, literal(ast.name), attrNameAndValues, rootSelectorVar, debugContextExpr]);
        } else {
          createRenderNodeExpr = importExpr(resolveIdentifier(Identifiers.createRenderElement)).callFn([ViewProperties.renderer, this._getParentRenderNode(parent), literal(ast.name), attrNameAndValues, debugContextExpr]);
        }
      }
      var fieldName = "_el_" + nodeIndex;
      this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderElement)));
      this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(createRenderNodeExpr).toStmt());
      var renderNode = THIS_EXPR.prop(fieldName);
      var compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, component, directives, ast.providers, ast.hasViewContainer, false, ast.references, this.targetDependencies);
      this.view.nodes.push(compileElement);
      var compViewExpr = null;
      if (isPresent(component)) {
        var nestedComponentIdentifier = new CompileIdentifierMetadata({name: getViewClassName(component, 0)});
        this.targetDependencies.push(new ViewClassDependency(component.type, nestedComponentIdentifier));
        compViewExpr = THIS_EXPR.prop("compView_" + nodeIndex);
        this.view.fields.push(new ClassField(compViewExpr.name, importType(resolveIdentifier(Identifiers.AppView), [importType(component.type)])));
        this.view.viewChildren.push(compViewExpr);
        compileElement.setComponentView(compViewExpr);
        this.view.createMethod.addStmt(compViewExpr.set(importExpr(nestedComponentIdentifier).instantiate([ViewProperties.viewUtils, THIS_EXPR, literal(nodeIndex), renderNode])).toStmt());
      }
      compileElement.beforeChildren();
      this._addRootNodeAndProject(compileElement);
      templateVisitAll(this, ast.children, compileElement);
      compileElement.afterChildren(this.view.nodes.length - nodeIndex - 1);
      if (isPresent(compViewExpr)) {
        this.view.createMethod.addStmt(compViewExpr.callMethod('create', [compileElement.getComponent()]).toStmt());
      }
      return null;
    };
    ViewBuilderVisitor.prototype.visitEmbeddedTemplate = function(ast, parent) {
      var nodeIndex = this.view.nodes.length;
      var fieldName = "_anchor_" + nodeIndex;
      this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderComment)));
      this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod('createTemplateAnchor', [this._getParentRenderNode(parent), this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast)])).toStmt());
      var renderNode = THIS_EXPR.prop(fieldName);
      var templateVariableBindings = ast.variables.map(function(varAst) {
        return [varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name];
      });
      var directives = ast.directives.map(function(directiveAst) {
        return directiveAst.directive;
      });
      var compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, null, directives, ast.providers, ast.hasViewContainer, true, ast.references, this.targetDependencies);
      this.view.nodes.push(compileElement);
      this.nestedViewCount++;
      var embeddedView = new CompileView(this.view.component, this.view.genConfig, this.view.pipeMetas, NULL_EXPR, this.view.animations, this.view.viewIndex + this.nestedViewCount, compileElement, templateVariableBindings);
      this.nestedViewCount += buildView(embeddedView, ast.children, this.targetDependencies);
      compileElement.beforeChildren();
      this._addRootNodeAndProject(compileElement);
      compileElement.afterChildren(0);
      return null;
    };
    ViewBuilderVisitor.prototype.visitAttr = function(ast, ctx) {
      return null;
    };
    ViewBuilderVisitor.prototype.visitDirective = function(ast, ctx) {
      return null;
    };
    ViewBuilderVisitor.prototype.visitEvent = function(ast, eventTargetAndNames) {
      return null;
    };
    ViewBuilderVisitor.prototype.visitReference = function(ast, ctx) {
      return null;
    };
    ViewBuilderVisitor.prototype.visitVariable = function(ast, ctx) {
      return null;
    };
    ViewBuilderVisitor.prototype.visitDirectiveProperty = function(ast, context) {
      return null;
    };
    ViewBuilderVisitor.prototype.visitElementProperty = function(ast, context) {
      return null;
    };
    return ViewBuilderVisitor;
  }());
  function _getOuterContainerOrSelf(node) {
    var view = node.view;
    while (_isNgContainer(node.parent, view)) {
      node = node.parent;
    }
    return node;
  }
  function _getOuterContainerParentOrSelf(el) {
    var view = el.view;
    while (_isNgContainer(el, view)) {
      el = el.parent;
    }
    return el;
  }
  function _isNgContainer(node, view) {
    return !node.isNull() && node.sourceAst.name === NG_CONTAINER_TAG && node.view === view;
  }
  function _mergeHtmlAndDirectiveAttrs(declaredHtmlAttrs, directives) {
    var mapResult = {};
    Object.keys(declaredHtmlAttrs).forEach(function(key) {
      mapResult[key] = declaredHtmlAttrs[key];
    });
    directives.forEach(function(directiveMeta) {
      Object.keys(directiveMeta.hostAttributes).forEach(function(name) {
        var value = directiveMeta.hostAttributes[name];
        var prevValue = mapResult[name];
        mapResult[name] = isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;
      });
    });
    var arrResult = [];
    Object.keys(mapResult).sort().forEach(function(attrName) {
      arrResult.push(attrName, mapResult[attrName]);
    });
    return arrResult;
  }
  function _readHtmlAttrs(attrs) {
    var htmlAttrs = {};
    attrs.forEach(function(ast) {
      htmlAttrs[ast.name] = ast.value;
    });
    return htmlAttrs;
  }
  function mergeAttributeValue(attrName, attrValue1, attrValue2) {
    if (attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR) {
      return attrValue1 + " " + attrValue2;
    } else {
      return attrValue2;
    }
  }
  function createViewTopLevelStmts(view, targetStatements) {
    var nodeDebugInfosVar = NULL_EXPR;
    if (view.genConfig.genDebugInfo) {
      nodeDebugInfosVar = variable("nodeDebugInfos_" + view.component.type.name + view.viewIndex);
      targetStatements.push(nodeDebugInfosVar.set(literalArr(view.nodes.map(createStaticNodeDebugInfo), new ArrayType(new ExternalType(resolveIdentifier(Identifiers.StaticNodeDebugInfo)), [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]));
    }
    var renderCompTypeVar = variable("renderType_" + view.component.type.name);
    if (view.viewIndex === 0) {
      var templateUrlInfo = void 0;
      if (view.component.template.templateUrl == view.component.type.moduleUrl) {
        templateUrlInfo = view.component.type.moduleUrl + " class " + view.component.type.name + " - inline template";
      } else {
        templateUrlInfo = view.component.template.templateUrl;
      }
      targetStatements.push(renderCompTypeVar.set(importExpr(resolveIdentifier(Identifiers.createRenderComponentType)).callFn([view.genConfig.genDebugInfo ? literal(templateUrlInfo) : literal(''), literal(view.component.template.ngContentSelectors.length), ViewEncapsulationEnum.fromValue(view.component.template.encapsulation), view.styles, literalMap(view.animations.map(function(entry) {
        return [entry.name, entry.fnExp];
      }))])).toDeclStmt(importType(resolveIdentifier(Identifiers.RenderComponentType))));
    }
    var viewClass = createViewClass(view, renderCompTypeVar, nodeDebugInfosVar);
    targetStatements.push(viewClass);
  }
  function createStaticNodeDebugInfo(node) {
    var compileElement = node instanceof CompileElement ? node : null;
    var providerTokens = [];
    var componentToken = NULL_EXPR;
    var varTokenEntries = [];
    if (isPresent(compileElement)) {
      providerTokens = compileElement.getProviderTokens();
      if (isPresent(compileElement.component)) {
        componentToken = createDiTokenExpression(identifierToken(compileElement.component.type));
      }
      Object.keys(compileElement.referenceTokens).forEach(function(varName) {
        var token = compileElement.referenceTokens[varName];
        varTokenEntries.push([varName, isPresent(token) ? createDiTokenExpression(token) : NULL_EXPR]);
      });
    }
    return importExpr(resolveIdentifier(Identifiers.StaticNodeDebugInfo)).instantiate([literalArr(providerTokens, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])), componentToken, literalMap(varTokenEntries, new MapType(DYNAMIC_TYPE, [TypeModifier.Const]))], importType(resolveIdentifier(Identifiers.StaticNodeDebugInfo), null, [TypeModifier.Const]));
  }
  function createViewClass(view, renderCompTypeVar, nodeDebugInfosVar) {
    var viewConstructorArgs = [new FnParam(ViewConstructorVars.viewUtils.name, importType(resolveIdentifier(Identifiers.ViewUtils))), new FnParam(ViewConstructorVars.parentView.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(ViewConstructorVars.parentIndex.name, NUMBER_TYPE), new FnParam(ViewConstructorVars.parentElement.name, DYNAMIC_TYPE)];
    var superConstructorArgs = [variable(view.className), renderCompTypeVar, ViewTypeEnum.fromValue(view.viewType), ViewConstructorVars.viewUtils, ViewConstructorVars.parentView, ViewConstructorVars.parentIndex, ViewConstructorVars.parentElement, ChangeDetectorStatusEnum.fromValue(getChangeDetectionMode(view))];
    if (view.genConfig.genDebugInfo) {
      superConstructorArgs.push(nodeDebugInfosVar);
    }
    if (view.viewType === ViewType.EMBEDDED) {
      viewConstructorArgs.push(new FnParam('declaredViewContainer', importType(resolveIdentifier(Identifiers.ViewContainer))));
      superConstructorArgs.push(variable('declaredViewContainer'));
    }
    var viewMethods = [new ClassMethod('createInternal', [new FnParam(rootSelectorVar.name, STRING_TYPE)], generateCreateMethod(view), importType(resolveIdentifier(Identifiers.ComponentRef), [DYNAMIC_TYPE])), new ClassMethod('injectorGetInternal', [new FnParam(InjectMethodVars.token.name, DYNAMIC_TYPE), new FnParam(InjectMethodVars.requestNodeIndex.name, NUMBER_TYPE), new FnParam(InjectMethodVars.notFoundResult.name, DYNAMIC_TYPE)], addReturnValuefNotEmpty(view.injectorGetMethod.finish(), InjectMethodVars.notFoundResult), DYNAMIC_TYPE), new ClassMethod('detectChangesInternal', [new FnParam(DetectChangesVars.throwOnChange.name, BOOL_TYPE)], generateDetectChangesMethod(view)), new ClassMethod('dirtyParentQueriesInternal', [], view.dirtyParentQueriesMethod.finish()), new ClassMethod('destroyInternal', [], generateDestroyMethod(view)), new ClassMethod('detachInternal', [], view.detachMethod.finish()), generateVisitRootNodesMethod(view), generateVisitProjectableNodesMethod(view), generateCreateEmbeddedViewsMethod(view)].filter(function(method) {
      return method.body.length > 0;
    });
    var superClass = view.genConfig.genDebugInfo ? Identifiers.DebugAppView : Identifiers.AppView;
    var viewClass = createClassStmt({
      name: view.className,
      parent: importExpr(resolveIdentifier(superClass), [getContextType(view)]),
      parentArgs: superConstructorArgs,
      ctorParams: viewConstructorArgs,
      builders: [{methods: viewMethods}, view]
    });
    return viewClass;
  }
  function generateDestroyMethod(view) {
    var stmts = [];
    view.viewContainers.forEach(function(viewContainer) {
      stmts.push(viewContainer.callMethod('destroyNestedViews', []).toStmt());
    });
    view.viewChildren.forEach(function(viewChild) {
      stmts.push(viewChild.callMethod('destroy', []).toStmt());
    });
    stmts.push.apply(stmts, view.destroyMethod.finish());
    return stmts;
  }
  function generateCreateMethod(view) {
    var parentRenderNodeExpr = NULL_EXPR;
    var parentRenderNodeStmts = [];
    if (view.viewType === ViewType.COMPONENT) {
      parentRenderNodeExpr = ViewProperties.renderer.callMethod('createViewRoot', [THIS_EXPR.prop('parentElement')]);
      parentRenderNodeStmts = [parentRenderNodeVar.set(parentRenderNodeExpr).toDeclStmt(importType(view.genConfig.renderTypes.renderNode), [StmtModifier.Final])];
    }
    var resultExpr;
    if (view.viewType === ViewType.HOST) {
      var hostEl = view.nodes[0];
      resultExpr = importExpr(resolveIdentifier(Identifiers.ComponentRef_), [DYNAMIC_TYPE]).instantiate([literal(hostEl.nodeIndex), THIS_EXPR, hostEl.renderNode, hostEl.getComponent()]);
    } else {
      resultExpr = NULL_EXPR;
    }
    var allNodesExpr = ViewProperties.renderer.cast(DYNAMIC_TYPE).prop('directRenderer').conditional(NULL_EXPR, literalArr(view.nodes.map(function(node) {
      return node.renderNode;
    })));
    return parentRenderNodeStmts.concat(view.createMethod.finish(), [THIS_EXPR.callMethod('init', [view.lastRenderNode, allNodesExpr, view.disposables.length ? literalArr(view.disposables) : NULL_EXPR]).toStmt(), new ReturnStatement(resultExpr)]);
  }
  function generateDetectChangesMethod(view) {
    var stmts = [];
    if (view.animationBindingsMethod.isEmpty() && view.detectChangesInInputsMethod.isEmpty() && view.updateContentQueriesMethod.isEmpty() && view.afterContentLifecycleCallbacksMethod.isEmpty() && view.detectChangesRenderPropertiesMethod.isEmpty() && view.updateViewQueriesMethod.isEmpty() && view.afterViewLifecycleCallbacksMethod.isEmpty() && view.viewContainers.length === 0 && view.viewChildren.length === 0) {
      return stmts;
    }
    stmts.push.apply(stmts, view.animationBindingsMethod.finish());
    stmts.push.apply(stmts, view.detectChangesInInputsMethod.finish());
    view.viewContainers.forEach(function(viewContainer) {
      stmts.push(viewContainer.callMethod('detectChangesInNestedViews', [DetectChangesVars.throwOnChange]).toStmt());
    });
    var afterContentStmts = view.updateContentQueriesMethod.finish().concat(view.afterContentLifecycleCallbacksMethod.finish());
    if (afterContentStmts.length > 0) {
      stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterContentStmts));
    }
    stmts.push.apply(stmts, view.detectChangesRenderPropertiesMethod.finish());
    view.viewChildren.forEach(function(viewChild) {
      stmts.push(viewChild.callMethod('detectChanges', [DetectChangesVars.throwOnChange]).toStmt());
    });
    var afterViewStmts = view.updateViewQueriesMethod.finish().concat(view.afterViewLifecycleCallbacksMethod.finish());
    if (afterViewStmts.length > 0) {
      stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterViewStmts));
    }
    var varStmts = [];
    var readVars = findReadVarNames(stmts);
    if (readVars.has(DetectChangesVars.changed.name)) {
      varStmts.push(DetectChangesVars.changed.set(literal(true)).toDeclStmt(BOOL_TYPE));
    }
    if (readVars.has(DetectChangesVars.changes.name)) {
      varStmts.push(DetectChangesVars.changes.set(NULL_EXPR).toDeclStmt(new MapType(importType(resolveIdentifier(Identifiers.SimpleChange)))));
    }
    varStmts.push.apply(varStmts, createSharedBindingVariablesIfNeeded(stmts));
    return varStmts.concat(stmts);
  }
  function addReturnValuefNotEmpty(statements, value) {
    if (statements.length > 0) {
      return statements.concat([new ReturnStatement(value)]);
    } else {
      return statements;
    }
  }
  function getContextType(view) {
    if (view.viewType === ViewType.COMPONENT) {
      return importType(view.component.type);
    }
    return DYNAMIC_TYPE;
  }
  function getChangeDetectionMode(view) {
    var mode;
    if (view.viewType === ViewType.COMPONENT) {
      mode = isDefaultChangeDetectionStrategy(view.component.changeDetection) ? ChangeDetectorStatus.CheckAlways : ChangeDetectorStatus.CheckOnce;
    } else {
      mode = ChangeDetectorStatus.CheckAlways;
    }
    return mode;
  }
  function generateVisitRootNodesMethod(view) {
    var cbVar = variable('cb');
    var ctxVar = variable('ctx');
    var stmts = generateVisitNodesStmts(view.rootNodes, cbVar, ctxVar);
    return new ClassMethod('visitRootNodesInternal', [new FnParam(cbVar.name, DYNAMIC_TYPE), new FnParam(ctxVar.name, DYNAMIC_TYPE)], stmts);
  }
  function generateVisitProjectableNodesMethod(view) {
    var nodeIndexVar = variable('nodeIndex');
    var ngContentIndexVar = variable('ngContentIndex');
    var cbVar = variable('cb');
    var ctxVar = variable('ctx');
    var stmts = [];
    view.nodes.forEach(function(node) {
      if (node instanceof CompileElement && node.component) {
        node.contentNodesByNgContentIndex.forEach(function(projectedNodes, ngContentIndex) {
          stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex)).and(ngContentIndexVar.equals(literal(ngContentIndex))), generateVisitNodesStmts(projectedNodes, cbVar, ctxVar)));
        });
      }
    });
    return new ClassMethod('visitProjectableNodesInternal', [new FnParam(nodeIndexVar.name, NUMBER_TYPE), new FnParam(ngContentIndexVar.name, NUMBER_TYPE), new FnParam(cbVar.name, DYNAMIC_TYPE), new FnParam(ctxVar.name, DYNAMIC_TYPE)], stmts);
  }
  function generateVisitNodesStmts(nodes, cb, ctx) {
    var stmts = [];
    nodes.forEach(function(node) {
      switch (node.type) {
        case CompileViewRootNodeType.Node:
          stmts.push(cb.callFn([node.expr, ctx]).toStmt());
          break;
        case CompileViewRootNodeType.ViewContainer:
          stmts.push(cb.callFn([node.expr.prop('nativeElement'), ctx]).toStmt());
          stmts.push(node.expr.callMethod('visitNestedViewRootNodes', [cb, ctx]).toStmt());
          break;
        case CompileViewRootNodeType.NgContent:
          stmts.push(THIS_EXPR.callMethod('visitProjectedNodes', [literal(node.ngContentIndex), cb, ctx]).toStmt());
          break;
      }
    });
    return stmts;
  }
  function generateCreateEmbeddedViewsMethod(view) {
    var nodeIndexVar = variable('nodeIndex');
    var stmts = [];
    view.nodes.forEach(function(node) {
      if (node instanceof CompileElement) {
        if (node.embeddedView) {
          var parentNodeIndex = node.isRootElement() ? null : node.parent.nodeIndex;
          stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex)), [new ReturnStatement(node.embeddedView.classExpr.instantiate([ViewProperties.viewUtils, THIS_EXPR, literal(node.nodeIndex), node.renderNode, node.viewContainer]))]));
        }
      }
    });
    if (stmts.length > 0) {
      stmts.push(new ReturnStatement(NULL_EXPR));
    }
    return new ClassMethod('createEmbeddedViewInternal', [new FnParam(nodeIndexVar.name, NUMBER_TYPE)], stmts, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE]));
  }
  var ViewCompileResult = (function() {
    function ViewCompileResult(statements, viewClassVar, dependencies) {
      this.statements = statements;
      this.viewClassVar = viewClassVar;
      this.dependencies = dependencies;
    }
    return ViewCompileResult;
  }());
  var ViewCompiler = (function() {
    function ViewCompiler(_genConfig, _schemaRegistry) {
      this._genConfig = _genConfig;
      this._schemaRegistry = _schemaRegistry;
    }
    ViewCompiler.prototype.compileComponent = function(component, template, styles, pipes, compiledAnimations) {
      var dependencies = [];
      var view = new CompileView(component, this._genConfig, pipes, styles, compiledAnimations, 0, CompileElement.createNull(), []);
      var statements = [];
      buildView(view, template, dependencies);
      bindView(view, template, this._schemaRegistry);
      finishView(view, statements);
      return new ViewCompileResult(statements, view.classExpr.name, dependencies);
    };
    ViewCompiler.decorators = [{type: _angular_core.Injectable}];
    ViewCompiler.ctorParameters = [{type: CompilerConfig}, {type: ElementSchemaRegistry}];
    return ViewCompiler;
  }());
  var SourceModule = (function() {
    function SourceModule(fileUrl, moduleUrl, source) {
      this.fileUrl = fileUrl;
      this.moduleUrl = moduleUrl;
      this.source = source;
    }
    return SourceModule;
  }());
  function analyzeNgModules(programStaticSymbols, options, metadataResolver) {
    var _a = _createNgModules(programStaticSymbols, options, metadataResolver),
        ngModules = _a.ngModules,
        symbolsMissingModule = _a.symbolsMissingModule;
    return _analyzeNgModules(ngModules, symbolsMissingModule);
  }
  function analyzeAndValidateNgModules(programStaticSymbols, options, metadataResolver) {
    var result = analyzeNgModules(programStaticSymbols, options, metadataResolver);
    if (result.symbolsMissingModule && result.symbolsMissingModule.length) {
      var messages = result.symbolsMissingModule.map(function(s) {
        return ("Cannot determine the module for class " + s.name + " in " + s.filePath + "!");
      });
      throw new Error(messages.join('\n'));
    }
    return result;
  }
  function loadNgModuleDirectives(ngModules) {
    return Promise.all(ListWrapper.flatten(ngModules.map(function(ngModule) {
      return ngModule.transitiveModule.directiveLoaders.map(function(loader) {
        return loader();
      });
    }))).then(function() {});
  }
  function _analyzeNgModules(ngModuleMetas, symbolsMissingModule) {
    var moduleMetasByRef = new Map();
    ngModuleMetas.forEach(function(ngModule) {
      return moduleMetasByRef.set(ngModule.type.reference, ngModule);
    });
    var ngModuleByPipeOrDirective = new Map();
    var ngModulesByFile = new Map();
    var ngDirectivesByFile = new Map();
    var filePaths = new Set();
    ngModuleMetas.forEach(function(ngModuleMeta) {
      var srcFileUrl = ngModuleMeta.type.reference.filePath;
      filePaths.add(srcFileUrl);
      ngModulesByFile.set(srcFileUrl, (ngModulesByFile.get(srcFileUrl) || []).concat(ngModuleMeta.type.reference));
      ngModuleMeta.declaredDirectives.forEach(function(dirIdentifier) {
        var fileUrl = dirIdentifier.reference.filePath;
        filePaths.add(fileUrl);
        ngDirectivesByFile.set(fileUrl, (ngDirectivesByFile.get(fileUrl) || []).concat(dirIdentifier.reference));
        ngModuleByPipeOrDirective.set(dirIdentifier.reference, ngModuleMeta);
      });
      ngModuleMeta.declaredPipes.forEach(function(pipeIdentifier) {
        var fileUrl = pipeIdentifier.reference.filePath;
        filePaths.add(fileUrl);
        ngModuleByPipeOrDirective.set(pipeIdentifier.reference, ngModuleMeta);
      });
    });
    var files = [];
    filePaths.forEach(function(srcUrl) {
      var directives = ngDirectivesByFile.get(srcUrl) || [];
      var ngModules = ngModulesByFile.get(srcUrl) || [];
      files.push({
        srcUrl: srcUrl,
        directives: directives,
        ngModules: ngModules
      });
    });
    return {
      ngModuleByPipeOrDirective: ngModuleByPipeOrDirective,
      files: files,
      ngModules: ngModuleMetas,
      symbolsMissingModule: symbolsMissingModule
    };
  }
  var OfflineCompiler = (function() {
    function OfflineCompiler(_metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _dirWrapperCompiler, _ngModuleCompiler, _outputEmitter, _localeId, _translationFormat, _animationParser) {
      this._metadataResolver = _metadataResolver;
      this._templateParser = _templateParser;
      this._styleCompiler = _styleCompiler;
      this._viewCompiler = _viewCompiler;
      this._dirWrapperCompiler = _dirWrapperCompiler;
      this._ngModuleCompiler = _ngModuleCompiler;
      this._outputEmitter = _outputEmitter;
      this._localeId = _localeId;
      this._translationFormat = _translationFormat;
      this._animationParser = _animationParser;
      this._animationCompiler = new AnimationCompiler();
    }
    OfflineCompiler.prototype.clearCache = function() {
      this._metadataResolver.clearCache();
    };
    OfflineCompiler.prototype.compileModules = function(staticSymbols, options) {
      var _this = this;
      var _a = analyzeAndValidateNgModules(staticSymbols, options, this._metadataResolver),
          ngModuleByPipeOrDirective = _a.ngModuleByPipeOrDirective,
          files = _a.files,
          ngModules = _a.ngModules;
      return loadNgModuleDirectives(ngModules).then(function() {
        var sourceModules = files.map(function(file) {
          return _this._compileSrcFile(file.srcUrl, ngModuleByPipeOrDirective, file.directives, file.ngModules);
        });
        return ListWrapper.flatten(sourceModules);
      });
    };
    OfflineCompiler.prototype._compileSrcFile = function(srcFileUrl, ngModuleByPipeOrDirective, directives, ngModules) {
      var _this = this;
      var fileSuffix = _splitTypescriptSuffix(srcFileUrl)[1];
      var statements = [];
      var exportedVars = [];
      var outputSourceModules = [];
      exportedVars.push.apply(exportedVars, ngModules.map(function(ngModuleType) {
        return _this._compileModule(ngModuleType, statements);
      }));
      exportedVars.push.apply(exportedVars, directives.map(function(directiveType) {
        return _this._compileDirectiveWrapper(directiveType, statements);
      }));
      directives.forEach(function(dirType) {
        var compMeta = _this._metadataResolver.getDirectiveMetadata(dirType);
        if (!compMeta.isComponent) {
          return Promise.resolve(null);
        }
        var ngModule = ngModuleByPipeOrDirective.get(dirType);
        if (!ngModule) {
          throw new Error("Internal Error: cannot determine the module for component " + compMeta.type.name + "!");
        }
        _assertComponent(compMeta);
        var stylesCompileResults = _this._styleCompiler.compileComponent(compMeta);
        stylesCompileResults.externalStylesheets.forEach(function(compiledStyleSheet) {
          outputSourceModules.push(_this._codgenStyles(srcFileUrl, compiledStyleSheet, fileSuffix));
        });
        exportedVars.push(_this._compileComponentFactory(compMeta, ngModule, fileSuffix, statements), _this._compileComponent(compMeta, ngModule, ngModule.transitiveModule.directives, stylesCompileResults.componentStylesheet, fileSuffix, statements));
      });
      if (statements.length > 0) {
        var srcModule = this._codegenSourceModule(srcFileUrl, _ngfactoryModuleUrl(srcFileUrl), statements, exportedVars);
        outputSourceModules.unshift(srcModule);
      }
      return outputSourceModules;
    };
    OfflineCompiler.prototype._compileModule = function(ngModuleType, targetStatements) {
      var ngModule = this._metadataResolver.getNgModuleMetadata(ngModuleType);
      var providers = [];
      if (this._localeId) {
        providers.push(new CompileProviderMetadata({
          token: resolveIdentifierToken(Identifiers.LOCALE_ID),
          useValue: this._localeId
        }));
      }
      if (this._translationFormat) {
        providers.push(new CompileProviderMetadata({
          token: resolveIdentifierToken(Identifiers.TRANSLATIONS_FORMAT),
          useValue: this._translationFormat
        }));
      }
      var appCompileResult = this._ngModuleCompiler.compile(ngModule, providers);
      appCompileResult.dependencies.forEach(function(dep) {
        dep.placeholder.name = _componentFactoryName(dep.comp);
        dep.placeholder.moduleUrl = _ngfactoryModuleUrl(dep.comp.moduleUrl);
      });
      targetStatements.push.apply(targetStatements, appCompileResult.statements);
      return appCompileResult.ngModuleFactoryVar;
    };
    OfflineCompiler.prototype._compileDirectiveWrapper = function(directiveType, targetStatements) {
      var dirMeta = this._metadataResolver.getDirectiveMetadata(directiveType);
      var dirCompileResult = this._dirWrapperCompiler.compile(dirMeta);
      targetStatements.push.apply(targetStatements, dirCompileResult.statements);
      return dirCompileResult.dirWrapperClassVar;
    };
    OfflineCompiler.prototype._compileComponentFactory = function(compMeta, ngModule, fileSuffix, targetStatements) {
      var hostMeta = createHostComponentMeta(compMeta);
      var hostViewFactoryVar = this._compileComponent(hostMeta, ngModule, [compMeta.type], null, fileSuffix, targetStatements);
      var compFactoryVar = _componentFactoryName(compMeta.type);
      targetStatements.push(variable(compFactoryVar).set(importExpr(resolveIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)]).instantiate([literal(compMeta.selector), variable(hostViewFactoryVar), importExpr(compMeta.type)], importType(resolveIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)], [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]));
      return compFactoryVar;
    };
    OfflineCompiler.prototype._compileComponent = function(compMeta, ngModule, directiveIdentifiers, componentStyles, fileSuffix, targetStatements) {
      var _this = this;
      var parsedAnimations = this._animationParser.parseComponent(compMeta);
      var directives = directiveIdentifiers.map(function(dir) {
        return _this._metadataResolver.getDirectiveSummary(dir.reference);
      });
      var pipes = ngModule.transitiveModule.pipes.map(function(pipe) {
        return _this._metadataResolver.getPipeSummary(pipe.reference);
      });
      var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, ngModule.schemas, compMeta.type.name);
      var stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]);
      var compiledAnimations = this._animationCompiler.compile(compMeta.type.name, parsedAnimations);
      var viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, pipes, compiledAnimations);
      if (componentStyles) {
        targetStatements.push.apply(targetStatements, _resolveStyleStatements(componentStyles, fileSuffix));
      }
      compiledAnimations.forEach(function(entry) {
        return targetStatements.push.apply(targetStatements, entry.statements);
      });
      targetStatements.push.apply(targetStatements, _resolveViewStatements(viewResult));
      return viewResult.viewClassVar;
    };
    OfflineCompiler.prototype._codgenStyles = function(fileUrl, stylesCompileResult, fileSuffix) {
      _resolveStyleStatements(stylesCompileResult, fileSuffix);
      return this._codegenSourceModule(fileUrl, _stylesModuleUrl(stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [stylesCompileResult.stylesVar]);
    };
    OfflineCompiler.prototype._codegenSourceModule = function(fileUrl, moduleUrl, statements, exportedVars) {
      return new SourceModule(fileUrl, moduleUrl, this._outputEmitter.emitStatements(moduleUrl, statements, exportedVars));
    };
    return OfflineCompiler;
  }());
  function _resolveViewStatements(compileResult) {
    compileResult.dependencies.forEach(function(dep) {
      if (dep instanceof ViewClassDependency) {
        var vfd = dep;
        vfd.placeholder.moduleUrl = _ngfactoryModuleUrl(vfd.comp.moduleUrl);
      } else if (dep instanceof ComponentFactoryDependency) {
        var cfd = dep;
        cfd.placeholder.name = _componentFactoryName(cfd.comp);
        cfd.placeholder.moduleUrl = _ngfactoryModuleUrl(cfd.comp.moduleUrl);
      } else if (dep instanceof DirectiveWrapperDependency) {
        var dwd = dep;
        dwd.placeholder.moduleUrl = _ngfactoryModuleUrl(dwd.dir.moduleUrl);
      }
    });
    return compileResult.statements;
  }
  function _resolveStyleStatements(compileResult, fileSuffix) {
    compileResult.dependencies.forEach(function(dep) {
      dep.valuePlaceholder.moduleUrl = _stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix);
    });
    return compileResult.statements;
  }
  function _ngfactoryModuleUrl(dirUrl) {
    var urlWithSuffix = _splitTypescriptSuffix(dirUrl);
    return urlWithSuffix[0] + ".ngfactory" + urlWithSuffix[1];
  }
  function _componentFactoryName(comp) {
    return comp.name + "NgFactory";
  }
  function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
    return shim ? stylesheetUrl + ".shim" + suffix : "" + stylesheetUrl + suffix;
  }
  function _assertComponent(meta) {
    if (!meta.isComponent) {
      throw new Error("Could not compile '" + meta.type.name + "' because it is not a component.");
    }
  }
  function _splitTypescriptSuffix(path) {
    if (path.endsWith('.d.ts')) {
      return [path.slice(0, -5), '.ts'];
    }
    var lastDot = path.lastIndexOf('.');
    if (lastDot !== -1) {
      return [path.substring(0, lastDot), path.substring(lastDot)];
    }
    return [path, ''];
  }
  function _createNgModules(programStaticSymbols, options, metadataResolver) {
    var ngModules = new Map();
    var programPipesAndDirectives = [];
    var ngModulePipesAndDirective = new Set();
    var addNgModule = function(staticSymbol) {
      if (ngModules.has(staticSymbol)) {
        return false;
      }
      var ngModule = metadataResolver.getUnloadedNgModuleMetadata(staticSymbol, false, false);
      if (ngModule) {
        ngModules.set(ngModule.type.reference, ngModule);
        ngModule.declaredDirectives.forEach(function(dir) {
          return ngModulePipesAndDirective.add(dir.reference);
        });
        ngModule.declaredPipes.forEach(function(pipe) {
          return ngModulePipesAndDirective.add(pipe.reference);
        });
        if (options.transitiveModules) {
          ngModule.transitiveModule.modules.forEach(function(modMeta) {
            return addNgModule(modMeta.type.reference);
          });
        }
      }
      return !!ngModule;
    };
    programStaticSymbols.forEach(function(staticSymbol) {
      if (!addNgModule(staticSymbol) && (metadataResolver.isDirective(staticSymbol) || metadataResolver.isPipe(staticSymbol))) {
        programPipesAndDirectives.push(staticSymbol);
      }
    });
    var symbolsMissingModule = programPipesAndDirectives.filter(function(s) {
      return !ngModulePipesAndDirective.has(s);
    });
    return {
      ngModules: Array.from(ngModules.values()),
      symbolsMissingModule: symbolsMissingModule
    };
  }
  var StylesCollectionEntry = (function() {
    function StylesCollectionEntry(time, value) {
      this.time = time;
      this.value = value;
    }
    StylesCollectionEntry.prototype.matches = function(time, value) {
      return time == this.time && value == this.value;
    };
    return StylesCollectionEntry;
  }());
  var StylesCollection = (function() {
    function StylesCollection() {
      this.styles = {};
    }
    StylesCollection.prototype.insertAtTime = function(property, time, value) {
      var tuple = new StylesCollectionEntry(time, value);
      var entries = this.styles[property];
      if (!isPresent(entries)) {
        entries = this.styles[property] = [];
      }
      var insertionIndex = 0;
      for (var i = entries.length - 1; i >= 0; i--) {
        if (entries[i].time <= time) {
          insertionIndex = i + 1;
          break;
        }
      }
      entries.splice(insertionIndex, 0, tuple);
    };
    StylesCollection.prototype.getByIndex = function(property, index) {
      var items = this.styles[property];
      if (isPresent(items)) {
        return index >= items.length ? null : items[index];
      }
      return null;
    };
    StylesCollection.prototype.indexOfAtOrBeforeTime = function(property, time) {
      var entries = this.styles[property];
      if (isPresent(entries)) {
        for (var i = entries.length - 1; i >= 0; i--) {
          if (entries[i].time <= time)
            return i;
        }
      }
      return null;
    };
    return StylesCollection;
  }());
  var __extends$16 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var _INITIAL_KEYFRAME = 0;
  var _TERMINAL_KEYFRAME = 1;
  var _ONE_SECOND = 1000;
  var AnimationParseError = (function(_super) {
    __extends$16(AnimationParseError, _super);
    function AnimationParseError(message) {
      _super.call(this, null, message);
    }
    AnimationParseError.prototype.toString = function() {
      return "" + this.msg;
    };
    return AnimationParseError;
  }(ParseError));
  var AnimationEntryParseResult = (function() {
    function AnimationEntryParseResult(ast, errors) {
      this.ast = ast;
      this.errors = errors;
    }
    return AnimationEntryParseResult;
  }());
  var AnimationParser = (function() {
    function AnimationParser(_schema) {
      this._schema = _schema;
    }
    AnimationParser.prototype.parseComponent = function(component) {
      var _this = this;
      var errors = [];
      var componentName = component.type.name;
      var animationTriggerNames = new Set();
      var asts = component.template.animations.map(function(entry) {
        var result = _this.parseEntry(entry);
        var ast = result.ast;
        var triggerName = ast.name;
        if (animationTriggerNames.has(triggerName)) {
          result.errors.push(new AnimationParseError("The animation trigger \"" + triggerName + "\" has already been registered for the " + componentName + " component"));
        } else {
          animationTriggerNames.add(triggerName);
        }
        if (result.errors.length > 0) {
          var errorMessage_1 = "- Unable to parse the animation sequence for \"" + triggerName + "\" on the " + componentName + " component due to the following errors:";
          result.errors.forEach(function(error) {
            errorMessage_1 += '\n-- ' + error.msg;
          });
          errors.push(errorMessage_1);
        }
        return ast;
      });
      if (errors.length > 0) {
        var errorString = errors.join('\n');
        throw new Error("Animation parse errors:\n" + errorString);
      }
      return asts;
    };
    AnimationParser.prototype.parseEntry = function(entry) {
      var _this = this;
      var errors = [];
      var stateStyles = {};
      var transitions = [];
      var stateDeclarationAsts = [];
      entry.definitions.forEach(function(def) {
        if (def instanceof CompileAnimationStateDeclarationMetadata) {
          _parseAnimationDeclarationStates(def, _this._schema, errors).forEach(function(ast) {
            stateDeclarationAsts.push(ast);
            stateStyles[ast.stateName] = ast.styles;
          });
        } else {
          transitions.push(def);
        }
      });
      var stateTransitionAsts = transitions.map(function(transDef) {
        return _parseAnimationStateTransition(transDef, stateStyles, _this._schema, errors);
      });
      var ast = new AnimationEntryAst(entry.name, stateDeclarationAsts, stateTransitionAsts);
      return new AnimationEntryParseResult(ast, errors);
    };
    AnimationParser.decorators = [{type: _angular_core.Injectable}];
    AnimationParser.ctorParameters = [{type: ElementSchemaRegistry}];
    return AnimationParser;
  }());
  function _parseAnimationDeclarationStates(stateMetadata, schema, errors) {
    var normalizedStyles = _normalizeStyleMetadata(stateMetadata.styles, {}, schema, errors, false);
    var defStyles = new AnimationStylesAst(normalizedStyles);
    var states = stateMetadata.stateNameExpr.split(/\s*,\s*/);
    return states.map(function(state) {
      return new AnimationStateDeclarationAst(state, defStyles);
    });
  }
  function _parseAnimationStateTransition(transitionStateMetadata, stateStyles, schema, errors) {
    var styles = new StylesCollection();
    var transitionExprs = [];
    var transitionStates = transitionStateMetadata.stateChangeExpr.split(/\s*,\s*/);
    transitionStates.forEach(function(expr) {
      transitionExprs.push.apply(transitionExprs, _parseAnimationTransitionExpr(expr, errors));
    });
    var entry = _normalizeAnimationEntry(transitionStateMetadata.steps);
    var animation = _normalizeStyleSteps(entry, stateStyles, schema, errors);
    var animationAst = _parseTransitionAnimation(animation, 0, styles, stateStyles, errors);
    if (errors.length == 0) {
      _fillAnimationAstStartingKeyframes(animationAst, styles, errors);
    }
    var stepsAst = (animationAst instanceof AnimationWithStepsAst) ? animationAst : new AnimationSequenceAst([animationAst]);
    return new AnimationStateTransitionAst(transitionExprs, stepsAst);
  }
  function _parseAnimationAlias(alias, errors) {
    switch (alias) {
      case ':enter':
        return 'void => *';
      case ':leave':
        return '* => void';
      default:
        errors.push(new AnimationParseError("the transition alias value \"" + alias + "\" is not supported"));
        return '* => *';
    }
  }
  function _parseAnimationTransitionExpr(eventStr, errors) {
    var expressions = [];
    if (eventStr[0] == ':') {
      eventStr = _parseAnimationAlias(eventStr, errors);
    }
    var match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
    if (!isPresent(match) || match.length < 4) {
      errors.push(new AnimationParseError("the provided " + eventStr + " is not of a supported format"));
      return expressions;
    }
    var fromState = match[1];
    var separator = match[2];
    var toState = match[3];
    expressions.push(new AnimationStateTransitionExpression(fromState, toState));
    var isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
    if (separator[0] == '<' && !isFullAnyStateExpr) {
      expressions.push(new AnimationStateTransitionExpression(toState, fromState));
    }
    return expressions;
  }
  function _normalizeAnimationEntry(entry) {
    return Array.isArray(entry) ? new CompileAnimationSequenceMetadata(entry) : entry;
  }
  function _normalizeStyleMetadata(entry, stateStyles, schema, errors, permitStateReferences) {
    var normalizedStyles = [];
    entry.styles.forEach(function(styleEntry) {
      if (typeof styleEntry === 'string') {
        if (permitStateReferences) {
          normalizedStyles.push.apply(normalizedStyles, _resolveStylesFromState(styleEntry, stateStyles, errors));
        } else {
          errors.push(new AnimationParseError("State based animations cannot contain references to other states"));
        }
      } else {
        var stylesObj_1 = styleEntry;
        var normalizedStylesObj_1 = {};
        Object.keys(stylesObj_1).forEach(function(propName) {
          var normalizedProp = schema.normalizeAnimationStyleProperty(propName);
          var normalizedOutput = schema.normalizeAnimationStyleValue(normalizedProp, propName, stylesObj_1[propName]);
          var normalizationError = normalizedOutput['error'];
          if (normalizationError) {
            errors.push(new AnimationParseError(normalizationError));
          }
          normalizedStylesObj_1[normalizedProp] = normalizedOutput['value'];
        });
        normalizedStyles.push(normalizedStylesObj_1);
      }
    });
    return normalizedStyles;
  }
  function _normalizeStyleSteps(entry, stateStyles, schema, errors) {
    var steps = _normalizeStyleStepEntry(entry, stateStyles, schema, errors);
    return (entry instanceof CompileAnimationGroupMetadata) ? new CompileAnimationGroupMetadata(steps) : new CompileAnimationSequenceMetadata(steps);
  }
  function _mergeAnimationStyles(stylesList, newItem) {
    if (typeof newItem === 'object' && newItem !== null && stylesList.length > 0) {
      var lastIndex = stylesList.length - 1;
      var lastItem = stylesList[lastIndex];
      if (typeof lastItem === 'object' && lastItem !== null) {
        stylesList[lastIndex] = StringMapWrapper.merge(lastItem, newItem);
        return;
      }
    }
    stylesList.push(newItem);
  }
  function _normalizeStyleStepEntry(entry, stateStyles, schema, errors) {
    var steps;
    if (entry instanceof CompileAnimationWithStepsMetadata) {
      steps = entry.steps;
    } else {
      return [entry];
    }
    var newSteps = [];
    var combinedStyles;
    steps.forEach(function(step) {
      if (step instanceof CompileAnimationStyleMetadata) {
        if (!isPresent(combinedStyles)) {
          combinedStyles = [];
        }
        _normalizeStyleMetadata(step, stateStyles, schema, errors, true).forEach(function(entry) {
          _mergeAnimationStyles(combinedStyles, entry);
        });
      } else {
        if (isPresent(combinedStyles)) {
          newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
          combinedStyles = null;
        }
        if (step instanceof CompileAnimationAnimateMetadata) {
          var animateStyleValue = step.styles;
          if (animateStyleValue instanceof CompileAnimationStyleMetadata) {
            animateStyleValue.styles = _normalizeStyleMetadata(animateStyleValue, stateStyles, schema, errors, true);
          } else if (animateStyleValue instanceof CompileAnimationKeyframesSequenceMetadata) {
            animateStyleValue.steps.forEach(function(step) {
              step.styles = _normalizeStyleMetadata(step, stateStyles, schema, errors, true);
            });
          }
        } else if (step instanceof CompileAnimationWithStepsMetadata) {
          var innerSteps = _normalizeStyleStepEntry(step, stateStyles, schema, errors);
          step = step instanceof CompileAnimationGroupMetadata ? new CompileAnimationGroupMetadata(innerSteps) : new CompileAnimationSequenceMetadata(innerSteps);
        }
        newSteps.push(step);
      }
    });
    if (isPresent(combinedStyles)) {
      newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
    }
    return newSteps;
  }
  function _resolveStylesFromState(stateName, stateStyles, errors) {
    var styles = [];
    if (stateName[0] != ':') {
      errors.push(new AnimationParseError("Animation states via styles must be prefixed with a \":\""));
    } else {
      var normalizedStateName = stateName.substring(1);
      var value = stateStyles[normalizedStateName];
      if (!isPresent(value)) {
        errors.push(new AnimationParseError("Unable to apply styles due to missing a state: \"" + normalizedStateName + "\""));
      } else {
        value.styles.forEach(function(stylesEntry) {
          if (typeof stylesEntry === 'object' && stylesEntry !== null) {
            styles.push(stylesEntry);
          }
        });
      }
    }
    return styles;
  }
  var _AnimationTimings = (function() {
    function _AnimationTimings(duration, delay, easing) {
      this.duration = duration;
      this.delay = delay;
      this.easing = easing;
    }
    return _AnimationTimings;
  }());
  function _parseAnimationKeyframes(keyframeSequence, currentTime, collectedStyles, stateStyles, errors) {
    var totalEntries = keyframeSequence.steps.length;
    var totalOffsets = 0;
    keyframeSequence.steps.forEach(function(step) {
      return totalOffsets += (isPresent(step.offset) ? 1 : 0);
    });
    if (totalOffsets > 0 && totalOffsets < totalEntries) {
      errors.push(new AnimationParseError("Not all style() entries contain an offset for the provided keyframe()"));
      totalOffsets = totalEntries;
    }
    var limit = totalEntries - 1;
    var margin = totalOffsets == 0 ? (1 / limit) : 0;
    var rawKeyframes = [];
    var index = 0;
    var doSortKeyframes = false;
    var lastOffset = 0;
    keyframeSequence.steps.forEach(function(styleMetadata) {
      var offset = styleMetadata.offset;
      var keyframeStyles = {};
      styleMetadata.styles.forEach(function(entry) {
        Object.keys(entry).forEach(function(prop) {
          if (prop != 'offset') {
            keyframeStyles[prop] = entry[prop];
          }
        });
      });
      if (isPresent(offset)) {
        doSortKeyframes = doSortKeyframes || (offset < lastOffset);
      } else {
        offset = index == limit ? _TERMINAL_KEYFRAME : (margin * index);
      }
      rawKeyframes.push([offset, keyframeStyles]);
      lastOffset = offset;
      index++;
    });
    if (doSortKeyframes) {
      rawKeyframes.sort(function(a, b) {
        return a[0] <= b[0] ? -1 : 1;
      });
    }
    var firstKeyframe = rawKeyframes[0];
    if (firstKeyframe[0] != _INITIAL_KEYFRAME) {
      rawKeyframes.splice(0, 0, firstKeyframe = [_INITIAL_KEYFRAME, {}]);
    }
    var firstKeyframeStyles = firstKeyframe[1];
    limit = rawKeyframes.length - 1;
    var lastKeyframe = rawKeyframes[limit];
    if (lastKeyframe[0] != _TERMINAL_KEYFRAME) {
      rawKeyframes.push(lastKeyframe = [_TERMINAL_KEYFRAME, {}]);
      limit++;
    }
    var lastKeyframeStyles = lastKeyframe[1];
    for (var i = 1; i <= limit; i++) {
      var entry = rawKeyframes[i];
      var styles = entry[1];
      Object.keys(styles).forEach(function(prop) {
        if (!isPresent(firstKeyframeStyles[prop])) {
          firstKeyframeStyles[prop] = FILL_STYLE_FLAG;
        }
      });
    }
    var _loop_1 = function(i) {
      var entry = rawKeyframes[i];
      var styles = entry[1];
      Object.keys(styles).forEach(function(prop) {
        if (!isPresent(lastKeyframeStyles[prop])) {
          lastKeyframeStyles[prop] = styles[prop];
        }
      });
    };
    for (var i = limit - 1; i >= 0; i--) {
      _loop_1(i);
    }
    return rawKeyframes.map(function(entry) {
      return new AnimationKeyframeAst(entry[0], new AnimationStylesAst([entry[1]]));
    });
  }
  function _parseTransitionAnimation(entry, currentTime, collectedStyles, stateStyles, errors) {
    var ast;
    var playTime = 0;
    var startingTime = currentTime;
    if (entry instanceof CompileAnimationWithStepsMetadata) {
      var maxDuration_1 = 0;
      var steps_1 = [];
      var isGroup_1 = entry instanceof CompileAnimationGroupMetadata;
      var previousStyles_1;
      entry.steps.forEach(function(entry) {
        var time = isGroup_1 ? startingTime : currentTime;
        if (entry instanceof CompileAnimationStyleMetadata) {
          entry.styles.forEach(function(stylesEntry) {
            var map = stylesEntry;
            Object.keys(map).forEach(function(prop) {
              collectedStyles.insertAtTime(prop, time, map[prop]);
            });
          });
          previousStyles_1 = entry.styles;
          return;
        }
        var innerAst = _parseTransitionAnimation(entry, time, collectedStyles, stateStyles, errors);
        if (isPresent(previousStyles_1)) {
          if (entry instanceof CompileAnimationWithStepsMetadata) {
            var startingStyles = new AnimationStylesAst(previousStyles_1);
            steps_1.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));
          } else {
            var innerStep = innerAst;
            (_a = innerStep.startingStyles.styles).push.apply(_a, previousStyles_1);
          }
          previousStyles_1 = null;
        }
        var astDuration = innerAst.playTime;
        currentTime += astDuration;
        playTime += astDuration;
        maxDuration_1 = Math.max(astDuration, maxDuration_1);
        steps_1.push(innerAst);
        var _a;
      });
      if (isPresent(previousStyles_1)) {
        var startingStyles = new AnimationStylesAst(previousStyles_1);
        steps_1.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));
      }
      if (isGroup_1) {
        ast = new AnimationGroupAst(steps_1);
        playTime = maxDuration_1;
        currentTime = startingTime + playTime;
      } else {
        ast = new AnimationSequenceAst(steps_1);
      }
    } else if (entry instanceof CompileAnimationAnimateMetadata) {
      var timings = _parseTimeExpression(entry.timings, errors);
      var styles = entry.styles;
      var keyframes = void 0;
      if (styles instanceof CompileAnimationKeyframesSequenceMetadata) {
        keyframes = _parseAnimationKeyframes(styles, currentTime, collectedStyles, stateStyles, errors);
      } else {
        var styleData = styles;
        var offset = _TERMINAL_KEYFRAME;
        var styleAst = new AnimationStylesAst(styleData.styles);
        var keyframe = new AnimationKeyframeAst(offset, styleAst);
        keyframes = [keyframe];
      }
      ast = new AnimationStepAst(new AnimationStylesAst([]), keyframes, timings.duration, timings.delay, timings.easing);
      playTime = timings.duration + timings.delay;
      currentTime += playTime;
      keyframes.forEach(function(keyframe) {
        return keyframe.styles.styles.forEach(function(entry) {
          return Object.keys(entry).forEach(function(prop) {
            collectedStyles.insertAtTime(prop, currentTime, entry[prop]);
          });
        });
      });
    } else {
      ast = new AnimationStepAst(null, [], 0, 0, '');
    }
    ast.playTime = playTime;
    ast.startTime = startingTime;
    return ast;
  }
  function _fillAnimationAstStartingKeyframes(ast, collectedStyles, errors) {
    if ((ast instanceof AnimationStepAst) && ast.keyframes.length > 0) {
      var keyframes = ast.keyframes;
      if (keyframes.length == 1) {
        var endKeyframe = keyframes[0];
        var startKeyframe = _createStartKeyframeFromEndKeyframe(endKeyframe, ast.startTime, ast.playTime, collectedStyles, errors);
        ast.keyframes = [startKeyframe, endKeyframe];
      }
    } else if (ast instanceof AnimationWithStepsAst) {
      ast.steps.forEach(function(entry) {
        return _fillAnimationAstStartingKeyframes(entry, collectedStyles, errors);
      });
    }
  }
  function _parseTimeExpression(exp, errors) {
    var regex = /^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?/i;
    var duration;
    var delay = 0;
    var easing = null;
    if (typeof exp === 'string') {
      var matches = exp.match(regex);
      if (matches === null) {
        errors.push(new AnimationParseError("The provided timing value \"" + exp + "\" is invalid."));
        return new _AnimationTimings(0, 0, null);
      }
      var durationMatch = parseFloat(matches[1]);
      var durationUnit = matches[2];
      if (durationUnit == 's') {
        durationMatch *= _ONE_SECOND;
      }
      duration = Math.floor(durationMatch);
      var delayMatch = matches[3];
      var delayUnit = matches[4];
      if (isPresent(delayMatch)) {
        var delayVal = parseFloat(delayMatch);
        if (isPresent(delayUnit) && delayUnit == 's') {
          delayVal *= _ONE_SECOND;
        }
        delay = Math.floor(delayVal);
      }
      var easingVal = matches[5];
      if (!isBlank(easingVal)) {
        easing = easingVal;
      }
    } else {
      duration = exp;
    }
    return new _AnimationTimings(duration, delay, easing);
  }
  function _createStartKeyframeFromEndKeyframe(endKeyframe, startTime, duration, collectedStyles, errors) {
    var values = {};
    var endTime = startTime + duration;
    endKeyframe.styles.styles.forEach(function(styleData) {
      Object.keys(styleData).forEach(function(prop) {
        var val = styleData[prop];
        if (prop == 'offset')
          return;
        var resultIndex = collectedStyles.indexOfAtOrBeforeTime(prop, startTime);
        var resultEntry,
            nextEntry,
            value;
        if (isPresent(resultIndex)) {
          resultEntry = collectedStyles.getByIndex(prop, resultIndex);
          value = resultEntry.value;
          nextEntry = collectedStyles.getByIndex(prop, resultIndex + 1);
        } else {
          value = FILL_STYLE_FLAG;
        }
        if (isPresent(nextEntry) && !nextEntry.matches(endTime, val)) {
          errors.push(new AnimationParseError("The animated CSS property \"" + prop + "\" unexpectedly changes between steps \"" + resultEntry.time + "ms\" and \"" + endTime + "ms\" at \"" + nextEntry.time + "ms\""));
        }
        values[prop] = value;
      });
    });
    return new AnimationKeyframeAst(_INITIAL_KEYFRAME, new AnimationStylesAst([values]));
  }
  var ResourceLoader = (function() {
    function ResourceLoader() {}
    ResourceLoader.prototype.get = function(url) {
      return null;
    };
    return ResourceLoader;
  }());
  var _ASSET_SCHEME = 'asset:';
  function createUrlResolverWithoutPackagePrefix() {
    return new UrlResolver();
  }
  function createOfflineCompileUrlResolver() {
    return new UrlResolver(_ASSET_SCHEME);
  }
  var DEFAULT_PACKAGE_URL_PROVIDER = {
    provide: _angular_core.PACKAGE_ROOT_URL,
    useValue: '/'
  };
  var UrlResolver = (function() {
    function UrlResolver(_packagePrefix) {
      if (_packagePrefix === void 0) {
        _packagePrefix = null;
      }
      this._packagePrefix = _packagePrefix;
    }
    UrlResolver.prototype.resolve = function(baseUrl, url) {
      var resolvedUrl = url;
      if (isPresent(baseUrl) && baseUrl.length > 0) {
        resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
      }
      var resolvedParts = _split(resolvedUrl);
      var prefix = this._packagePrefix;
      if (isPresent(prefix) && isPresent(resolvedParts) && resolvedParts[_ComponentIndex.Scheme] == 'package') {
        var path = resolvedParts[_ComponentIndex.Path];
        if (this._packagePrefix === _ASSET_SCHEME) {
          var pathSegements = path.split(/\//);
          resolvedUrl = "asset:" + pathSegements[0] + "/lib/" + pathSegements.slice(1).join('/');
        } else {
          prefix = prefix.replace(/\/+$/, '');
          path = path.replace(/^\/+/, '');
          return prefix + "/" + path;
        }
      }
      return resolvedUrl;
    };
    UrlResolver.decorators = [{type: _angular_core.Injectable}];
    UrlResolver.ctorParameters = [{
      type: undefined,
      decorators: [{
        type: _angular_core.Inject,
        args: [_angular_core.PACKAGE_ROOT_URL]
      }]
    }];
    return UrlResolver;
  }());
  function getUrlScheme(url) {
    var match = _split(url);
    return (match && match[_ComponentIndex.Scheme]) || '';
  }
  function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
    var out = [];
    if (isPresent(opt_scheme)) {
      out.push(opt_scheme + ':');
    }
    if (isPresent(opt_domain)) {
      out.push('//');
      if (isPresent(opt_userInfo)) {
        out.push(opt_userInfo + '@');
      }
      out.push(opt_domain);
      if (isPresent(opt_port)) {
        out.push(':' + opt_port);
      }
    }
    if (isPresent(opt_path)) {
      out.push(opt_path);
    }
    if (isPresent(opt_queryData)) {
      out.push('?' + opt_queryData);
    }
    if (isPresent(opt_fragment)) {
      out.push('#' + opt_fragment);
    }
    return out.join('');
  }
  var _splitRe = new RegExp('^' + '(?:' + '([^:/?#.]+)' + ':)?' + '(?://' + '(?:([^/?#]*)@)?' + '([\\w\\d\\-\\u0100-\\uffff.%]*)' + '(?::([0-9]+))?' + ')?' + '([^?#]+)?' + '(?:\\?([^#]*))?' + '(?:#(.*))?' + '$');
  var _ComponentIndex;
  (function(_ComponentIndex) {
    _ComponentIndex[_ComponentIndex["Scheme"] = 1] = "Scheme";
    _ComponentIndex[_ComponentIndex["UserInfo"] = 2] = "UserInfo";
    _ComponentIndex[_ComponentIndex["Domain"] = 3] = "Domain";
    _ComponentIndex[_ComponentIndex["Port"] = 4] = "Port";
    _ComponentIndex[_ComponentIndex["Path"] = 5] = "Path";
    _ComponentIndex[_ComponentIndex["QueryData"] = 6] = "QueryData";
    _ComponentIndex[_ComponentIndex["Fragment"] = 7] = "Fragment";
  })(_ComponentIndex || (_ComponentIndex = {}));
  function _split(uri) {
    return uri.match(_splitRe);
  }
  function _removeDotSegments(path) {
    if (path == '/')
      return '/';
    var leadingSlash = path[0] == '/' ? '/' : '';
    var trailingSlash = path[path.length - 1] === '/' ? '/' : '';
    var segments = path.split('/');
    var out = [];
    var up = 0;
    for (var pos = 0; pos < segments.length; pos++) {
      var segment = segments[pos];
      switch (segment) {
        case '':
        case '.':
          break;
        case '..':
          if (out.length > 0) {
            out.pop();
          } else {
            up++;
          }
          break;
        default:
          out.push(segment);
      }
    }
    if (leadingSlash == '') {
      while (up-- > 0) {
        out.unshift('..');
      }
      if (out.length === 0)
        out.push('.');
    }
    return leadingSlash + out.join('/') + trailingSlash;
  }
  function _joinAndCanonicalizePath(parts) {
    var path = parts[_ComponentIndex.Path];
    path = isBlank(path) ? '' : _removeDotSegments(path);
    parts[_ComponentIndex.Path] = path;
    return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
  }
  function _resolveUrl(base, url) {
    var parts = _split(encodeURI(url));
    var baseParts = _split(base);
    if (isPresent(parts[_ComponentIndex.Scheme])) {
      return _joinAndCanonicalizePath(parts);
    } else {
      parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
    }
    for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
      if (isBlank(parts[i])) {
        parts[i] = baseParts[i];
      }
    }
    if (parts[_ComponentIndex.Path][0] == '/') {
      return _joinAndCanonicalizePath(parts);
    }
    var path = baseParts[_ComponentIndex.Path];
    if (isBlank(path))
      path = '/';
    var index = path.lastIndexOf('/');
    path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
    parts[_ComponentIndex.Path] = path;
    return _joinAndCanonicalizePath(parts);
  }
  var DirectiveNormalizer = (function() {
    function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {
      this._resourceLoader = _resourceLoader;
      this._urlResolver = _urlResolver;
      this._htmlParser = _htmlParser;
      this._config = _config;
      this._resourceLoaderCache = new Map();
    }
    DirectiveNormalizer.prototype.clearCache = function() {
      this._resourceLoaderCache.clear();
    };
    DirectiveNormalizer.prototype.clearCacheFor = function(normalizedDirective) {
      var _this = this;
      if (!normalizedDirective.isComponent) {
        return;
      }
      this._resourceLoaderCache.delete(normalizedDirective.template.templateUrl);
      normalizedDirective.template.externalStylesheets.forEach(function(stylesheet) {
        _this._resourceLoaderCache.delete(stylesheet.moduleUrl);
      });
    };
    DirectiveNormalizer.prototype._fetch = function(url) {
      var result = this._resourceLoaderCache.get(url);
      if (!result) {
        result = this._resourceLoader.get(url);
        this._resourceLoaderCache.set(url, result);
      }
      return result;
    };
    DirectiveNormalizer.prototype.normalizeTemplate = function(prenormData) {
      var _this = this;
      var normalizedTemplateSync = null;
      var normalizedTemplateAsync;
      if (isPresent(prenormData.template)) {
        normalizedTemplateSync = this.normalizeTemplateSync(prenormData);
        normalizedTemplateAsync = Promise.resolve(normalizedTemplateSync);
      } else if (prenormData.templateUrl) {
        normalizedTemplateAsync = this.normalizeTemplateAsync(prenormData);
      } else {
        throw new Error("No template specified for component " + stringify(prenormData.componentType));
      }
      if (normalizedTemplateSync && normalizedTemplateSync.styleUrls.length === 0) {
        return new SyncAsyncResult(normalizedTemplateSync);
      } else {
        return new SyncAsyncResult(null, normalizedTemplateAsync.then(function(normalizedTemplate) {
          return _this.normalizeExternalStylesheets(normalizedTemplate);
        }));
      }
    };
    DirectiveNormalizer.prototype.normalizeTemplateSync = function(prenomData) {
      return this.normalizeLoadedTemplate(prenomData, prenomData.template, prenomData.moduleUrl);
    };
    DirectiveNormalizer.prototype.normalizeTemplateAsync = function(prenomData) {
      var _this = this;
      var templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl);
      return this._fetch(templateUrl).then(function(value) {
        return _this.normalizeLoadedTemplate(prenomData, value, templateUrl);
      });
    };
    DirectiveNormalizer.prototype.normalizeLoadedTemplate = function(prenomData, template, templateAbsUrl) {
      var interpolationConfig = InterpolationConfig.fromArray(prenomData.interpolation);
      var rootNodesAndErrors = this._htmlParser.parse(template, stringify(prenomData.componentType), false, interpolationConfig);
      if (rootNodesAndErrors.errors.length > 0) {
        var errorString = rootNodesAndErrors.errors.join('\n');
        throw new Error("Template parse errors:\n" + errorString);
      }
      var templateMetadataStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
        styles: prenomData.styles,
        styleUrls: prenomData.styleUrls,
        moduleUrl: prenomData.moduleUrl
      }));
      var visitor = new TemplatePreparseVisitor();
      visitAll(visitor, rootNodesAndErrors.rootNodes);
      var templateStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
        styles: visitor.styles,
        styleUrls: visitor.styleUrls,
        moduleUrl: templateAbsUrl
      }));
      var encapsulation = prenomData.encapsulation;
      if (isBlank(encapsulation)) {
        encapsulation = this._config.defaultEncapsulation;
      }
      var styles = templateMetadataStyles.styles.concat(templateStyles.styles);
      var styleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);
      if (encapsulation === _angular_core.ViewEncapsulation.Emulated && styles.length === 0 && styleUrls.length === 0) {
        encapsulation = _angular_core.ViewEncapsulation.None;
      }
      return new CompileTemplateMetadata({
        encapsulation: encapsulation,
        template: template,
        templateUrl: templateAbsUrl,
        styles: styles,
        styleUrls: styleUrls,
        ngContentSelectors: visitor.ngContentSelectors,
        animations: prenomData.animations,
        interpolation: prenomData.interpolation
      });
    };
    DirectiveNormalizer.prototype.normalizeExternalStylesheets = function(templateMeta) {
      return this._loadMissingExternalStylesheets(templateMeta.styleUrls).then(function(externalStylesheets) {
        return new CompileTemplateMetadata({
          encapsulation: templateMeta.encapsulation,
          template: templateMeta.template,
          templateUrl: templateMeta.templateUrl,
          styles: templateMeta.styles,
          styleUrls: templateMeta.styleUrls,
          externalStylesheets: externalStylesheets,
          ngContentSelectors: templateMeta.ngContentSelectors,
          animations: templateMeta.animations,
          interpolation: templateMeta.interpolation
        });
      });
    };
    DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function(styleUrls, loadedStylesheets) {
      var _this = this;
      if (loadedStylesheets === void 0) {
        loadedStylesheets = new Map();
      }
      return Promise.all(styleUrls.filter(function(styleUrl) {
        return !loadedStylesheets.has(styleUrl);
      }).map(function(styleUrl) {
        return _this._fetch(styleUrl).then(function(loadedStyle) {
          var stylesheet = _this.normalizeStylesheet(new CompileStylesheetMetadata({
            styles: [loadedStyle],
            moduleUrl: styleUrl
          }));
          loadedStylesheets.set(styleUrl, stylesheet);
          return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);
        });
      })).then(function(_) {
        return Array.from(loadedStylesheets.values());
      });
    };
    DirectiveNormalizer.prototype.normalizeStylesheet = function(stylesheet) {
      var _this = this;
      var allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable).map(function(url) {
        return _this._urlResolver.resolve(stylesheet.moduleUrl, url);
      });
      var allStyles = stylesheet.styles.map(function(style) {
        var styleWithImports = extractStyleUrls(_this._urlResolver, stylesheet.moduleUrl, style);
        allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls);
        return styleWithImports.style;
      });
      return new CompileStylesheetMetadata({
        styles: allStyles,
        styleUrls: allStyleUrls,
        moduleUrl: stylesheet.moduleUrl
      });
    };
    DirectiveNormalizer.decorators = [{type: _angular_core.Injectable}];
    DirectiveNormalizer.ctorParameters = [{type: ResourceLoader}, {type: UrlResolver}, {type: HtmlParser}, {type: CompilerConfig}];
    return DirectiveNormalizer;
  }());
  var TemplatePreparseVisitor = (function() {
    function TemplatePreparseVisitor() {
      this.ngContentSelectors = [];
      this.styles = [];
      this.styleUrls = [];
      this.ngNonBindableStackCount = 0;
    }
    TemplatePreparseVisitor.prototype.visitElement = function(ast, context) {
      var preparsedElement = preparseElement(ast);
      switch (preparsedElement.type) {
        case PreparsedElementType.NG_CONTENT:
          if (this.ngNonBindableStackCount === 0) {
            this.ngContentSelectors.push(preparsedElement.selectAttr);
          }
          break;
        case PreparsedElementType.STYLE:
          var textContent_1 = '';
          ast.children.forEach(function(child) {
            if (child instanceof Text) {
              textContent_1 += child.value;
            }
          });
          this.styles.push(textContent_1);
          break;
        case PreparsedElementType.STYLESHEET:
          this.styleUrls.push(preparsedElement.hrefAttr);
          break;
        default:
          break;
      }
      if (preparsedElement.nonBindable) {
        this.ngNonBindableStackCount++;
      }
      visitAll(this, ast.children);
      if (preparsedElement.nonBindable) {
        this.ngNonBindableStackCount--;
      }
      return null;
    };
    TemplatePreparseVisitor.prototype.visitComment = function(ast, context) {
      return null;
    };
    TemplatePreparseVisitor.prototype.visitAttribute = function(ast, context) {
      return null;
    };
    TemplatePreparseVisitor.prototype.visitText = function(ast, context) {
      return null;
    };
    TemplatePreparseVisitor.prototype.visitExpansion = function(ast, context) {
      return null;
    };
    TemplatePreparseVisitor.prototype.visitExpansionCase = function(ast, context) {
      return null;
    };
    return TemplatePreparseVisitor;
  }());
  var DirectiveResolver = (function() {
    function DirectiveResolver(_reflector) {
      if (_reflector === void 0) {
        _reflector = reflector;
      }
      this._reflector = _reflector;
    }
    DirectiveResolver.prototype.isDirective = function(type) {
      var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
      return typeMetadata && typeMetadata.some(isDirectiveMetadata);
    };
    DirectiveResolver.prototype.resolve = function(type, throwIfNotFound) {
      if (throwIfNotFound === void 0) {
        throwIfNotFound = true;
      }
      var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
      if (typeMetadata) {
        var metadata = typeMetadata.find(isDirectiveMetadata);
        if (metadata) {
          var propertyMetadata = this._reflector.propMetadata(type);
          return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
        }
      }
      if (throwIfNotFound) {
        throw new Error("No Directive annotation found on " + stringify(type));
      }
      return null;
    };
    DirectiveResolver.prototype._mergeWithPropertyMetadata = function(dm, propertyMetadata, directiveType) {
      var inputs = [];
      var outputs = [];
      var host = {};
      var queries = {};
      Object.keys(propertyMetadata).forEach(function(propName) {
        propertyMetadata[propName].forEach(function(a) {
          if (a instanceof _angular_core.Input) {
            if (a.bindingPropertyName) {
              inputs.push(propName + ": " + a.bindingPropertyName);
            } else {
              inputs.push(propName);
            }
          } else if (a instanceof _angular_core.Output) {
            var output = a;
            if (output.bindingPropertyName) {
              outputs.push(propName + ": " + output.bindingPropertyName);
            } else {
              outputs.push(propName);
            }
          } else if (a instanceof _angular_core.HostBinding) {
            var hostBinding = a;
            if (hostBinding.hostPropertyName) {
              var startWith = hostBinding.hostPropertyName[0];
              if (startWith === '(') {
                throw new Error("@HostBinding can not bind to events. Use @HostListener instead.");
              } else if (startWith === '[') {
                throw new Error("@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.");
              }
              host[("[" + hostBinding.hostPropertyName + "]")] = propName;
            } else {
              host[("[" + propName + "]")] = propName;
            }
          } else if (a instanceof _angular_core.HostListener) {
            var hostListener = a;
            var args = hostListener.args || [];
            host[("(" + hostListener.eventName + ")")] = propName + "(" + args.join(',') + ")";
          } else if (a instanceof _angular_core.Query) {
            queries[propName] = a;
          }
        });
      });
      return this._merge(dm, inputs, outputs, host, queries, directiveType);
    };
    DirectiveResolver.prototype._extractPublicName = function(def) {
      return splitAtColon(def, [null, def])[1].trim();
    };
    DirectiveResolver.prototype._merge = function(directive, inputs, outputs, host, queries, directiveType) {
      var _this = this;
      var mergedInputs = inputs;
      if (directive.inputs) {
        var inputNames_1 = directive.inputs.map(function(def) {
          return _this._extractPublicName(def);
        });
        inputs.forEach(function(inputDef) {
          var publicName = _this._extractPublicName(inputDef);
          if (inputNames_1.indexOf(publicName) > -1) {
            throw new Error("Input '" + publicName + "' defined multiple times in '" + stringify(directiveType) + "'");
          }
        });
        mergedInputs.unshift.apply(mergedInputs, directive.inputs);
      }
      var mergedOutputs = outputs;
      if (directive.outputs) {
        var outputNames_1 = directive.outputs.map(function(def) {
          return _this._extractPublicName(def);
        });
        outputs.forEach(function(outputDef) {
          var publicName = _this._extractPublicName(outputDef);
          if (outputNames_1.indexOf(publicName) > -1) {
            throw new Error("Output event '" + publicName + "' defined multiple times in '" + stringify(directiveType) + "'");
          }
        });
        mergedOutputs.unshift.apply(mergedOutputs, directive.outputs);
      }
      var mergedHost = directive.host ? StringMapWrapper.merge(directive.host, host) : host;
      var mergedQueries = directive.queries ? StringMapWrapper.merge(directive.queries, queries) : queries;
      if (directive instanceof _angular_core.Component) {
        return new _angular_core.Component({
          selector: directive.selector,
          inputs: mergedInputs,
          outputs: mergedOutputs,
          host: mergedHost,
          exportAs: directive.exportAs,
          moduleId: directive.moduleId,
          queries: mergedQueries,
          changeDetection: directive.changeDetection,
          providers: directive.providers,
          viewProviders: directive.viewProviders,
          entryComponents: directive.entryComponents,
          template: directive.template,
          templateUrl: directive.templateUrl,
          styles: directive.styles,
          styleUrls: directive.styleUrls,
          encapsulation: directive.encapsulation,
          animations: directive.animations,
          interpolation: directive.interpolation
        });
      } else {
        return new _angular_core.Directive({
          selector: directive.selector,
          inputs: mergedInputs,
          outputs: mergedOutputs,
          host: mergedHost,
          exportAs: directive.exportAs,
          queries: mergedQueries,
          providers: directive.providers
        });
      }
    };
    DirectiveResolver.decorators = [{type: _angular_core.Injectable}];
    DirectiveResolver.ctorParameters = [{type: ReflectorReader}];
    return DirectiveResolver;
  }());
  function isDirectiveMetadata(type) {
    return type instanceof _angular_core.Directive;
  }
  function hasLifecycleHook(hook, token) {
    return reflector.hasLifecycleHook(token, getHookName(hook));
  }
  function getHookName(hook) {
    switch (hook) {
      case LifecycleHooks.OnInit:
        return 'ngOnInit';
      case LifecycleHooks.OnDestroy:
        return 'ngOnDestroy';
      case LifecycleHooks.DoCheck:
        return 'ngDoCheck';
      case LifecycleHooks.OnChanges:
        return 'ngOnChanges';
      case LifecycleHooks.AfterContentInit:
        return 'ngAfterContentInit';
      case LifecycleHooks.AfterContentChecked:
        return 'ngAfterContentChecked';
      case LifecycleHooks.AfterViewInit:
        return 'ngAfterViewInit';
      case LifecycleHooks.AfterViewChecked:
        return 'ngAfterViewChecked';
    }
  }
  function _isNgModuleMetadata(obj) {
    return obj instanceof _angular_core.NgModule;
  }
  var NgModuleResolver = (function() {
    function NgModuleResolver(_reflector) {
      if (_reflector === void 0) {
        _reflector = reflector;
      }
      this._reflector = _reflector;
    }
    NgModuleResolver.prototype.isNgModule = function(type) {
      return this._reflector.annotations(type).some(_isNgModuleMetadata);
    };
    NgModuleResolver.prototype.resolve = function(type, throwIfNotFound) {
      if (throwIfNotFound === void 0) {
        throwIfNotFound = true;
      }
      var ngModuleMeta = this._reflector.annotations(type).find(_isNgModuleMetadata);
      if (isPresent(ngModuleMeta)) {
        return ngModuleMeta;
      } else {
        if (throwIfNotFound) {
          throw new Error("No NgModule metadata found for '" + stringify(type) + "'.");
        }
        return null;
      }
    };
    NgModuleResolver.decorators = [{type: _angular_core.Injectable}];
    NgModuleResolver.ctorParameters = [{type: ReflectorReader}];
    return NgModuleResolver;
  }());
  function _isPipeMetadata(type) {
    return type instanceof _angular_core.Pipe;
  }
  var PipeResolver = (function() {
    function PipeResolver(_reflector) {
      if (_reflector === void 0) {
        _reflector = reflector;
      }
      this._reflector = _reflector;
    }
    PipeResolver.prototype.isPipe = function(type) {
      var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
      return typeMetadata && typeMetadata.some(_isPipeMetadata);
    };
    PipeResolver.prototype.resolve = function(type, throwIfNotFound) {
      if (throwIfNotFound === void 0) {
        throwIfNotFound = true;
      }
      var metas = this._reflector.annotations(_angular_core.resolveForwardRef(type));
      if (isPresent(metas)) {
        var annotation = metas.find(_isPipeMetadata);
        if (isPresent(annotation)) {
          return annotation;
        }
      }
      if (throwIfNotFound) {
        throw new Error("No Pipe decorator found on " + stringify(type));
      }
      return null;
    };
    PipeResolver.decorators = [{type: _angular_core.Injectable}];
    PipeResolver.ctorParameters = [{type: ReflectorReader}];
    return PipeResolver;
  }());
  var __extends$17 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var CompileMetadataResolver = (function() {
    function CompileMetadataResolver(_ngModuleResolver, _directiveResolver, _pipeResolver, _schemaRegistry, _directiveNormalizer, _reflector) {
      if (_reflector === void 0) {
        _reflector = reflector;
      }
      this._ngModuleResolver = _ngModuleResolver;
      this._directiveResolver = _directiveResolver;
      this._pipeResolver = _pipeResolver;
      this._schemaRegistry = _schemaRegistry;
      this._directiveNormalizer = _directiveNormalizer;
      this._reflector = _reflector;
      this._directiveCache = new Map();
      this._directiveSummaryCache = new Map();
      this._pipeCache = new Map();
      this._pipeSummaryCache = new Map();
      this._ngModuleCache = new Map();
      this._ngModuleOfTypes = new Map();
      this._anonymousTypes = new Map();
      this._anonymousTypeIndex = 0;
    }
    CompileMetadataResolver.prototype.sanitizeTokenName = function(token) {
      var identifier = stringify(token);
      if (identifier.indexOf('(') >= 0) {
        var found = this._anonymousTypes.get(token);
        if (!found) {
          this._anonymousTypes.set(token, this._anonymousTypeIndex++);
          found = this._anonymousTypes.get(token);
        }
        identifier = "anonymous_token_" + found + "_";
      }
      return sanitizeIdentifier(identifier);
    };
    CompileMetadataResolver.prototype.clearCacheFor = function(type) {
      var dirMeta = this._directiveCache.get(type);
      this._directiveCache.delete(type);
      this._directiveSummaryCache.delete(type);
      this._pipeCache.delete(type);
      this._pipeSummaryCache.delete(type);
      this._ngModuleOfTypes.delete(type);
      this._ngModuleCache.clear();
      if (dirMeta) {
        this._directiveNormalizer.clearCacheFor(dirMeta);
      }
    };
    CompileMetadataResolver.prototype.clearCache = function() {
      this._directiveCache.clear();
      this._directiveSummaryCache.clear();
      this._pipeCache.clear();
      this._pipeSummaryCache.clear();
      this._ngModuleCache.clear();
      this._ngModuleOfTypes.clear();
      this._directiveNormalizer.clearCache();
    };
    CompileMetadataResolver.prototype.getAnimationEntryMetadata = function(entry) {
      var _this = this;
      var defs = entry.definitions.map(function(def) {
        return _this._getAnimationStateMetadata(def);
      });
      return new CompileAnimationEntryMetadata(entry.name, defs);
    };
    CompileMetadataResolver.prototype._getAnimationStateMetadata = function(value) {
      if (value instanceof _angular_core.AnimationStateDeclarationMetadata) {
        var styles = this._getAnimationStyleMetadata(value.styles);
        return new CompileAnimationStateDeclarationMetadata(value.stateNameExpr, styles);
      }
      if (value instanceof _angular_core.AnimationStateTransitionMetadata) {
        return new CompileAnimationStateTransitionMetadata(value.stateChangeExpr, this._getAnimationMetadata(value.steps));
      }
      return null;
    };
    CompileMetadataResolver.prototype._getAnimationStyleMetadata = function(value) {
      return new CompileAnimationStyleMetadata(value.offset, value.styles);
    };
    CompileMetadataResolver.prototype._getAnimationMetadata = function(value) {
      var _this = this;
      if (value instanceof _angular_core.AnimationStyleMetadata) {
        return this._getAnimationStyleMetadata(value);
      }
      if (value instanceof _angular_core.AnimationKeyframesSequenceMetadata) {
        return new CompileAnimationKeyframesSequenceMetadata(value.steps.map(function(entry) {
          return _this._getAnimationStyleMetadata(entry);
        }));
      }
      if (value instanceof _angular_core.AnimationAnimateMetadata) {
        var animateData = this._getAnimationMetadata(value.styles);
        return new CompileAnimationAnimateMetadata(value.timings, animateData);
      }
      if (value instanceof _angular_core.AnimationWithStepsMetadata) {
        var steps = value.steps.map(function(step) {
          return _this._getAnimationMetadata(step);
        });
        if (value instanceof _angular_core.AnimationGroupMetadata) {
          return new CompileAnimationGroupMetadata(steps);
        }
        return new CompileAnimationSequenceMetadata(steps);
      }
      return null;
    };
    CompileMetadataResolver.prototype._loadDirectiveMetadata = function(directiveType, isSync) {
      var _this = this;
      if (this._directiveCache.has(directiveType)) {
        return;
      }
      directiveType = _angular_core.resolveForwardRef(directiveType);
      var nonNormalizedMetadata = this.getNonNormalizedDirectiveMetadata(directiveType);
      var createDirectiveMetadata = function(templateMetadata) {
        var normalizedDirMeta = new CompileDirectiveMetadata({
          type: nonNormalizedMetadata.type,
          isComponent: nonNormalizedMetadata.isComponent,
          selector: nonNormalizedMetadata.selector,
          exportAs: nonNormalizedMetadata.exportAs,
          changeDetection: nonNormalizedMetadata.changeDetection,
          inputs: nonNormalizedMetadata.inputs,
          outputs: nonNormalizedMetadata.outputs,
          hostListeners: nonNormalizedMetadata.hostListeners,
          hostProperties: nonNormalizedMetadata.hostProperties,
          hostAttributes: nonNormalizedMetadata.hostAttributes,
          providers: nonNormalizedMetadata.providers,
          viewProviders: nonNormalizedMetadata.viewProviders,
          queries: nonNormalizedMetadata.queries,
          viewQueries: nonNormalizedMetadata.viewQueries,
          entryComponents: nonNormalizedMetadata.entryComponents,
          template: templateMetadata
        });
        _this._directiveCache.set(directiveType, normalizedDirMeta);
        _this._directiveSummaryCache.set(directiveType, normalizedDirMeta.toSummary());
        return normalizedDirMeta;
      };
      if (nonNormalizedMetadata.isComponent) {
        var templateMeta_1 = this._directiveNormalizer.normalizeTemplate({
          componentType: directiveType,
          moduleUrl: nonNormalizedMetadata.type.moduleUrl,
          encapsulation: nonNormalizedMetadata.template.encapsulation,
          template: nonNormalizedMetadata.template.template,
          templateUrl: nonNormalizedMetadata.template.templateUrl,
          styles: nonNormalizedMetadata.template.styles,
          styleUrls: nonNormalizedMetadata.template.styleUrls,
          animations: nonNormalizedMetadata.template.animations,
          interpolation: nonNormalizedMetadata.template.interpolation
        });
        if (templateMeta_1.syncResult) {
          createDirectiveMetadata(templateMeta_1.syncResult);
          return null;
        } else {
          if (isSync) {
            throw new ComponentStillLoadingError(directiveType);
          }
          return function() {
            return templateMeta_1.asyncResult.then(createDirectiveMetadata);
          };
        }
      } else {
        createDirectiveMetadata(null);
        return null;
      }
    };
    CompileMetadataResolver.prototype.getNonNormalizedDirectiveMetadata = function(directiveType) {
      var _this = this;
      directiveType = _angular_core.resolveForwardRef(directiveType);
      var dirMeta = this._directiveResolver.resolve(directiveType);
      if (!dirMeta) {
        return null;
      }
      var moduleUrl = staticTypeModuleUrl(directiveType);
      var nonNormalizedTemplateMetadata;
      if (dirMeta instanceof _angular_core.Component) {
        moduleUrl = componentModuleUrl(this._reflector, directiveType, dirMeta);
        assertArrayOfStrings('styles', dirMeta.styles);
        assertArrayOfStrings('styleUrls', dirMeta.styleUrls);
        assertInterpolationSymbols('interpolation', dirMeta.interpolation);
        var animations = dirMeta.animations ? dirMeta.animations.map(function(e) {
          return _this.getAnimationEntryMetadata(e);
        }) : null;
        nonNormalizedTemplateMetadata = new CompileTemplateMetadata({
          encapsulation: dirMeta.encapsulation,
          template: dirMeta.template,
          templateUrl: dirMeta.templateUrl,
          styles: dirMeta.styles,
          styleUrls: dirMeta.styleUrls,
          animations: animations,
          interpolation: dirMeta.interpolation
        });
      }
      var changeDetectionStrategy = null;
      var viewProviders = [];
      var entryComponentMetadata = [];
      var selector = dirMeta.selector;
      if (dirMeta instanceof _angular_core.Component) {
        changeDetectionStrategy = dirMeta.changeDetection;
        if (dirMeta.viewProviders) {
          viewProviders = this._getProvidersMetadata(dirMeta.viewProviders, entryComponentMetadata, "viewProviders for \"" + stringify(directiveType) + "\"");
        }
        if (dirMeta.entryComponents) {
          entryComponentMetadata = flattenAndDedupeArray(dirMeta.entryComponents).map(function(type) {
            return _this._getIdentifierMetadata(type, staticTypeModuleUrl(type));
          }).concat(entryComponentMetadata);
        }
        if (!selector) {
          selector = this._schemaRegistry.getDefaultComponentElementName();
        }
      } else {
        if (!selector) {
          throw new Error("Directive " + stringify(directiveType) + " has no selector, please add it!");
        }
      }
      var providers = [];
      if (isPresent(dirMeta.providers)) {
        providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, "providers for \"" + stringify(directiveType) + "\"");
      }
      var queries = [];
      var viewQueries = [];
      if (isPresent(dirMeta.queries)) {
        queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);
        viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);
      }
      return CompileDirectiveMetadata.create({
        selector: selector,
        exportAs: dirMeta.exportAs,
        isComponent: !!nonNormalizedTemplateMetadata,
        type: this._getTypeMetadata(directiveType, moduleUrl),
        template: nonNormalizedTemplateMetadata,
        changeDetection: changeDetectionStrategy,
        inputs: dirMeta.inputs,
        outputs: dirMeta.outputs,
        host: dirMeta.host,
        providers: providers,
        viewProviders: viewProviders,
        queries: queries,
        viewQueries: viewQueries,
        entryComponents: entryComponentMetadata
      });
    };
    CompileMetadataResolver.prototype.getDirectiveMetadata = function(directiveType) {
      var dirMeta = this._directiveCache.get(directiveType);
      if (!dirMeta) {
        throw new Error("Illegal state: getDirectiveMetadata can only be called after loadNgModuleMetadata for a module that declares it. Directive " + stringify(directiveType) + ".");
      }
      return dirMeta;
    };
    CompileMetadataResolver.prototype.getDirectiveSummary = function(dirType) {
      var dirSummary = this._directiveSummaryCache.get(dirType);
      if (!dirSummary) {
        throw new Error("Illegal state: getDirectiveSummary can only be called after loadNgModuleMetadata for a module that imports it. Directive " + stringify(dirType) + ".");
      }
      return dirSummary;
    };
    CompileMetadataResolver.prototype.isDirective = function(type) {
      return this._directiveResolver.isDirective(type);
    };
    CompileMetadataResolver.prototype.isPipe = function(type) {
      return this._pipeResolver.isPipe(type);
    };
    CompileMetadataResolver.prototype.getNgModuleMetadata = function(moduleType) {
      var modMeta = this._ngModuleCache.get(moduleType);
      if (!modMeta) {
        throw new Error("Illegal state: getNgModuleMetadata can only be called after loadNgModuleMetadata. Module " + stringify(moduleType) + ".");
      }
      return modMeta;
    };
    CompileMetadataResolver.prototype._loadNgModuleSummary = function(moduleType, isSync) {
      var moduleMeta = this._loadNgModuleMetadata(moduleType, isSync, false);
      return moduleMeta ? moduleMeta.toSummary() : null;
    };
    CompileMetadataResolver.prototype.loadNgModuleMetadata = function(moduleType, isSync, throwIfNotFound) {
      if (throwIfNotFound === void 0) {
        throwIfNotFound = true;
      }
      var ngModule = this._loadNgModuleMetadata(moduleType, isSync, throwIfNotFound);
      var loading = ngModule ? Promise.all(ngModule.transitiveModule.directiveLoaders.map(function(loader) {
        return loader();
      })) : Promise.resolve(null);
      return {
        ngModule: ngModule,
        loading: loading
      };
    };
    CompileMetadataResolver.prototype.getUnloadedNgModuleMetadata = function(moduleType, isSync, throwIfNotFound) {
      if (throwIfNotFound === void 0) {
        throwIfNotFound = true;
      }
      return this._loadNgModuleMetadata(moduleType, isSync, throwIfNotFound);
    };
    CompileMetadataResolver.prototype._loadNgModuleMetadata = function(moduleType, isSync, throwIfNotFound) {
      var _this = this;
      if (throwIfNotFound === void 0) {
        throwIfNotFound = true;
      }
      moduleType = _angular_core.resolveForwardRef(moduleType);
      var compileMeta = this._ngModuleCache.get(moduleType);
      if (compileMeta) {
        return compileMeta;
      }
      var meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);
      if (!meta) {
        return null;
      }
      var declaredDirectives = [];
      var exportedNonModuleIdentifiers = [];
      var declaredPipes = [];
      var importedModules = [];
      var exportedModules = [];
      var providers = [];
      var entryComponents = [];
      var bootstrapComponents = [];
      var schemas = [];
      if (meta.imports) {
        flattenAndDedupeArray(meta.imports).forEach(function(importedType) {
          var importedModuleType;
          if (isValidType(importedType)) {
            importedModuleType = importedType;
          } else if (importedType && importedType.ngModule) {
            var moduleWithProviders = importedType;
            importedModuleType = moduleWithProviders.ngModule;
            if (moduleWithProviders.providers) {
              providers.push.apply(providers, _this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, "provider for the NgModule '" + stringify(importedModuleType) + "'"));
            }
          }
          if (importedModuleType) {
            var importedModuleSummary = _this._loadNgModuleSummary(importedModuleType, isSync);
            if (!importedModuleSummary) {
              throw new Error("Unexpected " + _this._getTypeDescriptor(importedType) + " '" + stringify(importedType) + "' imported by the module '" + stringify(moduleType) + "'");
            }
            importedModules.push(importedModuleSummary);
          } else {
            throw new Error("Unexpected value '" + stringify(importedType) + "' imported by the module '" + stringify(moduleType) + "'");
          }
        });
      }
      if (meta.exports) {
        flattenAndDedupeArray(meta.exports).forEach(function(exportedType) {
          if (!isValidType(exportedType)) {
            throw new Error("Unexpected value '" + stringify(exportedType) + "' exported by the module '" + stringify(moduleType) + "'");
          }
          var exportedModuleSummary = _this._loadNgModuleSummary(exportedType, isSync);
          if (exportedModuleSummary) {
            exportedModules.push(exportedModuleSummary);
          } else {
            exportedNonModuleIdentifiers.push(_this._getIdentifierMetadata(exportedType, staticTypeModuleUrl(exportedType)));
          }
        });
      }
      var transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);
      if (meta.declarations) {
        flattenAndDedupeArray(meta.declarations).forEach(function(declaredType) {
          if (!isValidType(declaredType)) {
            throw new Error("Unexpected value '" + stringify(declaredType) + "' declared by the module '" + stringify(moduleType) + "'");
          }
          var declaredIdentifier = _this._getIdentifierMetadata(declaredType, staticTypeModuleUrl(declaredType));
          if (_this._directiveResolver.isDirective(declaredType)) {
            transitiveModule.directivesSet.add(declaredType);
            transitiveModule.directives.push(declaredIdentifier);
            declaredDirectives.push(declaredIdentifier);
            _this._addTypeToModule(declaredType, moduleType);
            var loader = _this._loadDirectiveMetadata(declaredType, isSync);
            if (loader) {
              transitiveModule.directiveLoaders.push(loader);
            }
          } else if (_this._pipeResolver.isPipe(declaredType)) {
            transitiveModule.pipesSet.add(declaredType);
            transitiveModule.pipes.push(declaredIdentifier);
            declaredPipes.push(declaredIdentifier);
            _this._addTypeToModule(declaredType, moduleType);
            _this._loadPipeMetadata(declaredType);
          } else {
            throw new Error("Unexpected " + _this._getTypeDescriptor(declaredType) + " '" + stringify(declaredType) + "' declared by the module '" + stringify(moduleType) + "'");
          }
        });
      }
      var exportedDirectives = [];
      var exportedPipes = [];
      exportedNonModuleIdentifiers.forEach(function(exportedId) {
        if (transitiveModule.directivesSet.has(exportedId.reference)) {
          exportedDirectives.push(exportedId);
        } else if (transitiveModule.pipesSet.has(exportedId.reference)) {
          exportedPipes.push(exportedId);
        } else {
          throw new Error("Can't export " + _this._getTypeDescriptor(exportedId.reference) + " " + stringify(exportedId.reference) + " from " + stringify(moduleType) + " as it was neither declared nor imported!");
        }
      });
      if (meta.providers) {
        providers.push.apply(providers, this._getProvidersMetadata(meta.providers, entryComponents, "provider for the NgModule '" + stringify(moduleType) + "'"));
      }
      if (meta.entryComponents) {
        entryComponents.push.apply(entryComponents, flattenAndDedupeArray(meta.entryComponents).map(function(type) {
          return _this._getTypeMetadata(type, staticTypeModuleUrl(type));
        }));
      }
      if (meta.bootstrap) {
        var typeMetadata = flattenAndDedupeArray(meta.bootstrap).map(function(type) {
          if (!isValidType(type)) {
            throw new Error("Unexpected value '" + stringify(type) + "' used in the bootstrap property of module '" + stringify(moduleType) + "'");
          }
          return _this._getTypeMetadata(type, staticTypeModuleUrl(type));
        });
        bootstrapComponents.push.apply(bootstrapComponents, typeMetadata);
      }
      entryComponents.push.apply(entryComponents, bootstrapComponents);
      if (meta.schemas) {
        schemas.push.apply(schemas, flattenAndDedupeArray(meta.schemas));
      }
      (_a = transitiveModule.entryComponents).push.apply(_a, entryComponents);
      (_b = transitiveModule.providers).push.apply(_b, providers);
      compileMeta = new CompileNgModuleMetadata({
        type: this._getTypeMetadata(moduleType, staticTypeModuleUrl(moduleType)),
        providers: providers,
        entryComponents: entryComponents,
        bootstrapComponents: bootstrapComponents,
        schemas: schemas,
        declaredDirectives: declaredDirectives,
        exportedDirectives: exportedDirectives,
        declaredPipes: declaredPipes,
        exportedPipes: exportedPipes,
        importedModules: importedModules,
        exportedModules: exportedModules,
        transitiveModule: transitiveModule,
        id: meta.id
      });
      transitiveModule.modules.push(compileMeta.toInjectorSummary());
      this._ngModuleCache.set(moduleType, compileMeta);
      return compileMeta;
      var _a,
          _b;
    };
    CompileMetadataResolver.prototype._getTypeDescriptor = function(type) {
      if (this._directiveResolver.isDirective(type)) {
        return 'directive';
      }
      if (this._pipeResolver.isPipe(type)) {
        return 'pipe';
      }
      if (this._ngModuleResolver.isNgModule(type)) {
        return 'module';
      }
      if (type.provide) {
        return 'provider';
      }
      return 'value';
    };
    CompileMetadataResolver.prototype._addTypeToModule = function(type, moduleType) {
      var oldModule = this._ngModuleOfTypes.get(type);
      if (oldModule && oldModule !== moduleType) {
        throw new Error(("Type " + stringify(type) + " is part of the declarations of 2 modules: " + stringify(oldModule) + " and " + stringify(moduleType) + "! ") + ("Please consider moving " + stringify(type) + " to a higher module that imports " + stringify(oldModule) + " and " + stringify(moduleType) + ". ") + ("You can also create a new NgModule that exports and includes " + stringify(type) + " then import that NgModule in " + stringify(oldModule) + " and " + stringify(moduleType) + "."));
      }
      this._ngModuleOfTypes.set(type, moduleType);
    };
    CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function(importedModules, exportedModules) {
      var transitiveModules = getTransitiveImportedModules(importedModules.concat(exportedModules));
      var providers = flattenArray(transitiveModules.map(function(ngModule) {
        return ngModule.providers;
      }));
      var entryComponents = flattenArray(transitiveModules.map(function(ngModule) {
        return ngModule.entryComponents;
      }));
      var transitiveExportedModules = getTransitiveExportedModules(importedModules);
      var directives = flattenArray(transitiveExportedModules.map(function(ngModule) {
        return ngModule.exportedDirectives;
      }));
      var pipes = flattenArray(transitiveExportedModules.map(function(ngModule) {
        return ngModule.exportedPipes;
      }));
      var directiveLoaders = ListWrapper.flatten(transitiveExportedModules.map(function(ngModule) {
        return ngModule.directiveLoaders;
      }));
      return new TransitiveCompileNgModuleMetadata(transitiveModules, providers, entryComponents, directives, pipes, directiveLoaders);
    };
    CompileMetadataResolver.prototype._getIdentifierMetadata = function(type, moduleUrl) {
      type = _angular_core.resolveForwardRef(type);
      return new CompileIdentifierMetadata({
        name: this.sanitizeTokenName(type),
        moduleUrl: moduleUrl,
        reference: type
      });
    };
    CompileMetadataResolver.prototype._getTypeMetadata = function(type, moduleUrl, dependencies) {
      if (dependencies === void 0) {
        dependencies = null;
      }
      var identifier = this._getIdentifierMetadata(type, moduleUrl);
      return new CompileTypeMetadata({
        name: identifier.name,
        moduleUrl: identifier.moduleUrl,
        reference: identifier.reference,
        diDeps: this._getDependenciesMetadata(identifier.reference, dependencies),
        lifecycleHooks: LIFECYCLE_HOOKS_VALUES.filter(function(hook) {
          return hasLifecycleHook(hook, identifier.reference);
        })
      });
    };
    CompileMetadataResolver.prototype._getFactoryMetadata = function(factory, moduleUrl, dependencies) {
      if (dependencies === void 0) {
        dependencies = null;
      }
      factory = _angular_core.resolveForwardRef(factory);
      return new CompileFactoryMetadata({
        name: this.sanitizeTokenName(factory),
        moduleUrl: moduleUrl,
        reference: factory,
        diDeps: this._getDependenciesMetadata(factory, dependencies)
      });
    };
    CompileMetadataResolver.prototype.getPipeMetadata = function(pipeType) {
      var pipeMeta = this._pipeCache.get(pipeType);
      if (!pipeMeta) {
        throw new Error("Illegal state: getPipeMetadata can only be called after loadNgModuleMetadata for a module that declares it. Pipe " + stringify(pipeType) + ".");
      }
      return pipeMeta;
    };
    CompileMetadataResolver.prototype.getPipeSummary = function(pipeType) {
      var pipeSummary = this._pipeSummaryCache.get(pipeType);
      if (!pipeSummary) {
        throw new Error("Illegal state: getPipeSummary can only be called after loadNgModuleMetadata for a module that imports it. Pipe " + stringify(pipeType) + ".");
      }
      return pipeSummary;
    };
    CompileMetadataResolver.prototype.getOrLoadPipeMetadata = function(pipeType) {
      var pipeMeta = this._pipeCache.get(pipeType);
      if (!pipeMeta) {
        pipeMeta = this._loadPipeMetadata(pipeType);
      }
      return pipeMeta;
    };
    CompileMetadataResolver.prototype._loadPipeMetadata = function(pipeType) {
      pipeType = _angular_core.resolveForwardRef(pipeType);
      var pipeAnnotation = this._pipeResolver.resolve(pipeType);
      var pipeMeta = new CompilePipeMetadata({
        type: this._getTypeMetadata(pipeType, staticTypeModuleUrl(pipeType)),
        name: pipeAnnotation.name,
        pure: pipeAnnotation.pure
      });
      this._pipeCache.set(pipeType, pipeMeta);
      this._pipeSummaryCache.set(pipeType, pipeMeta.toSummary());
      return pipeMeta;
    };
    CompileMetadataResolver.prototype._getDependenciesMetadata = function(typeOrFunc, dependencies) {
      var _this = this;
      var hasUnknownDeps = false;
      var params = dependencies || this._reflector.parameters(typeOrFunc) || [];
      var dependenciesMetadata = params.map(function(param) {
        var isAttribute = false;
        var isHost = false;
        var isSelf = false;
        var isSkipSelf = false;
        var isOptional = false;
        var token = null;
        if (Array.isArray(param)) {
          param.forEach(function(paramEntry) {
            if (paramEntry instanceof _angular_core.Host) {
              isHost = true;
            } else if (paramEntry instanceof _angular_core.Self) {
              isSelf = true;
            } else if (paramEntry instanceof _angular_core.SkipSelf) {
              isSkipSelf = true;
            } else if (paramEntry instanceof _angular_core.Optional) {
              isOptional = true;
            } else if (paramEntry instanceof _angular_core.Attribute) {
              isAttribute = true;
              token = paramEntry.attributeName;
            } else if (paramEntry instanceof _angular_core.Inject) {
              token = paramEntry.token;
            } else if (isValidType(paramEntry) && isBlank(token)) {
              token = paramEntry;
            }
          });
        } else {
          token = param;
        }
        if (isBlank(token)) {
          hasUnknownDeps = true;
          return null;
        }
        return new CompileDiDependencyMetadata({
          isAttribute: isAttribute,
          isHost: isHost,
          isSelf: isSelf,
          isSkipSelf: isSkipSelf,
          isOptional: isOptional,
          token: _this._getTokenMetadata(token)
        });
      });
      if (hasUnknownDeps) {
        var depsTokens = dependenciesMetadata.map(function(dep) {
          return dep ? stringify(dep.token) : '?';
        }).join(', ');
        throw new Error("Can't resolve all parameters for " + stringify(typeOrFunc) + ": (" + depsTokens + ").");
      }
      return dependenciesMetadata;
    };
    CompileMetadataResolver.prototype._getTokenMetadata = function(token) {
      token = _angular_core.resolveForwardRef(token);
      var compileToken;
      if (typeof token === 'string') {
        compileToken = new CompileTokenMetadata({value: token});
      } else {
        compileToken = new CompileTokenMetadata({identifier: new CompileIdentifierMetadata({
            reference: token,
            name: this.sanitizeTokenName(token),
            moduleUrl: staticTypeModuleUrl(token)
          })});
      }
      return compileToken;
    };
    CompileMetadataResolver.prototype._getProvidersMetadata = function(providers, targetEntryComponents, debugInfo) {
      var _this = this;
      var compileProviders = [];
      providers.forEach(function(provider, providerIdx) {
        provider = _angular_core.resolveForwardRef(provider);
        if (provider && typeof provider == 'object' && provider.hasOwnProperty('provide')) {
          provider = new ProviderMeta(provider.provide, provider);
        }
        var compileProvider;
        if (Array.isArray(provider)) {
          compileProvider = _this._getProvidersMetadata(provider, targetEntryComponents, debugInfo);
        } else if (provider instanceof ProviderMeta) {
          var tokenMeta = _this._getTokenMetadata(provider.token);
          if (tokenMeta.reference === resolveIdentifierToken(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS).reference) {
            targetEntryComponents.push.apply(targetEntryComponents, _this._getEntryComponentsFromProvider(provider));
          } else {
            compileProvider = _this.getProviderMetadata(provider);
          }
        } else if (isValidType(provider)) {
          compileProvider = _this._getTypeMetadata(provider, staticTypeModuleUrl(provider));
        } else {
          var providersInfo = providers.reduce(function(soFar, seenProvider, seenProviderIdx) {
            if (seenProviderIdx < providerIdx) {
              soFar.push("" + stringify(seenProvider));
            } else if (seenProviderIdx == providerIdx) {
              soFar.push("?" + stringify(seenProvider) + "?");
            } else if (seenProviderIdx == providerIdx + 1) {
              soFar.push('...');
            }
            return soFar;
          }, []).join(', ');
          throw new Error("Invalid " + (debugInfo ? debugInfo : 'provider') + " - only instances of Provider and Type are allowed, got: [" + providersInfo + "]");
        }
        if (compileProvider) {
          compileProviders.push(compileProvider);
        }
      });
      return compileProviders;
    };
    CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function(provider) {
      var _this = this;
      var components = [];
      var collectedIdentifiers = [];
      if (provider.useFactory || provider.useExisting || provider.useClass) {
        throw new Error("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!");
      }
      if (!provider.multi) {
        throw new Error("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!");
      }
      convertToCompileValue(provider.useValue, collectedIdentifiers);
      collectedIdentifiers.forEach(function(identifier) {
        if (_this._directiveResolver.isDirective(identifier.reference)) {
          components.push(identifier);
        }
      });
      return components;
    };
    CompileMetadataResolver.prototype.getProviderMetadata = function(provider) {
      var compileDeps;
      var compileTypeMetadata = null;
      var compileFactoryMetadata = null;
      if (provider.useClass) {
        compileTypeMetadata = this._getTypeMetadata(provider.useClass, staticTypeModuleUrl(provider.useClass), provider.dependencies);
        compileDeps = compileTypeMetadata.diDeps;
      } else if (provider.useFactory) {
        compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, staticTypeModuleUrl(provider.useFactory), provider.dependencies);
        compileDeps = compileFactoryMetadata.diDeps;
      }
      return new CompileProviderMetadata({
        token: this._getTokenMetadata(provider.token),
        useClass: compileTypeMetadata,
        useValue: convertToCompileValue(provider.useValue, []),
        useFactory: compileFactoryMetadata,
        useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : null,
        deps: compileDeps,
        multi: provider.multi
      });
    };
    CompileMetadataResolver.prototype._getQueriesMetadata = function(queries, isViewQuery, directiveType) {
      var _this = this;
      var res = [];
      Object.keys(queries).forEach(function(propertyName) {
        var query = queries[propertyName];
        if (query.isViewQuery === isViewQuery) {
          res.push(_this._getQueryMetadata(query, propertyName, directiveType));
        }
      });
      return res;
    };
    CompileMetadataResolver.prototype._queryVarBindings = function(selector) {
      return selector.split(/\s*,\s*/);
    };
    CompileMetadataResolver.prototype._getQueryMetadata = function(q, propertyName, typeOrFunc) {
      var _this = this;
      var selectors;
      if (typeof q.selector === 'string') {
        selectors = this._queryVarBindings(q.selector).map(function(varName) {
          return _this._getTokenMetadata(varName);
        });
      } else {
        if (!q.selector) {
          throw new Error("Can't construct a query for the property \"" + propertyName + "\" of \"" + stringify(typeOrFunc) + "\" since the query selector wasn't defined.");
        }
        selectors = [this._getTokenMetadata(q.selector)];
      }
      return new CompileQueryMetadata({
        selectors: selectors,
        first: q.first,
        descendants: q.descendants,
        propertyName: propertyName,
        read: q.read ? this._getTokenMetadata(q.read) : null
      });
    };
    CompileMetadataResolver.decorators = [{type: _angular_core.Injectable}];
    CompileMetadataResolver.ctorParameters = [{type: NgModuleResolver}, {type: DirectiveResolver}, {type: PipeResolver}, {type: ElementSchemaRegistry}, {type: DirectiveNormalizer}, {type: ReflectorReader}];
    return CompileMetadataResolver;
  }());
  function getTransitiveExportedModules(modules, targetModules, visitedModules) {
    if (targetModules === void 0) {
      targetModules = [];
    }
    if (visitedModules === void 0) {
      visitedModules = new Set();
    }
    modules.forEach(function(ngModule) {
      if (!visitedModules.has(ngModule.type.reference)) {
        visitedModules.add(ngModule.type.reference);
        getTransitiveExportedModules(ngModule.exportedModules, targetModules, visitedModules);
        targetModules.push(ngModule);
      }
    });
    return targetModules;
  }
  function getTransitiveImportedModules(modules, targetModules, visitedModules) {
    if (targetModules === void 0) {
      targetModules = [];
    }
    if (visitedModules === void 0) {
      visitedModules = new Set();
    }
    modules.forEach(function(ngModule) {
      if (!visitedModules.has(ngModule.type.reference)) {
        visitedModules.add(ngModule.type.reference);
        var nestedModules = ngModule.importedModules.concat(ngModule.exportedModules);
        getTransitiveImportedModules(nestedModules, targetModules, visitedModules);
        targetModules.push(ngModule);
      }
    });
    return targetModules;
  }
  function flattenArray(tree, out) {
    if (out === void 0) {
      out = [];
    }
    if (tree) {
      for (var i = 0; i < tree.length; i++) {
        var item = _angular_core.resolveForwardRef(tree[i]);
        if (Array.isArray(item)) {
          flattenArray(item, out);
        } else {
          out.push(item);
        }
      }
    }
    return out;
  }
  function dedupeArray(array) {
    if (array) {
      return Array.from(new Set(array));
    }
    return [];
  }
  function flattenAndDedupeArray(tree) {
    return dedupeArray(flattenArray(tree));
  }
  function isValidType(value) {
    return isStaticSymbol(value) || (value instanceof _angular_core.Type);
  }
  function staticTypeModuleUrl(value) {
    return isStaticSymbol(value) ? value.filePath : null;
  }
  function componentModuleUrl(reflector, type, cmpMetadata) {
    if (isStaticSymbol(type)) {
      return staticTypeModuleUrl(type);
    }
    var moduleId = cmpMetadata.moduleId;
    if (typeof moduleId === 'string') {
      var scheme = getUrlScheme(moduleId);
      return scheme ? moduleId : "package:" + moduleId + MODULE_SUFFIX;
    } else if (moduleId !== null && moduleId !== void 0) {
      throw new Error(("moduleId should be a string in \"" + stringify(type) + "\". See https://goo.gl/wIDDiL for more information.\n") + "If you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.");
    }
    return reflector.importUri(type);
  }
  function convertToCompileValue(value, targetIdentifiers) {
    return visitValue(value, new _CompileValueConverter(), targetIdentifiers);
  }
  var _CompileValueConverter = (function(_super) {
    __extends$17(_CompileValueConverter, _super);
    function _CompileValueConverter() {
      _super.apply(this, arguments);
    }
    _CompileValueConverter.prototype.visitOther = function(value, targetIdentifiers) {
      var identifier;
      if (isStaticSymbol(value)) {
        identifier = new CompileIdentifierMetadata({
          name: value.name,
          moduleUrl: value.filePath,
          reference: value
        });
      } else {
        identifier = new CompileIdentifierMetadata({reference: value});
      }
      targetIdentifiers.push(identifier);
      return identifier;
    };
    return _CompileValueConverter;
  }(ValueTransformer));
  var ComponentFactoryDependency$1 = (function() {
    function ComponentFactoryDependency(comp, placeholder) {
      this.comp = comp;
      this.placeholder = placeholder;
    }
    return ComponentFactoryDependency;
  }());
  var NgModuleCompileResult = (function() {
    function NgModuleCompileResult(statements, ngModuleFactoryVar, dependencies) {
      this.statements = statements;
      this.ngModuleFactoryVar = ngModuleFactoryVar;
      this.dependencies = dependencies;
    }
    return NgModuleCompileResult;
  }());
  var NgModuleCompiler = (function() {
    function NgModuleCompiler() {}
    NgModuleCompiler.prototype.compile = function(ngModuleMeta, extraProviders) {
      var sourceFileName = isPresent(ngModuleMeta.type.moduleUrl) ? "in NgModule " + ngModuleMeta.type.name + " in " + ngModuleMeta.type.moduleUrl : "in NgModule " + ngModuleMeta.type.name;
      var sourceFile = new ParseSourceFile('', sourceFileName);
      var sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
      var deps = [];
      var bootstrapComponentFactories = [];
      var entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents.map(function(entryComponent) {
        var id = new CompileIdentifierMetadata({name: entryComponent.name});
        if (ngModuleMeta.bootstrapComponents.indexOf(entryComponent) > -1) {
          bootstrapComponentFactories.push(id);
        }
        deps.push(new ComponentFactoryDependency$1(entryComponent, id));
        return id;
      });
      var builder = new _InjectorBuilder(ngModuleMeta, entryComponentFactories, bootstrapComponentFactories, sourceSpan);
      var providerParser = new NgModuleProviderAnalyzer(ngModuleMeta, extraProviders, sourceSpan);
      providerParser.parse().forEach(function(provider) {
        return builder.addProvider(provider);
      });
      var injectorClass = builder.build();
      var ngModuleFactoryVar = ngModuleMeta.type.name + "NgFactory";
      var ngModuleFactoryStmt = variable(ngModuleFactoryVar).set(importExpr(resolveIdentifier(Identifiers.NgModuleFactory)).instantiate([variable(injectorClass.name), importExpr(ngModuleMeta.type)], importType(resolveIdentifier(Identifiers.NgModuleFactory), [importType(ngModuleMeta.type)], [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]);
      var stmts = [injectorClass, ngModuleFactoryStmt];
      if (ngModuleMeta.id) {
        var registerFactoryStmt = importExpr(resolveIdentifier(Identifiers.RegisterModuleFactoryFn)).callFn([literal(ngModuleMeta.id), variable(ngModuleFactoryVar)]).toStmt();
        stmts.push(registerFactoryStmt);
      }
      return new NgModuleCompileResult(stmts, ngModuleFactoryVar, deps);
    };
    NgModuleCompiler.decorators = [{type: _angular_core.Injectable}];
    NgModuleCompiler.ctorParameters = [];
    return NgModuleCompiler;
  }());
  var _InjectorBuilder = (function() {
    function _InjectorBuilder(_ngModuleMeta, _entryComponentFactories, _bootstrapComponentFactories, _sourceSpan) {
      this._ngModuleMeta = _ngModuleMeta;
      this._entryComponentFactories = _entryComponentFactories;
      this._bootstrapComponentFactories = _bootstrapComponentFactories;
      this._sourceSpan = _sourceSpan;
      this.fields = [];
      this.getters = [];
      this.methods = [];
      this.ctorStmts = [];
      this._tokens = [];
      this._instances = new Map();
      this._createStmts = [];
      this._destroyStmts = [];
    }
    _InjectorBuilder.prototype.addProvider = function(resolvedProvider) {
      var _this = this;
      var providerValueExpressions = resolvedProvider.providers.map(function(provider) {
        return _this._getProviderValue(provider);
      });
      var propName = "_" + resolvedProvider.token.name + "_" + this._instances.size;
      var instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager);
      if (resolvedProvider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
        this._destroyStmts.push(instance.callMethod('ngOnDestroy', []).toStmt());
      }
      this._tokens.push(resolvedProvider.token);
      this._instances.set(resolvedProvider.token.reference, instance);
    };
    _InjectorBuilder.prototype.build = function() {
      var _this = this;
      var getMethodStmts = this._tokens.map(function(token) {
        var providerExpr = _this._instances.get(token.reference);
        return new IfStmt(InjectMethodVars$1.token.identical(createDiTokenExpression(token)), [new ReturnStatement(providerExpr)]);
      });
      var methods = [new ClassMethod('createInternal', [], this._createStmts.concat(new ReturnStatement(this._instances.get(this._ngModuleMeta.type.reference))), importType(this._ngModuleMeta.type)), new ClassMethod('getInternal', [new FnParam(InjectMethodVars$1.token.name, DYNAMIC_TYPE), new FnParam(InjectMethodVars$1.notFoundResult.name, DYNAMIC_TYPE)], getMethodStmts.concat([new ReturnStatement(InjectMethodVars$1.notFoundResult)]), DYNAMIC_TYPE), new ClassMethod('destroyInternal', [], this._destroyStmts)];
      var parentArgs = [variable(InjectorProps.parent.name), literalArr(this._entryComponentFactories.map(function(componentFactory) {
        return importExpr(componentFactory);
      })), literalArr(this._bootstrapComponentFactories.map(function(componentFactory) {
        return importExpr(componentFactory);
      }))];
      var injClassName = this._ngModuleMeta.type.name + "Injector";
      return createClassStmt({
        name: injClassName,
        ctorParams: [new FnParam(InjectorProps.parent.name, importType(resolveIdentifier(Identifiers.Injector)))],
        parent: importExpr(resolveIdentifier(Identifiers.NgModuleInjector), [importType(this._ngModuleMeta.type)]),
        parentArgs: parentArgs,
        builders: [{methods: methods}, this]
      });
    };
    _InjectorBuilder.prototype._getProviderValue = function(provider) {
      var _this = this;
      var result;
      if (isPresent(provider.useExisting)) {
        result = this._getDependency(new CompileDiDependencyMetadata({token: provider.useExisting}));
      } else if (isPresent(provider.useFactory)) {
        var deps = provider.deps || provider.useFactory.diDeps;
        var depsExpr = deps.map(function(dep) {
          return _this._getDependency(dep);
        });
        result = importExpr(provider.useFactory).callFn(depsExpr);
      } else if (isPresent(provider.useClass)) {
        var deps = provider.deps || provider.useClass.diDeps;
        var depsExpr = deps.map(function(dep) {
          return _this._getDependency(dep);
        });
        result = importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
      } else {
        result = convertValueToOutputAst(provider.useValue);
      }
      return result;
    };
    _InjectorBuilder.prototype._createProviderProperty = function(propName, provider, providerValueExpressions, isMulti, isEager) {
      var resolvedProviderValueExpr;
      var type;
      if (isMulti) {
        resolvedProviderValueExpr = literalArr(providerValueExpressions);
        type = new ArrayType(DYNAMIC_TYPE);
      } else {
        resolvedProviderValueExpr = providerValueExpressions[0];
        type = providerValueExpressions[0].type;
      }
      if (!type) {
        type = DYNAMIC_TYPE;
      }
      if (isEager) {
        this.fields.push(new ClassField(propName, type));
        this._createStmts.push(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
      } else {
        var internalField = "_" + propName;
        this.fields.push(new ClassField(internalField, type));
        var getterStmts = [new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]), new ReturnStatement(THIS_EXPR.prop(internalField))];
        this.getters.push(new ClassGetter(propName, getterStmts, type));
      }
      return THIS_EXPR.prop(propName);
    };
    _InjectorBuilder.prototype._getDependency = function(dep) {
      var result = null;
      if (dep.isValue) {
        result = literal(dep.value);
      }
      if (!dep.isSkipSelf) {
        if (dep.token && (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference || dep.token.reference === resolveIdentifierToken(Identifiers.ComponentFactoryResolver).reference)) {
          result = THIS_EXPR;
        }
        if (!result) {
          result = this._instances.get(dep.token.reference);
        }
      }
      if (!result) {
        var args = [createDiTokenExpression(dep.token)];
        if (dep.isOptional) {
          args.push(NULL_EXPR);
        }
        result = InjectorProps.parent.callMethod('get', args);
      }
      return result;
    };
    return _InjectorBuilder;
  }());
  var InjectorProps = (function() {
    function InjectorProps() {}
    InjectorProps.parent = THIS_EXPR.prop('parent');
    return InjectorProps;
  }());
  var InjectMethodVars$1 = (function() {
    function InjectMethodVars() {}
    InjectMethodVars.token = variable('token');
    InjectMethodVars.notFoundResult = variable('notFoundResult');
    return InjectMethodVars;
  }());
  var _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
  var _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
  var CATCH_ERROR_VAR$2 = variable('error');
  var CATCH_STACK_VAR$2 = variable('stack');
  var _EmittedLine = (function() {
    function _EmittedLine(indent) {
      this.indent = indent;
      this.parts = [];
    }
    return _EmittedLine;
  }());
  var EmitterVisitorContext = (function() {
    function EmitterVisitorContext(_exportedVars, _indent) {
      this._exportedVars = _exportedVars;
      this._indent = _indent;
      this._classes = [];
      this._lines = [new _EmittedLine(_indent)];
    }
    EmitterVisitorContext.createRoot = function(exportedVars) {
      return new EmitterVisitorContext(exportedVars, 0);
    };
    Object.defineProperty(EmitterVisitorContext.prototype, "_currentLine", {
      get: function() {
        return this._lines[this._lines.length - 1];
      },
      enumerable: true,
      configurable: true
    });
    EmitterVisitorContext.prototype.isExportedVar = function(varName) {
      return this._exportedVars.indexOf(varName) !== -1;
    };
    EmitterVisitorContext.prototype.println = function(lastPart) {
      if (lastPart === void 0) {
        lastPart = '';
      }
      this.print(lastPart, true);
    };
    EmitterVisitorContext.prototype.lineIsEmpty = function() {
      return this._currentLine.parts.length === 0;
    };
    EmitterVisitorContext.prototype.print = function(part, newLine) {
      if (newLine === void 0) {
        newLine = false;
      }
      if (part.length > 0) {
        this._currentLine.parts.push(part);
      }
      if (newLine) {
        this._lines.push(new _EmittedLine(this._indent));
      }
    };
    EmitterVisitorContext.prototype.removeEmptyLastLine = function() {
      if (this.lineIsEmpty()) {
        this._lines.pop();
      }
    };
    EmitterVisitorContext.prototype.incIndent = function() {
      this._indent++;
      this._currentLine.indent = this._indent;
    };
    EmitterVisitorContext.prototype.decIndent = function() {
      this._indent--;
      this._currentLine.indent = this._indent;
    };
    EmitterVisitorContext.prototype.pushClass = function(clazz) {
      this._classes.push(clazz);
    };
    EmitterVisitorContext.prototype.popClass = function() {
      return this._classes.pop();
    };
    Object.defineProperty(EmitterVisitorContext.prototype, "currentClass", {
      get: function() {
        return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
      },
      enumerable: true,
      configurable: true
    });
    EmitterVisitorContext.prototype.toSource = function() {
      var lines = this._lines;
      if (lines[lines.length - 1].parts.length === 0) {
        lines = lines.slice(0, lines.length - 1);
      }
      return lines.map(function(line) {
        if (line.parts.length > 0) {
          return _createIndent(line.indent) + line.parts.join('');
        } else {
          return '';
        }
      }).join('\n');
    };
    return EmitterVisitorContext;
  }());
  var AbstractEmitterVisitor = (function() {
    function AbstractEmitterVisitor(_escapeDollarInStrings) {
      this._escapeDollarInStrings = _escapeDollarInStrings;
    }
    AbstractEmitterVisitor.prototype.visitExpressionStmt = function(stmt, ctx) {
      stmt.expr.visitExpression(this, ctx);
      ctx.println(';');
      return null;
    };
    AbstractEmitterVisitor.prototype.visitReturnStmt = function(stmt, ctx) {
      ctx.print("return ");
      stmt.value.visitExpression(this, ctx);
      ctx.println(';');
      return null;
    };
    AbstractEmitterVisitor.prototype.visitIfStmt = function(stmt, ctx) {
      ctx.print("if (");
      stmt.condition.visitExpression(this, ctx);
      ctx.print(") {");
      var hasElseCase = isPresent(stmt.falseCase) && stmt.falseCase.length > 0;
      if (stmt.trueCase.length <= 1 && !hasElseCase) {
        ctx.print(" ");
        this.visitAllStatements(stmt.trueCase, ctx);
        ctx.removeEmptyLastLine();
        ctx.print(" ");
      } else {
        ctx.println();
        ctx.incIndent();
        this.visitAllStatements(stmt.trueCase, ctx);
        ctx.decIndent();
        if (hasElseCase) {
          ctx.println("} else {");
          ctx.incIndent();
          this.visitAllStatements(stmt.falseCase, ctx);
          ctx.decIndent();
        }
      }
      ctx.println("}");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitThrowStmt = function(stmt, ctx) {
      ctx.print("throw ");
      stmt.error.visitExpression(this, ctx);
      ctx.println(";");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitCommentStmt = function(stmt, ctx) {
      var lines = stmt.comment.split('\n');
      lines.forEach(function(line) {
        ctx.println("// " + line);
      });
      return null;
    };
    AbstractEmitterVisitor.prototype.visitWriteVarExpr = function(expr, ctx) {
      var lineWasEmpty = ctx.lineIsEmpty();
      if (!lineWasEmpty) {
        ctx.print('(');
      }
      ctx.print(expr.name + " = ");
      expr.value.visitExpression(this, ctx);
      if (!lineWasEmpty) {
        ctx.print(')');
      }
      return null;
    };
    AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function(expr, ctx) {
      var lineWasEmpty = ctx.lineIsEmpty();
      if (!lineWasEmpty) {
        ctx.print('(');
      }
      expr.receiver.visitExpression(this, ctx);
      ctx.print("[");
      expr.index.visitExpression(this, ctx);
      ctx.print("] = ");
      expr.value.visitExpression(this, ctx);
      if (!lineWasEmpty) {
        ctx.print(')');
      }
      return null;
    };
    AbstractEmitterVisitor.prototype.visitWritePropExpr = function(expr, ctx) {
      var lineWasEmpty = ctx.lineIsEmpty();
      if (!lineWasEmpty) {
        ctx.print('(');
      }
      expr.receiver.visitExpression(this, ctx);
      ctx.print("." + expr.name + " = ");
      expr.value.visitExpression(this, ctx);
      if (!lineWasEmpty) {
        ctx.print(')');
      }
      return null;
    };
    AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function(expr, ctx) {
      expr.receiver.visitExpression(this, ctx);
      var name = expr.name;
      if (isPresent(expr.builtin)) {
        name = this.getBuiltinMethodName(expr.builtin);
        if (isBlank(name)) {
          return null;
        }
      }
      ctx.print("." + name + "(");
      this.visitAllExpressions(expr.args, ctx, ",");
      ctx.print(")");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function(expr, ctx) {
      expr.fn.visitExpression(this, ctx);
      ctx.print("(");
      this.visitAllExpressions(expr.args, ctx, ',');
      ctx.print(")");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitReadVarExpr = function(ast, ctx) {
      var varName = ast.name;
      if (isPresent(ast.builtin)) {
        switch (ast.builtin) {
          case BuiltinVar.Super:
            varName = 'super';
            break;
          case BuiltinVar.This:
            varName = 'this';
            break;
          case BuiltinVar.CatchError:
            varName = CATCH_ERROR_VAR$2.name;
            break;
          case BuiltinVar.CatchStack:
            varName = CATCH_STACK_VAR$2.name;
            break;
          default:
            throw new Error("Unknown builtin variable " + ast.builtin);
        }
      }
      ctx.print(varName);
      return null;
    };
    AbstractEmitterVisitor.prototype.visitInstantiateExpr = function(ast, ctx) {
      ctx.print("new ");
      ast.classExpr.visitExpression(this, ctx);
      ctx.print("(");
      this.visitAllExpressions(ast.args, ctx, ',');
      ctx.print(")");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitLiteralExpr = function(ast, ctx) {
      var value = ast.value;
      if (typeof value === 'string') {
        ctx.print(escapeIdentifier(value, this._escapeDollarInStrings));
      } else {
        ctx.print("" + value);
      }
      return null;
    };
    AbstractEmitterVisitor.prototype.visitConditionalExpr = function(ast, ctx) {
      ctx.print("(");
      ast.condition.visitExpression(this, ctx);
      ctx.print('? ');
      ast.trueCase.visitExpression(this, ctx);
      ctx.print(': ');
      ast.falseCase.visitExpression(this, ctx);
      ctx.print(")");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitNotExpr = function(ast, ctx) {
      ctx.print('!');
      ast.condition.visitExpression(this, ctx);
      return null;
    };
    AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function(ast, ctx) {
      var opStr;
      switch (ast.operator) {
        case BinaryOperator.Equals:
          opStr = '==';
          break;
        case BinaryOperator.Identical:
          opStr = '===';
          break;
        case BinaryOperator.NotEquals:
          opStr = '!=';
          break;
        case BinaryOperator.NotIdentical:
          opStr = '!==';
          break;
        case BinaryOperator.And:
          opStr = '&&';
          break;
        case BinaryOperator.Or:
          opStr = '||';
          break;
        case BinaryOperator.Plus:
          opStr = '+';
          break;
        case BinaryOperator.Minus:
          opStr = '-';
          break;
        case BinaryOperator.Divide:
          opStr = '/';
          break;
        case BinaryOperator.Multiply:
          opStr = '*';
          break;
        case BinaryOperator.Modulo:
          opStr = '%';
          break;
        case BinaryOperator.Lower:
          opStr = '<';
          break;
        case BinaryOperator.LowerEquals:
          opStr = '<=';
          break;
        case BinaryOperator.Bigger:
          opStr = '>';
          break;
        case BinaryOperator.BiggerEquals:
          opStr = '>=';
          break;
        default:
          throw new Error("Unknown operator " + ast.operator);
      }
      ctx.print("(");
      ast.lhs.visitExpression(this, ctx);
      ctx.print(" " + opStr + " ");
      ast.rhs.visitExpression(this, ctx);
      ctx.print(")");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitReadPropExpr = function(ast, ctx) {
      ast.receiver.visitExpression(this, ctx);
      ctx.print(".");
      ctx.print(ast.name);
      return null;
    };
    AbstractEmitterVisitor.prototype.visitReadKeyExpr = function(ast, ctx) {
      ast.receiver.visitExpression(this, ctx);
      ctx.print("[");
      ast.index.visitExpression(this, ctx);
      ctx.print("]");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function(ast, ctx) {
      var useNewLine = ast.entries.length > 1;
      ctx.print("[", useNewLine);
      ctx.incIndent();
      this.visitAllExpressions(ast.entries, ctx, ',', useNewLine);
      ctx.decIndent();
      ctx.print("]", useNewLine);
      return null;
    };
    AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function(ast, ctx) {
      var _this = this;
      var useNewLine = ast.entries.length > 1;
      ctx.print("{", useNewLine);
      ctx.incIndent();
      this.visitAllObjects(function(entry) {
        ctx.print(escapeIdentifier(entry[0], _this._escapeDollarInStrings, false) + ": ");
        entry[1].visitExpression(_this, ctx);
      }, ast.entries, ctx, ',', useNewLine);
      ctx.decIndent();
      ctx.print("}", useNewLine);
      return null;
    };
    AbstractEmitterVisitor.prototype.visitAllExpressions = function(expressions, ctx, separator, newLine) {
      var _this = this;
      if (newLine === void 0) {
        newLine = false;
      }
      this.visitAllObjects(function(expr) {
        return expr.visitExpression(_this, ctx);
      }, expressions, ctx, separator, newLine);
    };
    AbstractEmitterVisitor.prototype.visitAllObjects = function(handler, expressions, ctx, separator, newLine) {
      if (newLine === void 0) {
        newLine = false;
      }
      for (var i = 0; i < expressions.length; i++) {
        if (i > 0) {
          ctx.print(separator, newLine);
        }
        handler(expressions[i]);
      }
      if (newLine) {
        ctx.println();
      }
    };
    AbstractEmitterVisitor.prototype.visitAllStatements = function(statements, ctx) {
      var _this = this;
      statements.forEach(function(stmt) {
        return stmt.visitStatement(_this, ctx);
      });
    };
    return AbstractEmitterVisitor;
  }());
  function escapeIdentifier(input, escapeDollar, alwaysQuote) {
    if (alwaysQuote === void 0) {
      alwaysQuote = true;
    }
    if (isBlank(input)) {
      return null;
    }
    var body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, function() {
      var match = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        match[_i - 0] = arguments[_i];
      }
      if (match[0] == '$') {
        return escapeDollar ? '\\$' : '$';
      } else if (match[0] == '\n') {
        return '\\n';
      } else if (match[0] == '\r') {
        return '\\r';
      } else {
        return "\\" + match[0];
      }
    });
    var requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
    return requiresQuotes ? "'" + body + "'" : body;
  }
  function _createIndent(count) {
    var res = '';
    for (var i = 0; i < count; i++) {
      res += '  ';
    }
    return res;
  }
  var __extends$18 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var _debugModuleUrl = 'asset://debug/lib';
  function debugOutputAstAsTypeScript(ast) {
    var converter = new _TsEmitterVisitor(_debugModuleUrl);
    var ctx = EmitterVisitorContext.createRoot([]);
    var asts = Array.isArray(ast) ? ast : [ast];
    asts.forEach(function(ast) {
      if (ast instanceof Statement) {
        ast.visitStatement(converter, ctx);
      } else if (ast instanceof Expression) {
        ast.visitExpression(converter, ctx);
      } else if (ast instanceof Type$1) {
        ast.visitType(converter, ctx);
      } else {
        throw new Error("Don't know how to print debug info for " + ast);
      }
    });
    return ctx.toSource();
  }
  var TypeScriptEmitter = (function() {
    function TypeScriptEmitter(_importGenerator) {
      this._importGenerator = _importGenerator;
    }
    TypeScriptEmitter.prototype.emitStatements = function(moduleUrl, stmts, exportedVars) {
      var _this = this;
      var converter = new _TsEmitterVisitor(moduleUrl);
      var ctx = EmitterVisitorContext.createRoot(exportedVars);
      converter.visitAllStatements(stmts, ctx);
      var srcParts = [];
      converter.importsWithPrefixes.forEach(function(prefix, importedModuleUrl) {
        srcParts.push("imp" + ("ort * as " + prefix + " from '" + _this._importGenerator.getImportPath(moduleUrl, importedModuleUrl) + "';"));
      });
      srcParts.push(ctx.toSource());
      return srcParts.join('\n');
    };
    return TypeScriptEmitter;
  }());
  var _TsEmitterVisitor = (function(_super) {
    __extends$18(_TsEmitterVisitor, _super);
    function _TsEmitterVisitor(_moduleUrl) {
      _super.call(this, false);
      this._moduleUrl = _moduleUrl;
      this.importsWithPrefixes = new Map();
    }
    _TsEmitterVisitor.prototype.visitType = function(t, ctx, defaultType) {
      if (defaultType === void 0) {
        defaultType = 'any';
      }
      if (isPresent(t)) {
        t.visitType(this, ctx);
      } else {
        ctx.print(defaultType);
      }
    };
    _TsEmitterVisitor.prototype.visitLiteralExpr = function(ast, ctx) {
      var value = ast.value;
      if (isBlank(value) && ast.type != NULL_TYPE) {
        ctx.print("(" + value + " as any)");
        return null;
      }
      return _super.prototype.visitLiteralExpr.call(this, ast, ctx);
    };
    _TsEmitterVisitor.prototype.visitLiteralArrayExpr = function(ast, ctx) {
      if (ast.entries.length === 0) {
        ctx.print('(');
      }
      var result = _super.prototype.visitLiteralArrayExpr.call(this, ast, ctx);
      if (ast.entries.length === 0) {
        ctx.print(' as any[])');
      }
      return result;
    };
    _TsEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {
      this._visitIdentifier(ast.value, ast.typeParams, ctx);
      return null;
    };
    _TsEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {
      if (ctx.isExportedVar(stmt.name)) {
        ctx.print("export ");
      }
      if (stmt.hasModifier(StmtModifier.Final)) {
        ctx.print("const");
      } else {
        ctx.print("var");
      }
      ctx.print(" " + stmt.name + ":");
      this.visitType(stmt.type, ctx);
      ctx.print(" = ");
      stmt.value.visitExpression(this, ctx);
      ctx.println(";");
      return null;
    };
    _TsEmitterVisitor.prototype.visitCastExpr = function(ast, ctx) {
      ctx.print("(<");
      ast.type.visitType(this, ctx);
      ctx.print(">");
      ast.value.visitExpression(this, ctx);
      ctx.print(")");
      return null;
    };
    _TsEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {
      var _this = this;
      ctx.pushClass(stmt);
      if (ctx.isExportedVar(stmt.name)) {
        ctx.print("export ");
      }
      ctx.print("class " + stmt.name);
      if (isPresent(stmt.parent)) {
        ctx.print(" extends ");
        stmt.parent.visitExpression(this, ctx);
      }
      ctx.println(" {");
      ctx.incIndent();
      stmt.fields.forEach(function(field) {
        return _this._visitClassField(field, ctx);
      });
      if (isPresent(stmt.constructorMethod)) {
        this._visitClassConstructor(stmt, ctx);
      }
      stmt.getters.forEach(function(getter) {
        return _this._visitClassGetter(getter, ctx);
      });
      stmt.methods.forEach(function(method) {
        return _this._visitClassMethod(method, ctx);
      });
      ctx.decIndent();
      ctx.println("}");
      ctx.popClass();
      return null;
    };
    _TsEmitterVisitor.prototype._visitClassField = function(field, ctx) {
      if (field.hasModifier(StmtModifier.Private)) {
        ctx.print("/*private*/ ");
      }
      ctx.print(field.name);
      ctx.print(':');
      this.visitType(field.type, ctx);
      ctx.println(";");
    };
    _TsEmitterVisitor.prototype._visitClassGetter = function(getter, ctx) {
      if (getter.hasModifier(StmtModifier.Private)) {
        ctx.print("private ");
      }
      ctx.print("get " + getter.name + "()");
      ctx.print(':');
      this.visitType(getter.type, ctx);
      ctx.println(" {");
      ctx.incIndent();
      this.visitAllStatements(getter.body, ctx);
      ctx.decIndent();
      ctx.println("}");
    };
    _TsEmitterVisitor.prototype._visitClassConstructor = function(stmt, ctx) {
      ctx.print("constructor(");
      this._visitParams(stmt.constructorMethod.params, ctx);
      ctx.println(") {");
      ctx.incIndent();
      this.visitAllStatements(stmt.constructorMethod.body, ctx);
      ctx.decIndent();
      ctx.println("}");
    };
    _TsEmitterVisitor.prototype._visitClassMethod = function(method, ctx) {
      if (method.hasModifier(StmtModifier.Private)) {
        ctx.print("private ");
      }
      ctx.print(method.name + "(");
      this._visitParams(method.params, ctx);
      ctx.print("):");
      this.visitType(method.type, ctx, 'void');
      ctx.println(" {");
      ctx.incIndent();
      this.visitAllStatements(method.body, ctx);
      ctx.decIndent();
      ctx.println("}");
    };
    _TsEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {
      ctx.print("(");
      this._visitParams(ast.params, ctx);
      ctx.print("):");
      this.visitType(ast.type, ctx, 'void');
      ctx.println(" => {");
      ctx.incIndent();
      this.visitAllStatements(ast.statements, ctx);
      ctx.decIndent();
      ctx.print("}");
      return null;
    };
    _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
      if (ctx.isExportedVar(stmt.name)) {
        ctx.print("export ");
      }
      ctx.print("function " + stmt.name + "(");
      this._visitParams(stmt.params, ctx);
      ctx.print("):");
      this.visitType(stmt.type, ctx, 'void');
      ctx.println(" {");
      ctx.incIndent();
      this.visitAllStatements(stmt.statements, ctx);
      ctx.decIndent();
      ctx.println("}");
      return null;
    };
    _TsEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {
      ctx.println("try {");
      ctx.incIndent();
      this.visitAllStatements(stmt.bodyStmts, ctx);
      ctx.decIndent();
      ctx.println("} catch (" + CATCH_ERROR_VAR$2.name + ") {");
      ctx.incIndent();
      var catchStmts = [CATCH_STACK_VAR$2.set(CATCH_ERROR_VAR$2.prop('stack')).toDeclStmt(null, [StmtModifier.Final])].concat(stmt.catchStmts);
      this.visitAllStatements(catchStmts, ctx);
      ctx.decIndent();
      ctx.println("}");
      return null;
    };
    _TsEmitterVisitor.prototype.visitBuiltintType = function(type, ctx) {
      var typeStr;
      switch (type.name) {
        case BuiltinTypeName.Bool:
          typeStr = 'boolean';
          break;
        case BuiltinTypeName.Dynamic:
          typeStr = 'any';
          break;
        case BuiltinTypeName.Function:
          typeStr = 'Function';
          break;
        case BuiltinTypeName.Number:
          typeStr = 'number';
          break;
        case BuiltinTypeName.Int:
          typeStr = 'number';
          break;
        case BuiltinTypeName.String:
          typeStr = 'string';
          break;
        default:
          throw new Error("Unsupported builtin type " + type.name);
      }
      ctx.print(typeStr);
      return null;
    };
    _TsEmitterVisitor.prototype.visitExternalType = function(ast, ctx) {
      this._visitIdentifier(ast.value, ast.typeParams, ctx);
      return null;
    };
    _TsEmitterVisitor.prototype.visitArrayType = function(type, ctx) {
      this.visitType(type.of, ctx);
      ctx.print("[]");
      return null;
    };
    _TsEmitterVisitor.prototype.visitMapType = function(type, ctx) {
      ctx.print("{[key: string]:");
      this.visitType(type.valueType, ctx);
      ctx.print("}");
      return null;
    };
    _TsEmitterVisitor.prototype.getBuiltinMethodName = function(method) {
      var name;
      switch (method) {
        case BuiltinMethod.ConcatArray:
          name = 'concat';
          break;
        case BuiltinMethod.SubscribeObservable:
          name = 'subscribe';
          break;
        case BuiltinMethod.Bind:
          name = 'bind';
          break;
        default:
          throw new Error("Unknown builtin method: " + method);
      }
      return name;
    };
    _TsEmitterVisitor.prototype._visitParams = function(params, ctx) {
      var _this = this;
      this.visitAllObjects(function(param) {
        ctx.print(param.name);
        ctx.print(':');
        _this.visitType(param.type, ctx);
      }, params, ctx, ',');
    };
    _TsEmitterVisitor.prototype._visitIdentifier = function(value, typeParams, ctx) {
      var _this = this;
      if (isBlank(value.name)) {
        throw new Error("Internal error: unknown identifier " + value);
      }
      if (isPresent(value.moduleUrl) && value.moduleUrl != this._moduleUrl) {
        var prefix = this.importsWithPrefixes.get(value.moduleUrl);
        if (isBlank(prefix)) {
          prefix = "import" + this.importsWithPrefixes.size;
          this.importsWithPrefixes.set(value.moduleUrl, prefix);
        }
        ctx.print(prefix + ".");
      }
      if (value.reference && value.reference.members) {
        ctx.print(value.reference.name);
        ctx.print('.');
        ctx.print(value.reference.members.join('.'));
      } else {
        ctx.print(value.name);
      }
      if (isPresent(typeParams) && typeParams.length > 0) {
        ctx.print("<");
        this.visitAllObjects(function(type) {
          return type.visitType(_this, ctx);
        }, typeParams, ctx, ',');
        ctx.print(">");
      }
    };
    return _TsEmitterVisitor;
  }(AbstractEmitterVisitor));
  function interpretStatements(statements, resultVar) {
    var stmtsWithReturn = statements.concat([new ReturnStatement(variable(resultVar))]);
    var ctx = new _ExecutionContext(null, null, null, new Map());
    var visitor = new StatementInterpreter();
    var result = visitor.visitAllStatements(stmtsWithReturn, ctx);
    return isPresent(result) ? result.value : null;
  }
  function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
    var childCtx = ctx.createChildWihtLocalVars();
    for (var i = 0; i < varNames.length; i++) {
      childCtx.vars.set(varNames[i], varValues[i]);
    }
    var result = visitor.visitAllStatements(statements, childCtx);
    return isPresent(result) ? result.value : null;
  }
  var _ExecutionContext = (function() {
    function _ExecutionContext(parent, instance, className, vars) {
      this.parent = parent;
      this.instance = instance;
      this.className = className;
      this.vars = vars;
    }
    _ExecutionContext.prototype.createChildWihtLocalVars = function() {
      return new _ExecutionContext(this, this.instance, this.className, new Map());
    };
    return _ExecutionContext;
  }());
  var ReturnValue = (function() {
    function ReturnValue(value) {
      this.value = value;
    }
    return ReturnValue;
  }());
  function createDynamicClass(_classStmt, _ctx, _visitor) {
    var propertyDescriptors = {};
    _classStmt.getters.forEach(function(getter) {
      propertyDescriptors[getter.name] = {
        configurable: false,
        get: function() {
          var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
          return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);
        }
      };
    });
    _classStmt.methods.forEach(function(method) {
      var paramNames = method.params.map(function(param) {
        return param.name;
      });
      propertyDescriptors[method.name] = {
        writable: false,
        configurable: false,
        value: function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
          }
          var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
          return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);
        }
      };
    });
    var ctorParamNames = _classStmt.constructorMethod.params.map(function(param) {
      return param.name;
    });
    var ctor = function() {
      var _this = this;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
      _classStmt.fields.forEach(function(field) {
        _this[field.name] = undefined;
      });
      _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);
    };
    var superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;
    ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);
    return ctor;
  }
  var StatementInterpreter = (function() {
    function StatementInterpreter() {}
    StatementInterpreter.prototype.debugAst = function(ast) {
      return debugOutputAstAsTypeScript(ast);
    };
    StatementInterpreter.prototype.visitDeclareVarStmt = function(stmt, ctx) {
      ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));
      return null;
    };
    StatementInterpreter.prototype.visitWriteVarExpr = function(expr, ctx) {
      var value = expr.value.visitExpression(this, ctx);
      var currCtx = ctx;
      while (currCtx != null) {
        if (currCtx.vars.has(expr.name)) {
          currCtx.vars.set(expr.name, value);
          return value;
        }
        currCtx = currCtx.parent;
      }
      throw new Error("Not declared variable " + expr.name);
    };
    StatementInterpreter.prototype.visitReadVarExpr = function(ast, ctx) {
      var varName = ast.name;
      if (isPresent(ast.builtin)) {
        switch (ast.builtin) {
          case BuiltinVar.Super:
            return ctx.instance.__proto__;
          case BuiltinVar.This:
            return ctx.instance;
          case BuiltinVar.CatchError:
            varName = CATCH_ERROR_VAR$1;
            break;
          case BuiltinVar.CatchStack:
            varName = CATCH_STACK_VAR$1;
            break;
          default:
            throw new Error("Unknown builtin variable " + ast.builtin);
        }
      }
      var currCtx = ctx;
      while (currCtx != null) {
        if (currCtx.vars.has(varName)) {
          return currCtx.vars.get(varName);
        }
        currCtx = currCtx.parent;
      }
      throw new Error("Not declared variable " + varName);
    };
    StatementInterpreter.prototype.visitWriteKeyExpr = function(expr, ctx) {
      var receiver = expr.receiver.visitExpression(this, ctx);
      var index = expr.index.visitExpression(this, ctx);
      var value = expr.value.visitExpression(this, ctx);
      receiver[index] = value;
      return value;
    };
    StatementInterpreter.prototype.visitWritePropExpr = function(expr, ctx) {
      var receiver = expr.receiver.visitExpression(this, ctx);
      var value = expr.value.visitExpression(this, ctx);
      receiver[expr.name] = value;
      return value;
    };
    StatementInterpreter.prototype.visitInvokeMethodExpr = function(expr, ctx) {
      var receiver = expr.receiver.visitExpression(this, ctx);
      var args = this.visitAllExpressions(expr.args, ctx);
      var result;
      if (isPresent(expr.builtin)) {
        switch (expr.builtin) {
          case BuiltinMethod.ConcatArray:
            result = receiver.concat.apply(receiver, args);
            break;
          case BuiltinMethod.SubscribeObservable:
            result = receiver.subscribe({next: args[0]});
            break;
          case BuiltinMethod.Bind:
            result = receiver.bind.apply(receiver, args);
            break;
          default:
            throw new Error("Unknown builtin method " + expr.builtin);
        }
      } else {
        result = receiver[expr.name].apply(receiver, args);
      }
      return result;
    };
    StatementInterpreter.prototype.visitInvokeFunctionExpr = function(stmt, ctx) {
      var args = this.visitAllExpressions(stmt.args, ctx);
      var fnExpr = stmt.fn;
      if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
        ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);
        return null;
      } else {
        var fn = stmt.fn.visitExpression(this, ctx);
        return fn.apply(null, args);
      }
    };
    StatementInterpreter.prototype.visitReturnStmt = function(stmt, ctx) {
      return new ReturnValue(stmt.value.visitExpression(this, ctx));
    };
    StatementInterpreter.prototype.visitDeclareClassStmt = function(stmt, ctx) {
      var clazz = createDynamicClass(stmt, ctx, this);
      ctx.vars.set(stmt.name, clazz);
      return null;
    };
    StatementInterpreter.prototype.visitExpressionStmt = function(stmt, ctx) {
      return stmt.expr.visitExpression(this, ctx);
    };
    StatementInterpreter.prototype.visitIfStmt = function(stmt, ctx) {
      var condition = stmt.condition.visitExpression(this, ctx);
      if (condition) {
        return this.visitAllStatements(stmt.trueCase, ctx);
      } else if (isPresent(stmt.falseCase)) {
        return this.visitAllStatements(stmt.falseCase, ctx);
      }
      return null;
    };
    StatementInterpreter.prototype.visitTryCatchStmt = function(stmt, ctx) {
      try {
        return this.visitAllStatements(stmt.bodyStmts, ctx);
      } catch (e) {
        var childCtx = ctx.createChildWihtLocalVars();
        childCtx.vars.set(CATCH_ERROR_VAR$1, e);
        childCtx.vars.set(CATCH_STACK_VAR$1, e.stack);
        return this.visitAllStatements(stmt.catchStmts, childCtx);
      }
    };
    StatementInterpreter.prototype.visitThrowStmt = function(stmt, ctx) {
      throw stmt.error.visitExpression(this, ctx);
    };
    StatementInterpreter.prototype.visitCommentStmt = function(stmt, context) {
      return null;
    };
    StatementInterpreter.prototype.visitInstantiateExpr = function(ast, ctx) {
      var args = this.visitAllExpressions(ast.args, ctx);
      var clazz = ast.classExpr.visitExpression(this, ctx);
      return new (clazz.bind.apply(clazz, [void 0].concat(args)))();
    };
    StatementInterpreter.prototype.visitLiteralExpr = function(ast, ctx) {
      return ast.value;
    };
    StatementInterpreter.prototype.visitExternalExpr = function(ast, ctx) {
      return ast.value.reference;
    };
    StatementInterpreter.prototype.visitConditionalExpr = function(ast, ctx) {
      if (ast.condition.visitExpression(this, ctx)) {
        return ast.trueCase.visitExpression(this, ctx);
      } else if (isPresent(ast.falseCase)) {
        return ast.falseCase.visitExpression(this, ctx);
      }
      return null;
    };
    StatementInterpreter.prototype.visitNotExpr = function(ast, ctx) {
      return !ast.condition.visitExpression(this, ctx);
    };
    StatementInterpreter.prototype.visitCastExpr = function(ast, ctx) {
      return ast.value.visitExpression(this, ctx);
    };
    StatementInterpreter.prototype.visitFunctionExpr = function(ast, ctx) {
      var paramNames = ast.params.map(function(param) {
        return param.name;
      });
      return _declareFn(paramNames, ast.statements, ctx, this);
    };
    StatementInterpreter.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
      var paramNames = stmt.params.map(function(param) {
        return param.name;
      });
      ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));
      return null;
    };
    StatementInterpreter.prototype.visitBinaryOperatorExpr = function(ast, ctx) {
      var _this = this;
      var lhs = function() {
        return ast.lhs.visitExpression(_this, ctx);
      };
      var rhs = function() {
        return ast.rhs.visitExpression(_this, ctx);
      };
      switch (ast.operator) {
        case BinaryOperator.Equals:
          return lhs() == rhs();
        case BinaryOperator.Identical:
          return lhs() === rhs();
        case BinaryOperator.NotEquals:
          return lhs() != rhs();
        case BinaryOperator.NotIdentical:
          return lhs() !== rhs();
        case BinaryOperator.And:
          return lhs() && rhs();
        case BinaryOperator.Or:
          return lhs() || rhs();
        case BinaryOperator.Plus:
          return lhs() + rhs();
        case BinaryOperator.Minus:
          return lhs() - rhs();
        case BinaryOperator.Divide:
          return lhs() / rhs();
        case BinaryOperator.Multiply:
          return lhs() * rhs();
        case BinaryOperator.Modulo:
          return lhs() % rhs();
        case BinaryOperator.Lower:
          return lhs() < rhs();
        case BinaryOperator.LowerEquals:
          return lhs() <= rhs();
        case BinaryOperator.Bigger:
          return lhs() > rhs();
        case BinaryOperator.BiggerEquals:
          return lhs() >= rhs();
        default:
          throw new Error("Unknown operator " + ast.operator);
      }
    };
    StatementInterpreter.prototype.visitReadPropExpr = function(ast, ctx) {
      var result;
      var receiver = ast.receiver.visitExpression(this, ctx);
      result = receiver[ast.name];
      return result;
    };
    StatementInterpreter.prototype.visitReadKeyExpr = function(ast, ctx) {
      var receiver = ast.receiver.visitExpression(this, ctx);
      var prop = ast.index.visitExpression(this, ctx);
      return receiver[prop];
    };
    StatementInterpreter.prototype.visitLiteralArrayExpr = function(ast, ctx) {
      return this.visitAllExpressions(ast.entries, ctx);
    };
    StatementInterpreter.prototype.visitLiteralMapExpr = function(ast, ctx) {
      var _this = this;
      var result = {};
      ast.entries.forEach(function(entry) {
        return result[entry[0]] = entry[1].visitExpression(_this, ctx);
      });
      return result;
    };
    StatementInterpreter.prototype.visitAllExpressions = function(expressions, ctx) {
      var _this = this;
      return expressions.map(function(expr) {
        return expr.visitExpression(_this, ctx);
      });
    };
    StatementInterpreter.prototype.visitAllStatements = function(statements, ctx) {
      for (var i = 0; i < statements.length; i++) {
        var stmt = statements[i];
        var val = stmt.visitStatement(this, ctx);
        if (val instanceof ReturnValue) {
          return val;
        }
      }
      return null;
    };
    return StatementInterpreter;
  }());
  function _declareFn(varNames, statements, ctx, visitor) {
    return function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      return _executeFunctionStatements(varNames, args, statements, ctx, visitor);
    };
  }
  var CATCH_ERROR_VAR$1 = 'error';
  var CATCH_STACK_VAR$1 = 'stack';
  var __extends$20 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AbstractJsEmitterVisitor = (function(_super) {
    __extends$20(AbstractJsEmitterVisitor, _super);
    function AbstractJsEmitterVisitor() {
      _super.call(this, false);
    }
    AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {
      var _this = this;
      ctx.pushClass(stmt);
      this._visitClassConstructor(stmt, ctx);
      if (isPresent(stmt.parent)) {
        ctx.print(stmt.name + ".prototype = Object.create(");
        stmt.parent.visitExpression(this, ctx);
        ctx.println(".prototype);");
      }
      stmt.getters.forEach(function(getter) {
        return _this._visitClassGetter(stmt, getter, ctx);
      });
      stmt.methods.forEach(function(method) {
        return _this._visitClassMethod(stmt, method, ctx);
      });
      ctx.popClass();
      return null;
    };
    AbstractJsEmitterVisitor.prototype._visitClassConstructor = function(stmt, ctx) {
      ctx.print("function " + stmt.name + "(");
      if (isPresent(stmt.constructorMethod)) {
        this._visitParams(stmt.constructorMethod.params, ctx);
      }
      ctx.println(") {");
      ctx.incIndent();
      if (isPresent(stmt.constructorMethod)) {
        if (stmt.constructorMethod.body.length > 0) {
          ctx.println("var self = this;");
          this.visitAllStatements(stmt.constructorMethod.body, ctx);
        }
      }
      ctx.decIndent();
      ctx.println("}");
    };
    AbstractJsEmitterVisitor.prototype._visitClassGetter = function(stmt, getter, ctx) {
      ctx.println("Object.defineProperty(" + stmt.name + ".prototype, '" + getter.name + "', { get: function() {");
      ctx.incIndent();
      if (getter.body.length > 0) {
        ctx.println("var self = this;");
        this.visitAllStatements(getter.body, ctx);
      }
      ctx.decIndent();
      ctx.println("}});");
    };
    AbstractJsEmitterVisitor.prototype._visitClassMethod = function(stmt, method, ctx) {
      ctx.print(stmt.name + ".prototype." + method.name + " = function(");
      this._visitParams(method.params, ctx);
      ctx.println(") {");
      ctx.incIndent();
      if (method.body.length > 0) {
        ctx.println("var self = this;");
        this.visitAllStatements(method.body, ctx);
      }
      ctx.decIndent();
      ctx.println("};");
    };
    AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function(ast, ctx) {
      if (ast.builtin === BuiltinVar.This) {
        ctx.print('self');
      } else if (ast.builtin === BuiltinVar.Super) {
        throw new Error("'super' needs to be handled at a parent ast node, not at the variable level!");
      } else {
        _super.prototype.visitReadVarExpr.call(this, ast, ctx);
      }
      return null;
    };
    AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {
      ctx.print("var " + stmt.name + " = ");
      stmt.value.visitExpression(this, ctx);
      ctx.println(";");
      return null;
    };
    AbstractJsEmitterVisitor.prototype.visitCastExpr = function(ast, ctx) {
      ast.value.visitExpression(this, ctx);
      return null;
    };
    AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function(expr, ctx) {
      var fnExpr = expr.fn;
      if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
        ctx.currentClass.parent.visitExpression(this, ctx);
        ctx.print(".call(this");
        if (expr.args.length > 0) {
          ctx.print(", ");
          this.visitAllExpressions(expr.args, ctx, ',');
        }
        ctx.print(")");
      } else {
        _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx);
      }
      return null;
    };
    AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {
      ctx.print("function(");
      this._visitParams(ast.params, ctx);
      ctx.println(") {");
      ctx.incIndent();
      this.visitAllStatements(ast.statements, ctx);
      ctx.decIndent();
      ctx.print("}");
      return null;
    };
    AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
      ctx.print("function " + stmt.name + "(");
      this._visitParams(stmt.params, ctx);
      ctx.println(") {");
      ctx.incIndent();
      this.visitAllStatements(stmt.statements, ctx);
      ctx.decIndent();
      ctx.println("}");
      return null;
    };
    AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {
      ctx.println("try {");
      ctx.incIndent();
      this.visitAllStatements(stmt.bodyStmts, ctx);
      ctx.decIndent();
      ctx.println("} catch (" + CATCH_ERROR_VAR$2.name + ") {");
      ctx.incIndent();
      var catchStmts = [CATCH_STACK_VAR$2.set(CATCH_ERROR_VAR$2.prop('stack')).toDeclStmt(null, [StmtModifier.Final])].concat(stmt.catchStmts);
      this.visitAllStatements(catchStmts, ctx);
      ctx.decIndent();
      ctx.println("}");
      return null;
    };
    AbstractJsEmitterVisitor.prototype._visitParams = function(params, ctx) {
      this.visitAllObjects(function(param) {
        return ctx.print(param.name);
      }, params, ctx, ',');
    };
    AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function(method) {
      var name;
      switch (method) {
        case BuiltinMethod.ConcatArray:
          name = 'concat';
          break;
        case BuiltinMethod.SubscribeObservable:
          name = 'subscribe';
          break;
        case BuiltinMethod.Bind:
          name = 'bind';
          break;
        default:
          throw new Error("Unknown builtin method: " + method);
      }
      return name;
    };
    return AbstractJsEmitterVisitor;
  }(AbstractEmitterVisitor));
  var __extends$19 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  function evalExpression(sourceUrl, expr, declarations, vars) {
    var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
    var fnArgNames = [];
    var fnArgValues = [];
    for (var argName in vars) {
      fnArgNames.push(argName);
      fnArgValues.push(vars[argName]);
    }
    return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
  }
  function jitStatements(sourceUrl, statements, resultVar) {
    var converter = new JitEmitterVisitor();
    var ctx = EmitterVisitorContext.createRoot([resultVar]);
    converter.visitAllStatements(statements, ctx);
    return evalExpression(sourceUrl, resultVar, ctx.toSource(), converter.getArgs());
  }
  var JitEmitterVisitor = (function(_super) {
    __extends$19(JitEmitterVisitor, _super);
    function JitEmitterVisitor() {
      _super.apply(this, arguments);
      this._evalArgNames = [];
      this._evalArgValues = [];
    }
    JitEmitterVisitor.prototype.getArgs = function() {
      var result = {};
      for (var i = 0; i < this._evalArgNames.length; i++) {
        result[this._evalArgNames[i]] = this._evalArgValues[i];
      }
      return result;
    };
    JitEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {
      var value = ast.value.reference;
      var id = this._evalArgValues.indexOf(value);
      if (id === -1) {
        id = this._evalArgValues.length;
        this._evalArgValues.push(value);
        var name_1 = isPresent(ast.value.name) ? sanitizeIdentifier(ast.value.name) : 'val';
        this._evalArgNames.push(sanitizeIdentifier("jit_" + name_1 + id));
      }
      ctx.print(this._evalArgNames[id]);
      return null;
    };
    return JitEmitterVisitor;
  }(AbstractJsEmitterVisitor));
  var ShadowCss = (function() {
    function ShadowCss() {
      this.strictStyling = true;
    }
    ShadowCss.prototype.shimCssText = function(cssText, selector, hostSelector) {
      if (hostSelector === void 0) {
        hostSelector = '';
      }
      var sourceMappingUrl = extractSourceMappingUrl(cssText);
      cssText = stripComments(cssText);
      cssText = this._insertDirectives(cssText);
      return this._scopeCssText(cssText, selector, hostSelector) + sourceMappingUrl;
    };
    ShadowCss.prototype._insertDirectives = function(cssText) {
      cssText = this._insertPolyfillDirectivesInCssText(cssText);
      return this._insertPolyfillRulesInCssText(cssText);
    };
    ShadowCss.prototype._insertPolyfillDirectivesInCssText = function(cssText) {
      return cssText.replace(_cssContentNextSelectorRe, function() {
        var m = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          m[_i - 0] = arguments[_i];
        }
        return m[2] + '{';
      });
    };
    ShadowCss.prototype._insertPolyfillRulesInCssText = function(cssText) {
      return cssText.replace(_cssContentRuleRe, function() {
        var m = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          m[_i - 0] = arguments[_i];
        }
        var rule = m[0].replace(m[1], '').replace(m[2], '');
        return m[4] + rule;
      });
    };
    ShadowCss.prototype._scopeCssText = function(cssText, scopeSelector, hostSelector) {
      var unscopedRules = this._extractUnscopedRulesFromCssText(cssText);
      cssText = this._insertPolyfillHostInCssText(cssText);
      cssText = this._convertColonHost(cssText);
      cssText = this._convertColonHostContext(cssText);
      cssText = this._convertShadowDOMSelectors(cssText);
      if (scopeSelector) {
        cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
      }
      cssText = cssText + '\n' + unscopedRules;
      return cssText.trim();
    };
    ShadowCss.prototype._extractUnscopedRulesFromCssText = function(cssText) {
      var r = '';
      var m;
      _cssContentUnscopedRuleRe.lastIndex = 0;
      while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
        var rule = m[0].replace(m[2], '').replace(m[1], m[4]);
        r += rule + '\n\n';
      }
      return r;
    };
    ShadowCss.prototype._convertColonHost = function(cssText) {
      return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
    };
    ShadowCss.prototype._convertColonHostContext = function(cssText) {
      return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
    };
    ShadowCss.prototype._convertColonRule = function(cssText, regExp, partReplacer) {
      return cssText.replace(regExp, function() {
        var m = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          m[_i - 0] = arguments[_i];
        }
        if (m[2]) {
          var parts = m[2].split(',');
          var r = [];
          for (var i = 0; i < parts.length; i++) {
            var p = parts[i].trim();
            if (!p)
              break;
            r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
          }
          return r.join(',');
        } else {
          return _polyfillHostNoCombinator + m[3];
        }
      });
    };
    ShadowCss.prototype._colonHostContextPartReplacer = function(host, part, suffix) {
      if (part.indexOf(_polyfillHost) > -1) {
        return this._colonHostPartReplacer(host, part, suffix);
      } else {
        return host + part + suffix + ', ' + part + ' ' + host + suffix;
      }
    };
    ShadowCss.prototype._colonHostPartReplacer = function(host, part, suffix) {
      return host + part.replace(_polyfillHost, '') + suffix;
    };
    ShadowCss.prototype._convertShadowDOMSelectors = function(cssText) {
      return _shadowDOMSelectorsRe.reduce(function(result, pattern) {
        return result.replace(pattern, ' ');
      }, cssText);
    };
    ShadowCss.prototype._scopeSelectors = function(cssText, scopeSelector, hostSelector) {
      var _this = this;
      return processRules(cssText, function(rule) {
        var selector = rule.selector;
        var content = rule.content;
        if (rule.selector[0] != '@') {
          selector = _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);
        } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {
          content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
        }
        return new CssRule(selector, content);
      });
    };
    ShadowCss.prototype._scopeSelector = function(selector, scopeSelector, hostSelector, strict) {
      var _this = this;
      return selector.split(',').map(function(part) {
        return part.trim().split(_shadowDeepSelectors);
      }).map(function(deepParts) {
        var shallowPart = deepParts[0],
            otherParts = deepParts.slice(1);
        var applyScope = function(shallowPart) {
          if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {
            return strict ? _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) : _this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
          } else {
            return shallowPart;
          }
        };
        return [applyScope(shallowPart)].concat(otherParts).join(' ');
      }).join(', ');
    };
    ShadowCss.prototype._selectorNeedsScoping = function(selector, scopeSelector) {
      var re = this._makeScopeMatcher(scopeSelector);
      return !re.test(selector);
    };
    ShadowCss.prototype._makeScopeMatcher = function(scopeSelector) {
      var lre = /\[/g;
      var rre = /\]/g;
      scopeSelector = scopeSelector.replace(lre, '\\[').replace(rre, '\\]');
      return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
    };
    ShadowCss.prototype._applySelectorScope = function(selector, scopeSelector, hostSelector) {
      return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
    };
    ShadowCss.prototype._applySimpleSelectorScope = function(selector, scopeSelector, hostSelector) {
      _polyfillHostRe.lastIndex = 0;
      if (_polyfillHostRe.test(selector)) {
        var replaceBy_1 = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
        return selector.replace(_polyfillHostNoCombinatorRe, function(hnc, selector) {
          return selector.replace(/([^:]*)(:*)(.*)/, function(_, before, colon, after) {
            return before + replaceBy_1 + colon + after;
          });
        }).replace(_polyfillHostRe, replaceBy_1 + ' ');
      }
      return scopeSelector + ' ' + selector;
    };
    ShadowCss.prototype._applyStrictSelectorScope = function(selector, scopeSelector, hostSelector) {
      var _this = this;
      var isRe = /\[is=([^\]]*)\]/g;
      scopeSelector = scopeSelector.replace(isRe, function(_) {
        var parts = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          parts[_i - 1] = arguments[_i];
        }
        return parts[0];
      });
      var attrName = '[' + scopeSelector + ']';
      var _scopeSelectorPart = function(p) {
        var scopedP = p.trim();
        if (!scopedP) {
          return '';
        }
        if (p.indexOf(_polyfillHostNoCombinator) > -1) {
          scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);
        } else {
          var t = p.replace(_polyfillHostRe, '');
          if (t.length > 0) {
            var matches = t.match(/([^:]*)(:*)(.*)/);
            if (matches) {
              scopedP = matches[1] + attrName + matches[2] + matches[3];
            }
          }
        }
        return scopedP;
      };
      var safeContent = new SafeSelector(selector);
      selector = safeContent.content();
      var scopedSelector = '';
      var startIndex = 0;
      var res;
      var sep = /( |>|\+|~(?!=))\s*/g;
      var scopeAfter = selector.indexOf(_polyfillHostNoCombinator);
      while ((res = sep.exec(selector)) !== null) {
        var separator = res[1];
        var part = selector.slice(startIndex, res.index).trim();
        var scopedPart = startIndex >= scopeAfter ? _scopeSelectorPart(part) : part;
        scopedSelector += scopedPart + " " + separator + " ";
        startIndex = sep.lastIndex;
      }
      scopedSelector += _scopeSelectorPart(selector.substring(startIndex));
      return safeContent.restore(scopedSelector);
    };
    ShadowCss.prototype._insertPolyfillHostInCssText = function(selector) {
      return selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost);
    };
    return ShadowCss;
  }());
  var SafeSelector = (function() {
    function SafeSelector(selector) {
      var _this = this;
      this.placeholders = [];
      this.index = 0;
      selector = selector.replace(/(\[[^\]]*\])/g, function(_, keep) {
        var replaceBy = "__ph-" + _this.index + "__";
        _this.placeholders.push(keep);
        _this.index++;
        return replaceBy;
      });
      this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, function(_, pseudo, exp) {
        var replaceBy = "__ph-" + _this.index + "__";
        _this.placeholders.push(exp);
        _this.index++;
        return pseudo + replaceBy;
      });
    }
    ;
    SafeSelector.prototype.restore = function(content) {
      var _this = this;
      return content.replace(/__ph-(\d+)__/g, function(ph, index) {
        return _this.placeholders[+index];
      });
    };
    SafeSelector.prototype.content = function() {
      return this._content;
    };
    return SafeSelector;
  }());
  var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;
  var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
  var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
  var _polyfillHost = '-shadowcsshost';
  var _polyfillHostContext = '-shadowcsscontext';
  var _parenSuffix = ')(?:\\((' + '(?:\\([^)(]*\\)|[^)(]*)+?' + ')\\))?([^,{]*)';
  var _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');
  var _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');
  var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
  var _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/;
  var _shadowDOMSelectorsRe = [/::shadow/g, /::content/g, /\/shadow-deep\//g, /\/shadow\//g];
  var _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g;
  var _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
  var _polyfillHostRe = /-shadowcsshost/gim;
  var _colonHostRe = /:host/gim;
  var _colonHostContextRe = /:host-context/gim;
  var _commentRe = /\/\*\s*[\s\S]*?\*\//g;
  function stripComments(input) {
    return input.replace(_commentRe, '');
  }
  var _sourceMappingUrlRe = /\/\*\s*#\s*sourceMappingURL=[\s\S]+?\*\//;
  function extractSourceMappingUrl(input) {
    var matcher = input.match(_sourceMappingUrlRe);
    return matcher ? matcher[0] : '';
  }
  var _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
  var _curlyRe = /([{}])/g;
  var OPEN_CURLY = '{';
  var CLOSE_CURLY = '}';
  var BLOCK_PLACEHOLDER = '%BLOCK%';
  var CssRule = (function() {
    function CssRule(selector, content) {
      this.selector = selector;
      this.content = content;
    }
    return CssRule;
  }());
  function processRules(input, ruleCallback) {
    var inputWithEscapedBlocks = escapeBlocks(input);
    var nextBlockIndex = 0;
    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function() {
      var m = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        m[_i - 0] = arguments[_i];
      }
      var selector = m[2];
      var content = '';
      var suffix = m[4];
      var contentPrefix = '';
      if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {
        content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
        suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
        contentPrefix = '{';
      }
      var rule = ruleCallback(new CssRule(selector, content));
      return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
    });
  }
  var StringWithEscapedBlocks = (function() {
    function StringWithEscapedBlocks(escapedString, blocks) {
      this.escapedString = escapedString;
      this.blocks = blocks;
    }
    return StringWithEscapedBlocks;
  }());
  function escapeBlocks(input) {
    var inputParts = input.split(_curlyRe);
    var resultParts = [];
    var escapedBlocks = [];
    var bracketCount = 0;
    var currentBlockParts = [];
    for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {
      var part = inputParts[partIndex];
      if (part == CLOSE_CURLY) {
        bracketCount--;
      }
      if (bracketCount > 0) {
        currentBlockParts.push(part);
      } else {
        if (currentBlockParts.length > 0) {
          escapedBlocks.push(currentBlockParts.join(''));
          resultParts.push(BLOCK_PLACEHOLDER);
          currentBlockParts = [];
        }
        resultParts.push(part);
      }
      if (part == OPEN_CURLY) {
        bracketCount++;
      }
    }
    if (currentBlockParts.length > 0) {
      escapedBlocks.push(currentBlockParts.join(''));
      resultParts.push(BLOCK_PLACEHOLDER);
    }
    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
  }
  var COMPONENT_VARIABLE = '%COMP%';
  var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
  var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
  var StylesCompileDependency = (function() {
    function StylesCompileDependency(moduleUrl, isShimmed, valuePlaceholder) {
      this.moduleUrl = moduleUrl;
      this.isShimmed = isShimmed;
      this.valuePlaceholder = valuePlaceholder;
    }
    return StylesCompileDependency;
  }());
  var StylesCompileResult = (function() {
    function StylesCompileResult(componentStylesheet, externalStylesheets) {
      this.componentStylesheet = componentStylesheet;
      this.externalStylesheets = externalStylesheets;
    }
    return StylesCompileResult;
  }());
  var CompiledStylesheet = (function() {
    function CompiledStylesheet(statements, stylesVar, dependencies, isShimmed, meta) {
      this.statements = statements;
      this.stylesVar = stylesVar;
      this.dependencies = dependencies;
      this.isShimmed = isShimmed;
      this.meta = meta;
    }
    return CompiledStylesheet;
  }());
  var StyleCompiler = (function() {
    function StyleCompiler(_urlResolver) {
      this._urlResolver = _urlResolver;
      this._shadowCss = new ShadowCss();
    }
    StyleCompiler.prototype.compileComponent = function(comp) {
      var _this = this;
      var externalStylesheets = [];
      var componentStylesheet = this._compileStyles(comp, new CompileStylesheetMetadata({
        styles: comp.template.styles,
        styleUrls: comp.template.styleUrls,
        moduleUrl: comp.type.moduleUrl
      }), true);
      comp.template.externalStylesheets.forEach(function(stylesheetMeta) {
        var compiledStylesheet = _this._compileStyles(comp, stylesheetMeta, false);
        externalStylesheets.push(compiledStylesheet);
      });
      return new StylesCompileResult(componentStylesheet, externalStylesheets);
    };
    StyleCompiler.prototype._compileStyles = function(comp, stylesheet, isComponentStylesheet) {
      var _this = this;
      var shim = comp.template.encapsulation === _angular_core.ViewEncapsulation.Emulated;
      var styleExpressions = stylesheet.styles.map(function(plainStyle) {
        return literal(_this._shimIfNeeded(plainStyle, shim));
      });
      var dependencies = [];
      for (var i = 0; i < stylesheet.styleUrls.length; i++) {
        var identifier = new CompileIdentifierMetadata({name: getStylesVarName(null)});
        dependencies.push(new StylesCompileDependency(stylesheet.styleUrls[i], shim, identifier));
        styleExpressions.push(new ExternalExpr(identifier));
      }
      var stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);
      var stmt = variable(stylesVar).set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]);
      return new CompiledStylesheet([stmt], stylesVar, dependencies, shim, stylesheet);
    };
    StyleCompiler.prototype._shimIfNeeded = function(style, shim) {
      return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
    };
    StyleCompiler.decorators = [{type: _angular_core.Injectable}];
    StyleCompiler.ctorParameters = [{type: UrlResolver}];
    return StyleCompiler;
  }());
  function getStylesVarName(component) {
    var result = "styles";
    if (component) {
      result += "_" + component.type.name;
    }
    return result;
  }
  var RuntimeCompiler = (function() {
    function RuntimeCompiler(_injector, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _directiveWrapperCompiler, _compilerConfig, _animationParser) {
      this._injector = _injector;
      this._metadataResolver = _metadataResolver;
      this._templateParser = _templateParser;
      this._styleCompiler = _styleCompiler;
      this._viewCompiler = _viewCompiler;
      this._ngModuleCompiler = _ngModuleCompiler;
      this._directiveWrapperCompiler = _directiveWrapperCompiler;
      this._compilerConfig = _compilerConfig;
      this._animationParser = _animationParser;
      this._compiledTemplateCache = new Map();
      this._compiledHostTemplateCache = new Map();
      this._compiledDirectiveWrapperCache = new Map();
      this._compiledNgModuleCache = new Map();
      this._animationCompiler = new AnimationCompiler();
    }
    Object.defineProperty(RuntimeCompiler.prototype, "injector", {
      get: function() {
        return this._injector;
      },
      enumerable: true,
      configurable: true
    });
    RuntimeCompiler.prototype.compileModuleSync = function(moduleType) {
      return this._compileModuleAndComponents(moduleType, true).syncResult;
    };
    RuntimeCompiler.prototype.compileModuleAsync = function(moduleType) {
      return this._compileModuleAndComponents(moduleType, false).asyncResult;
    };
    RuntimeCompiler.prototype.compileModuleAndAllComponentsSync = function(moduleType) {
      return this._compileModuleAndAllComponents(moduleType, true).syncResult;
    };
    RuntimeCompiler.prototype.compileModuleAndAllComponentsAsync = function(moduleType) {
      return this._compileModuleAndAllComponents(moduleType, false).asyncResult;
    };
    RuntimeCompiler.prototype._compileModuleAndComponents = function(moduleType, isSync) {
      var _this = this;
      var loadingPromise = this._loadModules(moduleType, isSync);
      var createResult = function() {
        _this._compileComponents(moduleType, null);
        return _this._compileModule(moduleType);
      };
      if (isSync) {
        return new SyncAsyncResult(createResult());
      } else {
        return new SyncAsyncResult(null, loadingPromise.then(createResult));
      }
    };
    RuntimeCompiler.prototype._compileModuleAndAllComponents = function(moduleType, isSync) {
      var _this = this;
      var loadingPromise = this._loadModules(moduleType, isSync);
      var createResult = function() {
        var componentFactories = [];
        _this._compileComponents(moduleType, componentFactories);
        return new _angular_core.ModuleWithComponentFactories(_this._compileModule(moduleType), componentFactories);
      };
      if (isSync) {
        return new SyncAsyncResult(createResult());
      } else {
        return new SyncAsyncResult(null, loadingPromise.then(createResult));
      }
    };
    RuntimeCompiler.prototype._loadModules = function(mainModule, isSync) {
      var _this = this;
      var loadingPromises = [];
      var _a = this._metadataResolver.loadNgModuleMetadata(mainModule, isSync),
          ngModule = _a.ngModule,
          loading = _a.loading;
      loadingPromises.push(loading);
      ngModule.transitiveModule.modules.forEach(function(localModuleMeta) {
        loadingPromises.push(_this._metadataResolver.loadNgModuleMetadata(localModuleMeta.type.reference, isSync).loading);
      });
      return Promise.all(loadingPromises);
    };
    RuntimeCompiler.prototype._compileModule = function(moduleType) {
      var _this = this;
      var ngModuleFactory = this._compiledNgModuleCache.get(moduleType);
      if (!ngModuleFactory) {
        var moduleMeta_1 = this._metadataResolver.getNgModuleMetadata(moduleType);
        var extraProviders = [this._metadataResolver.getProviderMetadata(new ProviderMeta(_angular_core.Compiler, {useFactory: function() {
            return new ModuleBoundCompiler(_this, moduleMeta_1.type.reference);
          }}))];
        var compileResult = this._ngModuleCompiler.compile(moduleMeta_1, extraProviders);
        compileResult.dependencies.forEach(function(dep) {
          dep.placeholder.reference = _this._assertComponentKnown(dep.comp.reference, true).proxyComponentFactory;
          dep.placeholder.name = "compFactory_" + dep.comp.name;
        });
        if (!this._compilerConfig.useJit) {
          ngModuleFactory = interpretStatements(compileResult.statements, compileResult.ngModuleFactoryVar);
        } else {
          ngModuleFactory = jitStatements("/" + moduleMeta_1.type.name + "/module.ngfactory.js", compileResult.statements, compileResult.ngModuleFactoryVar);
        }
        this._compiledNgModuleCache.set(moduleMeta_1.type.reference, ngModuleFactory);
      }
      return ngModuleFactory;
    };
    RuntimeCompiler.prototype._compileComponents = function(mainModule, allComponentFactories) {
      var _this = this;
      var ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
      var moduleByDirective = new Map();
      var templates = new Set();
      ngModule.transitiveModule.modules.forEach(function(localModuleSummary) {
        var localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.type.reference);
        localModuleMeta.declaredDirectives.forEach(function(dirIdentifier) {
          moduleByDirective.set(dirIdentifier.reference, localModuleMeta);
          var dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
          _this._compileDirectiveWrapper(dirMeta, localModuleMeta);
          if (dirMeta.isComponent) {
            templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta));
            if (allComponentFactories) {
              var template = _this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);
              templates.add(template);
              allComponentFactories.push(template.proxyComponentFactory);
            }
          }
        });
      });
      ngModule.transitiveModule.modules.forEach(function(localModuleSummary) {
        var localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.type.reference);
        localModuleMeta.declaredDirectives.forEach(function(dirIdentifier) {
          var dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
          if (dirMeta.isComponent) {
            dirMeta.entryComponents.forEach(function(entryComponentType) {
              var moduleMeta = moduleByDirective.get(entryComponentType.reference);
              templates.add(_this._createCompiledHostTemplate(entryComponentType.reference, moduleMeta));
            });
          }
        });
        localModuleMeta.entryComponents.forEach(function(entryComponentType) {
          var moduleMeta = moduleByDirective.get(entryComponentType.reference);
          templates.add(_this._createCompiledHostTemplate(entryComponentType.reference, moduleMeta));
        });
      });
      templates.forEach(function(template) {
        return _this._compileTemplate(template);
      });
    };
    RuntimeCompiler.prototype.clearCacheFor = function(type) {
      this._compiledNgModuleCache.delete(type);
      this._metadataResolver.clearCacheFor(type);
      this._compiledHostTemplateCache.delete(type);
      var compiledTemplate = this._compiledTemplateCache.get(type);
      if (compiledTemplate) {
        this._compiledTemplateCache.delete(type);
      }
    };
    RuntimeCompiler.prototype.clearCache = function() {
      this._metadataResolver.clearCache();
      this._compiledTemplateCache.clear();
      this._compiledHostTemplateCache.clear();
      this._compiledNgModuleCache.clear();
    };
    RuntimeCompiler.prototype._createCompiledHostTemplate = function(compType, ngModule) {
      if (!ngModule) {
        throw new Error("Component " + stringify(compType) + " is not part of any NgModule or the module has not been imported into your module.");
      }
      var compiledTemplate = this._compiledHostTemplateCache.get(compType);
      if (!compiledTemplate) {
        var compMeta = this._metadataResolver.getDirectiveMetadata(compType);
        assertComponent(compMeta);
        var hostMeta = createHostComponentMeta(compMeta);
        compiledTemplate = new CompiledTemplate(true, compMeta.selector, compMeta.type, hostMeta, ngModule, [compMeta.type]);
        this._compiledHostTemplateCache.set(compType, compiledTemplate);
      }
      return compiledTemplate;
    };
    RuntimeCompiler.prototype._createCompiledTemplate = function(compMeta, ngModule) {
      var compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);
      if (!compiledTemplate) {
        assertComponent(compMeta);
        compiledTemplate = new CompiledTemplate(false, compMeta.selector, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives);
        this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);
      }
      return compiledTemplate;
    };
    RuntimeCompiler.prototype._assertComponentKnown = function(compType, isHost) {
      var compiledTemplate = isHost ? this._compiledHostTemplateCache.get(compType) : this._compiledTemplateCache.get(compType);
      if (!compiledTemplate) {
        throw new Error("Illegal state: Compiled view for component " + stringify(compType) + " (host: " + isHost + ") does not exist!");
      }
      return compiledTemplate;
    };
    RuntimeCompiler.prototype._assertDirectiveWrapper = function(dirType) {
      var dirWrapper = this._compiledDirectiveWrapperCache.get(dirType);
      if (!dirWrapper) {
        throw new Error("Illegal state: Directive wrapper for " + stringify(dirType) + " has not been compiled!");
      }
      return dirWrapper;
    };
    RuntimeCompiler.prototype._compileDirectiveWrapper = function(dirMeta, moduleMeta) {
      var compileResult = this._directiveWrapperCompiler.compile(dirMeta);
      var statements = compileResult.statements;
      var directiveWrapperClass;
      if (!this._compilerConfig.useJit) {
        directiveWrapperClass = interpretStatements(statements, compileResult.dirWrapperClassVar);
      } else {
        directiveWrapperClass = jitStatements("/" + moduleMeta.type.name + "/" + dirMeta.type.name + "/wrapper.ngfactory.js", statements, compileResult.dirWrapperClassVar);
      }
      this._compiledDirectiveWrapperCache.set(dirMeta.type.reference, directiveWrapperClass);
    };
    RuntimeCompiler.prototype._compileTemplate = function(template) {
      var _this = this;
      if (template.isCompiled) {
        return;
      }
      var compMeta = template.compMeta;
      var externalStylesheetsByModuleUrl = new Map();
      var stylesCompileResult = this._styleCompiler.compileComponent(compMeta);
      stylesCompileResult.externalStylesheets.forEach(function(r) {
        externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r);
      });
      this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);
      var parsedAnimations = this._animationParser.parseComponent(compMeta);
      var directives = template.directives.map(function(dir) {
        return _this._metadataResolver.getDirectiveSummary(dir.reference);
      });
      var pipes = template.ngModule.transitiveModule.pipes.map(function(pipe) {
        return _this._metadataResolver.getPipeSummary(pipe.reference);
      });
      var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, template.ngModule.schemas, compMeta.type.name);
      var compiledAnimations = this._animationCompiler.compile(compMeta.type.name, parsedAnimations);
      var compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, variable(stylesCompileResult.componentStylesheet.stylesVar), pipes, compiledAnimations);
      compileResult.dependencies.forEach(function(dep) {
        var depTemplate;
        if (dep instanceof ViewClassDependency) {
          var vfd = dep;
          depTemplate = _this._assertComponentKnown(vfd.comp.reference, false);
          vfd.placeholder.reference = depTemplate.proxyViewClass;
          vfd.placeholder.name = "View_" + vfd.comp.name;
        } else if (dep instanceof ComponentFactoryDependency) {
          var cfd = dep;
          depTemplate = _this._assertComponentKnown(cfd.comp.reference, true);
          cfd.placeholder.reference = depTemplate.proxyComponentFactory;
          cfd.placeholder.name = "compFactory_" + cfd.comp.name;
        } else if (dep instanceof DirectiveWrapperDependency) {
          var dwd = dep;
          dwd.placeholder.reference = _this._assertDirectiveWrapper(dwd.dir.reference);
        }
      });
      var statements = (_a = stylesCompileResult.componentStylesheet.statements).concat.apply(_a, compiledAnimations.map(function(ca) {
        return ca.statements;
      })).concat(compileResult.statements);
      var viewClass;
      if (!this._compilerConfig.useJit) {
        viewClass = interpretStatements(statements, compileResult.viewClassVar);
      } else {
        viewClass = jitStatements("/" + template.ngModule.type.name + "/" + template.compType.name + "/" + (template.isHost ? 'host' : 'component') + ".ngfactory.js", statements, compileResult.viewClassVar);
      }
      template.compiled(viewClass);
      var _a;
    };
    RuntimeCompiler.prototype._resolveStylesCompileResult = function(result, externalStylesheetsByModuleUrl) {
      var _this = this;
      result.dependencies.forEach(function(dep, i) {
        var nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);
        var nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);
        dep.valuePlaceholder.reference = nestedStylesArr;
        dep.valuePlaceholder.name = "importedStyles" + i;
      });
    };
    RuntimeCompiler.prototype._resolveAndEvalStylesCompileResult = function(result, externalStylesheetsByModuleUrl) {
      this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);
      if (!this._compilerConfig.useJit) {
        return interpretStatements(result.statements, result.stylesVar);
      } else {
        return jitStatements("/" + result.meta.moduleUrl + ".css.js", result.statements, result.stylesVar);
      }
    };
    RuntimeCompiler.decorators = [{type: _angular_core.Injectable}];
    RuntimeCompiler.ctorParameters = [{type: _angular_core.Injector}, {type: CompileMetadataResolver}, {type: TemplateParser}, {type: StyleCompiler}, {type: ViewCompiler}, {type: NgModuleCompiler}, {type: DirectiveWrapperCompiler}, {type: CompilerConfig}, {type: AnimationParser}];
    return RuntimeCompiler;
  }());
  var CompiledTemplate = (function() {
    function CompiledTemplate(isHost, selector, compType, compMeta, ngModule, directives) {
      this.isHost = isHost;
      this.compType = compType;
      this.compMeta = compMeta;
      this.ngModule = ngModule;
      this.directives = directives;
      this._viewClass = null;
      this.isCompiled = false;
      var self = this;
      this.proxyViewClass = function() {
        if (!self._viewClass) {
          throw new Error("Illegal state: CompiledTemplate for " + stringify(self.compType) + " is not compiled yet!");
        }
        return self._viewClass.apply(this, arguments);
      };
      this.proxyComponentFactory = isHost ? new _angular_core.ComponentFactory(selector, this.proxyViewClass, compType.reference) : null;
    }
    CompiledTemplate.prototype.compiled = function(viewClass) {
      this._viewClass = viewClass;
      this.proxyViewClass.prototype = viewClass.prototype;
      this.isCompiled = true;
    };
    return CompiledTemplate;
  }());
  function assertComponent(meta) {
    if (!meta.isComponent) {
      throw new Error("Could not compile '" + meta.type.name + "' because it is not a component.");
    }
  }
  var ModuleBoundCompiler = (function() {
    function ModuleBoundCompiler(_delegate, _ngModule) {
      this._delegate = _delegate;
      this._ngModule = _ngModule;
    }
    Object.defineProperty(ModuleBoundCompiler.prototype, "_injector", {
      get: function() {
        return this._delegate.injector;
      },
      enumerable: true,
      configurable: true
    });
    ModuleBoundCompiler.prototype.compileModuleSync = function(moduleType) {
      return this._delegate.compileModuleSync(moduleType);
    };
    ModuleBoundCompiler.prototype.compileModuleAsync = function(moduleType) {
      return this._delegate.compileModuleAsync(moduleType);
    };
    ModuleBoundCompiler.prototype.compileModuleAndAllComponentsSync = function(moduleType) {
      return this._delegate.compileModuleAndAllComponentsSync(moduleType);
    };
    ModuleBoundCompiler.prototype.compileModuleAndAllComponentsAsync = function(moduleType) {
      return this._delegate.compileModuleAndAllComponentsAsync(moduleType);
    };
    ModuleBoundCompiler.prototype.clearCache = function() {
      this._delegate.clearCache();
    };
    ModuleBoundCompiler.prototype.clearCacheFor = function(type) {
      this._delegate.clearCacheFor(type);
    };
    return ModuleBoundCompiler;
  }());
  var SECURITY_SCHEMA = {};
  function registerContext(ctx, specs) {
    for (var _i = 0,
        specs_1 = specs; _i < specs_1.length; _i++) {
      var spec = specs_1[_i];
      SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
    }
  }
  registerContext(_angular_core.SecurityContext.HTML, ['iframe|srcdoc', '*|innerHTML', '*|outerHTML']);
  registerContext(_angular_core.SecurityContext.STYLE, ['*|style']);
  registerContext(_angular_core.SecurityContext.URL, ['*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href', 'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action', 'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite', 'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src']);
  registerContext(_angular_core.SecurityContext.RESOURCE_URL, ['applet|code', 'applet|codebase', 'base|href', 'embed|src', 'frame|src', 'head|profile', 'html|manifest', 'iframe|src', 'link|href', 'media|src', 'object|codebase', 'object|data', 'script|src']);
  var __extends$21 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var BOOLEAN = 'boolean';
  var NUMBER = 'number';
  var STRING = 'string';
  var OBJECT = 'object';
  var SCHEMA = ['[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop', '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate', 'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate', 'media^[HTMLElement]|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume', ':svg:^[HTMLElement]|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex', ':svg:graphics^:svg:|', ':svg:animation^:svg:|*begin,*end,*repeat', ':svg:geometry^:svg:|', ':svg:componentTransferFunction^:svg:|', ':svg:gradient^:svg:|', ':svg:textContent^:svg:graphics|', ':svg:textPositioning^:svg:textContent|', 'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username', 'area^[HTMLElement]|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username', 'audio^media|', 'br^[HTMLElement]|clear', 'base^[HTMLElement]|href,target', 'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink', 'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value', 'canvas^[HTMLElement]|#height,#width', 'content^[HTMLElement]|select', 'dl^[HTMLElement]|!compact', 'datalist^[HTMLElement]|', 'details^[HTMLElement]|!open', 'dialog^[HTMLElement]|!open,returnValue', 'dir^[HTMLElement]|!compact', 'div^[HTMLElement]|align', 'embed^[HTMLElement]|align,height,name,src,type,width', 'fieldset^[HTMLElement]|!disabled,name', 'font^[HTMLElement]|color,face,size', 'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target', 'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src', 'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows', 'hr^[HTMLElement]|align,color,!noShade,size,width', 'head^[HTMLElement]|', 'h1,h2,h3,h4,h5,h6^[HTMLElement]|align', 'html^[HTMLElement]|version', 'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width', 'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width', 'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width', 'keygen^[HTMLElement]|!autofocus,challenge,!disabled,keytype,name', 'li^[HTMLElement]|type,#value', 'label^[HTMLElement]|htmlFor', 'legend^[HTMLElement]|align', 'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type', 'map^[HTMLElement]|name', 'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width', 'menu^[HTMLElement]|!compact', 'meta^[HTMLElement]|content,httpEquiv,name,scheme', 'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value', 'ins,del^[HTMLElement]|cite,dateTime', 'ol^[HTMLElement]|!compact,!reversed,#start,type', 'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width', 'optgroup^[HTMLElement]|!disabled,label', 'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value', 'output^[HTMLElement]|defaultValue,%htmlFor,name,value', 'p^[HTMLElement]|align', 'param^[HTMLElement]|name,type,value,valueType', 'picture^[HTMLElement]|', 'pre^[HTMLElement]|#width', 'progress^[HTMLElement]|#max,#value', 'q,blockquote,cite^[HTMLElement]|', 'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type', 'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value', 'shadow^[HTMLElement]|', 'source^[HTMLElement]|media,sizes,src,srcset,type', 'span^[HTMLElement]|', 'style^[HTMLElement]|!disabled,media,type', 'caption^[HTMLElement]|align', 'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width', 'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width', 'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width', 'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign', 'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign', 'template^[HTMLElement]|', 'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap', 'title^[HTMLElement]|text', 'track^[HTMLElement]|!default,kind,label,src,srclang', 'ul^[HTMLElement]|!compact,type', 'unknown^[HTMLElement]|', 'video^media|#height,poster,#width', ':svg:a^:svg:graphics|', ':svg:animate^:svg:animation|', ':svg:animateMotion^:svg:animation|', ':svg:animateTransform^:svg:animation|', ':svg:circle^:svg:geometry|', ':svg:clipPath^:svg:graphics|', ':svg:cursor^:svg:|', ':svg:defs^:svg:graphics|', ':svg:desc^:svg:|', ':svg:discard^:svg:|', ':svg:ellipse^:svg:geometry|', ':svg:feBlend^:svg:|', ':svg:feColorMatrix^:svg:|', ':svg:feComponentTransfer^:svg:|', ':svg:feComposite^:svg:|', ':svg:feConvolveMatrix^:svg:|', ':svg:feDiffuseLighting^:svg:|', ':svg:feDisplacementMap^:svg:|', ':svg:feDistantLight^:svg:|', ':svg:feDropShadow^:svg:|', ':svg:feFlood^:svg:|', ':svg:feFuncA^:svg:componentTransferFunction|', ':svg:feFuncB^:svg:componentTransferFunction|', ':svg:feFuncG^:svg:componentTransferFunction|', ':svg:feFuncR^:svg:componentTransferFunction|', ':svg:feGaussianBlur^:svg:|', ':svg:feImage^:svg:|', ':svg:feMerge^:svg:|', ':svg:feMergeNode^:svg:|', ':svg:feMorphology^:svg:|', ':svg:feOffset^:svg:|', ':svg:fePointLight^:svg:|', ':svg:feSpecularLighting^:svg:|', ':svg:feSpotLight^:svg:|', ':svg:feTile^:svg:|', ':svg:feTurbulence^:svg:|', ':svg:filter^:svg:|', ':svg:foreignObject^:svg:graphics|', ':svg:g^:svg:graphics|', ':svg:image^:svg:graphics|', ':svg:line^:svg:geometry|', ':svg:linearGradient^:svg:gradient|', ':svg:mpath^:svg:|', ':svg:marker^:svg:|', ':svg:mask^:svg:|', ':svg:metadata^:svg:|', ':svg:path^:svg:geometry|', ':svg:pattern^:svg:|', ':svg:polygon^:svg:geometry|', ':svg:polyline^:svg:geometry|', ':svg:radialGradient^:svg:gradient|', ':svg:rect^:svg:geometry|', ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan', ':svg:script^:svg:|type', ':svg:set^:svg:animation|', ':svg:stop^:svg:|', ':svg:style^:svg:|!disabled,media,title,type', ':svg:switch^:svg:graphics|', ':svg:symbol^:svg:|', ':svg:tspan^:svg:textPositioning|', ':svg:text^:svg:textPositioning|', ':svg:textPath^:svg:textContent|', ':svg:title^:svg:|', ':svg:use^:svg:graphics|', ':svg:view^:svg:|#zoomAndPan', 'data^[HTMLElement]|value', 'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default', 'summary^[HTMLElement]|', 'time^[HTMLElement]|dateTime'];
  var _ATTR_TO_PROP = {
    'class': 'className',
    'for': 'htmlFor',
    'formaction': 'formAction',
    'innerHtml': 'innerHTML',
    'readonly': 'readOnly',
    'tabindex': 'tabIndex'
  };
  var DomElementSchemaRegistry = (function(_super) {
    __extends$21(DomElementSchemaRegistry, _super);
    function DomElementSchemaRegistry() {
      var _this = this;
      _super.call(this);
      this._schema = {};
      SCHEMA.forEach(function(encodedType) {
        var type = {};
        var _a = encodedType.split('|'),
            strType = _a[0],
            strProperties = _a[1];
        var properties = strProperties.split(',');
        var _b = strType.split('^'),
            typeNames = _b[0],
            superName = _b[1];
        typeNames.split(',').forEach(function(tag) {
          return _this._schema[tag.toLowerCase()] = type;
        });
        var superType = superName && _this._schema[superName.toLowerCase()];
        if (superType) {
          Object.keys(superType).forEach(function(prop) {
            type[prop] = superType[prop];
          });
        }
        properties.forEach(function(property) {
          if (property.length > 0) {
            switch (property[0]) {
              case '*':
                break;
              case '!':
                type[property.substring(1)] = BOOLEAN;
                break;
              case '#':
                type[property.substring(1)] = NUMBER;
                break;
              case '%':
                type[property.substring(1)] = OBJECT;
                break;
              default:
                type[property] = STRING;
            }
          }
        });
      });
    }
    DomElementSchemaRegistry.prototype.hasProperty = function(tagName, propName, schemaMetas) {
      if (schemaMetas.some(function(schema) {
        return schema.name === _angular_core.NO_ERRORS_SCHEMA.name;
      })) {
        return true;
      }
      if (tagName.indexOf('-') > -1) {
        if (tagName === 'ng-container' || tagName === 'ng-content') {
          return false;
        }
        if (schemaMetas.some(function(schema) {
          return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name;
        })) {
          return true;
        }
      }
      var elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];
      return !!elementProperties[propName];
    };
    DomElementSchemaRegistry.prototype.hasElement = function(tagName, schemaMetas) {
      if (schemaMetas.some(function(schema) {
        return schema.name === _angular_core.NO_ERRORS_SCHEMA.name;
      })) {
        return true;
      }
      if (tagName.indexOf('-') > -1) {
        if (tagName === 'ng-container' || tagName === 'ng-content') {
          return true;
        }
        if (schemaMetas.some(function(schema) {
          return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name;
        })) {
          return true;
        }
      }
      return !!this._schema[tagName.toLowerCase()];
    };
    DomElementSchemaRegistry.prototype.securityContext = function(tagName, propName, isAttribute) {
      if (isAttribute) {
        propName = this.getMappedPropName(propName);
      }
      tagName = tagName.toLowerCase();
      propName = propName.toLowerCase();
      var ctx = SECURITY_SCHEMA[tagName + '|' + propName];
      if (ctx) {
        return ctx;
      }
      ctx = SECURITY_SCHEMA['*|' + propName];
      return ctx ? ctx : _angular_core.SecurityContext.NONE;
    };
    DomElementSchemaRegistry.prototype.getMappedPropName = function(propName) {
      return _ATTR_TO_PROP[propName] || propName;
    };
    DomElementSchemaRegistry.prototype.getDefaultComponentElementName = function() {
      return 'ng-component';
    };
    DomElementSchemaRegistry.prototype.validateProperty = function(name) {
      if (name.toLowerCase().startsWith('on')) {
        var msg = ("Binding to event property '" + name + "' is disallowed for security reasons, ") + ("please use (" + name.slice(2) + ")=...") + ("\nIf '" + name + "' is a directive input, make sure the directive is imported by the") + " current module.";
        return {
          error: true,
          msg: msg
        };
      } else {
        return {error: false};
      }
    };
    DomElementSchemaRegistry.prototype.validateAttribute = function(name) {
      if (name.toLowerCase().startsWith('on')) {
        var msg = ("Binding to event attribute '" + name + "' is disallowed for security reasons, ") + ("please use (" + name.slice(2) + ")=...");
        return {
          error: true,
          msg: msg
        };
      } else {
        return {error: false};
      }
    };
    DomElementSchemaRegistry.prototype.allKnownElementNames = function() {
      return Object.keys(this._schema);
    };
    DomElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function(propName) {
      return dashCaseToCamelCase(propName);
    };
    DomElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function(camelCaseProp, userProvidedProp, val) {
      var unit = '';
      var strVal = val.toString().trim();
      var errorMsg = null;
      if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {
        if (typeof val === 'number') {
          unit = 'px';
        } else {
          var valAndSuffixMatch = val.match(/^[+-]?[\d\.]+([a-z]*)$/);
          if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
            errorMsg = "Please provide a CSS unit value for " + userProvidedProp + ":" + val;
          }
        }
      }
      return {
        error: errorMsg,
        value: strVal + unit
      };
    };
    DomElementSchemaRegistry.decorators = [{type: _angular_core.Injectable}];
    DomElementSchemaRegistry.ctorParameters = [];
    return DomElementSchemaRegistry;
  }(ElementSchemaRegistry));
  function _isPixelDimensionStyle(prop) {
    switch (prop) {
      case 'width':
      case 'height':
      case 'minWidth':
      case 'minHeight':
      case 'maxWidth':
      case 'maxHeight':
      case 'left':
      case 'top':
      case 'bottom':
      case 'right':
      case 'fontSize':
      case 'outlineWidth':
      case 'outlineOffset':
      case 'paddingTop':
      case 'paddingLeft':
      case 'paddingBottom':
      case 'paddingRight':
      case 'marginTop':
      case 'marginLeft':
      case 'marginBottom':
      case 'marginRight':
      case 'borderRadius':
      case 'borderWidth':
      case 'borderTopWidth':
      case 'borderLeftWidth':
      case 'borderRightWidth':
      case 'borderBottomWidth':
      case 'textIndent':
        return true;
      default:
        return false;
    }
  }
  var _NO_RESOURCE_LOADER = {get: function(url) {
      throw new Error("No ResourceLoader implementation has been provided. Can't read the url \"" + url + "\"");
    }};
  var COMPILER_PROVIDERS = [{
    provide: Reflector,
    useValue: reflector
  }, {
    provide: ReflectorReader,
    useExisting: Reflector
  }, {
    provide: ResourceLoader,
    useValue: _NO_RESOURCE_LOADER
  }, Console, Lexer, Parser, HtmlParser, {
    provide: I18NHtmlParser,
    useFactory: function(parser, translations, format) {
      return new I18NHtmlParser(parser, translations, format);
    },
    deps: [HtmlParser, [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS)], [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS_FORMAT)]]
  }, TemplateParser, DirectiveNormalizer, CompileMetadataResolver, DEFAULT_PACKAGE_URL_PROVIDER, StyleCompiler, ViewCompiler, NgModuleCompiler, DirectiveWrapperCompiler, {
    provide: CompilerConfig,
    useValue: new CompilerConfig()
  }, RuntimeCompiler, {
    provide: _angular_core.Compiler,
    useExisting: RuntimeCompiler
  }, DomElementSchemaRegistry, {
    provide: ElementSchemaRegistry,
    useExisting: DomElementSchemaRegistry
  }, UrlResolver, DirectiveResolver, PipeResolver, NgModuleResolver, AnimationParser];
  var RuntimeCompilerFactory = (function() {
    function RuntimeCompilerFactory(defaultOptions) {
      this._defaultOptions = [{
        useDebug: _angular_core.isDevMode(),
        useJit: true,
        defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated
      }].concat(defaultOptions);
    }
    RuntimeCompilerFactory.prototype.createCompiler = function(options) {
      if (options === void 0) {
        options = [];
      }
      var mergedOptions = _mergeOptions(this._defaultOptions.concat(options));
      var injector = _angular_core.ReflectiveInjector.resolveAndCreate([COMPILER_PROVIDERS, {
        provide: CompilerConfig,
        useFactory: function() {
          return new CompilerConfig({
            genDebugInfo: mergedOptions.useDebug,
            useJit: mergedOptions.useJit,
            defaultEncapsulation: mergedOptions.defaultEncapsulation,
            logBindingUpdate: mergedOptions.useDebug
          });
        },
        deps: []
      }, mergedOptions.providers]);
      return injector.get(_angular_core.Compiler);
    };
    RuntimeCompilerFactory.decorators = [{type: _angular_core.Injectable}];
    RuntimeCompilerFactory.ctorParameters = [{
      type: Array,
      decorators: [{
        type: _angular_core.Inject,
        args: [_angular_core.COMPILER_OPTIONS]
      }]
    }];
    return RuntimeCompilerFactory;
  }());
  function _initReflector() {
    reflector.reflectionCapabilities = new ReflectionCapabilities();
  }
  var platformCoreDynamic = _angular_core.createPlatformFactory(_angular_core.platformCore, 'coreDynamic', [{
    provide: _angular_core.COMPILER_OPTIONS,
    useValue: {},
    multi: true
  }, {
    provide: _angular_core.CompilerFactory,
    useClass: RuntimeCompilerFactory
  }, {
    provide: _angular_core.PLATFORM_INITIALIZER,
    useValue: _initReflector,
    multi: true
  }]);
  function _mergeOptions(optionsArr) {
    return {
      useDebug: _lastDefined(optionsArr.map(function(options) {
        return options.useDebug;
      })),
      useJit: _lastDefined(optionsArr.map(function(options) {
        return options.useJit;
      })),
      defaultEncapsulation: _lastDefined(optionsArr.map(function(options) {
        return options.defaultEncapsulation;
      })),
      providers: _mergeArrays(optionsArr.map(function(options) {
        return options.providers;
      }))
    };
  }
  function _lastDefined(args) {
    for (var i = args.length - 1; i >= 0; i--) {
      if (args[i] !== undefined) {
        return args[i];
      }
    }
    return undefined;
  }
  function _mergeArrays(parts) {
    var result = [];
    parts.forEach(function(part) {
      return part && result.push.apply(result, part);
    });
    return result;
  }
  var _ASSET_URL_RE = /asset:([^\/]+)\/([^\/]+)\/(.+)/;
  var ImportGenerator = (function() {
    function ImportGenerator() {}
    ImportGenerator.parseAssetUrl = function(url) {
      return AssetUrl.parse(url);
    };
    return ImportGenerator;
  }());
  var AssetUrl = (function() {
    function AssetUrl(packageName, firstLevelDir, modulePath) {
      this.packageName = packageName;
      this.firstLevelDir = firstLevelDir;
      this.modulePath = modulePath;
    }
    AssetUrl.parse = function(url, allowNonMatching) {
      if (allowNonMatching === void 0) {
        allowNonMatching = true;
      }
      var match = url.match(_ASSET_URL_RE);
      if (match !== null) {
        return new AssetUrl(match[1], match[2], match[3]);
      }
      if (allowNonMatching) {
        return null;
      }
      throw new Error("Url " + url + " is not a valid asset: url");
    };
    return AssetUrl;
  }());
  exports.TEMPLATE_TRANSFORMS = TEMPLATE_TRANSFORMS;
  exports.CompilerConfig = CompilerConfig;
  exports.RenderTypes = RenderTypes;
  exports.RuntimeCompiler = RuntimeCompiler;
  exports.DirectiveResolver = DirectiveResolver;
  exports.PipeResolver = PipeResolver;
  exports.NgModuleResolver = NgModuleResolver;
  exports.DEFAULT_INTERPOLATION_CONFIG = DEFAULT_INTERPOLATION_CONFIG;
  exports.InterpolationConfig = InterpolationConfig;
  exports.NgModuleCompiler = NgModuleCompiler;
  exports.DirectiveWrapperCompiler = DirectiveWrapperCompiler;
  exports.ViewCompiler = ViewCompiler;
  exports.AnimationParser = AnimationParser;
  exports.TextAst = TextAst;
  exports.BoundTextAst = BoundTextAst;
  exports.AttrAst = AttrAst;
  exports.BoundElementPropertyAst = BoundElementPropertyAst;
  exports.BoundEventAst = BoundEventAst;
  exports.ReferenceAst = ReferenceAst;
  exports.VariableAst = VariableAst;
  exports.ElementAst = ElementAst;
  exports.EmbeddedTemplateAst = EmbeddedTemplateAst;
  exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst;
  exports.DirectiveAst = DirectiveAst;
  exports.ProviderAst = ProviderAst;
  exports.NgContentAst = NgContentAst;
  exports.templateVisitAll = templateVisitAll;
  exports.CompileMetadataWithIdentifier = CompileMetadataWithIdentifier;
  exports.CompileAnimationEntryMetadata = CompileAnimationEntryMetadata;
  exports.CompileAnimationStateMetadata = CompileAnimationStateMetadata;
  exports.CompileAnimationStateDeclarationMetadata = CompileAnimationStateDeclarationMetadata;
  exports.CompileAnimationStateTransitionMetadata = CompileAnimationStateTransitionMetadata;
  exports.CompileAnimationMetadata = CompileAnimationMetadata;
  exports.CompileAnimationKeyframesSequenceMetadata = CompileAnimationKeyframesSequenceMetadata;
  exports.CompileAnimationStyleMetadata = CompileAnimationStyleMetadata;
  exports.CompileAnimationAnimateMetadata = CompileAnimationAnimateMetadata;
  exports.CompileAnimationWithStepsMetadata = CompileAnimationWithStepsMetadata;
  exports.CompileAnimationSequenceMetadata = CompileAnimationSequenceMetadata;
  exports.CompileAnimationGroupMetadata = CompileAnimationGroupMetadata;
  exports.CompileIdentifierMetadata = CompileIdentifierMetadata;
  exports.CompileDiDependencyMetadata = CompileDiDependencyMetadata;
  exports.CompileProviderMetadata = CompileProviderMetadata;
  exports.CompileFactoryMetadata = CompileFactoryMetadata;
  exports.CompileTokenMetadata = CompileTokenMetadata;
  exports.CompileTypeMetadata = CompileTypeMetadata;
  exports.CompileQueryMetadata = CompileQueryMetadata;
  exports.CompileStylesheetMetadata = CompileStylesheetMetadata;
  exports.CompileTemplateMetadata = CompileTemplateMetadata;
  exports.CompileDirectiveMetadata = CompileDirectiveMetadata;
  exports.createHostComponentMeta = createHostComponentMeta;
  exports.CompilePipeMetadata = CompilePipeMetadata;
  exports.CompileNgModuleMetadata = CompileNgModuleMetadata;
  exports.TransitiveCompileNgModuleMetadata = TransitiveCompileNgModuleMetadata;
  exports.removeIdentifierDuplicates = removeIdentifierDuplicates;
  exports.isStaticSymbol = isStaticSymbol;
  exports.ProviderMeta = ProviderMeta;
  exports.SourceModule = SourceModule;
  exports.analyzeNgModules = analyzeNgModules;
  exports.analyzeAndValidateNgModules = analyzeAndValidateNgModules;
  exports.loadNgModuleDirectives = loadNgModuleDirectives;
  exports.OfflineCompiler = OfflineCompiler;
  exports.createUrlResolverWithoutPackagePrefix = createUrlResolverWithoutPackagePrefix;
  exports.createOfflineCompileUrlResolver = createOfflineCompileUrlResolver;
  exports.DEFAULT_PACKAGE_URL_PROVIDER = DEFAULT_PACKAGE_URL_PROVIDER;
  exports.UrlResolver = UrlResolver;
  exports.getUrlScheme = getUrlScheme;
  exports.ResourceLoader = ResourceLoader;
  exports.COMPILER_PROVIDERS = COMPILER_PROVIDERS;
  exports.RuntimeCompilerFactory = RuntimeCompilerFactory;
  exports.platformCoreDynamic = platformCoreDynamic;
  exports.ElementSchemaRegistry = ElementSchemaRegistry;
  exports.I18NHtmlParser = I18NHtmlParser;
  exports.MessageBundle = MessageBundle;
  exports.Xliff = Xliff;
  exports.Xmb = Xmb;
  exports.Xtb = Xtb;
  exports.DirectiveNormalizer = DirectiveNormalizer;
  exports.Lexer = Lexer;
  exports.Token = Token;
  exports.EOF = EOF;
  exports.isIdentifier = isIdentifier;
  exports.isQuote = isQuote;
  exports.SplitInterpolation = SplitInterpolation;
  exports.TemplateBindingParseResult = TemplateBindingParseResult;
  exports.Parser = Parser;
  exports._ParseAST = _ParseAST;
  exports.CompileMetadataResolver = CompileMetadataResolver;
  exports.HtmlParser = HtmlParser;
  exports.ParseTreeResult = ParseTreeResult;
  exports.TreeError = TreeError;
  exports.ImportGenerator = ImportGenerator;
  exports.AssetUrl = AssetUrl;
  exports.debugOutputAstAsTypeScript = debugOutputAstAsTypeScript;
  exports.TypeScriptEmitter = TypeScriptEmitter;
  exports.ParseLocation = ParseLocation;
  exports.ParseSourceFile = ParseSourceFile;
  exports.ParseSourceSpan = ParseSourceSpan;
  exports.ParseError = ParseError;
  exports.DomElementSchemaRegistry = DomElementSchemaRegistry;
  exports.CssSelector = CssSelector;
  exports.SelectorMatcher = SelectorMatcher;
  exports.SelectorListContext = SelectorListContext;
  exports.SelectorContext = SelectorContext;
  exports.StylesCompileDependency = StylesCompileDependency;
  exports.StylesCompileResult = StylesCompileResult;
  exports.CompiledStylesheet = CompiledStylesheet;
  exports.StyleCompiler = StyleCompiler;
  exports.TemplateParseError = TemplateParseError;
  exports.TemplateParseResult = TemplateParseResult;
  exports.TemplateParser = TemplateParser;
  exports.splitClasses = splitClasses;
  exports.removeSummaryDuplicates = removeSummaryDuplicates;
}));

})();
(function() {
var define = $__System.amdDefine;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/compiler'), require('@angular/core'), require('@angular/platform-browser')) : typeof define === 'function' && define.amd ? define("node_modules/@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js", ["exports", "node_modules/@angular/compiler/bundles/compiler.umd.js", "node_modules/@angular/core/bundles/core.umd.js", "node_modules/@angular/platform-browser/bundles/platform-browser.umd.js"], factory) : (factory((global.ng = global.ng || {}, global.ng.platformBrowserDynamic = global.ng.platformBrowserDynamic || {}), global.ng.compiler, global.ng.core, global.ng.platformBrowser));
}(this, function(exports, _angular_compiler, _angular_core, _angular_platformBrowser) {
  'use strict';
  var INTERNAL_BROWSER_PLATFORM_PROVIDERS = _angular_platformBrowser.__platform_browser_private__.INTERNAL_BROWSER_PLATFORM_PROVIDERS;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ResourceLoaderImpl = (function(_super) {
    __extends(ResourceLoaderImpl, _super);
    function ResourceLoaderImpl() {
      _super.apply(this, arguments);
    }
    ResourceLoaderImpl.prototype.get = function(url) {
      var resolve;
      var reject;
      var promise = new Promise(function(res, rej) {
        resolve = res;
        reject = rej;
      });
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, true);
      xhr.responseType = 'text';
      xhr.onload = function() {
        var response = xhr.response || xhr.responseText;
        var status = xhr.status === 1223 ? 204 : xhr.status;
        if (status === 0) {
          status = response ? 200 : 0;
        }
        if (200 <= status && status <= 300) {
          resolve(response);
        } else {
          reject("Failed to load " + url);
        }
      };
      xhr.onerror = function() {
        reject("Failed to load " + url);
      };
      xhr.send();
      return promise;
    };
    ResourceLoaderImpl.decorators = [{type: _angular_core.Injectable}];
    ResourceLoaderImpl.ctorParameters = [];
    return ResourceLoaderImpl;
  }(_angular_compiler.ResourceLoader));
  var INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [INTERNAL_BROWSER_PLATFORM_PROVIDERS, {
    provide: _angular_core.COMPILER_OPTIONS,
    useValue: {providers: [{
        provide: _angular_compiler.ResourceLoader,
        useClass: ResourceLoaderImpl
      }]},
    multi: true
  }];
  var globalScope;
  if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
      globalScope = self;
    } else {
      globalScope = global;
    }
  } else {
    globalScope = window;
  }
  var _global = globalScope;
  _global.assert = function assert(condition) {};
  var __extends$1 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var CachedResourceLoader = (function(_super) {
    __extends$1(CachedResourceLoader, _super);
    function CachedResourceLoader() {
      _super.call(this);
      this._cache = _global.$templateCache;
      if (this._cache == null) {
        throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');
      }
    }
    CachedResourceLoader.prototype.get = function(url) {
      if (this._cache.hasOwnProperty(url)) {
        return Promise.resolve(this._cache[url]);
      } else {
        return Promise.reject('CachedResourceLoader: Did not find cached template for ' + url);
      }
    };
    return CachedResourceLoader;
  }(_angular_compiler.ResourceLoader));
  var __platform_browser_dynamic_private__ = {
    INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,
    ResourceLoaderImpl: ResourceLoaderImpl
  };
  var RESOURCE_CACHE_PROVIDER = [{
    provide: _angular_compiler.ResourceLoader,
    useClass: CachedResourceLoader
  }];
  var platformBrowserDynamic = _angular_core.createPlatformFactory(_angular_compiler.platformCoreDynamic, 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);
  exports.RESOURCE_CACHE_PROVIDER = RESOURCE_CACHE_PROVIDER;
  exports.platformBrowserDynamic = platformBrowserDynamic;
  exports.__platform_browser_dynamic_private__ = __platform_browser_dynamic_private__;
}));

})();
$__System.registerDynamic('node_modules/rxjs/observable/BoundCallbackObservable.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/util/tryCatch.js', 'node_modules/rxjs/util/errorObject.js', 'node_modules/rxjs/AsyncSubject.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var tryCatch_1 = $__require('node_modules/rxjs/util/tryCatch.js');
    var errorObject_1 = $__require('node_modules/rxjs/util/errorObject.js');
    var AsyncSubject_1 = $__require('node_modules/rxjs/AsyncSubject.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var BoundCallbackObservable = function (_super) {
        __extends(BoundCallbackObservable, _super);
        function BoundCallbackObservable(callbackFunc, selector, args, scheduler) {
            _super.call(this);
            this.callbackFunc = callbackFunc;
            this.selector = selector;
            this.args = args;
            this.scheduler = scheduler;
        }
        /* tslint:enable:max-line-length */
        /**
         * Converts a callback API to a function that returns an Observable.
         *
         * <span class="informal">Give it a function `f` of type `f(x, callback)` and
         * it will return a function `g` that when called as `g(x)` will output an
         * Observable.</span>
         *
         * `bindCallback` is not an operator because its input and output are not
         * Observables. The input is a function `func` with some parameters, but the
         * last parameter must be a callback function that `func` calls when it is
         * done. The output of `bindCallback` is a function that takes the same
         * parameters as `func`, except the last one (the callback). When the output
         * function is called with arguments, it will return an Observable where the
         * results will be delivered to.
         *
         * @example <caption>Convert jQuery's getJSON to an Observable API</caption>
         * // Suppose we have jQuery.getJSON('/my/url', callback)
         * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);
         * var result = getJSONAsObservable('/my/url');
         * result.subscribe(x => console.log(x), e => console.error(e));
         *
         * @see {@link bindNodeCallback}
         * @see {@link from}
         * @see {@link fromPromise}
         *
         * @param {function} func Function with a callback as the last parameter.
         * @param {function} selector A function which takes the arguments from the
         * callback and maps those a value to emit on the output Observable.
         * @param {Scheduler} [scheduler] The scheduler on which to schedule the
         * callbacks.
         * @return {function(...params: *): Observable} A function which returns the
         * Observable that delivers the same values the callback would deliver.
         * @static true
         * @name bindCallback
         * @owner Observable
         */
        BoundCallbackObservable.create = function (func, selector, scheduler) {
            if (selector === void 0) {
                selector = undefined;
            }
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                return new BoundCallbackObservable(func, selector, args, scheduler);
            };
        };
        BoundCallbackObservable.prototype._subscribe = function (subscriber) {
            var callbackFunc = this.callbackFunc;
            var args = this.args;
            var scheduler = this.scheduler;
            var subject = this.subject;
            if (!scheduler) {
                if (!subject) {
                    subject = this.subject = new AsyncSubject_1.AsyncSubject();
                    var handler = function handlerFn() {
                        var innerArgs = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            innerArgs[_i - 0] = arguments[_i];
                        }
                        var source = handlerFn.source;
                        var selector = source.selector,
                            subject = source.subject;
                        if (selector) {
                            var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
                            if (result_1 === errorObject_1.errorObject) {
                                subject.error(errorObject_1.errorObject.e);
                            } else {
                                subject.next(result_1);
                                subject.complete();
                            }
                        } else {
                            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);
                            subject.complete();
                        }
                    };
                    // use named function instance to avoid closure.
                    handler.source = this;
                    var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));
                    if (result === errorObject_1.errorObject) {
                        subject.error(errorObject_1.errorObject.e);
                    }
                }
                return subject.subscribe(subscriber);
            } else {
                return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber: subscriber });
            }
        };
        BoundCallbackObservable.dispatch = function (state) {
            var self = this;
            var source = state.source,
                subscriber = state.subscriber;
            var callbackFunc = source.callbackFunc,
                args = source.args,
                scheduler = source.scheduler;
            var subject = source.subject;
            if (!subject) {
                subject = source.subject = new AsyncSubject_1.AsyncSubject();
                var handler = function handlerFn() {
                    var innerArgs = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        innerArgs[_i - 0] = arguments[_i];
                    }
                    var source = handlerFn.source;
                    var selector = source.selector,
                        subject = source.subject;
                    if (selector) {
                        var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
                        if (result_2 === errorObject_1.errorObject) {
                            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));
                        } else {
                            self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));
                        }
                    } else {
                        var value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;
                        self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
                    }
                };
                // use named function to pass values in without closure
                handler.source = source;
                var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));
                if (result === errorObject_1.errorObject) {
                    subject.error(errorObject_1.errorObject.e);
                }
            }
            self.add(subject.subscribe(subscriber));
        };
        return BoundCallbackObservable;
    }(Observable_1.Observable);
    exports.BoundCallbackObservable = BoundCallbackObservable;
    function dispatchNext(arg) {
        var value = arg.value,
            subject = arg.subject;
        subject.next(value);
        subject.complete();
    }
    function dispatchError(arg) {
        var err = arg.err,
            subject = arg.subject;
        subject.error(err);
    }
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/bindCallback.js", ["node_modules/rxjs/observable/BoundCallbackObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var BoundCallbackObservable_1 = $__require("node_modules/rxjs/observable/BoundCallbackObservable.js");
  exports.bindCallback = BoundCallbackObservable_1.BoundCallbackObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/bindCallback.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/bindCallback.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var bindCallback_1 = $__require('node_modules/rxjs/observable/bindCallback.js');
  Observable_1.Observable.bindCallback = bindCallback_1.bindCallback;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/observable/BoundNodeCallbackObservable.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/util/tryCatch.js', 'node_modules/rxjs/util/errorObject.js', 'node_modules/rxjs/AsyncSubject.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var tryCatch_1 = $__require('node_modules/rxjs/util/tryCatch.js');
    var errorObject_1 = $__require('node_modules/rxjs/util/errorObject.js');
    var AsyncSubject_1 = $__require('node_modules/rxjs/AsyncSubject.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var BoundNodeCallbackObservable = function (_super) {
        __extends(BoundNodeCallbackObservable, _super);
        function BoundNodeCallbackObservable(callbackFunc, selector, args, scheduler) {
            _super.call(this);
            this.callbackFunc = callbackFunc;
            this.selector = selector;
            this.args = args;
            this.scheduler = scheduler;
        }
        /* tslint:enable:max-line-length */
        /**
         * Converts a Node.js-style callback API to a function that returns an
         * Observable.
         *
         * <span class="informal">It's just like {@link bindCallback}, but the
         * callback is expected to be of type `callback(error, result)`.</span>
         *
         * `bindNodeCallback` is not an operator because its input and output are not
         * Observables. The input is a function `func` with some parameters, but the
         * last parameter must be a callback function that `func` calls when it is
         * done. The callback function is expected to follow Node.js conventions,
         * where the first argument to the callback is an error, while remaining
         * arguments are the callback result. The output of `bindNodeCallback` is a
         * function that takes the same parameters as `func`, except the last one (the
         * callback). When the output function is called with arguments, it will
         * return an Observable where the results will be delivered to.
         *
         * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>
         * import * as fs from 'fs';
         * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);
         * var result = readFileAsObservable('./roadNames.txt', 'utf8');
         * result.subscribe(x => console.log(x), e => console.error(e));
         *
         * @see {@link bindCallback}
         * @see {@link from}
         * @see {@link fromPromise}
         *
         * @param {function} func Function with a callback as the last parameter.
         * @param {function} selector A function which takes the arguments from the
         * callback and maps those a value to emit on the output Observable.
         * @param {Scheduler} [scheduler] The scheduler on which to schedule the
         * callbacks.
         * @return {function(...params: *): Observable} A function which returns the
         * Observable that delivers the same values the Node.js callback would
         * deliver.
         * @static true
         * @name bindNodeCallback
         * @owner Observable
         */
        BoundNodeCallbackObservable.create = function (func, selector, scheduler) {
            if (selector === void 0) {
                selector = undefined;
            }
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                return new BoundNodeCallbackObservable(func, selector, args, scheduler);
            };
        };
        BoundNodeCallbackObservable.prototype._subscribe = function (subscriber) {
            var callbackFunc = this.callbackFunc;
            var args = this.args;
            var scheduler = this.scheduler;
            var subject = this.subject;
            if (!scheduler) {
                if (!subject) {
                    subject = this.subject = new AsyncSubject_1.AsyncSubject();
                    var handler = function handlerFn() {
                        var innerArgs = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            innerArgs[_i - 0] = arguments[_i];
                        }
                        var source = handlerFn.source;
                        var selector = source.selector,
                            subject = source.subject;
                        var err = innerArgs.shift();
                        if (err) {
                            subject.error(err);
                        } else if (selector) {
                            var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
                            if (result_1 === errorObject_1.errorObject) {
                                subject.error(errorObject_1.errorObject.e);
                            } else {
                                subject.next(result_1);
                                subject.complete();
                            }
                        } else {
                            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);
                            subject.complete();
                        }
                    };
                    // use named function instance to avoid closure.
                    handler.source = this;
                    var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));
                    if (result === errorObject_1.errorObject) {
                        subject.error(errorObject_1.errorObject.e);
                    }
                }
                return subject.subscribe(subscriber);
            } else {
                return scheduler.schedule(dispatch, 0, { source: this, subscriber: subscriber });
            }
        };
        return BoundNodeCallbackObservable;
    }(Observable_1.Observable);
    exports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;
    function dispatch(state) {
        var self = this;
        var source = state.source,
            subscriber = state.subscriber;
        // XXX: cast to `any` to access to the private field in `source`.
        var _a = source,
            callbackFunc = _a.callbackFunc,
            args = _a.args,
            scheduler = _a.scheduler;
        var subject = source.subject;
        if (!subject) {
            subject = source.subject = new AsyncSubject_1.AsyncSubject();
            var handler = function handlerFn() {
                var innerArgs = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    innerArgs[_i - 0] = arguments[_i];
                }
                var source = handlerFn.source;
                var selector = source.selector,
                    subject = source.subject;
                var err = innerArgs.shift();
                if (err) {
                    subject.error(err);
                } else if (selector) {
                    var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
                    if (result_2 === errorObject_1.errorObject) {
                        self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));
                    } else {
                        self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));
                    }
                } else {
                    var value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;
                    self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
                }
            };
            // use named function to pass values in without closure
            handler.source = source;
            var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));
            if (result === errorObject_1.errorObject) {
                subject.error(errorObject_1.errorObject.e);
            }
        }
        self.add(subject.subscribe(subscriber));
    }
    function dispatchNext(arg) {
        var value = arg.value,
            subject = arg.subject;
        subject.next(value);
        subject.complete();
    }
    function dispatchError(arg) {
        var err = arg.err,
            subject = arg.subject;
        subject.error(err);
    }
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/bindNodeCallback.js", ["node_modules/rxjs/observable/BoundNodeCallbackObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var BoundNodeCallbackObservable_1 = $__require("node_modules/rxjs/observable/BoundNodeCallbackObservable.js");
  exports.bindNodeCallback = BoundNodeCallbackObservable_1.BoundNodeCallbackObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/bindNodeCallback.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/bindNodeCallback.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var bindNodeCallback_1 = $__require('node_modules/rxjs/observable/bindNodeCallback.js');
  Observable_1.Observable.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/observable/combineLatest.js', ['node_modules/rxjs/util/isScheduler.js', 'node_modules/rxjs/util/isArray.js', 'node_modules/rxjs/observable/ArrayObservable.js', 'node_modules/rxjs/operator/combineLatest.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var isScheduler_1 = $__require('node_modules/rxjs/util/isScheduler.js');
    var isArray_1 = $__require('node_modules/rxjs/util/isArray.js');
    var ArrayObservable_1 = $__require('node_modules/rxjs/observable/ArrayObservable.js');
    var combineLatest_1 = $__require('node_modules/rxjs/operator/combineLatest.js');
    /* tslint:enable:max-line-length */
    /**
     * Combines multiple Observables to create an Observable whose values are
     * calculated from the latest values of each of its input Observables.
     *
     * <span class="informal">Whenever any input Observable emits a value, it
     * computes a formula using the latest values from all the inputs, then emits
     * the output of that formula.</span>
     *
     * <img src="./img/combineLatest.png" width="100%">
     *
     * `combineLatest` combines the values from all the Observables passed as
     * arguments. This is done by subscribing to each Observable, in order, and
     * collecting an array of each of the most recent values any time any of the
     * input Observables emits, then either taking that array and passing it as
     * arguments to an optional `project` function and emitting the return value of
     * that, or just emitting the array of recent values directly if there is no
     * `project` function.
     *
     * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>
     * var weight = Rx.Observable.of(70, 72, 76, 79, 75);
     * var height = Rx.Observable.of(1.76, 1.77, 1.78);
     * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));
     * bmi.subscribe(x => console.log('BMI is ' + x));
     *
     * @see {@link combineAll}
     * @see {@link merge}
     * @see {@link withLatestFrom}
     *
     * @param {Observable} observable1 An input Observable to combine with the
     * source Observable.
     * @param {Observable} observable2 An input Observable to combine with the
     * source Observable. More than one input Observables may be given as argument.
     * @param {function} [project] An optional function to project the values from
     * the combined latest values into a new value on the output Observable.
     * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to
     * each input Observable.
     * @return {Observable} An Observable of projected values from the most recent
     * values from each input Observable, or an array of the most recent values from
     * each input Observable.
     * @static true
     * @name combineLatest
     * @owner Observable
     */
    function combineLatest() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i - 0] = arguments[_i];
        }
        var project = null;
        var scheduler = null;
        if (isScheduler_1.isScheduler(observables[observables.length - 1])) {
            scheduler = observables.pop();
        }
        if (typeof observables[observables.length - 1] === 'function') {
            project = observables.pop();
        }
        // if the first and only other argument besides the resultSelector is an array
        // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`
        if (observables.length === 1 && isArray_1.isArray(observables[0])) {
            observables = observables[0];
        }
        return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new combineLatest_1.CombineLatestOperator(project));
    }
    exports.combineLatest = combineLatest;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/combineLatest.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/combineLatest.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var combineLatest_1 = $__require('node_modules/rxjs/observable/combineLatest.js');
  Observable_1.Observable.combineLatest = combineLatest_1.combineLatest;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/concat.js", ["node_modules/rxjs/operator/concat.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var concat_1 = $__require("node_modules/rxjs/operator/concat.js");
  exports.concat = concat_1.concatStatic;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/concat.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/concat.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var concat_1 = $__require('node_modules/rxjs/observable/concat.js');
  Observable_1.Observable.concat = concat_1.concat;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/observable/DeferObservable.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/util/subscribeToResult.js', 'node_modules/rxjs/OuterSubscriber.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var DeferObservable = function (_super) {
        __extends(DeferObservable, _super);
        function DeferObservable(observableFactory) {
            _super.call(this);
            this.observableFactory = observableFactory;
        }
        /**
         * Creates an Observable that, on subscribe, calls an Observable factory to
         * make an Observable for each new Observer.
         *
         * <span class="informal">Creates the Observable lazily, that is, only when it
         * is subscribed.
         * </span>
         *
         * <img src="./img/defer.png" width="100%">
         *
         * `defer` allows you to create the Observable only when the Observer
         * subscribes, and create a fresh Observable for each Observer. It waits until
         * an Observer subscribes to it, and then it generates an Observable,
         * typically with an Observable factory function. It does this afresh for each
         * subscriber, so although each subscriber may think it is subscribing to the
         * same Observable, in fact each subscriber gets its own individual
         * Observable.
         *
         * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>
         * var clicksOrInterval = Rx.Observable.defer(function () {
         *   if (Math.random() > 0.5) {
         *     return Rx.Observable.fromEvent(document, 'click');
         *   } else {
         *     return Rx.Observable.interval(1000);
         *   }
         * });
         * clicksOrInterval.subscribe(x => console.log(x));
         *
         * @see {@link create}
         *
         * @param {function(): Observable|Promise} observableFactory The Observable
         * factory function to invoke for each Observer that subscribes to the output
         * Observable. May also return a Promise, which will be converted on the fly
         * to an Observable.
         * @return {Observable} An Observable whose Observers' subscriptions trigger
         * an invocation of the given Observable factory function.
         * @static true
         * @name defer
         * @owner Observable
         */
        DeferObservable.create = function (observableFactory) {
            return new DeferObservable(observableFactory);
        };
        DeferObservable.prototype._subscribe = function (subscriber) {
            return new DeferSubscriber(subscriber, this.observableFactory);
        };
        return DeferObservable;
    }(Observable_1.Observable);
    exports.DeferObservable = DeferObservable;
    var DeferSubscriber = function (_super) {
        __extends(DeferSubscriber, _super);
        function DeferSubscriber(destination, factory) {
            _super.call(this, destination);
            this.factory = factory;
            this.tryDefer();
        }
        DeferSubscriber.prototype.tryDefer = function () {
            try {
                this._callFactory();
            } catch (err) {
                this._error(err);
            }
        };
        DeferSubscriber.prototype._callFactory = function () {
            var result = this.factory();
            if (result) {
                this.add(subscribeToResult_1.subscribeToResult(this, result));
            }
        };
        return DeferSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/defer.js", ["node_modules/rxjs/observable/DeferObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var DeferObservable_1 = $__require("node_modules/rxjs/observable/DeferObservable.js");
  exports.defer = DeferObservable_1.DeferObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/defer.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/defer.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var defer_1 = $__require('node_modules/rxjs/observable/defer.js');
  Observable_1.Observable.defer = defer_1.defer;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/empty.js", ["node_modules/rxjs/observable/EmptyObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var EmptyObservable_1 = $__require("node_modules/rxjs/observable/EmptyObservable.js");
  exports.empty = EmptyObservable_1.EmptyObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/empty.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/empty.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var empty_1 = $__require('node_modules/rxjs/observable/empty.js');
  Observable_1.Observable.empty = empty_1.empty;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/from.js", ["node_modules/rxjs/observable/FromObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var FromObservable_1 = $__require("node_modules/rxjs/observable/FromObservable.js");
  exports.from = FromObservable_1.FromObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/from.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/from.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var from_1 = $__require('node_modules/rxjs/observable/from.js');
  Observable_1.Observable.from = from_1.from;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/observable/FromEventObservable.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/util/tryCatch.js', 'node_modules/rxjs/util/isFunction.js', 'node_modules/rxjs/util/errorObject.js', 'node_modules/rxjs/Subscription.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var tryCatch_1 = $__require('node_modules/rxjs/util/tryCatch.js');
    var isFunction_1 = $__require('node_modules/rxjs/util/isFunction.js');
    var errorObject_1 = $__require('node_modules/rxjs/util/errorObject.js');
    var Subscription_1 = $__require('node_modules/rxjs/Subscription.js');
    function isNodeStyleEventEmmitter(sourceObj) {
        return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
    }
    function isJQueryStyleEventEmitter(sourceObj) {
        return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
    }
    function isNodeList(sourceObj) {
        return !!sourceObj && sourceObj.toString() === '[object NodeList]';
    }
    function isHTMLCollection(sourceObj) {
        return !!sourceObj && sourceObj.toString() === '[object HTMLCollection]';
    }
    function isEventTarget(sourceObj) {
        return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
    }
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var FromEventObservable = function (_super) {
        __extends(FromEventObservable, _super);
        function FromEventObservable(sourceObj, eventName, selector, options) {
            _super.call(this);
            this.sourceObj = sourceObj;
            this.eventName = eventName;
            this.selector = selector;
            this.options = options;
        }
        /* tslint:enable:max-line-length */
        /**
         * Creates an Observable that emits events of a specific type coming from the
         * given event target.
         *
         * <span class="informal">Creates an Observable from DOM events, or Node
         * EventEmitter events or others.</span>
         *
         * <img src="./img/fromEvent.png" width="100%">
         *
         * Creates an Observable by attaching an event listener to an "event target",
         * which may be an object with `addEventListener` and `removeEventListener`,
         * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the
         * DOM, or an HTMLCollection from the DOM. The event handler is attached when
         * the output Observable is subscribed, and removed when the Subscription is
         * unsubscribed.
         *
         * @example <caption>Emits clicks happening on the DOM document</caption>
         * var clicks = Rx.Observable.fromEvent(document, 'click');
         * clicks.subscribe(x => console.log(x));
         *
         * @see {@link from}
         * @see {@link fromEventPattern}
         *
         * @param {EventTargetLike} target The DOMElement, event target, Node.js
         * EventEmitter, NodeList or HTMLCollection to attach the event handler to.
         * @param {string} eventName The event name of interest, being emitted by the
         * `target`.
         * @parm {EventListenerOptions} [options] Options to pass through to addEventListener
         * @param {SelectorMethodSignature<T>} [selector] An optional function to
         * post-process results. It takes the arguments from the event handler and
         * should return a single value.
         * @return {Observable<T>}
         * @static true
         * @name fromEvent
         * @owner Observable
         */
        FromEventObservable.create = function (target, eventName, options, selector) {
            if (isFunction_1.isFunction(options)) {
                selector = options;
                options = undefined;
            }
            return new FromEventObservable(target, eventName, selector, options);
        };
        FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {
            var unsubscribe;
            if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {
                for (var i = 0, len = sourceObj.length; i < len; i++) {
                    FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
                }
            } else if (isEventTarget(sourceObj)) {
                var source_1 = sourceObj;
                sourceObj.addEventListener(eventName, handler, options);
                unsubscribe = function () {
                    return source_1.removeEventListener(eventName, handler);
                };
            } else if (isJQueryStyleEventEmitter(sourceObj)) {
                var source_2 = sourceObj;
                sourceObj.on(eventName, handler);
                unsubscribe = function () {
                    return source_2.off(eventName, handler);
                };
            } else if (isNodeStyleEventEmmitter(sourceObj)) {
                var source_3 = sourceObj;
                sourceObj.addListener(eventName, handler);
                unsubscribe = function () {
                    return source_3.removeListener(eventName, handler);
                };
            }
            subscriber.add(new Subscription_1.Subscription(unsubscribe));
        };
        FromEventObservable.prototype._subscribe = function (subscriber) {
            var sourceObj = this.sourceObj;
            var eventName = this.eventName;
            var options = this.options;
            var selector = this.selector;
            var handler = selector ? function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                var result = tryCatch_1.tryCatch(selector).apply(void 0, args);
                if (result === errorObject_1.errorObject) {
                    subscriber.error(errorObject_1.errorObject.e);
                } else {
                    subscriber.next(result);
                }
            } : function (e) {
                return subscriber.next(e);
            };
            FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);
        };
        return FromEventObservable;
    }(Observable_1.Observable);
    exports.FromEventObservable = FromEventObservable;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/fromEvent.js", ["node_modules/rxjs/observable/FromEventObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var FromEventObservable_1 = $__require("node_modules/rxjs/observable/FromEventObservable.js");
  exports.fromEvent = FromEventObservable_1.FromEventObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/fromEvent.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/fromEvent.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var fromEvent_1 = $__require('node_modules/rxjs/observable/fromEvent.js');
  Observable_1.Observable.fromEvent = fromEvent_1.fromEvent;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/observable/FromEventPatternObservable.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/Subscription.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var Subscription_1 = $__require('node_modules/rxjs/Subscription.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var FromEventPatternObservable = function (_super) {
        __extends(FromEventPatternObservable, _super);
        function FromEventPatternObservable(addHandler, removeHandler, selector) {
            _super.call(this);
            this.addHandler = addHandler;
            this.removeHandler = removeHandler;
            this.selector = selector;
        }
        /**
         * Creates an Observable from an API based on addHandler/removeHandler
         * functions.
         *
         * <span class="informal">Converts any addHandler/removeHandler API to an
         * Observable.</span>
         *
         * <img src="./img/fromEventPattern.png" width="100%">
         *
         * Creates an Observable by using the `addHandler` and `removeHandler`
         * functions to add and remove the handlers, with an optional selector
         * function to project the event arguments to a result. The `addHandler` is
         * called when the output Observable is subscribed, and `removeHandler` is
         * called when the Subscription is unsubscribed.
         *
         * @example <caption>Emits clicks happening on the DOM document</caption>
         * function addClickHandler(handler) {
         *   document.addEventListener('click', handler);
         * }
         *
         * function removeClickHandler(handler) {
         *   document.removeEventListener('click', handler);
         * }
         *
         * var clicks = Rx.Observable.fromEventPattern(
         *   addClickHandler,
         *   removeClickHandler
         * );
         * clicks.subscribe(x => console.log(x));
         *
         * @see {@link from}
         * @see {@link fromEvent}
         *
         * @param {function(handler: Function): any} addHandler A function that takes
         * a `handler` function as argument and attaches it somehow to the actual
         * source of events.
         * @param {function(handler: Function): void} removeHandler A function that
         * takes a `handler` function as argument and removes it in case it was
         * previously attached using `addHandler`.
         * @param {function(...args: any): T} [selector] An optional function to
         * post-process results. It takes the arguments from the event handler and
         * should return a single value.
         * @return {Observable<T>}
         * @static true
         * @name fromEventPattern
         * @owner Observable
         */
        FromEventPatternObservable.create = function (addHandler, removeHandler, selector) {
            return new FromEventPatternObservable(addHandler, removeHandler, selector);
        };
        FromEventPatternObservable.prototype._subscribe = function (subscriber) {
            var _this = this;
            var removeHandler = this.removeHandler;
            var handler = !!this.selector ? function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                _this._callSelector(subscriber, args);
            } : function (e) {
                subscriber.next(e);
            };
            this._callAddHandler(handler, subscriber);
            subscriber.add(new Subscription_1.Subscription(function () {
                //TODO: determine whether or not to forward to error handler
                removeHandler(handler);
            }));
        };
        FromEventPatternObservable.prototype._callSelector = function (subscriber, args) {
            try {
                var result = this.selector.apply(this, args);
                subscriber.next(result);
            } catch (e) {
                subscriber.error(e);
            }
        };
        FromEventPatternObservable.prototype._callAddHandler = function (handler, errorSubscriber) {
            try {
                this.addHandler(handler);
            } catch (e) {
                errorSubscriber.error(e);
            }
        };
        return FromEventPatternObservable;
    }(Observable_1.Observable);
    exports.FromEventPatternObservable = FromEventPatternObservable;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/fromEventPattern.js", ["node_modules/rxjs/observable/FromEventPatternObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var FromEventPatternObservable_1 = $__require("node_modules/rxjs/observable/FromEventPatternObservable.js");
  exports.fromEventPattern = FromEventPatternObservable_1.FromEventPatternObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/fromEventPattern.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/fromEventPattern.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var fromEventPattern_1 = $__require('node_modules/rxjs/observable/fromEventPattern.js');
  Observable_1.Observable.fromEventPattern = fromEventPattern_1.fromEventPattern;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/fromPromise.js", ["node_modules/rxjs/observable/PromiseObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var PromiseObservable_1 = $__require("node_modules/rxjs/observable/PromiseObservable.js");
  exports.fromPromise = PromiseObservable_1.PromiseObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/fromPromise.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/fromPromise.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var fromPromise_1 = $__require('node_modules/rxjs/observable/fromPromise.js');
  Observable_1.Observable.fromPromise = fromPromise_1.fromPromise;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/observable/GenerateObservable.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/util/isScheduler.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var isScheduler_1 = $__require('node_modules/rxjs/util/isScheduler.js');
    var selfSelector = function (value) {
        return value;
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var GenerateObservable = function (_super) {
        __extends(GenerateObservable, _super);
        function GenerateObservable(initialState, condition, iterate, resultSelector, scheduler) {
            _super.call(this);
            this.initialState = initialState;
            this.condition = condition;
            this.iterate = iterate;
            this.resultSelector = resultSelector;
            this.scheduler = scheduler;
        }
        GenerateObservable.create = function (initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
            if (arguments.length == 1) {
                return new GenerateObservable(initialStateOrOptions.initialState, initialStateOrOptions.condition, initialStateOrOptions.iterate, initialStateOrOptions.resultSelector || selfSelector, initialStateOrOptions.scheduler);
            }
            if (resultSelectorOrObservable === undefined || isScheduler_1.isScheduler(resultSelectorOrObservable)) {
                return new GenerateObservable(initialStateOrOptions, condition, iterate, selfSelector, resultSelectorOrObservable);
            }
            return new GenerateObservable(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler);
        };
        GenerateObservable.prototype._subscribe = function (subscriber) {
            var state = this.initialState;
            if (this.scheduler) {
                return this.scheduler.schedule(GenerateObservable.dispatch, 0, {
                    subscriber: subscriber,
                    iterate: this.iterate,
                    condition: this.condition,
                    resultSelector: this.resultSelector,
                    state: state });
            }
            var _a = this,
                condition = _a.condition,
                resultSelector = _a.resultSelector,
                iterate = _a.iterate;
            do {
                if (condition) {
                    var conditionResult = void 0;
                    try {
                        conditionResult = condition(state);
                    } catch (err) {
                        subscriber.error(err);
                        return;
                    }
                    if (!conditionResult) {
                        subscriber.complete();
                        break;
                    }
                }
                var value = void 0;
                try {
                    value = resultSelector(state);
                } catch (err) {
                    subscriber.error(err);
                    return;
                }
                subscriber.next(value);
                if (subscriber.closed) {
                    break;
                }
                try {
                    state = iterate(state);
                } catch (err) {
                    subscriber.error(err);
                    return;
                }
            } while (true);
        };
        GenerateObservable.dispatch = function (state) {
            var subscriber = state.subscriber,
                condition = state.condition;
            if (subscriber.closed) {
                return;
            }
            if (state.needIterate) {
                try {
                    state.state = state.iterate(state.state);
                } catch (err) {
                    subscriber.error(err);
                    return;
                }
            } else {
                state.needIterate = true;
            }
            if (condition) {
                var conditionResult = void 0;
                try {
                    conditionResult = condition(state.state);
                } catch (err) {
                    subscriber.error(err);
                    return;
                }
                if (!conditionResult) {
                    subscriber.complete();
                    return;
                }
                if (subscriber.closed) {
                    return;
                }
            }
            var value;
            try {
                value = state.resultSelector(state.state);
            } catch (err) {
                subscriber.error(err);
                return;
            }
            if (subscriber.closed) {
                return;
            }
            subscriber.next(value);
            if (subscriber.closed) {
                return;
            }
            return this.schedule(state);
        };
        return GenerateObservable;
    }(Observable_1.Observable);
    exports.GenerateObservable = GenerateObservable;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/generate.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/GenerateObservable.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var GenerateObservable_1 = $__require('node_modules/rxjs/observable/GenerateObservable.js');
  Observable_1.Observable.generate = GenerateObservable_1.GenerateObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/observable/IfObservable.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/util/subscribeToResult.js', 'node_modules/rxjs/OuterSubscriber.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var IfObservable = function (_super) {
        __extends(IfObservable, _super);
        function IfObservable(condition, thenSource, elseSource) {
            _super.call(this);
            this.condition = condition;
            this.thenSource = thenSource;
            this.elseSource = elseSource;
        }
        IfObservable.create = function (condition, thenSource, elseSource) {
            return new IfObservable(condition, thenSource, elseSource);
        };
        IfObservable.prototype._subscribe = function (subscriber) {
            var _a = this,
                condition = _a.condition,
                thenSource = _a.thenSource,
                elseSource = _a.elseSource;
            return new IfSubscriber(subscriber, condition, thenSource, elseSource);
        };
        return IfObservable;
    }(Observable_1.Observable);
    exports.IfObservable = IfObservable;
    var IfSubscriber = function (_super) {
        __extends(IfSubscriber, _super);
        function IfSubscriber(destination, condition, thenSource, elseSource) {
            _super.call(this, destination);
            this.condition = condition;
            this.thenSource = thenSource;
            this.elseSource = elseSource;
            this.tryIf();
        }
        IfSubscriber.prototype.tryIf = function () {
            var _a = this,
                condition = _a.condition,
                thenSource = _a.thenSource,
                elseSource = _a.elseSource;
            var result;
            try {
                result = condition();
                var source = result ? thenSource : elseSource;
                if (source) {
                    this.add(subscribeToResult_1.subscribeToResult(this, source));
                } else {
                    this._complete();
                }
            } catch (err) {
                this._error(err);
            }
        };
        return IfSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/if.js", ["node_modules/rxjs/observable/IfObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var IfObservable_1 = $__require("node_modules/rxjs/observable/IfObservable.js");
  exports._if = IfObservable_1.IfObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/if.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/if.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var if_1 = $__require('node_modules/rxjs/observable/if.js');
  Observable_1.Observable.if = if_1._if;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/observable/IntervalObservable.js', ['node_modules/rxjs/util/isNumeric.js', 'node_modules/rxjs/Observable.js', 'node_modules/rxjs/scheduler/async.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var isNumeric_1 = $__require('node_modules/rxjs/util/isNumeric.js');
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var async_1 = $__require('node_modules/rxjs/scheduler/async.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var IntervalObservable = function (_super) {
        __extends(IntervalObservable, _super);
        function IntervalObservable(period, scheduler) {
            if (period === void 0) {
                period = 0;
            }
            if (scheduler === void 0) {
                scheduler = async_1.async;
            }
            _super.call(this);
            this.period = period;
            this.scheduler = scheduler;
            if (!isNumeric_1.isNumeric(period) || period < 0) {
                this.period = 0;
            }
            if (!scheduler || typeof scheduler.schedule !== 'function') {
                this.scheduler = async_1.async;
            }
        }
        /**
         * Creates an Observable that emits sequential numbers every specified
         * interval of time, on a specified Scheduler.
         *
         * <span class="informal">Emits incremental numbers periodically in time.
         * </span>
         *
         * <img src="./img/interval.png" width="100%">
         *
         * `interval` returns an Observable that emits an infinite sequence of
         * ascending integers, with a constant interval of time of your choosing
         * between those emissions. The first emission is not sent immediately, but
         * only after the first period has passed. By default, this operator uses the
         * `async` Scheduler to provide a notion of time, but you may pass any
         * Scheduler to it.
         *
         * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>
         * var numbers = Rx.Observable.interval(1000);
         * numbers.subscribe(x => console.log(x));
         *
         * @see {@link timer}
         * @see {@link delay}
         *
         * @param {number} [period=0] The interval size in milliseconds (by default)
         * or the time unit determined by the scheduler's clock.
         * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling
         * the emission of values, and providing a notion of "time".
         * @return {Observable} An Observable that emits a sequential number each time
         * interval.
         * @static true
         * @name interval
         * @owner Observable
         */
        IntervalObservable.create = function (period, scheduler) {
            if (period === void 0) {
                period = 0;
            }
            if (scheduler === void 0) {
                scheduler = async_1.async;
            }
            return new IntervalObservable(period, scheduler);
        };
        IntervalObservable.dispatch = function (state) {
            var index = state.index,
                subscriber = state.subscriber,
                period = state.period;
            subscriber.next(index);
            if (subscriber.closed) {
                return;
            }
            state.index += 1;
            this.schedule(state, period);
        };
        IntervalObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var period = this.period;
            var scheduler = this.scheduler;
            subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {
                index: index, subscriber: subscriber, period: period
            }));
        };
        return IntervalObservable;
    }(Observable_1.Observable);
    exports.IntervalObservable = IntervalObservable;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/interval.js", ["node_modules/rxjs/observable/IntervalObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var IntervalObservable_1 = $__require("node_modules/rxjs/observable/IntervalObservable.js");
  exports.interval = IntervalObservable_1.IntervalObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/interval.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/interval.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var interval_1 = $__require('node_modules/rxjs/observable/interval.js');
  Observable_1.Observable.interval = interval_1.interval;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/merge.js", ["node_modules/rxjs/operator/merge.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var merge_1 = $__require("node_modules/rxjs/operator/merge.js");
  exports.merge = merge_1.mergeStatic;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/merge.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/merge.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var merge_1 = $__require('node_modules/rxjs/observable/merge.js');
  Observable_1.Observable.merge = merge_1.merge;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/race.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/race.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var race_1 = $__require('node_modules/rxjs/operator/race.js');
  Observable_1.Observable.race = race_1.raceStatic;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/observable/NeverObservable.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/util/noop.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var noop_1 = $__require('node_modules/rxjs/util/noop.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var NeverObservable = function (_super) {
        __extends(NeverObservable, _super);
        function NeverObservable() {
            _super.call(this);
        }
        /**
         * Creates an Observable that emits no items to the Observer.
         *
         * <span class="informal">An Observable that never emits anything.</span>
         *
         * <img src="./img/never.png" width="100%">
         *
         * This static operator is useful for creating a simple Observable that emits
         * neither values nor errors nor the completion notification. It can be used
         * for testing purposes or for composing with other Observables. Please not
         * that by never emitting a complete notification, this Observable keeps the
         * subscription from being disposed automatically. Subscriptions need to be
         * manually disposed.
         *
         * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>
         * function info() {
         *   console.log('Will not be called');
         * }
         * var result = Rx.Observable.never().startWith(7);
         * result.subscribe(x => console.log(x), info, info);
         *
         * @see {@link create}
         * @see {@link empty}
         * @see {@link of}
         * @see {@link throw}
         *
         * @return {Observable} A "never" Observable: never emits anything.
         * @static true
         * @name never
         * @owner Observable
         */
        NeverObservable.create = function () {
            return new NeverObservable();
        };
        NeverObservable.prototype._subscribe = function (subscriber) {
            noop_1.noop();
        };
        return NeverObservable;
    }(Observable_1.Observable);
    exports.NeverObservable = NeverObservable;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/never.js", ["node_modules/rxjs/observable/NeverObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var NeverObservable_1 = $__require("node_modules/rxjs/observable/NeverObservable.js");
  exports.never = NeverObservable_1.NeverObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/never.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/never.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var never_1 = $__require('node_modules/rxjs/observable/never.js');
  Observable_1.Observable.never = never_1.never;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/of.js", ["node_modules/rxjs/observable/ArrayObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var ArrayObservable_1 = $__require("node_modules/rxjs/observable/ArrayObservable.js");
  exports.of = ArrayObservable_1.ArrayObservable.of;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/of.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/of.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var of_1 = $__require('node_modules/rxjs/observable/of.js');
  Observable_1.Observable.of = of_1.of;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/onErrorResumeNext.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/onErrorResumeNext.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var onErrorResumeNext_1 = $__require('node_modules/rxjs/operator/onErrorResumeNext.js');
  Observable_1.Observable.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNextStatic;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/PairsObservable.js", ["node_modules/rxjs/Observable.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require("node_modules/rxjs/Observable.js");
    function dispatch(state) {
        var obj = state.obj,
            keys = state.keys,
            length = state.length,
            index = state.index,
            subscriber = state.subscriber;
        if (index === length) {
            subscriber.complete();
            return;
        }
        var key = keys[index];
        subscriber.next([key, obj[key]]);
        state.index = index + 1;
        this.schedule(state);
    }
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var PairsObservable = function (_super) {
        __extends(PairsObservable, _super);
        function PairsObservable(obj, scheduler) {
            _super.call(this);
            this.obj = obj;
            this.scheduler = scheduler;
            this.keys = Object.keys(obj);
        }
        /**
         * Convert an object into an observable sequence of [key, value] pairs
         * using an optional Scheduler to enumerate the object.
         *
         * @example <caption>Converts a javascript object to an Observable</caption>
         * var obj = {
         *   foo: 42,
         *   bar: 56,
         *   baz: 78
         * };
         *
         * var source = Rx.Observable.pairs(obj);
         *
         * var subscription = source.subscribe(
         *   function (x) {
         *     console.log('Next: %s', x);
         *   },
         *   function (err) {
         *     console.log('Error: %s', err);
         *   },
         *   function () {
         *     console.log('Completed');
         *   });
         *
         * @param {Object} obj The object to inspect and turn into an
         * Observable sequence.
         * @param {Scheduler} [scheduler] An optional Scheduler to run the
         * enumeration of the input sequence on.
         * @returns {(Observable<Array<string | T>>)} An observable sequence of
         * [key, value] pairs from the object.
         */
        PairsObservable.create = function (obj, scheduler) {
            return new PairsObservable(obj, scheduler);
        };
        PairsObservable.prototype._subscribe = function (subscriber) {
            var _a = this,
                keys = _a.keys,
                scheduler = _a.scheduler;
            var length = keys.length;
            if (scheduler) {
                return scheduler.schedule(dispatch, 0, {
                    obj: this.obj, keys: keys, length: length, index: 0, subscriber: subscriber
                });
            } else {
                for (var idx = 0; idx < length; idx++) {
                    var key = keys[idx];
                    subscriber.next([key, this.obj[key]]);
                }
                subscriber.complete();
            }
        };
        return PairsObservable;
    }(Observable_1.Observable);
    exports.PairsObservable = PairsObservable;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/pairs.js", ["node_modules/rxjs/observable/PairsObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var PairsObservable_1 = $__require("node_modules/rxjs/observable/PairsObservable.js");
  exports.pairs = PairsObservable_1.PairsObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/pairs.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/pairs.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var pairs_1 = $__require('node_modules/rxjs/observable/pairs.js');
  Observable_1.Observable.pairs = pairs_1.pairs;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/RangeObservable.js", ["node_modules/rxjs/Observable.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require("node_modules/rxjs/Observable.js");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var RangeObservable = function (_super) {
        __extends(RangeObservable, _super);
        function RangeObservable(start, count, scheduler) {
            _super.call(this);
            this.start = start;
            this._count = count;
            this.scheduler = scheduler;
        }
        /**
         * Creates an Observable that emits a sequence of numbers within a specified
         * range.
         *
         * <span class="informal">Emits a sequence of numbers in a range.</span>
         *
         * <img src="./img/range.png" width="100%">
         *
         * `range` operator emits a range of sequential integers, in order, where you
         * select the `start` of the range and its `length`. By default, uses no
         * Scheduler and just delivers the notifications synchronously, but may use
         * an optional Scheduler to regulate those deliveries.
         *
         * @example <caption>Emits the numbers 1 to 10</caption>
         * var numbers = Rx.Observable.range(1, 10);
         * numbers.subscribe(x => console.log(x));
         *
         * @see {@link timer}
         * @see {@link interval}
         *
         * @param {number} [start=0] The value of the first integer in the sequence.
         * @param {number} [count=0] The number of sequential integers to generate.
         * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
         * the emissions of the notifications.
         * @return {Observable} An Observable of numbers that emits a finite range of
         * sequential integers.
         * @static true
         * @name range
         * @owner Observable
         */
        RangeObservable.create = function (start, count, scheduler) {
            if (start === void 0) {
                start = 0;
            }
            if (count === void 0) {
                count = 0;
            }
            return new RangeObservable(start, count, scheduler);
        };
        RangeObservable.dispatch = function (state) {
            var start = state.start,
                index = state.index,
                count = state.count,
                subscriber = state.subscriber;
            if (index >= count) {
                subscriber.complete();
                return;
            }
            subscriber.next(start);
            if (subscriber.closed) {
                return;
            }
            state.index = index + 1;
            state.start = start + 1;
            this.schedule(state);
        };
        RangeObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var start = this.start;
            var count = this._count;
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(RangeObservable.dispatch, 0, {
                    index: index, count: count, start: start, subscriber: subscriber
                });
            } else {
                do {
                    if (index++ >= count) {
                        subscriber.complete();
                        break;
                    }
                    subscriber.next(start++);
                    if (subscriber.closed) {
                        break;
                    }
                } while (true);
            }
        };
        return RangeObservable;
    }(Observable_1.Observable);
    exports.RangeObservable = RangeObservable;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/range.js", ["node_modules/rxjs/observable/RangeObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var RangeObservable_1 = $__require("node_modules/rxjs/observable/RangeObservable.js");
  exports.range = RangeObservable_1.RangeObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/range.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/range.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var range_1 = $__require('node_modules/rxjs/observable/range.js');
  Observable_1.Observable.range = range_1.range;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/observable/UsingObservable.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/util/subscribeToResult.js', 'node_modules/rxjs/OuterSubscriber.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var UsingObservable = function (_super) {
        __extends(UsingObservable, _super);
        function UsingObservable(resourceFactory, observableFactory) {
            _super.call(this);
            this.resourceFactory = resourceFactory;
            this.observableFactory = observableFactory;
        }
        UsingObservable.create = function (resourceFactory, observableFactory) {
            return new UsingObservable(resourceFactory, observableFactory);
        };
        UsingObservable.prototype._subscribe = function (subscriber) {
            var _a = this,
                resourceFactory = _a.resourceFactory,
                observableFactory = _a.observableFactory;
            var resource;
            try {
                resource = resourceFactory();
                return new UsingSubscriber(subscriber, resource, observableFactory);
            } catch (err) {
                subscriber.error(err);
            }
        };
        return UsingObservable;
    }(Observable_1.Observable);
    exports.UsingObservable = UsingObservable;
    var UsingSubscriber = function (_super) {
        __extends(UsingSubscriber, _super);
        function UsingSubscriber(destination, resource, observableFactory) {
            _super.call(this, destination);
            this.resource = resource;
            this.observableFactory = observableFactory;
            destination.add(resource);
            this.tryUse();
        }
        UsingSubscriber.prototype.tryUse = function () {
            try {
                var source = this.observableFactory.call(this, this.resource);
                if (source) {
                    this.add(subscribeToResult_1.subscribeToResult(this, source));
                }
            } catch (err) {
                this._error(err);
            }
        };
        return UsingSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/using.js", ["node_modules/rxjs/observable/UsingObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var UsingObservable_1 = $__require("node_modules/rxjs/observable/UsingObservable.js");
  exports.using = UsingObservable_1.UsingObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/using.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/using.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var using_1 = $__require('node_modules/rxjs/observable/using.js');
  Observable_1.Observable.using = using_1.using;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/ErrorObservable.js", ["node_modules/rxjs/Observable.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require("node_modules/rxjs/Observable.js");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ErrorObservable = function (_super) {
        __extends(ErrorObservable, _super);
        function ErrorObservable(error, scheduler) {
            _super.call(this);
            this.error = error;
            this.scheduler = scheduler;
        }
        /**
         * Creates an Observable that emits no items to the Observer and immediately
         * emits an error notification.
         *
         * <span class="informal">Just emits 'error', and nothing else.
         * </span>
         *
         * <img src="./img/throw.png" width="100%">
         *
         * This static operator is useful for creating a simple Observable that only
         * emits the error notification. It can be used for composing with other
         * Observables, such as in a {@link mergeMap}.
         *
         * @example <caption>Emit the number 7, then emit an error.</caption>
         * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);
         * result.subscribe(x => console.log(x), e => console.error(e));
         *
         * @example <caption>Map and flattens numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>
         * var interval = Rx.Observable.interval(1000);
         * var result = interval.mergeMap(x =>
         *   x === 13 ?
         *     Rx.Observable.throw('Thirteens are bad') :
         *     Rx.Observable.of('a', 'b', 'c')
         * );
         * result.subscribe(x => console.log(x), e => console.error(e));
         *
         * @see {@link create}
         * @see {@link empty}
         * @see {@link never}
         * @see {@link of}
         *
         * @param {any} error The particular Error to pass to the error notification.
         * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
         * the emission of the error notification.
         * @return {Observable} An error Observable: emits only the error notification
         * using the given error argument.
         * @static true
         * @name throw
         * @owner Observable
         */
        ErrorObservable.create = function (error, scheduler) {
            return new ErrorObservable(error, scheduler);
        };
        ErrorObservable.dispatch = function (arg) {
            var error = arg.error,
                subscriber = arg.subscriber;
            subscriber.error(error);
        };
        ErrorObservable.prototype._subscribe = function (subscriber) {
            var error = this.error;
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(ErrorObservable.dispatch, 0, {
                    error: error, subscriber: subscriber
                });
            } else {
                subscriber.error(error);
            }
        };
        return ErrorObservable;
    }(Observable_1.Observable);
    exports.ErrorObservable = ErrorObservable;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/throw.js", ["node_modules/rxjs/observable/ErrorObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var ErrorObservable_1 = $__require("node_modules/rxjs/observable/ErrorObservable.js");
  exports._throw = ErrorObservable_1.ErrorObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/throw.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/throw.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var throw_1 = $__require('node_modules/rxjs/observable/throw.js');
  Observable_1.Observable.throw = throw_1._throw;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/observable/TimerObservable.js', ['node_modules/rxjs/util/isNumeric.js', 'node_modules/rxjs/Observable.js', 'node_modules/rxjs/scheduler/async.js', 'node_modules/rxjs/util/isScheduler.js', 'node_modules/rxjs/util/isDate.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var isNumeric_1 = $__require('node_modules/rxjs/util/isNumeric.js');
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var async_1 = $__require('node_modules/rxjs/scheduler/async.js');
    var isScheduler_1 = $__require('node_modules/rxjs/util/isScheduler.js');
    var isDate_1 = $__require('node_modules/rxjs/util/isDate.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var TimerObservable = function (_super) {
        __extends(TimerObservable, _super);
        function TimerObservable(dueTime, period, scheduler) {
            if (dueTime === void 0) {
                dueTime = 0;
            }
            _super.call(this);
            this.period = -1;
            this.dueTime = 0;
            if (isNumeric_1.isNumeric(period)) {
                this.period = Number(period) < 1 && 1 || Number(period);
            } else if (isScheduler_1.isScheduler(period)) {
                scheduler = period;
            }
            if (!isScheduler_1.isScheduler(scheduler)) {
                scheduler = async_1.async;
            }
            this.scheduler = scheduler;
            this.dueTime = isDate_1.isDate(dueTime) ? +dueTime - this.scheduler.now() : dueTime;
        }
        /**
         * Creates an Observable that starts emitting after an `initialDelay` and
         * emits ever increasing numbers after each `period` of time thereafter.
         *
         * <span class="informal">Its like {@link interval}, but you can specify when
         * should the emissions start.</span>
         *
         * <img src="./img/timer.png" width="100%">
         *
         * `timer` returns an Observable that emits an infinite sequence of ascending
         * integers, with a constant interval of time, `period` of your choosing
         * between those emissions. The first emission happens after the specified
         * `initialDelay`. The initial delay may be a {@link Date}. By default, this
         * operator uses the `async` Scheduler to provide a notion of time, but you
         * may pass any Scheduler to it. If `period` is not specified, the output
         * Observable emits only one value, `0`. Otherwise, it emits an infinite
         * sequence.
         *
         * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>
         * var numbers = Rx.Observable.timer(3000, 1000);
         * numbers.subscribe(x => console.log(x));
         *
         * @example <caption>Emits one number after five seconds</caption>
         * var numbers = Rx.Observable.timer(5000);
         * numbers.subscribe(x => console.log(x));
         *
         * @see {@link interval}
         * @see {@link delay}
         *
         * @param {number|Date} initialDelay The initial delay time to wait before
         * emitting the first value of `0`.
         * @param {number} [period] The period of time between emissions of the
         * subsequent numbers.
         * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling
         * the emission of values, and providing a notion of "time".
         * @return {Observable} An Observable that emits a `0` after the
         * `initialDelay` and ever increasing numbers after each `period` of time
         * thereafter.
         * @static true
         * @name timer
         * @owner Observable
         */
        TimerObservable.create = function (initialDelay, period, scheduler) {
            if (initialDelay === void 0) {
                initialDelay = 0;
            }
            return new TimerObservable(initialDelay, period, scheduler);
        };
        TimerObservable.dispatch = function (state) {
            var index = state.index,
                period = state.period,
                subscriber = state.subscriber;
            var action = this;
            subscriber.next(index);
            if (subscriber.closed) {
                return;
            } else if (period === -1) {
                return subscriber.complete();
            }
            state.index = index + 1;
            action.schedule(state, period);
        };
        TimerObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var _a = this,
                period = _a.period,
                dueTime = _a.dueTime,
                scheduler = _a.scheduler;
            return scheduler.schedule(TimerObservable.dispatch, dueTime, {
                index: index, period: period, subscriber: subscriber
            });
        };
        return TimerObservable;
    }(Observable_1.Observable);
    exports.TimerObservable = TimerObservable;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/timer.js", ["node_modules/rxjs/observable/TimerObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var TimerObservable_1 = $__require("node_modules/rxjs/observable/TimerObservable.js");
  exports.timer = TimerObservable_1.TimerObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/timer.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/timer.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var timer_1 = $__require('node_modules/rxjs/observable/timer.js');
  Observable_1.Observable.timer = timer_1.timer;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/zip.js", ["node_modules/rxjs/operator/zip.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var zip_1 = $__require("node_modules/rxjs/operator/zip.js");
  exports.zip = zip_1.zipStatic;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/zip.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/zip.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var zip_1 = $__require('node_modules/rxjs/observable/zip.js');
  Observable_1.Observable.zip = zip_1.zip;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/dom/ajax.js", ["node_modules/rxjs/observable/dom/AjaxObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var AjaxObservable_1 = $__require("node_modules/rxjs/observable/dom/AjaxObservable.js");
  exports.ajax = AjaxObservable_1.AjaxObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/dom/ajax.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/dom/ajax.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var ajax_1 = $__require('node_modules/rxjs/observable/dom/ajax.js');
  Observable_1.Observable.ajax = ajax_1.ajax;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/util/assign.js', ['node_modules/rxjs/util/root.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('node_modules/rxjs/util/root.js');
    var Object = root_1.root.Object;
    if (typeof Object.assign != 'function') {
        (function () {
            Object.assign = function assignPolyfill(target) {
                var sources = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    sources[_i - 1] = arguments[_i];
                }
                if (target === undefined || target === null) {
                    throw new TypeError('cannot convert undefined or null to object');
                }
                var output = Object(target);
                var len = sources.length;
                for (var index = 0; index < len; index++) {
                    var source = sources[index];
                    if (source !== undefined && source !== null) {
                        for (var key in source) {
                            if (source.hasOwnProperty(key)) {
                                output[key] = source[key];
                            }
                        }
                    }
                }
                return output;
            };
        })();
    }
    exports.assign = Object.assign;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/observable/dom/WebSocketSubject.js', ['node_modules/rxjs/Subject.js', 'node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/Observable.js', 'node_modules/rxjs/Subscription.js', 'node_modules/rxjs/util/root.js', 'node_modules/rxjs/ReplaySubject.js', 'node_modules/rxjs/util/tryCatch.js', 'node_modules/rxjs/util/errorObject.js', 'node_modules/rxjs/util/assign.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require('node_modules/rxjs/Subject.js');
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var Subscription_1 = $__require('node_modules/rxjs/Subscription.js');
    var root_1 = $__require('node_modules/rxjs/util/root.js');
    var ReplaySubject_1 = $__require('node_modules/rxjs/ReplaySubject.js');
    var tryCatch_1 = $__require('node_modules/rxjs/util/tryCatch.js');
    var errorObject_1 = $__require('node_modules/rxjs/util/errorObject.js');
    var assign_1 = $__require('node_modules/rxjs/util/assign.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var WebSocketSubject = function (_super) {
        __extends(WebSocketSubject, _super);
        function WebSocketSubject(urlConfigOrSource, destination) {
            if (urlConfigOrSource instanceof Observable_1.Observable) {
                _super.call(this, destination, urlConfigOrSource);
            } else {
                _super.call(this);
                this.WebSocketCtor = root_1.root.WebSocket;
                this._output = new Subject_1.Subject();
                if (typeof urlConfigOrSource === 'string') {
                    this.url = urlConfigOrSource;
                } else {
                    // WARNING: config object could override important members here.
                    assign_1.assign(this, urlConfigOrSource);
                }
                if (!this.WebSocketCtor) {
                    throw new Error('no WebSocket constructor can be found');
                }
                this.destination = new ReplaySubject_1.ReplaySubject();
            }
        }
        WebSocketSubject.prototype.resultSelector = function (e) {
            return JSON.parse(e.data);
        };
        /**
         * @param urlConfigOrSource
         * @return {WebSocketSubject}
         * @static true
         * @name webSocket
         * @owner Observable
         */
        WebSocketSubject.create = function (urlConfigOrSource) {
            return new WebSocketSubject(urlConfigOrSource);
        };
        WebSocketSubject.prototype.lift = function (operator) {
            var sock = new WebSocketSubject(this, this.destination);
            sock.operator = operator;
            return sock;
        };
        // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures
        WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {
            var self = this;
            return new Observable_1.Observable(function (observer) {
                var result = tryCatch_1.tryCatch(subMsg)();
                if (result === errorObject_1.errorObject) {
                    observer.error(errorObject_1.errorObject.e);
                } else {
                    self.next(result);
                }
                var subscription = self.subscribe(function (x) {
                    var result = tryCatch_1.tryCatch(messageFilter)(x);
                    if (result === errorObject_1.errorObject) {
                        observer.error(errorObject_1.errorObject.e);
                    } else if (result) {
                        observer.next(x);
                    }
                }, function (err) {
                    return observer.error(err);
                }, function () {
                    return observer.complete();
                });
                return function () {
                    var result = tryCatch_1.tryCatch(unsubMsg)();
                    if (result === errorObject_1.errorObject) {
                        observer.error(errorObject_1.errorObject.e);
                    } else {
                        self.next(result);
                    }
                    subscription.unsubscribe();
                };
            });
        };
        WebSocketSubject.prototype._connectSocket = function () {
            var _this = this;
            var WebSocketCtor = this.WebSocketCtor;
            var observer = this._output;
            var socket = null;
            try {
                socket = this.protocol ? new WebSocketCtor(this.url, this.protocol) : new WebSocketCtor(this.url);
                this.socket = socket;
            } catch (e) {
                observer.error(e);
                return;
            }
            var subscription = new Subscription_1.Subscription(function () {
                _this.socket = null;
                if (socket && socket.readyState === 1) {
                    socket.close();
                }
            });
            socket.onopen = function (e) {
                var openObserver = _this.openObserver;
                if (openObserver) {
                    openObserver.next(e);
                }
                var queue = _this.destination;
                _this.destination = Subscriber_1.Subscriber.create(function (x) {
                    return socket.readyState === 1 && socket.send(x);
                }, function (e) {
                    var closingObserver = _this.closingObserver;
                    if (closingObserver) {
                        closingObserver.next(undefined);
                    }
                    if (e && e.code) {
                        socket.close(e.code, e.reason);
                    } else {
                        observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' + 'and an optional reason: { code: number, reason: string }'));
                    }
                    _this.destination = new ReplaySubject_1.ReplaySubject();
                    _this.socket = null;
                }, function () {
                    var closingObserver = _this.closingObserver;
                    if (closingObserver) {
                        closingObserver.next(undefined);
                    }
                    socket.close();
                    _this.destination = new ReplaySubject_1.ReplaySubject();
                    _this.socket = null;
                });
                if (queue && queue instanceof ReplaySubject_1.ReplaySubject) {
                    subscription.add(queue.subscribe(_this.destination));
                }
            };
            socket.onerror = function (e) {
                return observer.error(e);
            };
            socket.onclose = function (e) {
                var closeObserver = _this.closeObserver;
                if (closeObserver) {
                    closeObserver.next(e);
                }
                if (e.wasClean) {
                    observer.complete();
                } else {
                    observer.error(e);
                }
            };
            socket.onmessage = function (e) {
                var result = tryCatch_1.tryCatch(_this.resultSelector)(e);
                if (result === errorObject_1.errorObject) {
                    observer.error(errorObject_1.errorObject.e);
                } else {
                    observer.next(result);
                }
            };
        };
        WebSocketSubject.prototype._subscribe = function (subscriber) {
            var _this = this;
            var source = this.source;
            if (source) {
                return source.subscribe(subscriber);
            }
            if (!this.socket) {
                this._connectSocket();
            }
            var subscription = new Subscription_1.Subscription();
            subscription.add(this._output.subscribe(subscriber));
            subscription.add(function () {
                var socket = _this.socket;
                if (_this._output.observers.length === 0 && socket && socket.readyState === 1) {
                    socket.close();
                    _this.socket = null;
                }
            });
            return subscription;
        };
        WebSocketSubject.prototype.unsubscribe = function () {
            var _a = this,
                source = _a.source,
                socket = _a.socket;
            if (socket && socket.readyState === 1) {
                socket.close();
                this.socket = null;
            }
            _super.prototype.unsubscribe.call(this);
            if (!source) {
                this.destination = new ReplaySubject_1.ReplaySubject();
            }
        };
        return WebSocketSubject;
    }(Subject_1.AnonymousSubject);
    exports.WebSocketSubject = WebSocketSubject;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/dom/webSocket.js", ["node_modules/rxjs/observable/dom/WebSocketSubject.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var WebSocketSubject_1 = $__require("node_modules/rxjs/observable/dom/WebSocketSubject.js");
  exports.webSocket = WebSocketSubject_1.WebSocketSubject.create;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/dom/webSocket.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/dom/webSocket.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var webSocket_1 = $__require('node_modules/rxjs/observable/dom/webSocket.js');
  Observable_1.Observable.webSocket = webSocket_1.webSocket;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/buffer.js', ['node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Buffers the source Observable values until `closingNotifier` emits.
     *
     * <span class="informal">Collects values from the past as an array, and emits
     * that array only when another Observable emits.</span>
     *
     * <img src="./img/buffer.png" width="100%">
     *
     * Buffers the incoming Observable values until the given `closingNotifier`
     * Observable emits a value, at which point it emits the buffer on the output
     * Observable and starts a new buffer internally, awaiting the next time
     * `closingNotifier` emits.
     *
     * @example <caption>On every click, emit array of most recent interval events</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var interval = Rx.Observable.interval(1000);
     * var buffered = interval.buffer(clicks);
     * buffered.subscribe(x => console.log(x));
     *
     * @see {@link bufferCount}
     * @see {@link bufferTime}
     * @see {@link bufferToggle}
     * @see {@link bufferWhen}
     * @see {@link window}
     *
     * @param {Observable<any>} closingNotifier An Observable that signals the
     * buffer to be emitted on the output Observable.
     * @return {Observable<T[]>} An Observable of buffers, which are arrays of
     * values.
     * @method buffer
     * @owner Observable
     */
    function buffer(closingNotifier) {
        return this.lift(new BufferOperator(closingNotifier));
    }
    exports.buffer = buffer;
    var BufferOperator = function () {
        function BufferOperator(closingNotifier) {
            this.closingNotifier = closingNotifier;
        }
        BufferOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new BufferSubscriber(subscriber, this.closingNotifier));
        };
        return BufferOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var BufferSubscriber = function (_super) {
        __extends(BufferSubscriber, _super);
        function BufferSubscriber(destination, closingNotifier) {
            _super.call(this, destination);
            this.buffer = [];
            this.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));
        }
        BufferSubscriber.prototype._next = function (value) {
            this.buffer.push(value);
        };
        BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var buffer = this.buffer;
            this.buffer = [];
            this.destination.next(buffer);
        };
        return BufferSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/buffer.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/buffer.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var buffer_1 = $__require('node_modules/rxjs/operator/buffer.js');
  Observable_1.Observable.prototype.buffer = buffer_1.buffer;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/bufferCount.js", ["node_modules/rxjs/Subscriber.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("node_modules/rxjs/Subscriber.js");
    /**
     * Buffers the source Observable values until the size hits the maximum
     * `bufferSize` given.
     *
     * <span class="informal">Collects values from the past as an array, and emits
     * that array only when its size reaches `bufferSize`.</span>
     *
     * <img src="./img/bufferCount.png" width="100%">
     *
     * Buffers a number of values from the source Observable by `bufferSize` then
     * emits the buffer and clears it, and starts a new buffer each
     * `startBufferEvery` values. If `startBufferEvery` is not provided or is
     * `null`, then new buffers are started immediately at the start of the source
     * and when each buffer closes and is emitted.
     *
     * @example <caption>Emit the last two click events as an array</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var buffered = clicks.bufferCount(2);
     * buffered.subscribe(x => console.log(x));
     *
     * @example <caption>On every click, emit the last two click events as an array</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var buffered = clicks.bufferCount(2, 1);
     * buffered.subscribe(x => console.log(x));
     *
     * @see {@link buffer}
     * @see {@link bufferTime}
     * @see {@link bufferToggle}
     * @see {@link bufferWhen}
     * @see {@link pairwise}
     * @see {@link windowCount}
     *
     * @param {number} bufferSize The maximum size of the buffer emitted.
     * @param {number} [startBufferEvery] Interval at which to start a new buffer.
     * For example if `startBufferEvery` is `2`, then a new buffer will be started
     * on every other value from the source. A new buffer is started at the
     * beginning of the source by default.
     * @return {Observable<T[]>} An Observable of arrays of buffered values.
     * @method bufferCount
     * @owner Observable
     */
    function bufferCount(bufferSize, startBufferEvery) {
        if (startBufferEvery === void 0) {
            startBufferEvery = null;
        }
        return this.lift(new BufferCountOperator(bufferSize, startBufferEvery));
    }
    exports.bufferCount = bufferCount;
    var BufferCountOperator = function () {
        function BufferCountOperator(bufferSize, startBufferEvery) {
            this.bufferSize = bufferSize;
            this.startBufferEvery = startBufferEvery;
        }
        BufferCountOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));
        };
        return BufferCountOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var BufferCountSubscriber = function (_super) {
        __extends(BufferCountSubscriber, _super);
        function BufferCountSubscriber(destination, bufferSize, startBufferEvery) {
            _super.call(this, destination);
            this.bufferSize = bufferSize;
            this.startBufferEvery = startBufferEvery;
            this.buffers = [[]];
            this.count = 0;
        }
        BufferCountSubscriber.prototype._next = function (value) {
            var count = this.count += 1;
            var destination = this.destination;
            var bufferSize = this.bufferSize;
            var startBufferEvery = this.startBufferEvery == null ? bufferSize : this.startBufferEvery;
            var buffers = this.buffers;
            var len = buffers.length;
            var remove = -1;
            if (count % startBufferEvery === 0) {
                buffers.push([]);
            }
            for (var i = 0; i < len; i++) {
                var buffer = buffers[i];
                buffer.push(value);
                if (buffer.length === bufferSize) {
                    remove = i;
                    destination.next(buffer);
                }
            }
            if (remove !== -1) {
                buffers.splice(remove, 1);
            }
        };
        BufferCountSubscriber.prototype._complete = function () {
            var destination = this.destination;
            var buffers = this.buffers;
            while (buffers.length > 0) {
                var buffer = buffers.shift();
                if (buffer.length > 0) {
                    destination.next(buffer);
                }
            }
            _super.prototype._complete.call(this);
        };
        return BufferCountSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/bufferCount.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/bufferCount.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var bufferCount_1 = $__require('node_modules/rxjs/operator/bufferCount.js');
  Observable_1.Observable.prototype.bufferCount = bufferCount_1.bufferCount;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/bufferTime.js', ['node_modules/rxjs/scheduler/async.js', 'node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/util/isScheduler.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var async_1 = $__require('node_modules/rxjs/scheduler/async.js');
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var isScheduler_1 = $__require('node_modules/rxjs/util/isScheduler.js');
    /**
     * Buffers the source Observable values for a specific time period.
     *
     * <span class="informal">Collects values from the past as an array, and emits
     * those arrays periodically in time.</span>
     *
     * <img src="./img/bufferTime.png" width="100%">
     *
     * Buffers values from the source for a specific time duration `bufferTimeSpan`.
     * Unless the optional argument `bufferCreationInterval` is given, it emits and
     * resets the buffer every `bufferTimeSpan` milliseconds. If
     * `bufferCreationInterval` is given, this operator opens the buffer every
     * `bufferCreationInterval` milliseconds and closes (emits and resets) the
     * buffer every `bufferTimeSpan` milliseconds. When the optional argument
     * `maxBufferSize` is specified, the buffer will be closed either after
     * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.
     *
     * @example <caption>Every second, emit an array of the recent click events</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var buffered = clicks.bufferTime(1000);
     * buffered.subscribe(x => console.log(x));
     *
     * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var buffered = clicks.bufferTime(2000, 5000);
     * buffered.subscribe(x => console.log(x));
     *
     * @see {@link buffer}
     * @see {@link bufferCount}
     * @see {@link bufferToggle}
     * @see {@link bufferWhen}
     * @see {@link windowTime}
     *
     * @param {number} bufferTimeSpan The amount of time to fill each buffer array.
     * @param {number} [bufferCreationInterval] The interval at which to start new
     * buffers.
     * @param {number} [maxBufferSize] The maximum buffer size.
     * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the
     * intervals that determine buffer boundaries.
     * @return {Observable<T[]>} An observable of arrays of buffered values.
     * @method bufferTime
     * @owner Observable
     */
    function bufferTime(bufferTimeSpan) {
        var length = arguments.length;
        var scheduler = async_1.async;
        if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {
            scheduler = arguments[arguments.length - 1];
            length--;
        }
        var bufferCreationInterval = null;
        if (length >= 2) {
            bufferCreationInterval = arguments[1];
        }
        var maxBufferSize = Number.POSITIVE_INFINITY;
        if (length >= 3) {
            maxBufferSize = arguments[2];
        }
        return this.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));
    }
    exports.bufferTime = bufferTime;
    var BufferTimeOperator = function () {
        function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
            this.bufferTimeSpan = bufferTimeSpan;
            this.bufferCreationInterval = bufferCreationInterval;
            this.maxBufferSize = maxBufferSize;
            this.scheduler = scheduler;
        }
        BufferTimeOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));
        };
        return BufferTimeOperator;
    }();
    var Context = function () {
        function Context() {
            this.buffer = [];
        }
        return Context;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var BufferTimeSubscriber = function (_super) {
        __extends(BufferTimeSubscriber, _super);
        function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
            _super.call(this, destination);
            this.bufferTimeSpan = bufferTimeSpan;
            this.bufferCreationInterval = bufferCreationInterval;
            this.maxBufferSize = maxBufferSize;
            this.scheduler = scheduler;
            this.contexts = [];
            var context = this.openContext();
            this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
            if (this.timespanOnly) {
                var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
                this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
            } else {
                var closeState = { subscriber: this, context: context };
                var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: this, scheduler: scheduler };
                this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
                this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
            }
        }
        BufferTimeSubscriber.prototype._next = function (value) {
            var contexts = this.contexts;
            var len = contexts.length;
            var filledBufferContext;
            for (var i = 0; i < len; i++) {
                var context = contexts[i];
                var buffer = context.buffer;
                buffer.push(value);
                if (buffer.length == this.maxBufferSize) {
                    filledBufferContext = context;
                }
            }
            if (filledBufferContext) {
                this.onBufferFull(filledBufferContext);
            }
        };
        BufferTimeSubscriber.prototype._error = function (err) {
            this.contexts.length = 0;
            _super.prototype._error.call(this, err);
        };
        BufferTimeSubscriber.prototype._complete = function () {
            var _a = this,
                contexts = _a.contexts,
                destination = _a.destination;
            while (contexts.length > 0) {
                var context = contexts.shift();
                destination.next(context.buffer);
            }
            _super.prototype._complete.call(this);
        };
        BufferTimeSubscriber.prototype._unsubscribe = function () {
            this.contexts = null;
        };
        BufferTimeSubscriber.prototype.onBufferFull = function (context) {
            this.closeContext(context);
            var closeAction = context.closeAction;
            closeAction.unsubscribe();
            this.remove(closeAction);
            if (this.timespanOnly) {
                context = this.openContext();
                var bufferTimeSpan = this.bufferTimeSpan;
                var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
                this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
            }
        };
        BufferTimeSubscriber.prototype.openContext = function () {
            var context = new Context();
            this.contexts.push(context);
            return context;
        };
        BufferTimeSubscriber.prototype.closeContext = function (context) {
            this.destination.next(context.buffer);
            var contexts = this.contexts;
            var spliceIndex = contexts ? contexts.indexOf(context) : -1;
            if (spliceIndex >= 0) {
                contexts.splice(contexts.indexOf(context), 1);
            }
        };
        return BufferTimeSubscriber;
    }(Subscriber_1.Subscriber);
    function dispatchBufferTimeSpanOnly(state) {
        var subscriber = state.subscriber;
        var prevContext = state.context;
        if (prevContext) {
            subscriber.closeContext(prevContext);
        }
        if (!subscriber.closed) {
            state.context = subscriber.openContext();
            state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
        }
    }
    function dispatchBufferCreation(state) {
        var bufferCreationInterval = state.bufferCreationInterval,
            bufferTimeSpan = state.bufferTimeSpan,
            subscriber = state.subscriber,
            scheduler = state.scheduler;
        var context = subscriber.openContext();
        var action = this;
        if (!subscriber.closed) {
            subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));
            action.schedule(state, bufferCreationInterval);
        }
    }
    function dispatchBufferClose(arg) {
        var subscriber = arg.subscriber,
            context = arg.context;
        subscriber.closeContext(context);
    }
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/bufferTime.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/bufferTime.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var bufferTime_1 = $__require('node_modules/rxjs/operator/bufferTime.js');
  Observable_1.Observable.prototype.bufferTime = bufferTime_1.bufferTime;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/bufferToggle.js', ['node_modules/rxjs/Subscription.js', 'node_modules/rxjs/util/subscribeToResult.js', 'node_modules/rxjs/OuterSubscriber.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscription_1 = $__require('node_modules/rxjs/Subscription.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    /**
     * Buffers the source Observable values starting from an emission from
     * `openings` and ending when the output of `closingSelector` emits.
     *
     * <span class="informal">Collects values from the past as an array. Starts
     * collecting only when `opening` emits, and calls the `closingSelector`
     * function to get an Observable that tells when to close the buffer.</span>
     *
     * <img src="./img/bufferToggle.png" width="100%">
     *
     * Buffers values from the source by opening the buffer via signals from an
     * Observable provided to `openings`, and closing and sending the buffers when
     * a Subscribable or Promise returned by the `closingSelector` function emits.
     *
     * @example <caption>Every other second, emit the click events from the next 500ms</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var openings = Rx.Observable.interval(1000);
     * var buffered = clicks.bufferToggle(openings, i =>
     *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()
     * );
     * buffered.subscribe(x => console.log(x));
     *
     * @see {@link buffer}
     * @see {@link bufferCount}
     * @see {@link bufferTime}
     * @see {@link bufferWhen}
     * @see {@link windowToggle}
     *
     * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new
     * buffers.
     * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes
     * the value emitted by the `openings` observable and returns a Subscribable or Promise,
     * which, when it emits, signals that the associated buffer should be emitted
     * and cleared.
     * @return {Observable<T[]>} An observable of arrays of buffered values.
     * @method bufferToggle
     * @owner Observable
     */
    function bufferToggle(openings, closingSelector) {
        return this.lift(new BufferToggleOperator(openings, closingSelector));
    }
    exports.bufferToggle = bufferToggle;
    var BufferToggleOperator = function () {
        function BufferToggleOperator(openings, closingSelector) {
            this.openings = openings;
            this.closingSelector = closingSelector;
        }
        BufferToggleOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
        };
        return BufferToggleOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var BufferToggleSubscriber = function (_super) {
        __extends(BufferToggleSubscriber, _super);
        function BufferToggleSubscriber(destination, openings, closingSelector) {
            _super.call(this, destination);
            this.openings = openings;
            this.closingSelector = closingSelector;
            this.contexts = [];
            this.add(subscribeToResult_1.subscribeToResult(this, openings));
        }
        BufferToggleSubscriber.prototype._next = function (value) {
            var contexts = this.contexts;
            var len = contexts.length;
            for (var i = 0; i < len; i++) {
                contexts[i].buffer.push(value);
            }
        };
        BufferToggleSubscriber.prototype._error = function (err) {
            var contexts = this.contexts;
            while (contexts.length > 0) {
                var context = contexts.shift();
                context.subscription.unsubscribe();
                context.buffer = null;
                context.subscription = null;
            }
            this.contexts = null;
            _super.prototype._error.call(this, err);
        };
        BufferToggleSubscriber.prototype._complete = function () {
            var contexts = this.contexts;
            while (contexts.length > 0) {
                var context = contexts.shift();
                this.destination.next(context.buffer);
                context.subscription.unsubscribe();
                context.buffer = null;
                context.subscription = null;
            }
            this.contexts = null;
            _super.prototype._complete.call(this);
        };
        BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
        };
        BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {
            this.closeBuffer(innerSub.context);
        };
        BufferToggleSubscriber.prototype.openBuffer = function (value) {
            try {
                var closingSelector = this.closingSelector;
                var closingNotifier = closingSelector.call(this, value);
                if (closingNotifier) {
                    this.trySubscribe(closingNotifier);
                }
            } catch (err) {
                this._error(err);
            }
        };
        BufferToggleSubscriber.prototype.closeBuffer = function (context) {
            var contexts = this.contexts;
            if (contexts && context) {
                var buffer = context.buffer,
                    subscription = context.subscription;
                this.destination.next(buffer);
                contexts.splice(contexts.indexOf(context), 1);
                this.remove(subscription);
                subscription.unsubscribe();
            }
        };
        BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {
            var contexts = this.contexts;
            var buffer = [];
            var subscription = new Subscription_1.Subscription();
            var context = { buffer: buffer, subscription: subscription };
            contexts.push(context);
            var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);
            if (!innerSubscription || innerSubscription.closed) {
                this.closeBuffer(context);
            } else {
                innerSubscription.context = context;
                this.add(innerSubscription);
                subscription.add(innerSubscription);
            }
        };
        return BufferToggleSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/bufferToggle.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/bufferToggle.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var bufferToggle_1 = $__require('node_modules/rxjs/operator/bufferToggle.js');
  Observable_1.Observable.prototype.bufferToggle = bufferToggle_1.bufferToggle;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/bufferWhen.js', ['node_modules/rxjs/Subscription.js', 'node_modules/rxjs/util/tryCatch.js', 'node_modules/rxjs/util/errorObject.js', 'node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscription_1 = $__require('node_modules/rxjs/Subscription.js');
    var tryCatch_1 = $__require('node_modules/rxjs/util/tryCatch.js');
    var errorObject_1 = $__require('node_modules/rxjs/util/errorObject.js');
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Buffers the source Observable values, using a factory function of closing
     * Observables to determine when to close, emit, and reset the buffer.
     *
     * <span class="informal">Collects values from the past as an array. When it
     * starts collecting values, it calls a function that returns an Observable that
     * tells when to close the buffer and restart collecting.</span>
     *
     * <img src="./img/bufferWhen.png" width="100%">
     *
     * Opens a buffer immediately, then closes the buffer when the observable
     * returned by calling `closingSelector` function emits a value. When it closes
     * the buffer, it immediately opens a new buffer and repeats the process.
     *
     * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var buffered = clicks.bufferWhen(() =>
     *   Rx.Observable.interval(1000 + Math.random() * 4000)
     * );
     * buffered.subscribe(x => console.log(x));
     *
     * @see {@link buffer}
     * @see {@link bufferCount}
     * @see {@link bufferTime}
     * @see {@link bufferToggle}
     * @see {@link windowWhen}
     *
     * @param {function(): Observable} closingSelector A function that takes no
     * arguments and returns an Observable that signals buffer closure.
     * @return {Observable<T[]>} An observable of arrays of buffered values.
     * @method bufferWhen
     * @owner Observable
     */
    function bufferWhen(closingSelector) {
        return this.lift(new BufferWhenOperator(closingSelector));
    }
    exports.bufferWhen = bufferWhen;
    var BufferWhenOperator = function () {
        function BufferWhenOperator(closingSelector) {
            this.closingSelector = closingSelector;
        }
        BufferWhenOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
        };
        return BufferWhenOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var BufferWhenSubscriber = function (_super) {
        __extends(BufferWhenSubscriber, _super);
        function BufferWhenSubscriber(destination, closingSelector) {
            _super.call(this, destination);
            this.closingSelector = closingSelector;
            this.subscribing = false;
            this.openBuffer();
        }
        BufferWhenSubscriber.prototype._next = function (value) {
            this.buffer.push(value);
        };
        BufferWhenSubscriber.prototype._complete = function () {
            var buffer = this.buffer;
            if (buffer) {
                this.destination.next(buffer);
            }
            _super.prototype._complete.call(this);
        };
        BufferWhenSubscriber.prototype._unsubscribe = function () {
            this.buffer = null;
            this.subscribing = false;
        };
        BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.openBuffer();
        };
        BufferWhenSubscriber.prototype.notifyComplete = function () {
            if (this.subscribing) {
                this.complete();
            } else {
                this.openBuffer();
            }
        };
        BufferWhenSubscriber.prototype.openBuffer = function () {
            var closingSubscription = this.closingSubscription;
            if (closingSubscription) {
                this.remove(closingSubscription);
                closingSubscription.unsubscribe();
            }
            var buffer = this.buffer;
            if (this.buffer) {
                this.destination.next(buffer);
            }
            this.buffer = [];
            var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
            if (closingNotifier === errorObject_1.errorObject) {
                this.error(errorObject_1.errorObject.e);
            } else {
                closingSubscription = new Subscription_1.Subscription();
                this.closingSubscription = closingSubscription;
                this.add(closingSubscription);
                this.subscribing = true;
                closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));
                this.subscribing = false;
            }
        };
        return BufferWhenSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/bufferWhen.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/bufferWhen.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var bufferWhen_1 = $__require('node_modules/rxjs/operator/bufferWhen.js');
  Observable_1.Observable.prototype.bufferWhen = bufferWhen_1.bufferWhen;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/cache.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/ReplaySubject.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var ReplaySubject_1 = $__require('node_modules/rxjs/ReplaySubject.js');
    /**
     * @param bufferSize
     * @param windowTime
     * @param scheduler
     * @return {Observable<any>}
     * @method cache
     * @owner Observable
     */
    function cache(bufferSize, windowTime, scheduler) {
        if (bufferSize === void 0) {
            bufferSize = Number.POSITIVE_INFINITY;
        }
        if (windowTime === void 0) {
            windowTime = Number.POSITIVE_INFINITY;
        }
        var subject;
        var source = this;
        var refs = 0;
        var outerSub;
        var getSubject = function () {
            subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);
            return subject;
        };
        return new Observable_1.Observable(function (observer) {
            if (!subject) {
                subject = getSubject();
                outerSub = source.subscribe(function (value) {
                    return subject.next(value);
                }, function (err) {
                    var s = subject;
                    subject = null;
                    s.error(err);
                }, function () {
                    return subject.complete();
                });
            }
            refs++;
            if (!subject) {
                subject = getSubject();
            }
            var innerSub = subject.subscribe(observer);
            return function () {
                refs--;
                if (innerSub) {
                    innerSub.unsubscribe();
                }
                if (refs === 0) {
                    outerSub.unsubscribe();
                }
            };
        });
    }
    exports.cache = cache;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/cache.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/cache.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var cache_1 = $__require('node_modules/rxjs/operator/cache.js');
  Observable_1.Observable.prototype.cache = cache_1.cache;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/catch.js', ['node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Catches errors on the observable to be handled by returning a new observable or throwing an error.
     * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which
     *  is the source observable, in case you'd like to "retry" that observable by returning it again. Whatever observable
     *  is returned by the `selector` will be used to continue the observable chain.
     * @return {Observable} an observable that originates from either the source or the observable returned by the
     *  catch `selector` function.
     * @method catch
     * @owner Observable
     */
    function _catch(selector) {
        var operator = new CatchOperator(selector);
        var caught = this.lift(operator);
        return operator.caught = caught;
    }
    exports._catch = _catch;
    var CatchOperator = function () {
        function CatchOperator(selector) {
            this.selector = selector;
        }
        CatchOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
        };
        return CatchOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var CatchSubscriber = function (_super) {
        __extends(CatchSubscriber, _super);
        function CatchSubscriber(destination, selector, caught) {
            _super.call(this, destination);
            this.selector = selector;
            this.caught = caught;
        }
        // NOTE: overriding `error` instead of `_error` because we don't want
        // to have this flag this subscriber as `isStopped`.
        CatchSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var result = void 0;
                try {
                    result = this.selector(err, this.caught);
                } catch (err) {
                    this.destination.error(err);
                    return;
                }
                this.unsubscribe();
                this.destination.remove(this);
                subscribeToResult_1.subscribeToResult(this, result);
            }
        };
        return CatchSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/catch.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/catch.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var catch_1 = $__require('node_modules/rxjs/operator/catch.js');
  Observable_1.Observable.prototype.catch = catch_1._catch;
  Observable_1.Observable.prototype._catch = catch_1._catch;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/combineAll.js", ["node_modules/rxjs/operator/combineLatest.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var combineLatest_1 = $__require("node_modules/rxjs/operator/combineLatest.js");
  /**
   * Converts a higher-order Observable into a first-order Observable by waiting
   * for the outer Observable to complete, then applying {@link combineLatest}.
   *
   * <span class="informal">Flattens an Observable-of-Observables by applying
   * {@link combineLatest} when the Observable-of-Observables completes.</span>
   *
   * <img src="./img/combineAll.png" width="100%">
   *
   * Takes an Observable of Observables, and collects all Observables from it.
   * Once the outer Observable completes, it subscribes to all collected
   * Observables and combines their values using the {@link combineLatest}
   * strategy, such that:
   * - Every time an inner Observable emits, the output Observable emits.
   * - When the returned observable emits, it emits all of the latest values by:
   *   - If a `project` function is provided, it is called with each recent value
   *     from each inner Observable in whatever order they arrived, and the result
   *     of the `project` function is what is emitted by the output Observable.
   *   - If there is no `project` function, an array of all of the most recent
   *     values is emitted by the output Observable.
   *
   * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>
   * var clicks = Rx.Observable.fromEvent(document, 'click');
   * var higherOrder = clicks.map(ev =>
   *   Rx.Observable.interval(Math.random()*2000).take(3)
   * ).take(2);
   * var result = higherOrder.combineAll();
   * result.subscribe(x => console.log(x));
   *
   * @see {@link combineLatest}
   * @see {@link mergeAll}
   *
   * @param {function} [project] An optional function to map the most recent
   * values from each inner Observable into a new result. Takes each of the most
   * recent values from each collected inner Observable as arguments, in order.
   * @return {Observable} An Observable of projected results or arrays of recent
   * values.
   * @method combineAll
   * @owner Observable
   */
  function combineAll(project) {
    return this.lift(new combineLatest_1.CombineLatestOperator(project));
  }
  exports.combineAll = combineAll;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/combineAll.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/combineAll.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var combineAll_1 = $__require('node_modules/rxjs/operator/combineAll.js');
  Observable_1.Observable.prototype.combineAll = combineAll_1.combineAll;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/combineLatest.js', ['node_modules/rxjs/observable/ArrayObservable.js', 'node_modules/rxjs/util/isArray.js', 'node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var ArrayObservable_1 = $__require('node_modules/rxjs/observable/ArrayObservable.js');
    var isArray_1 = $__require('node_modules/rxjs/util/isArray.js');
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    var none = {};
    /**
     * Combines multiple Observables to create an Observable whose values are
     * calculated from the latest values of each of its input Observables.
     *
     * <span class="informal">Whenever any input Observable emits a value, it
     * computes a formula using the latest values from all the inputs, then emits
     * the output of that formula.</span>
     *
     * <img src="./img/combineLatest.png" width="100%">
     *
     * `combineLatest` combines the values from this Observable with values from
     * Observables passed as arguments. This is done by subscribing to each
     * Observable, in order, and collecting an array of each of the most recent
     * values any time any of the input Observables emits, then either taking that
     * array and passing it as arguments to an optional `project` function and
     * emitting the return value of that, or just emitting the array of recent
     * values directly if there is no `project` function.
     *
     * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>
     * var weight = Rx.Observable.of(70, 72, 76, 79, 75);
     * var height = Rx.Observable.of(1.76, 1.77, 1.78);
     * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));
     * bmi.subscribe(x => console.log('BMI is ' + x));
     *
     * @see {@link combineAll}
     * @see {@link merge}
     * @see {@link withLatestFrom}
     *
     * @param {Observable} other An input Observable to combine with the source
     * Observable. More than one input Observables may be given as argument.
     * @param {function} [project] An optional function to project the values from
     * the combined latest values into a new value on the output Observable.
     * @return {Observable} An Observable of projected values from the most recent
     * values from each input Observable, or an array of the most recent values from
     * each input Observable.
     * @method combineLatest
     * @owner Observable
     */
    function combineLatest() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i - 0] = arguments[_i];
        }
        var project = null;
        if (typeof observables[observables.length - 1] === 'function') {
            project = observables.pop();
        }
        // if the first and only other argument besides the resultSelector is an array
        // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`
        if (observables.length === 1 && isArray_1.isArray(observables[0])) {
            observables = observables[0];
        }
        observables.unshift(this);
        return new ArrayObservable_1.ArrayObservable(observables).lift(new CombineLatestOperator(project));
    }
    exports.combineLatest = combineLatest;
    /* tslint:enable:max-line-length */
    var CombineLatestOperator = function () {
        function CombineLatestOperator(project) {
            this.project = project;
        }
        CombineLatestOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new CombineLatestSubscriber(subscriber, this.project));
        };
        return CombineLatestOperator;
    }();
    exports.CombineLatestOperator = CombineLatestOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var CombineLatestSubscriber = function (_super) {
        __extends(CombineLatestSubscriber, _super);
        function CombineLatestSubscriber(destination, project) {
            _super.call(this, destination);
            this.project = project;
            this.active = 0;
            this.values = [];
            this.observables = [];
        }
        CombineLatestSubscriber.prototype._next = function (observable) {
            this.values.push(none);
            this.observables.push(observable);
        };
        CombineLatestSubscriber.prototype._complete = function () {
            var observables = this.observables;
            var len = observables.length;
            if (len === 0) {
                this.destination.complete();
            } else {
                this.active = len;
                this.toRespond = len;
                for (var i = 0; i < len; i++) {
                    var observable = observables[i];
                    this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
                }
            }
        };
        CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
            if ((this.active -= 1) === 0) {
                this.destination.complete();
            }
        };
        CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var values = this.values;
            var oldVal = values[outerIndex];
            var toRespond = !this.toRespond ? 0 : oldVal === none ? --this.toRespond : this.toRespond;
            values[outerIndex] = innerValue;
            if (toRespond === 0) {
                if (this.project) {
                    this._tryProject(values);
                } else {
                    this.destination.next(values.slice());
                }
            }
        };
        CombineLatestSubscriber.prototype._tryProject = function (values) {
            var result;
            try {
                result = this.project.apply(this, values);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return CombineLatestSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    exports.CombineLatestSubscriber = CombineLatestSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/combineLatest.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/combineLatest.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var combineLatest_1 = $__require('node_modules/rxjs/operator/combineLatest.js');
  Observable_1.Observable.prototype.combineLatest = combineLatest_1.combineLatest;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/concat.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/concat.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var concat_1 = $__require('node_modules/rxjs/operator/concat.js');
  Observable_1.Observable.prototype.concat = concat_1.concat;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/concatAll.js", ["node_modules/rxjs/operator/mergeAll.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var mergeAll_1 = $__require("node_modules/rxjs/operator/mergeAll.js");
  /**
   * Converts a higher-order Observable into a first-order Observable by
   * concatenating the inner Observables in order.
   *
   * <span class="informal">Flattens an Observable-of-Observables by putting one
   * inner Observable after the other.</span>
   *
   * <img src="./img/concatAll.png" width="100%">
   *
   * Joins every Observable emitted by the source (a higher-order Observable), in
   * a serial fashion. It subscribes to each inner Observable only after the
   * previous inner Observable has completed, and merges all of their values into
   * the returned observable.
   *
   * __Warning:__ If the source Observable emits Observables quickly and
   * endlessly, and the inner Observables it emits generally complete slower than
   * the source emits, you can run into memory issues as the incoming Observables
   * collect in an unbounded buffer.
   *
   * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
   * to `1`.
   *
   * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
   * var clicks = Rx.Observable.fromEvent(document, 'click');
   * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
   * var firstOrder = higherOrder.concatAll();
   * firstOrder.subscribe(x => console.log(x));
   *
   * @see {@link combineAll}
   * @see {@link concat}
   * @see {@link concatMap}
   * @see {@link concatMapTo}
   * @see {@link exhaust}
   * @see {@link mergeAll}
   * @see {@link switch}
   * @see {@link zipAll}
   *
   * @return {Observable} An Observable emitting values from all the inner
   * Observables concatenated.
   * @method concatAll
   * @owner Observable
   */
  function concatAll() {
    return this.lift(new mergeAll_1.MergeAllOperator(1));
  }
  exports.concatAll = concatAll;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/concatAll.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/concatAll.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var concatAll_1 = $__require('node_modules/rxjs/operator/concatAll.js');
  Observable_1.Observable.prototype.concatAll = concatAll_1.concatAll;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/concatMap.js", ["node_modules/rxjs/operator/mergeMap.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var mergeMap_1 = $__require("node_modules/rxjs/operator/mergeMap.js");
  /**
   * Projects each source value to an Observable which is merged in the output
   * Observable, in a serialized fashion waiting for each one to complete before
   * merging the next.
   *
   * <span class="informal">Maps each value to an Observable, then flattens all of
   * these inner Observables using {@link concatAll}.</span>
   *
   * <img src="./img/concatMap.png" width="100%">
   *
   * Returns an Observable that emits items based on applying a function that you
   * supply to each item emitted by the source Observable, where that function
   * returns an (so-called "inner") Observable. Each new inner Observable is
   * concatenated with the previous inner Observable.
   *
   * __Warning:__ if source values arrive endlessly and faster than their
   * corresponding inner Observables can complete, it will result in memory issues
   * as inner Observables amass in an unbounded buffer waiting for their turn to
   * be subscribed to.
   *
   * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set
   * to `1`.
   *
   * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
   * var clicks = Rx.Observable.fromEvent(document, 'click');
   * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));
   * result.subscribe(x => console.log(x));
   *
   * @see {@link concat}
   * @see {@link concatAll}
   * @see {@link concatMapTo}
   * @see {@link exhaustMap}
   * @see {@link mergeMap}
   * @see {@link switchMap}
   *
   * @param {function(value: T, ?index: number): Observable} project A function
   * that, when applied to an item emitted by the source Observable, returns an
   * Observable.
   * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
   * A function to produce the value on the output Observable based on the values
   * and the indices of the source (outer) emission and the inner Observable
   * emission. The arguments passed to this function are:
   * - `outerValue`: the value that came from the source
   * - `innerValue`: the value that came from the projected Observable
   * - `outerIndex`: the "index" of the value that came from the source
   * - `innerIndex`: the "index" of the value from the projected Observable
   * @return {Observable} an observable of values merged from the projected
   * Observables as they were subscribed to, one at a time. Optionally, these
   * values may have been projected from a passed `projectResult` argument.
   * @return {Observable} An Observable that emits the result of applying the
   * projection function (and the optional `resultSelector`) to each item emitted
   * by the source Observable and taking values from each projected inner
   * Observable sequentially.
   * @method concatMap
   * @owner Observable
   */
  function concatMap(project, resultSelector) {
    return this.lift(new mergeMap_1.MergeMapOperator(project, resultSelector, 1));
  }
  exports.concatMap = concatMap;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/concatMap.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/concatMap.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var concatMap_1 = $__require('node_modules/rxjs/operator/concatMap.js');
  Observable_1.Observable.prototype.concatMap = concatMap_1.concatMap;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/concatMapTo.js", ["node_modules/rxjs/operator/mergeMapTo.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var mergeMapTo_1 = $__require("node_modules/rxjs/operator/mergeMapTo.js");
  /**
   * Projects each source value to the same Observable which is merged multiple
   * times in a serialized fashion on the output Observable.
   *
   * <span class="informal">It's like {@link concatMap}, but maps each value
   * always to the same inner Observable.</span>
   *
   * <img src="./img/concatMapTo.png" width="100%">
   *
   * Maps each source value to the given Observable `innerObservable` regardless
   * of the source value, and then flattens those resulting Observables into one
   * single Observable, which is the output Observable. Each new `innerObservable`
   * instance emitted on the output Observable is concatenated with the previous
   * `innerObservable` instance.
   *
   * __Warning:__ if source values arrive endlessly and faster than their
   * corresponding inner Observables can complete, it will result in memory issues
   * as inner Observables amass in an unbounded buffer waiting for their turn to
   * be subscribed to.
   *
   * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter
   * set to `1`.
   *
   * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
   * var clicks = Rx.Observable.fromEvent(document, 'click');
   * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));
   * result.subscribe(x => console.log(x));
   *
   * @see {@link concat}
   * @see {@link concatAll}
   * @see {@link concatMap}
   * @see {@link mergeMapTo}
   * @see {@link switchMapTo}
   *
   * @param {Observable} innerObservable An Observable to replace each value from
   * the source Observable.
   * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
   * A function to produce the value on the output Observable based on the values
   * and the indices of the source (outer) emission and the inner Observable
   * emission. The arguments passed to this function are:
   * - `outerValue`: the value that came from the source
   * - `innerValue`: the value that came from the projected Observable
   * - `outerIndex`: the "index" of the value that came from the source
   * - `innerIndex`: the "index" of the value from the projected Observable
   * @return {Observable} An observable of values merged together by joining the
   * passed observable with itself, one after the other, for each value emitted
   * from the source.
   * @method concatMapTo
   * @owner Observable
   */
  function concatMapTo(innerObservable, resultSelector) {
    return this.lift(new mergeMapTo_1.MergeMapToOperator(innerObservable, resultSelector, 1));
  }
  exports.concatMapTo = concatMapTo;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/concatMapTo.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/concatMapTo.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var concatMapTo_1 = $__require('node_modules/rxjs/operator/concatMapTo.js');
  Observable_1.Observable.prototype.concatMapTo = concatMapTo_1.concatMapTo;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/count.js", ["node_modules/rxjs/Subscriber.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("node_modules/rxjs/Subscriber.js");
    /**
     * Counts the number of emissions on the source and emits that number when the
     * source completes.
     *
     * <span class="informal">Tells how many values were emitted, when the source
     * completes.</span>
     *
     * <img src="./img/count.png" width="100%">
     *
     * `count` transforms an Observable that emits values into an Observable that
     * emits a single value that represents the number of values emitted by the
     * source Observable. If the source Observable terminates with an error, `count`
     * will pass this error notification along without emitting an value first. If
     * the source Observable does not terminate at all, `count` will neither emit
     * a value nor terminate. This operator takes an optional `predicate` function
     * as argument, in which case the output emission will represent the number of
     * source values that matched `true` with the `predicate`.
     *
     * @example <caption>Counts how many seconds have passed before the first click happened</caption>
     * var seconds = Rx.Observable.interval(1000);
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var secondsBeforeClick = seconds.takeUntil(clicks);
     * var result = secondsBeforeClick.count();
     * result.subscribe(x => console.log(x));
     *
     * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>
     * var numbers = Rx.Observable.range(1, 7);
     * var result = numbers.count(i => i % 2 === 1);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link max}
     * @see {@link min}
     * @see {@link reduce}
     *
     * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A
     * boolean function to select what values are to be counted. It is provided with
     * arguments of:
     * - `value`: the value from the source Observable.
     * - `index`: the (zero-based) "index" of the value from the source Observable.
     * - `source`: the source Observable instance itself.
     * @return {Observable} An Observable of one number that represents the count as
     * described above.
     * @method count
     * @owner Observable
     */
    function count(predicate) {
        return this.lift(new CountOperator(predicate, this));
    }
    exports.count = count;
    var CountOperator = function () {
        function CountOperator(predicate, source) {
            this.predicate = predicate;
            this.source = source;
        }
        CountOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
        };
        return CountOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var CountSubscriber = function (_super) {
        __extends(CountSubscriber, _super);
        function CountSubscriber(destination, predicate, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.source = source;
            this.count = 0;
            this.index = 0;
        }
        CountSubscriber.prototype._next = function (value) {
            if (this.predicate) {
                this._tryPredicate(value);
            } else {
                this.count++;
            }
        };
        CountSubscriber.prototype._tryPredicate = function (value) {
            var result;
            try {
                result = this.predicate(value, this.index++, this.source);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this.count++;
            }
        };
        CountSubscriber.prototype._complete = function () {
            this.destination.next(this.count);
            this.destination.complete();
        };
        return CountSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/count.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/count.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var count_1 = $__require('node_modules/rxjs/operator/count.js');
  Observable_1.Observable.prototype.count = count_1.count;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/dematerialize.js", ["node_modules/rxjs/Subscriber.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("node_modules/rxjs/Subscriber.js");
    /**
     * Converts an Observable of {@link Notification} objects into the emissions
     * that they represent.
     *
     * <span class="informal">Unwraps {@link Notification} objects as actual `next`,
     * `error` and `complete` emissions. The opposite of {@link materialize}.</span>
     *
     * <img src="./img/dematerialize.png" width="100%">
     *
     * `dematerialize` is assumed to operate an Observable that only emits
     * {@link Notification} objects as `next` emissions, and does not emit any
     * `error`. Such Observable is the output of a `materialize` operation. Those
     * notifications are then unwrapped using the metadata they contain, and emitted
     * as `next`, `error`, and `complete` on the output Observable.
     *
     * Use this operator in conjunction with {@link materialize}.
     *
     * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>
     * var notifA = new Rx.Notification('N', 'A');
     * var notifB = new Rx.Notification('N', 'B');
     * var notifE = new Rx.Notification('E', void 0,
     *   new TypeError('x.toUpperCase is not a function')
     * );
     * var materialized = Rx.Observable.of(notifA, notifB, notifE);
     * var upperCase = materialized.dematerialize();
     * upperCase.subscribe(x => console.log(x), e => console.error(e));
     *
     * @see {@link Notification}
     * @see {@link materialize}
     *
     * @return {Observable} An Observable that emits items and notifications
     * embedded in Notification objects emitted by the source Observable.
     * @method dematerialize
     * @owner Observable
     */
    function dematerialize() {
        return this.lift(new DeMaterializeOperator());
    }
    exports.dematerialize = dematerialize;
    var DeMaterializeOperator = function () {
        function DeMaterializeOperator() {}
        DeMaterializeOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new DeMaterializeSubscriber(subscriber));
        };
        return DeMaterializeOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DeMaterializeSubscriber = function (_super) {
        __extends(DeMaterializeSubscriber, _super);
        function DeMaterializeSubscriber(destination) {
            _super.call(this, destination);
        }
        DeMaterializeSubscriber.prototype._next = function (value) {
            value.observe(this.destination);
        };
        return DeMaterializeSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/dematerialize.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/dematerialize.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var dematerialize_1 = $__require('node_modules/rxjs/operator/dematerialize.js');
  Observable_1.Observable.prototype.dematerialize = dematerialize_1.dematerialize;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/debounce.js', ['node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Emits a value from the source Observable only after a particular time span
     * determined by another Observable has passed without another source emission.
     *
     * <span class="informal">It's like {@link debounceTime}, but the time span of
     * emission silence is determined by a second Observable.</span>
     *
     * <img src="./img/debounce.png" width="100%">
     *
     * `debounce` delays values emitted by the source Observable, but drops previous
     * pending delayed emissions if a new value arrives on the source Observable.
     * This operator keeps track of the most recent value from the source
     * Observable, and spawns a duration Observable by calling the
     * `durationSelector` function. The value is emitted only when the duration
     * Observable emits a value or completes, and if no other value was emitted on
     * the source Observable since the duration Observable was spawned. If a new
     * value appears before the duration Observable emits, the previous value will
     * be dropped and will not be emitted on the output Observable.
     *
     * Like {@link debounceTime}, this is a rate-limiting operator, and also a
     * delay-like operator since output emissions do not necessarily occur at the
     * same time as they did on the source Observable.
     *
     * @example <caption>Emit the most recent click after a burst of clicks</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.debounce(() => Rx.Observable.interval(1000));
     * result.subscribe(x => console.log(x));
     *
     * @see {@link audit}
     * @see {@link debounceTime}
     * @see {@link delayWhen}
     * @see {@link throttle}
     *
     * @param {function(value: T): Observable|Promise} durationSelector A function
     * that receives a value from the source Observable, for computing the timeout
     * duration for each source value, returned as an Observable or a Promise.
     * @return {Observable} An Observable that delays the emissions of the source
     * Observable by the specified duration Observable returned by
     * `durationSelector`, and may drop some values if they occur too frequently.
     * @method debounce
     * @owner Observable
     */
    function debounce(durationSelector) {
        return this.lift(new DebounceOperator(durationSelector));
    }
    exports.debounce = debounce;
    var DebounceOperator = function () {
        function DebounceOperator(durationSelector) {
            this.durationSelector = durationSelector;
        }
        DebounceOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
        };
        return DebounceOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DebounceSubscriber = function (_super) {
        __extends(DebounceSubscriber, _super);
        function DebounceSubscriber(destination, durationSelector) {
            _super.call(this, destination);
            this.durationSelector = durationSelector;
            this.hasValue = false;
            this.durationSubscription = null;
        }
        DebounceSubscriber.prototype._next = function (value) {
            try {
                var result = this.durationSelector.call(this, value);
                if (result) {
                    this._tryNext(value, result);
                }
            } catch (err) {
                this.destination.error(err);
            }
        };
        DebounceSubscriber.prototype._complete = function () {
            this.emitValue();
            this.destination.complete();
        };
        DebounceSubscriber.prototype._tryNext = function (value, duration) {
            var subscription = this.durationSubscription;
            this.value = value;
            this.hasValue = true;
            if (subscription) {
                subscription.unsubscribe();
                this.remove(subscription);
            }
            subscription = subscribeToResult_1.subscribeToResult(this, duration);
            if (!subscription.closed) {
                this.add(this.durationSubscription = subscription);
            }
        };
        DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.emitValue();
        };
        DebounceSubscriber.prototype.notifyComplete = function () {
            this.emitValue();
        };
        DebounceSubscriber.prototype.emitValue = function () {
            if (this.hasValue) {
                var value = this.value;
                var subscription = this.durationSubscription;
                if (subscription) {
                    this.durationSubscription = null;
                    subscription.unsubscribe();
                    this.remove(subscription);
                }
                this.value = null;
                this.hasValue = false;
                _super.prototype._next.call(this, value);
            }
        };
        return DebounceSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/debounce.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/debounce.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var debounce_1 = $__require('node_modules/rxjs/operator/debounce.js');
  Observable_1.Observable.prototype.debounce = debounce_1.debounce;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/debounceTime.js', ['node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/scheduler/async.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var async_1 = $__require('node_modules/rxjs/scheduler/async.js');
    /**
     * Emits a value from the source Observable only after a particular time span
     * has passed without another source emission.
     *
     * <span class="informal">It's like {@link delay}, but passes only the most
     * recent value from each burst of emissions.</span>
     *
     * <img src="./img/debounceTime.png" width="100%">
     *
     * `debounceTime` delays values emitted by the source Observable, but drops
     * previous pending delayed emissions if a new value arrives on the source
     * Observable. This operator keeps track of the most recent value from the
     * source Observable, and emits that only when `dueTime` enough time has passed
     * without any other value appearing on the source Observable. If a new value
     * appears before `dueTime` silence occurs, the previous value will be dropped
     * and will not be emitted on the output Observable.
     *
     * This is a rate-limiting operator, because it is impossible for more than one
     * value to be emitted in any time window of duration `dueTime`, but it is also
     * a delay-like operator since output emissions do not occur at the same time as
     * they did on the source Observable. Optionally takes a {@link Scheduler} for
     * managing timers.
     *
     * @example <caption>Emit the most recent click after a burst of clicks</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.debounceTime(1000);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link auditTime}
     * @see {@link debounce}
     * @see {@link delay}
     * @see {@link sampleTime}
     * @see {@link throttleTime}
     *
     * @param {number} dueTime The timeout duration in milliseconds (or the time
     * unit determined internally by the optional `scheduler`) for the window of
     * time required to wait for emission silence before emitting the most recent
     * source value.
     * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for
     * managing the timers that handle the timeout for each value.
     * @return {Observable} An Observable that delays the emissions of the source
     * Observable by the specified `dueTime`, and may drop some values if they occur
     * too frequently.
     * @method debounceTime
     * @owner Observable
     */
    function debounceTime(dueTime, scheduler) {
        if (scheduler === void 0) {
            scheduler = async_1.async;
        }
        return this.lift(new DebounceTimeOperator(dueTime, scheduler));
    }
    exports.debounceTime = debounceTime;
    var DebounceTimeOperator = function () {
        function DebounceTimeOperator(dueTime, scheduler) {
            this.dueTime = dueTime;
            this.scheduler = scheduler;
        }
        DebounceTimeOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
        };
        return DebounceTimeOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DebounceTimeSubscriber = function (_super) {
        __extends(DebounceTimeSubscriber, _super);
        function DebounceTimeSubscriber(destination, dueTime, scheduler) {
            _super.call(this, destination);
            this.dueTime = dueTime;
            this.scheduler = scheduler;
            this.debouncedSubscription = null;
            this.lastValue = null;
            this.hasValue = false;
        }
        DebounceTimeSubscriber.prototype._next = function (value) {
            this.clearDebounce();
            this.lastValue = value;
            this.hasValue = true;
            this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
        };
        DebounceTimeSubscriber.prototype._complete = function () {
            this.debouncedNext();
            this.destination.complete();
        };
        DebounceTimeSubscriber.prototype.debouncedNext = function () {
            this.clearDebounce();
            if (this.hasValue) {
                this.destination.next(this.lastValue);
                this.lastValue = null;
                this.hasValue = false;
            }
        };
        DebounceTimeSubscriber.prototype.clearDebounce = function () {
            var debouncedSubscription = this.debouncedSubscription;
            if (debouncedSubscription !== null) {
                this.remove(debouncedSubscription);
                debouncedSubscription.unsubscribe();
                this.debouncedSubscription = null;
            }
        };
        return DebounceTimeSubscriber;
    }(Subscriber_1.Subscriber);
    function dispatchNext(subscriber) {
        subscriber.debouncedNext();
    }
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/debounceTime.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/debounceTime.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var debounceTime_1 = $__require('node_modules/rxjs/operator/debounceTime.js');
  Observable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/defaultIfEmpty.js", ["node_modules/rxjs/Subscriber.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("node_modules/rxjs/Subscriber.js");
    /**
     * Emits a given value if the source Observable completes without emitting any
     * `next` value, otherwise mirrors the source Observable.
     *
     * <span class="informal">If the source Observable turns out to be empty, then
     * this operator will emit a default value.</span>
     *
     * <img src="./img/defaultIfEmpty.png" width="100%">
     *
     * `defaultIfEmpty` emits the values emitted by the source Observable or a
     * specified default value if the source Observable is empty (completes without
     * having emitted any `next` value).
     *
     * @example <caption>If no clicks happen in 5 seconds, then emit "no clicks"</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));
     * var result = clicksBeforeFive.defaultIfEmpty('no clicks');
     * result.subscribe(x => console.log(x));
     *
     * @see {@link empty}
     * @see {@link last}
     *
     * @param {any} [defaultValue=null] The default value used if the source
     * Observable is empty.
     * @return {Observable} An Observable that emits either the specified
     * `defaultValue` if the source Observable emits no items, or the values emitted
     * by the source Observable.
     * @method defaultIfEmpty
     * @owner Observable
     */
    function defaultIfEmpty(defaultValue) {
        if (defaultValue === void 0) {
            defaultValue = null;
        }
        return this.lift(new DefaultIfEmptyOperator(defaultValue));
    }
    exports.defaultIfEmpty = defaultIfEmpty;
    var DefaultIfEmptyOperator = function () {
        function DefaultIfEmptyOperator(defaultValue) {
            this.defaultValue = defaultValue;
        }
        DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
        };
        return DefaultIfEmptyOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DefaultIfEmptySubscriber = function (_super) {
        __extends(DefaultIfEmptySubscriber, _super);
        function DefaultIfEmptySubscriber(destination, defaultValue) {
            _super.call(this, destination);
            this.defaultValue = defaultValue;
            this.isEmpty = true;
        }
        DefaultIfEmptySubscriber.prototype._next = function (value) {
            this.isEmpty = false;
            this.destination.next(value);
        };
        DefaultIfEmptySubscriber.prototype._complete = function () {
            if (this.isEmpty) {
                this.destination.next(this.defaultValue);
            }
            this.destination.complete();
        };
        return DefaultIfEmptySubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/defaultIfEmpty.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/defaultIfEmpty.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var defaultIfEmpty_1 = $__require('node_modules/rxjs/operator/defaultIfEmpty.js');
  Observable_1.Observable.prototype.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/delay.js', ['node_modules/rxjs/scheduler/async.js', 'node_modules/rxjs/util/isDate.js', 'node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/Notification.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var async_1 = $__require('node_modules/rxjs/scheduler/async.js');
    var isDate_1 = $__require('node_modules/rxjs/util/isDate.js');
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var Notification_1 = $__require('node_modules/rxjs/Notification.js');
    /**
     * Delays the emission of items from the source Observable by a given timeout or
     * until a given Date.
     *
     * <span class="informal">Time shifts each item by some specified amount of
     * milliseconds.</span>
     *
     * <img src="./img/delay.png" width="100%">
     *
     * If the delay argument is a Number, this operator time shifts the source
     * Observable by that amount of time expressed in milliseconds. The relative
     * time intervals between the values are preserved.
     *
     * If the delay argument is a Date, this operator time shifts the start of the
     * Observable execution until the given date occurs.
     *
     * @example <caption>Delay each click by one second</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second
     * delayedClicks.subscribe(x => console.log(x));
     *
     * @example <caption>Delay all clicks until a future date happens</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var date = new Date('March 15, 2050 12:00:00'); // in the future
     * var delayedClicks = clicks.delay(date); // click emitted only after that date
     * delayedClicks.subscribe(x => console.log(x));
     *
     * @see {@link debounceTime}
     * @see {@link delayWhen}
     *
     * @param {number|Date} delay The delay duration in milliseconds (a `number`) or
     * a `Date` until which the emission of the source items is delayed.
     * @param {Scheduler} [scheduler=async] The Scheduler to use for
     * managing the timers that handle the time-shift for each item.
     * @return {Observable} An Observable that delays the emissions of the source
     * Observable by the specified timeout or Date.
     * @method delay
     * @owner Observable
     */
    function delay(delay, scheduler) {
        if (scheduler === void 0) {
            scheduler = async_1.async;
        }
        var absoluteDelay = isDate_1.isDate(delay);
        var delayFor = absoluteDelay ? +delay - scheduler.now() : Math.abs(delay);
        return this.lift(new DelayOperator(delayFor, scheduler));
    }
    exports.delay = delay;
    var DelayOperator = function () {
        function DelayOperator(delay, scheduler) {
            this.delay = delay;
            this.scheduler = scheduler;
        }
        DelayOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
        };
        return DelayOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DelaySubscriber = function (_super) {
        __extends(DelaySubscriber, _super);
        function DelaySubscriber(destination, delay, scheduler) {
            _super.call(this, destination);
            this.delay = delay;
            this.scheduler = scheduler;
            this.queue = [];
            this.active = false;
            this.errored = false;
        }
        DelaySubscriber.dispatch = function (state) {
            var source = state.source;
            var queue = source.queue;
            var scheduler = state.scheduler;
            var destination = state.destination;
            while (queue.length > 0 && queue[0].time - scheduler.now() <= 0) {
                queue.shift().notification.observe(destination);
            }
            if (queue.length > 0) {
                var delay_1 = Math.max(0, queue[0].time - scheduler.now());
                this.schedule(state, delay_1);
            } else {
                source.active = false;
            }
        };
        DelaySubscriber.prototype._schedule = function (scheduler) {
            this.active = true;
            this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
                source: this, destination: this.destination, scheduler: scheduler
            }));
        };
        DelaySubscriber.prototype.scheduleNotification = function (notification) {
            if (this.errored === true) {
                return;
            }
            var scheduler = this.scheduler;
            var message = new DelayMessage(scheduler.now() + this.delay, notification);
            this.queue.push(message);
            if (this.active === false) {
                this._schedule(scheduler);
            }
        };
        DelaySubscriber.prototype._next = function (value) {
            this.scheduleNotification(Notification_1.Notification.createNext(value));
        };
        DelaySubscriber.prototype._error = function (err) {
            this.errored = true;
            this.queue = [];
            this.destination.error(err);
        };
        DelaySubscriber.prototype._complete = function () {
            this.scheduleNotification(Notification_1.Notification.createComplete());
        };
        return DelaySubscriber;
    }(Subscriber_1.Subscriber);
    var DelayMessage = function () {
        function DelayMessage(time, notification) {
            this.time = time;
            this.notification = notification;
        }
        return DelayMessage;
    }();
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/delay.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/delay.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var delay_1 = $__require('node_modules/rxjs/operator/delay.js');
  Observable_1.Observable.prototype.delay = delay_1.delay;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/delayWhen.js', ['node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/Observable.js', 'node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Delays the emission of items from the source Observable by a given time span
     * determined by the emissions of another Observable.
     *
     * <span class="informal">It's like {@link delay}, but the time span of the
     * delay duration is determined by a second Observable.</span>
     *
     * <img src="./img/delayWhen.png" width="100%">
     *
     * `delayWhen` time shifts each emitted value from the source Observable by a
     * time span determined by another Observable. When the source emits a value,
     * the `delayDurationSelector` function is called with the source value as
     * argument, and should return an Observable, called the "duration" Observable.
     * The source value is emitted on the output Observable only when the duration
     * Observable emits a value or completes.
     *
     * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which
     * is an Observable. When `subscriptionDelay` emits its first value or
     * completes, the source Observable is subscribed to and starts behaving like
     * described in the previous paragraph. If `subscriptionDelay` is not provided,
     * `delayWhen` will subscribe to the source Observable as soon as the output
     * Observable is subscribed.
     *
     * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var delayedClicks = clicks.delayWhen(event =>
     *   Rx.Observable.interval(Math.random() * 5000)
     * );
     * delayedClicks.subscribe(x => console.log(x));
     *
     * @see {@link debounce}
     * @see {@link delay}
     *
     * @param {function(value: T): Observable} delayDurationSelector A function that
     * returns an Observable for each value emitted by the source Observable, which
     * is then used to delay the emission of that item on the output Observable
     * until the Observable returned from this function emits a value.
     * @param {Observable} subscriptionDelay An Observable that triggers the
     * subscription to the source Observable once it emits any value.
     * @return {Observable} An Observable that delays the emissions of the source
     * Observable by an amount of time specified by the Observable returned by
     * `delayDurationSelector`.
     * @method delayWhen
     * @owner Observable
     */
    function delayWhen(delayDurationSelector, subscriptionDelay) {
        if (subscriptionDelay) {
            return new SubscriptionDelayObservable(this, subscriptionDelay).lift(new DelayWhenOperator(delayDurationSelector));
        }
        return this.lift(new DelayWhenOperator(delayDurationSelector));
    }
    exports.delayWhen = delayWhen;
    var DelayWhenOperator = function () {
        function DelayWhenOperator(delayDurationSelector) {
            this.delayDurationSelector = delayDurationSelector;
        }
        DelayWhenOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
        };
        return DelayWhenOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DelayWhenSubscriber = function (_super) {
        __extends(DelayWhenSubscriber, _super);
        function DelayWhenSubscriber(destination, delayDurationSelector) {
            _super.call(this, destination);
            this.delayDurationSelector = delayDurationSelector;
            this.completed = false;
            this.delayNotifierSubscriptions = [];
            this.values = [];
        }
        DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(outerValue);
            this.removeSubscription(innerSub);
            this.tryComplete();
        };
        DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {
            this._error(error);
        };
        DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {
            var value = this.removeSubscription(innerSub);
            if (value) {
                this.destination.next(value);
            }
            this.tryComplete();
        };
        DelayWhenSubscriber.prototype._next = function (value) {
            try {
                var delayNotifier = this.delayDurationSelector(value);
                if (delayNotifier) {
                    this.tryDelay(delayNotifier, value);
                }
            } catch (err) {
                this.destination.error(err);
            }
        };
        DelayWhenSubscriber.prototype._complete = function () {
            this.completed = true;
            this.tryComplete();
        };
        DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {
            subscription.unsubscribe();
            var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
            var value = null;
            if (subscriptionIdx !== -1) {
                value = this.values[subscriptionIdx];
                this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
                this.values.splice(subscriptionIdx, 1);
            }
            return value;
        };
        DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {
            var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);
            this.add(notifierSubscription);
            this.delayNotifierSubscriptions.push(notifierSubscription);
            this.values.push(value);
        };
        DelayWhenSubscriber.prototype.tryComplete = function () {
            if (this.completed && this.delayNotifierSubscriptions.length === 0) {
                this.destination.complete();
            }
        };
        return DelayWhenSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SubscriptionDelayObservable = function (_super) {
        __extends(SubscriptionDelayObservable, _super);
        function SubscriptionDelayObservable(source, subscriptionDelay) {
            _super.call(this);
            this.source = source;
            this.subscriptionDelay = subscriptionDelay;
        }
        SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {
            this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
        };
        return SubscriptionDelayObservable;
    }(Observable_1.Observable);
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SubscriptionDelaySubscriber = function (_super) {
        __extends(SubscriptionDelaySubscriber, _super);
        function SubscriptionDelaySubscriber(parent, source) {
            _super.call(this);
            this.parent = parent;
            this.source = source;
            this.sourceSubscribed = false;
        }
        SubscriptionDelaySubscriber.prototype._next = function (unused) {
            this.subscribeToSource();
        };
        SubscriptionDelaySubscriber.prototype._error = function (err) {
            this.unsubscribe();
            this.parent.error(err);
        };
        SubscriptionDelaySubscriber.prototype._complete = function () {
            this.subscribeToSource();
        };
        SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {
            if (!this.sourceSubscribed) {
                this.sourceSubscribed = true;
                this.unsubscribe();
                this.source.subscribe(this.parent);
            }
        };
        return SubscriptionDelaySubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/delayWhen.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/delayWhen.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var delayWhen_1 = $__require('node_modules/rxjs/operator/delayWhen.js');
  Observable_1.Observable.prototype.delayWhen = delayWhen_1.delayWhen;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/distinct.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/distinct.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var distinct_1 = $__require('node_modules/rxjs/operator/distinct.js');
  Observable_1.Observable.prototype.distinct = distinct_1.distinct;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/distinct.js', ['node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.
     * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
     * If a comparator function is not provided, an equality check is used by default.
     * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.
     * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.
     * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.
     * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.
     * @return {Observable} an Observable that emits items from the source Observable with distinct values.
     * @method distinct
     * @owner Observable
     */
    function distinct(compare, flushes) {
        return this.lift(new DistinctOperator(compare, flushes));
    }
    exports.distinct = distinct;
    var DistinctOperator = function () {
        function DistinctOperator(compare, flushes) {
            this.compare = compare;
            this.flushes = flushes;
        }
        DistinctOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new DistinctSubscriber(subscriber, this.compare, this.flushes));
        };
        return DistinctOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DistinctSubscriber = function (_super) {
        __extends(DistinctSubscriber, _super);
        function DistinctSubscriber(destination, compare, flushes) {
            _super.call(this, destination);
            this.values = [];
            if (typeof compare === 'function') {
                this.compare = compare;
            }
            if (flushes) {
                this.add(subscribeToResult_1.subscribeToResult(this, flushes));
            }
        }
        DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.values.length = 0;
        };
        DistinctSubscriber.prototype.notifyError = function (error, innerSub) {
            this._error(error);
        };
        DistinctSubscriber.prototype._next = function (value) {
            var found = false;
            var values = this.values;
            var len = values.length;
            try {
                for (var i = 0; i < len; i++) {
                    if (this.compare(values[i], value)) {
                        found = true;
                        return;
                    }
                }
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.values.push(value);
            this.destination.next(value);
        };
        DistinctSubscriber.prototype.compare = function (x, y) {
            return x === y;
        };
        return DistinctSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    exports.DistinctSubscriber = DistinctSubscriber;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/distinctKey.js", ["node_modules/rxjs/operator/distinct.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var distinct_1 = $__require("node_modules/rxjs/operator/distinct.js");
    /**
     * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items,
     * using a property accessed by using the key provided to check if the two items are distinct.
     * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
     * If a comparator function is not provided, an equality check is used by default.
     * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.
     * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.
     * @param {string} key string key for object property lookup on each item.
     * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.
     * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.
     * @return {Observable} an Observable that emits items from the source Observable with distinct values.
     * @method distinctKey
     * @owner Observable
     */
    function distinctKey(key, compare, flushes) {
        return distinct_1.distinct.call(this, function (x, y) {
            if (compare) {
                return compare(x[key], y[key]);
            }
            return x[key] === y[key];
        }, flushes);
    }
    exports.distinctKey = distinctKey;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/distinctKey.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/distinctKey.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var distinctKey_1 = $__require('node_modules/rxjs/operator/distinctKey.js');
  Observable_1.Observable.prototype.distinctKey = distinctKey_1.distinctKey;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/distinctUntilChanged.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/distinctUntilChanged.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var distinctUntilChanged_1 = $__require('node_modules/rxjs/operator/distinctUntilChanged.js');
  Observable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/distinctUntilChanged.js', ['node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/util/tryCatch.js', 'node_modules/rxjs/util/errorObject.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var tryCatch_1 = $__require('node_modules/rxjs/util/tryCatch.js');
    var errorObject_1 = $__require('node_modules/rxjs/util/errorObject.js');
    /**
     * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.
     * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
     * If a comparator function is not provided, an equality check is used by default.
     * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.
     * @return {Observable} an Observable that emits items from the source Observable with distinct values.
     * @method distinctUntilChanged
     * @owner Observable
     */
    function distinctUntilChanged(compare, keySelector) {
        return this.lift(new DistinctUntilChangedOperator(compare, keySelector));
    }
    exports.distinctUntilChanged = distinctUntilChanged;
    var DistinctUntilChangedOperator = function () {
        function DistinctUntilChangedOperator(compare, keySelector) {
            this.compare = compare;
            this.keySelector = keySelector;
        }
        DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
        };
        return DistinctUntilChangedOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DistinctUntilChangedSubscriber = function (_super) {
        __extends(DistinctUntilChangedSubscriber, _super);
        function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
            _super.call(this, destination);
            this.keySelector = keySelector;
            this.hasKey = false;
            if (typeof compare === 'function') {
                this.compare = compare;
            }
        }
        DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
            return x === y;
        };
        DistinctUntilChangedSubscriber.prototype._next = function (value) {
            var keySelector = this.keySelector;
            var key = value;
            if (keySelector) {
                key = tryCatch_1.tryCatch(this.keySelector)(value);
                if (key === errorObject_1.errorObject) {
                    return this.destination.error(errorObject_1.errorObject.e);
                }
            }
            var result = false;
            if (this.hasKey) {
                result = tryCatch_1.tryCatch(this.compare)(this.key, key);
                if (result === errorObject_1.errorObject) {
                    return this.destination.error(errorObject_1.errorObject.e);
                }
            } else {
                this.hasKey = true;
            }
            if (Boolean(result) === false) {
                this.key = key;
                this.destination.next(value);
            }
        };
        return DistinctUntilChangedSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/distinctUntilKeyChanged.js", ["node_modules/rxjs/operator/distinctUntilChanged.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var distinctUntilChanged_1 = $__require("node_modules/rxjs/operator/distinctUntilChanged.js");
    /**
     * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,
     * using a property accessed by using the key provided to check if the two items are distinct.
     * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
     * If a comparator function is not provided, an equality check is used by default.
     * @param {string} key string key for object property lookup on each item.
     * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.
     * @return {Observable} an Observable that emits items from the source Observable with distinct values based on the key specified.
     * @method distinctUntilKeyChanged
     * @owner Observable
     */
    function distinctUntilKeyChanged(key, compare) {
        return distinctUntilChanged_1.distinctUntilChanged.call(this, function (x, y) {
            if (compare) {
                return compare(x[key], y[key]);
            }
            return x[key] === y[key];
        });
    }
    exports.distinctUntilKeyChanged = distinctUntilKeyChanged;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/distinctUntilKeyChanged.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/distinctUntilKeyChanged.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var distinctUntilKeyChanged_1 = $__require('node_modules/rxjs/operator/distinctUntilKeyChanged.js');
  Observable_1.Observable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/do.js", ["node_modules/rxjs/Subscriber.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("node_modules/rxjs/Subscriber.js");
    /**
     * Perform a side effect for every emission on the source Observable, but return
     * an Observable that is identical to the source.
     *
     * <span class="informal">Intercepts each emission on the source and runs a
     * function, but returns an output which is identical to the source.</span>
     *
     * <img src="./img/do.png" width="100%">
     *
     * Returns a mirrored Observable of the source Observable, but modified so that
     * the provided Observer is called to perform a side effect for every value,
     * error, and completion emitted by the source. Any errors that are thrown in
     * the aforementioned Observer or handlers are safely sent down the error path
     * of the output Observable.
     *
     * This operator is useful for debugging your Observables for the correct values
     * or performing other side effects.
     *
     * Note: this is different to a `subscribe` on the Observable. If the Observable
     * returned by `do` is not subscribed, the side effects specified by the
     * Observer will never happen. `do` therefore simply spies on existing
     * execution, it does not trigger an execution to happen like `subscribe` does.
     *
     * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var positions = clicks
     *   .do(ev => console.log(ev))
     *   .map(ev => ev.clientX);
     * positions.subscribe(x => console.log(x));
     *
     * @see {@link map}
     * @see {@link subscribe}
     *
     * @param {Observer|function} [nextOrObserver] A normal Observer object or a
     * callback for `next`.
     * @param {function} [error] Callback for errors in the source.
     * @param {function} [complete] Callback for the completion of the source.
     * @return {Observable} An Observable identical to the source, but runs the
     * specified Observer or callback(s) for each item.
     * @method do
     * @name do
     * @owner Observable
     */
    function _do(nextOrObserver, error, complete) {
        return this.lift(new DoOperator(nextOrObserver, error, complete));
    }
    exports._do = _do;
    var DoOperator = function () {
        function DoOperator(nextOrObserver, error, complete) {
            this.nextOrObserver = nextOrObserver;
            this.error = error;
            this.complete = complete;
        }
        DoOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
        };
        return DoOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DoSubscriber = function (_super) {
        __extends(DoSubscriber, _super);
        function DoSubscriber(destination, nextOrObserver, error, complete) {
            _super.call(this, destination);
            var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);
            safeSubscriber.syncErrorThrowable = true;
            this.add(safeSubscriber);
            this.safeSubscriber = safeSubscriber;
        }
        DoSubscriber.prototype._next = function (value) {
            var safeSubscriber = this.safeSubscriber;
            safeSubscriber.next(value);
            if (safeSubscriber.syncErrorThrown) {
                this.destination.error(safeSubscriber.syncErrorValue);
            } else {
                this.destination.next(value);
            }
        };
        DoSubscriber.prototype._error = function (err) {
            var safeSubscriber = this.safeSubscriber;
            safeSubscriber.error(err);
            if (safeSubscriber.syncErrorThrown) {
                this.destination.error(safeSubscriber.syncErrorValue);
            } else {
                this.destination.error(err);
            }
        };
        DoSubscriber.prototype._complete = function () {
            var safeSubscriber = this.safeSubscriber;
            safeSubscriber.complete();
            if (safeSubscriber.syncErrorThrown) {
                this.destination.error(safeSubscriber.syncErrorValue);
            } else {
                this.destination.complete();
            }
        };
        return DoSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/do.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/do.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var do_1 = $__require('node_modules/rxjs/operator/do.js');
  Observable_1.Observable.prototype.do = do_1._do;
  Observable_1.Observable.prototype._do = do_1._do;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/exhaust.js', ['node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Converts a higher-order Observable into a first-order Observable by dropping
     * inner Observables while the previous inner Observable has not yet completed.
     *
     * <span class="informal">Flattens an Observable-of-Observables by dropping the
     * next inner Observables while the current inner is still executing.</span>
     *
     * <img src="./img/exhaust.png" width="100%">
     *
     * `exhaust` subscribes to an Observable that emits Observables, also known as a
     * higher-order Observable. Each time it observes one of these emitted inner
     * Observables, the output Observable begins emitting the items emitted by that
     * inner Observable. So far, it behaves like {@link mergeAll}. However,
     * `exhaust` ignores every new inner Observable if the previous Observable has
     * not yet completed. Once that one completes, it will accept and flatten the
     * next inner Observable and repeat this process.
     *
     * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
     * var result = higherOrder.exhaust();
     * result.subscribe(x => console.log(x));
     *
     * @see {@link combineAll}
     * @see {@link concatAll}
     * @see {@link switch}
     * @see {@link mergeAll}
     * @see {@link exhaustMap}
     * @see {@link zipAll}
     *
     * @return {Observable} Returns an Observable that takes a source of Observables
     * and propagates the first observable exclusively until it completes before
     * subscribing to the next.
     * @method exhaust
     * @owner Observable
     */
    function exhaust() {
        return this.lift(new SwitchFirstOperator());
    }
    exports.exhaust = exhaust;
    var SwitchFirstOperator = function () {
        function SwitchFirstOperator() {}
        SwitchFirstOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new SwitchFirstSubscriber(subscriber));
        };
        return SwitchFirstOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SwitchFirstSubscriber = function (_super) {
        __extends(SwitchFirstSubscriber, _super);
        function SwitchFirstSubscriber(destination) {
            _super.call(this, destination);
            this.hasCompleted = false;
            this.hasSubscription = false;
        }
        SwitchFirstSubscriber.prototype._next = function (value) {
            if (!this.hasSubscription) {
                this.hasSubscription = true;
                this.add(subscribeToResult_1.subscribeToResult(this, value));
            }
        };
        SwitchFirstSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (!this.hasSubscription) {
                this.destination.complete();
            }
        };
        SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {
            this.remove(innerSub);
            this.hasSubscription = false;
            if (this.hasCompleted) {
                this.destination.complete();
            }
        };
        return SwitchFirstSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/exhaust.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/exhaust.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var exhaust_1 = $__require('node_modules/rxjs/operator/exhaust.js');
  Observable_1.Observable.prototype.exhaust = exhaust_1.exhaust;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/exhaustMap.js', ['node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Projects each source value to an Observable which is merged in the output
     * Observable only if the previous projected Observable has completed.
     *
     * <span class="informal">Maps each value to an Observable, then flattens all of
     * these inner Observables using {@link exhaust}.</span>
     *
     * <img src="./img/exhaustMap.png" width="100%">
     *
     * Returns an Observable that emits items based on applying a function that you
     * supply to each item emitted by the source Observable, where that function
     * returns an (so-called "inner") Observable. When it projects a source value to
     * an Observable, the output Observable begins emitting the items emitted by
     * that projected Observable. However, `exhaustMap` ignores every new projected
     * Observable if the previous projected Observable has not yet completed. Once
     * that one completes, it will accept and flatten the next projected Observable
     * and repeat this process.
     *
     * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000));
     * result.subscribe(x => console.log(x));
     *
     * @see {@link concatMap}
     * @see {@link exhaust}
     * @see {@link mergeMap}
     * @see {@link switchMap}
     *
     * @param {function(value: T, ?index: number): Observable} project A function
     * that, when applied to an item emitted by the source Observable, returns an
     * Observable.
     * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
     * A function to produce the value on the output Observable based on the values
     * and the indices of the source (outer) emission and the inner Observable
     * emission. The arguments passed to this function are:
     * - `outerValue`: the value that came from the source
     * - `innerValue`: the value that came from the projected Observable
     * - `outerIndex`: the "index" of the value that came from the source
     * - `innerIndex`: the "index" of the value from the projected Observable
     * @return {Observable} An Observable containing projected Observables
     * of each item of the source, ignoring projected Observables that start before
     * their preceding Observable has completed.
     * @method exhaustMap
     * @owner Observable
     */
    function exhaustMap(project, resultSelector) {
        return this.lift(new SwitchFirstMapOperator(project, resultSelector));
    }
    exports.exhaustMap = exhaustMap;
    var SwitchFirstMapOperator = function () {
        function SwitchFirstMapOperator(project, resultSelector) {
            this.project = project;
            this.resultSelector = resultSelector;
        }
        SwitchFirstMapOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));
        };
        return SwitchFirstMapOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SwitchFirstMapSubscriber = function (_super) {
        __extends(SwitchFirstMapSubscriber, _super);
        function SwitchFirstMapSubscriber(destination, project, resultSelector) {
            _super.call(this, destination);
            this.project = project;
            this.resultSelector = resultSelector;
            this.hasSubscription = false;
            this.hasCompleted = false;
            this.index = 0;
        }
        SwitchFirstMapSubscriber.prototype._next = function (value) {
            if (!this.hasSubscription) {
                this.tryNext(value);
            }
        };
        SwitchFirstMapSubscriber.prototype.tryNext = function (value) {
            var index = this.index++;
            var destination = this.destination;
            try {
                var result = this.project(value, index);
                this.hasSubscription = true;
                this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));
            } catch (err) {
                destination.error(err);
            }
        };
        SwitchFirstMapSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (!this.hasSubscription) {
                this.destination.complete();
            }
        };
        SwitchFirstMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var _a = this,
                resultSelector = _a.resultSelector,
                destination = _a.destination;
            if (resultSelector) {
                this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);
            } else {
                destination.next(innerValue);
            }
        };
        SwitchFirstMapSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {
            var _a = this,
                resultSelector = _a.resultSelector,
                destination = _a.destination;
            try {
                var result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
                destination.next(result);
            } catch (err) {
                destination.error(err);
            }
        };
        SwitchFirstMapSubscriber.prototype.notifyError = function (err) {
            this.destination.error(err);
        };
        SwitchFirstMapSubscriber.prototype.notifyComplete = function (innerSub) {
            this.remove(innerSub);
            this.hasSubscription = false;
            if (this.hasCompleted) {
                this.destination.complete();
            }
        };
        return SwitchFirstMapSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/exhaustMap.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/exhaustMap.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var exhaustMap_1 = $__require('node_modules/rxjs/operator/exhaustMap.js');
  Observable_1.Observable.prototype.exhaustMap = exhaustMap_1.exhaustMap;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/expand.js', ['node_modules/rxjs/util/tryCatch.js', 'node_modules/rxjs/util/errorObject.js', 'node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var tryCatch_1 = $__require('node_modules/rxjs/util/tryCatch.js');
    var errorObject_1 = $__require('node_modules/rxjs/util/errorObject.js');
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Recursively projects each source value to an Observable which is merged in
     * the output Observable.
     *
     * <span class="informal">It's similar to {@link mergeMap}, but applies the
     * projection function to every source value as well as every output value.
     * It's recursive.</span>
     *
     * <img src="./img/expand.png" width="100%">
     *
     * Returns an Observable that emits items based on applying a function that you
     * supply to each item emitted by the source Observable, where that function
     * returns an Observable, and then merging those resulting Observables and
     * emitting the results of this merger. *Expand* will re-emit on the output
     * Observable every source value. Then, each output value is given to the
     * `project` function which returns an inner Observable to be merged on the
     * output Observable. Those output values resulting from the projection are also
     * given to the `project` function to produce new output values. This is how
     * *expand* behaves recursively.
     *
     * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var powersOfTwo = clicks
     *   .mapTo(1)
     *   .expand(x => Rx.Observable.of(2 * x).delay(1000))
     *   .take(10);
     * powersOfTwo.subscribe(x => console.log(x));
     *
     * @see {@link mergeMap}
     * @see {@link mergeScan}
     *
     * @param {function(value: T, index: number) => Observable} project A function
     * that, when applied to an item emitted by the source or the output Observable,
     * returns an Observable.
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
     * Observables being subscribed to concurrently.
     * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to
     * each projected inner Observable.
     * @return {Observable} An Observable that emits the source values and also
     * result of applying the projection function to each value emitted on the
     * output Observable and and merging the results of the Observables obtained
     * from this transformation.
     * @method expand
     * @owner Observable
     */
    function expand(project, concurrent, scheduler) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        if (scheduler === void 0) {
            scheduler = undefined;
        }
        concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
        return this.lift(new ExpandOperator(project, concurrent, scheduler));
    }
    exports.expand = expand;
    var ExpandOperator = function () {
        function ExpandOperator(project, concurrent, scheduler) {
            this.project = project;
            this.concurrent = concurrent;
            this.scheduler = scheduler;
        }
        ExpandOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
        };
        return ExpandOperator;
    }();
    exports.ExpandOperator = ExpandOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ExpandSubscriber = function (_super) {
        __extends(ExpandSubscriber, _super);
        function ExpandSubscriber(destination, project, concurrent, scheduler) {
            _super.call(this, destination);
            this.project = project;
            this.concurrent = concurrent;
            this.scheduler = scheduler;
            this.index = 0;
            this.active = 0;
            this.hasCompleted = false;
            if (concurrent < Number.POSITIVE_INFINITY) {
                this.buffer = [];
            }
        }
        ExpandSubscriber.dispatch = function (arg) {
            var subscriber = arg.subscriber,
                result = arg.result,
                value = arg.value,
                index = arg.index;
            subscriber.subscribeToProjection(result, value, index);
        };
        ExpandSubscriber.prototype._next = function (value) {
            var destination = this.destination;
            if (destination.closed) {
                this._complete();
                return;
            }
            var index = this.index++;
            if (this.active < this.concurrent) {
                destination.next(value);
                var result = tryCatch_1.tryCatch(this.project)(value, index);
                if (result === errorObject_1.errorObject) {
                    destination.error(errorObject_1.errorObject.e);
                } else if (!this.scheduler) {
                    this.subscribeToProjection(result, value, index);
                } else {
                    var state = { subscriber: this, result: result, value: value, index: index };
                    this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
                }
            } else {
                this.buffer.push(value);
            }
        };
        ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {
            this.active++;
            this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));
        };
        ExpandSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.hasCompleted && this.active === 0) {
                this.destination.complete();
            }
        };
        ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this._next(innerValue);
        };
        ExpandSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer && buffer.length > 0) {
                this._next(buffer.shift());
            }
            if (this.hasCompleted && this.active === 0) {
                this.destination.complete();
            }
        };
        return ExpandSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    exports.ExpandSubscriber = ExpandSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/expand.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/expand.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var expand_1 = $__require('node_modules/rxjs/operator/expand.js');
  Observable_1.Observable.prototype.expand = expand_1.expand;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/elementAt.js', ['node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/util/ArgumentOutOfRangeError.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var ArgumentOutOfRangeError_1 = $__require('node_modules/rxjs/util/ArgumentOutOfRangeError.js');
    /**
     * Emits the single value at the specified `index` in a sequence of emissions
     * from the source Observable.
     *
     * <span class="informal">Emits only the i-th value, then completes.</span>
     *
     * <img src="./img/elementAt.png" width="100%">
     *
     * `elementAt` returns an Observable that emits the item at the specified
     * `index` in the source Observable, or a default value if that `index` is out
     * of range and the `default` argument is provided. If the `default` argument is
     * not given and the `index` is out of range, the output Observable will emit an
     * `ArgumentOutOfRangeError` error.
     *
     * @example <caption>Emit only the third click event</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.elementAt(2);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link first}
     * @see {@link last}
     * @see {@link skip}
     * @see {@link single}
     * @see {@link take}
     *
     * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an
     * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the
     * Observable has completed before emitting the i-th `next` notification.
     *
     * @param {number} index Is the number `i` for the i-th source emission that has
     * happened since the subscription, starting from the number `0`.
     * @param {T} [defaultValue] The default value returned for missing indices.
     * @return {Observable} An Observable that emits a single item, if it is found.
     * Otherwise, will emit the default value if given. If not, then emits an error.
     * @method elementAt
     * @owner Observable
     */
    function elementAt(index, defaultValue) {
        return this.lift(new ElementAtOperator(index, defaultValue));
    }
    exports.elementAt = elementAt;
    var ElementAtOperator = function () {
        function ElementAtOperator(index, defaultValue) {
            this.index = index;
            this.defaultValue = defaultValue;
            if (index < 0) {
                throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
            }
        }
        ElementAtOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));
        };
        return ElementAtOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ElementAtSubscriber = function (_super) {
        __extends(ElementAtSubscriber, _super);
        function ElementAtSubscriber(destination, index, defaultValue) {
            _super.call(this, destination);
            this.index = index;
            this.defaultValue = defaultValue;
        }
        ElementAtSubscriber.prototype._next = function (x) {
            if (this.index-- === 0) {
                this.destination.next(x);
                this.destination.complete();
            }
        };
        ElementAtSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (this.index >= 0) {
                if (typeof this.defaultValue !== 'undefined') {
                    destination.next(this.defaultValue);
                } else {
                    destination.error(new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError());
                }
            }
            destination.complete();
        };
        return ElementAtSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/elementAt.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/elementAt.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var elementAt_1 = $__require('node_modules/rxjs/operator/elementAt.js');
  Observable_1.Observable.prototype.elementAt = elementAt_1.elementAt;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/filter.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/filter.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var filter_1 = $__require('node_modules/rxjs/operator/filter.js');
  Observable_1.Observable.prototype.filter = filter_1.filter;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/finally.js', ['node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/Subscription.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var Subscription_1 = $__require('node_modules/rxjs/Subscription.js');
    /**
     * Returns an Observable that mirrors the source Observable, but will call a specified function when
     * the source terminates on complete or error.
     * @param {function} callback function to be called when source terminates.
     * @return {Observable} an Observable that mirrors the source, but will call the specified function on termination.
     * @method finally
     * @owner Observable
     */
    function _finally(callback) {
        return this.lift(new FinallyOperator(callback));
    }
    exports._finally = _finally;
    var FinallyOperator = function () {
        function FinallyOperator(callback) {
            this.callback = callback;
        }
        FinallyOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new FinallySubscriber(subscriber, this.callback));
        };
        return FinallyOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var FinallySubscriber = function (_super) {
        __extends(FinallySubscriber, _super);
        function FinallySubscriber(destination, callback) {
            _super.call(this, destination);
            this.add(new Subscription_1.Subscription(callback));
        }
        return FinallySubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/finally.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/finally.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var finally_1 = $__require('node_modules/rxjs/operator/finally.js');
  Observable_1.Observable.prototype.finally = finally_1._finally;
  Observable_1.Observable.prototype._finally = finally_1._finally;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/find.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/find.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var find_1 = $__require('node_modules/rxjs/operator/find.js');
  Observable_1.Observable.prototype.find = find_1.find;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/find.js', ['node_modules/rxjs/Subscriber.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    /**
     * Emits only the first value emitted by the source Observable that meets some
     * condition.
     *
     * <span class="informal">Finds the first value that passes some test and emits
     * that.</span>
     *
     * <img src="./img/find.png" width="100%">
     *
     * `find` searches for the first item in the source Observable that matches the
     * specified condition embodied by the `predicate`, and returns the first
     * occurrence in the source. Unlike {@link first}, the `predicate` is required
     * in `find`, and does not emit an error if a valid value is not found.
     *
     * @example <caption>Find and emit the first click that happens on a DIV element</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.find(ev => ev.target.tagName === 'DIV');
     * result.subscribe(x => console.log(x));
     *
     * @see {@link filter}
     * @see {@link first}
     * @see {@link findIndex}
     * @see {@link take}
     *
     * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate
     * A function called with each item to test for condition matching.
     * @param {any} [thisArg] An optional argument to determine the value of `this`
     * in the `predicate` function.
     * @return {Observable<T>} An Observable of the first item that matches the
     * condition.
     * @method find
     * @owner Observable
     */
    function find(predicate, thisArg) {
        if (typeof predicate !== 'function') {
            throw new TypeError('predicate is not a function');
        }
        return this.lift(new FindValueOperator(predicate, this, false, thisArg));
    }
    exports.find = find;
    var FindValueOperator = function () {
        function FindValueOperator(predicate, source, yieldIndex, thisArg) {
            this.predicate = predicate;
            this.source = source;
            this.yieldIndex = yieldIndex;
            this.thisArg = thisArg;
        }
        FindValueOperator.prototype.call = function (observer, source) {
            return source._subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));
        };
        return FindValueOperator;
    }();
    exports.FindValueOperator = FindValueOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var FindValueSubscriber = function (_super) {
        __extends(FindValueSubscriber, _super);
        function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.source = source;
            this.yieldIndex = yieldIndex;
            this.thisArg = thisArg;
            this.index = 0;
        }
        FindValueSubscriber.prototype.notifyComplete = function (value) {
            var destination = this.destination;
            destination.next(value);
            destination.complete();
        };
        FindValueSubscriber.prototype._next = function (value) {
            var _a = this,
                predicate = _a.predicate,
                thisArg = _a.thisArg;
            var index = this.index++;
            try {
                var result = predicate.call(thisArg || this, value, index, this.source);
                if (result) {
                    this.notifyComplete(this.yieldIndex ? index : value);
                }
            } catch (err) {
                this.destination.error(err);
            }
        };
        FindValueSubscriber.prototype._complete = function () {
            this.notifyComplete(this.yieldIndex ? -1 : undefined);
        };
        return FindValueSubscriber;
    }(Subscriber_1.Subscriber);
    exports.FindValueSubscriber = FindValueSubscriber;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/findIndex.js", ["node_modules/rxjs/operator/find.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var find_1 = $__require("node_modules/rxjs/operator/find.js");
  /**
   * Emits only the index of the first value emitted by the source Observable that
   * meets some condition.
   *
   * <span class="informal">It's like {@link find}, but emits the index of the
   * found value, not the value itself.</span>
   *
   * <img src="./img/findIndex.png" width="100%">
   *
   * `findIndex` searches for the first item in the source Observable that matches
   * the specified condition embodied by the `predicate`, and returns the
   * (zero-based) index of the first occurrence in the source. Unlike
   * {@link first}, the `predicate` is required in `findIndex`, and does not emit
   * an error if a valid value is not found.
   *
   * @example <caption>Emit the index of first click that happens on a DIV element</caption>
   * var clicks = Rx.Observable.fromEvent(document, 'click');
   * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');
   * result.subscribe(x => console.log(x));
   *
   * @see {@link filter}
   * @see {@link find}
   * @see {@link first}
   * @see {@link take}
   *
   * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate
   * A function called with each item to test for condition matching.
   * @param {any} [thisArg] An optional argument to determine the value of `this`
   * in the `predicate` function.
   * @return {Observable} An Observable of the index of the first item that
   * matches the condition.
   * @method find
   * @owner Observable
   */
  function findIndex(predicate, thisArg) {
    return this.lift(new find_1.FindValueOperator(predicate, this, true, thisArg));
  }
  exports.findIndex = findIndex;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/findIndex.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/findIndex.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var findIndex_1 = $__require('node_modules/rxjs/operator/findIndex.js');
  Observable_1.Observable.prototype.findIndex = findIndex_1.findIndex;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/first.js', ['node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/util/EmptyError.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var EmptyError_1 = $__require('node_modules/rxjs/util/EmptyError.js');
    /**
     * Emits only the first value (or the first value that meets some condition)
     * emitted by the source Observable.
     *
     * <span class="informal">Emits only the first value. Or emits only the first
     * value that passes some test.</span>
     *
     * <img src="./img/first.png" width="100%">
     *
     * If called with no arguments, `first` emits the first value of the source
     * Observable, then completes. If called with a `predicate` function, `first`
     * emits the first value of the source that matches the specified condition. It
     * may also take a `resultSelector` function to produce the output value from
     * the input value, and a `defaultValue` to emit in case the source completes
     * before it is able to emit a valid value. Throws an error if `defaultValue`
     * was not provided and a matching element is not found.
     *
     * @example <caption>Emit only the first click that happens on the DOM</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.first();
     * result.subscribe(x => console.log(x));
     *
     * @example <caption>Emits the first click that happens on a DIV</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.first(ev => ev.target.tagName === 'DIV');
     * result.subscribe(x => console.log(x));
     *
     * @see {@link filter}
     * @see {@link find}
     * @see {@link take}
     *
     * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
     * callback if the Observable completes before any `next` notification was sent.
     *
     * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]
     * An optional function called with each item to test for condition matching.
     * @param {function(value: T, index: number): R} [resultSelector] A function to
     * produce the value on the output Observable based on the values
     * and the indices of the source Observable. The arguments passed to this
     * function are:
     * - `value`: the value that was emitted on the source.
     * - `index`: the "index" of the value from the source.
     * @param {R} [defaultValue] The default value emitted in case no valid value
     * was found on the source.
     * @return {Observable<T|R>} an Observable of the first item that matches the
     * condition.
     * @method first
     * @owner Observable
     */
    function first(predicate, resultSelector, defaultValue) {
        return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));
    }
    exports.first = first;
    var FirstOperator = function () {
        function FirstOperator(predicate, resultSelector, defaultValue, source) {
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
        }
        FirstOperator.prototype.call = function (observer, source) {
            return source._subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
        };
        return FirstOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var FirstSubscriber = function (_super) {
        __extends(FirstSubscriber, _super);
        function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
            this.index = 0;
            this.hasCompleted = false;
        }
        FirstSubscriber.prototype._next = function (value) {
            var index = this.index++;
            if (this.predicate) {
                this._tryPredicate(value, index);
            } else {
                this._emit(value, index);
            }
        };
        FirstSubscriber.prototype._tryPredicate = function (value, index) {
            var result;
            try {
                result = this.predicate(value, index, this.source);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this._emit(value, index);
            }
        };
        FirstSubscriber.prototype._emit = function (value, index) {
            if (this.resultSelector) {
                this._tryResultSelector(value, index);
                return;
            }
            this._emitFinal(value);
        };
        FirstSubscriber.prototype._tryResultSelector = function (value, index) {
            var result;
            try {
                result = this.resultSelector(value, index);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this._emitFinal(result);
        };
        FirstSubscriber.prototype._emitFinal = function (value) {
            var destination = this.destination;
            destination.next(value);
            destination.complete();
            this.hasCompleted = true;
        };
        FirstSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {
                destination.next(this.defaultValue);
                destination.complete();
            } else if (!this.hasCompleted) {
                destination.error(new EmptyError_1.EmptyError());
            }
        };
        return FirstSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/first.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/first.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var first_1 = $__require('node_modules/rxjs/operator/first.js');
  Observable_1.Observable.prototype.first = first_1.first;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/util/MapPolyfill.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var MapPolyfill = function () {
        function MapPolyfill() {
            this.size = 0;
            this._values = [];
            this._keys = [];
        }
        MapPolyfill.prototype.get = function (key) {
            var i = this._keys.indexOf(key);
            return i === -1 ? undefined : this._values[i];
        };
        MapPolyfill.prototype.set = function (key, value) {
            var i = this._keys.indexOf(key);
            if (i === -1) {
                this._keys.push(key);
                this._values.push(value);
                this.size++;
            } else {
                this._values[i] = value;
            }
            return this;
        };
        MapPolyfill.prototype.delete = function (key) {
            var i = this._keys.indexOf(key);
            if (i === -1) {
                return false;
            }
            this._values.splice(i, 1);
            this._keys.splice(i, 1);
            this.size--;
            return true;
        };
        MapPolyfill.prototype.clear = function () {
            this._keys.length = 0;
            this._values.length = 0;
            this.size = 0;
        };
        MapPolyfill.prototype.forEach = function (cb, thisArg) {
            for (var i = 0; i < this.size; i++) {
                cb.call(thisArg, this._values[i], this._keys[i]);
            }
        };
        return MapPolyfill;
    }();
    exports.MapPolyfill = MapPolyfill;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/util/Map.js', ['node_modules/rxjs/util/root.js', 'node_modules/rxjs/util/MapPolyfill.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var root_1 = $__require('node_modules/rxjs/util/root.js');
  var MapPolyfill_1 = $__require('node_modules/rxjs/util/MapPolyfill.js');
  exports.Map = root_1.root.Map || function () {
    return MapPolyfill_1.MapPolyfill;
  }();
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/util/FastMap.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var FastMap = function () {
        function FastMap() {
            this.values = {};
        }
        FastMap.prototype.delete = function (key) {
            this.values[key] = null;
            return true;
        };
        FastMap.prototype.set = function (key, value) {
            this.values[key] = value;
            return this;
        };
        FastMap.prototype.get = function (key) {
            return this.values[key];
        };
        FastMap.prototype.forEach = function (cb, thisArg) {
            var values = this.values;
            for (var key in values) {
                if (values.hasOwnProperty(key) && values[key] !== null) {
                    cb.call(thisArg, values[key], key);
                }
            }
        };
        FastMap.prototype.clear = function () {
            this.values = {};
        };
        return FastMap;
    }();
    exports.FastMap = FastMap;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/groupBy.js', ['node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/Subscription.js', 'node_modules/rxjs/Observable.js', 'node_modules/rxjs/Subject.js', 'node_modules/rxjs/util/Map.js', 'node_modules/rxjs/util/FastMap.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var Subscription_1 = $__require('node_modules/rxjs/Subscription.js');
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var Subject_1 = $__require('node_modules/rxjs/Subject.js');
    var Map_1 = $__require('node_modules/rxjs/util/Map.js');
    var FastMap_1 = $__require('node_modules/rxjs/util/FastMap.js');
    /**
     * Groups the items emitted by an Observable according to a specified criterion,
     * and emits these grouped items as `GroupedObservables`, one
     * {@link GroupedObservable} per group.
     *
     * <img src="./img/groupBy.png" width="100%">
     *
     * @param {function(value: T): K} keySelector a function that extracts the key
     * for each item.
     * @param {function(value: T): R} [elementSelector] a function that extracts the
     * return element for each item.
     * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]
     * a function that returns an Observable to determine how long each group should
     * exist.
     * @return {Observable<GroupedObservable<K,R>>} an Observable that emits
     * GroupedObservables, each of which corresponds to a unique key value and each
     * of which emits those items from the source Observable that share that key
     * value.
     * @method groupBy
     * @owner Observable
     */
    function groupBy(keySelector, elementSelector, durationSelector) {
        return this.lift(new GroupByOperator(this, keySelector, elementSelector, durationSelector));
    }
    exports.groupBy = groupBy;
    var GroupByOperator = function () {
        function GroupByOperator(source, keySelector, elementSelector, durationSelector) {
            this.source = source;
            this.keySelector = keySelector;
            this.elementSelector = elementSelector;
            this.durationSelector = durationSelector;
        }
        GroupByOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector));
        };
        return GroupByOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var GroupBySubscriber = function (_super) {
        __extends(GroupBySubscriber, _super);
        function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector) {
            _super.call(this, destination);
            this.keySelector = keySelector;
            this.elementSelector = elementSelector;
            this.durationSelector = durationSelector;
            this.groups = null;
            this.attemptedToUnsubscribe = false;
            this.count = 0;
        }
        GroupBySubscriber.prototype._next = function (value) {
            var key;
            try {
                key = this.keySelector(value);
            } catch (err) {
                this.error(err);
                return;
            }
            this._group(value, key);
        };
        GroupBySubscriber.prototype._group = function (value, key) {
            var groups = this.groups;
            if (!groups) {
                groups = this.groups = typeof key === 'string' ? new FastMap_1.FastMap() : new Map_1.Map();
            }
            var group = groups.get(key);
            var element;
            if (this.elementSelector) {
                try {
                    element = this.elementSelector(value);
                } catch (err) {
                    this.error(err);
                }
            } else {
                element = value;
            }
            if (!group) {
                groups.set(key, group = new Subject_1.Subject());
                var groupedObservable = new GroupedObservable(key, group, this);
                this.destination.next(groupedObservable);
                if (this.durationSelector) {
                    var duration = void 0;
                    try {
                        duration = this.durationSelector(new GroupedObservable(key, group));
                    } catch (err) {
                        this.error(err);
                        return;
                    }
                    this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
                }
            }
            if (!group.closed) {
                group.next(element);
            }
        };
        GroupBySubscriber.prototype._error = function (err) {
            var groups = this.groups;
            if (groups) {
                groups.forEach(function (group, key) {
                    group.error(err);
                });
                groups.clear();
            }
            this.destination.error(err);
        };
        GroupBySubscriber.prototype._complete = function () {
            var groups = this.groups;
            if (groups) {
                groups.forEach(function (group, key) {
                    group.complete();
                });
                groups.clear();
            }
            this.destination.complete();
        };
        GroupBySubscriber.prototype.removeGroup = function (key) {
            this.groups.delete(key);
        };
        GroupBySubscriber.prototype.unsubscribe = function () {
            if (!this.closed && !this.attemptedToUnsubscribe) {
                this.attemptedToUnsubscribe = true;
                if (this.count === 0) {
                    _super.prototype.unsubscribe.call(this);
                }
            }
        };
        return GroupBySubscriber;
    }(Subscriber_1.Subscriber);
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var GroupDurationSubscriber = function (_super) {
        __extends(GroupDurationSubscriber, _super);
        function GroupDurationSubscriber(key, group, parent) {
            _super.call(this);
            this.key = key;
            this.group = group;
            this.parent = parent;
        }
        GroupDurationSubscriber.prototype._next = function (value) {
            this._complete();
        };
        GroupDurationSubscriber.prototype._error = function (err) {
            var group = this.group;
            if (!group.closed) {
                group.error(err);
            }
            this.parent.removeGroup(this.key);
        };
        GroupDurationSubscriber.prototype._complete = function () {
            var group = this.group;
            if (!group.closed) {
                group.complete();
            }
            this.parent.removeGroup(this.key);
        };
        return GroupDurationSubscriber;
    }(Subscriber_1.Subscriber);
    /**
     * An Observable representing values belonging to the same group represented by
     * a common key. The values emitted by a GroupedObservable come from the source
     * Observable. The common key is available as the field `key` on a
     * GroupedObservable instance.
     *
     * @class GroupedObservable<K, T>
     */
    var GroupedObservable = function (_super) {
        __extends(GroupedObservable, _super);
        function GroupedObservable(key, groupSubject, refCountSubscription) {
            _super.call(this);
            this.key = key;
            this.groupSubject = groupSubject;
            this.refCountSubscription = refCountSubscription;
        }
        GroupedObservable.prototype._subscribe = function (subscriber) {
            var subscription = new Subscription_1.Subscription();
            var _a = this,
                refCountSubscription = _a.refCountSubscription,
                groupSubject = _a.groupSubject;
            if (refCountSubscription && !refCountSubscription.closed) {
                subscription.add(new InnerRefCountSubscription(refCountSubscription));
            }
            subscription.add(groupSubject.subscribe(subscriber));
            return subscription;
        };
        return GroupedObservable;
    }(Observable_1.Observable);
    exports.GroupedObservable = GroupedObservable;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var InnerRefCountSubscription = function (_super) {
        __extends(InnerRefCountSubscription, _super);
        function InnerRefCountSubscription(parent) {
            _super.call(this);
            this.parent = parent;
            parent.count++;
        }
        InnerRefCountSubscription.prototype.unsubscribe = function () {
            var parent = this.parent;
            if (!parent.closed && !this.closed) {
                _super.prototype.unsubscribe.call(this);
                parent.count -= 1;
                if (parent.count === 0 && parent.attemptedToUnsubscribe) {
                    parent.unsubscribe();
                }
            }
        };
        return InnerRefCountSubscription;
    }(Subscription_1.Subscription);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/groupBy.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/groupBy.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var groupBy_1 = $__require('node_modules/rxjs/operator/groupBy.js');
  Observable_1.Observable.prototype.groupBy = groupBy_1.groupBy;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/util/noop.js", [], true, function ($__require, exports, module) {
  "use strict";
  /* tslint:disable:no-empty */

  var define,
      global = this || self,
      GLOBAL = global;
  function noop() {}
  exports.noop = noop;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/ignoreElements.js', ['node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/util/noop.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var noop_1 = $__require('node_modules/rxjs/util/noop.js');
    /**
     * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.
     *
     * <img src="./img/ignoreElements.png" width="100%">
     *
     * @return {Observable} an empty Observable that only calls `complete`
     * or `error`, based on which one is called by the source Observable.
     * @method ignoreElements
     * @owner Observable
     */
    function ignoreElements() {
        return this.lift(new IgnoreElementsOperator());
    }
    exports.ignoreElements = ignoreElements;
    ;
    var IgnoreElementsOperator = function () {
        function IgnoreElementsOperator() {}
        IgnoreElementsOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new IgnoreElementsSubscriber(subscriber));
        };
        return IgnoreElementsOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var IgnoreElementsSubscriber = function (_super) {
        __extends(IgnoreElementsSubscriber, _super);
        function IgnoreElementsSubscriber() {
            _super.apply(this, arguments);
        }
        IgnoreElementsSubscriber.prototype._next = function (unused) {
            noop_1.noop();
        };
        return IgnoreElementsSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/ignoreElements.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/ignoreElements.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var ignoreElements_1 = $__require('node_modules/rxjs/operator/ignoreElements.js');
  Observable_1.Observable.prototype.ignoreElements = ignoreElements_1.ignoreElements;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/isEmpty.js", ["node_modules/rxjs/Subscriber.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("node_modules/rxjs/Subscriber.js");
    /**
     * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.
     *
     * <img src="./img/isEmpty.png" width="100%">
     *
     * @return {Observable} an Observable that emits a Boolean.
     * @method isEmpty
     * @owner Observable
     */
    function isEmpty() {
        return this.lift(new IsEmptyOperator());
    }
    exports.isEmpty = isEmpty;
    var IsEmptyOperator = function () {
        function IsEmptyOperator() {}
        IsEmptyOperator.prototype.call = function (observer, source) {
            return source._subscribe(new IsEmptySubscriber(observer));
        };
        return IsEmptyOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var IsEmptySubscriber = function (_super) {
        __extends(IsEmptySubscriber, _super);
        function IsEmptySubscriber(destination) {
            _super.call(this, destination);
        }
        IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {
            var destination = this.destination;
            destination.next(isEmpty);
            destination.complete();
        };
        IsEmptySubscriber.prototype._next = function (value) {
            this.notifyComplete(false);
        };
        IsEmptySubscriber.prototype._complete = function () {
            this.notifyComplete(true);
        };
        return IsEmptySubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/isEmpty.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/isEmpty.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var isEmpty_1 = $__require('node_modules/rxjs/operator/isEmpty.js');
  Observable_1.Observable.prototype.isEmpty = isEmpty_1.isEmpty;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/audit.js', ['node_modules/rxjs/util/tryCatch.js', 'node_modules/rxjs/util/errorObject.js', 'node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var tryCatch_1 = $__require('node_modules/rxjs/util/tryCatch.js');
    var errorObject_1 = $__require('node_modules/rxjs/util/errorObject.js');
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Ignores source values for a duration determined by another Observable, then
     * emits the most recent value from the source Observable, then repeats this
     * process.
     *
     * <span class="informal">It's like {@link auditTime}, but the silencing
     * duration is determined by a second Observable.</span>
     *
     * <img src="./img/audit.png" width="100%">
     *
     * `audit` is similar to `throttle`, but emits the last value from the silenced
     * time window, instead of the first value. `audit` emits the most recent value
     * from the source Observable on the output Observable as soon as its internal
     * timer becomes disabled, and ignores source values while the timer is enabled.
     * Initially, the timer is disabled. As soon as the first source value arrives,
     * the timer is enabled by calling the `durationSelector` function with the
     * source value, which returns the "duration" Observable. When the duration
     * Observable emits a value or completes, the timer is disabled, then the most
     * recent source value is emitted on the output Observable, and this process
     * repeats for the next source value.
     *
     * @example <caption>Emit clicks at a rate of at most one click per second</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.audit(ev => Rx.Observable.interval(1000));
     * result.subscribe(x => console.log(x));
     *
     * @see {@link auditTime}
     * @see {@link debounce}
     * @see {@link delayWhen}
     * @see {@link sample}
     * @see {@link throttle}
     *
     * @param {function(value: T): Observable|Promise} durationSelector A function
     * that receives a value from the source Observable, for computing the silencing
     * duration, returned as an Observable or a Promise.
     * @return {Observable<T>} An Observable that performs rate-limiting of
     * emissions from the source Observable.
     * @method audit
     * @owner Observable
     */
    function audit(durationSelector) {
        return this.lift(new AuditOperator(durationSelector));
    }
    exports.audit = audit;
    var AuditOperator = function () {
        function AuditOperator(durationSelector) {
            this.durationSelector = durationSelector;
        }
        AuditOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new AuditSubscriber(subscriber, this.durationSelector));
        };
        return AuditOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var AuditSubscriber = function (_super) {
        __extends(AuditSubscriber, _super);
        function AuditSubscriber(destination, durationSelector) {
            _super.call(this, destination);
            this.durationSelector = durationSelector;
            this.hasValue = false;
        }
        AuditSubscriber.prototype._next = function (value) {
            this.value = value;
            this.hasValue = true;
            if (!this.throttled) {
                var duration = tryCatch_1.tryCatch(this.durationSelector)(value);
                if (duration === errorObject_1.errorObject) {
                    this.destination.error(errorObject_1.errorObject.e);
                } else {
                    this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));
                }
            }
        };
        AuditSubscriber.prototype.clearThrottle = function () {
            var _a = this,
                value = _a.value,
                hasValue = _a.hasValue,
                throttled = _a.throttled;
            if (throttled) {
                this.remove(throttled);
                this.throttled = null;
                throttled.unsubscribe();
            }
            if (hasValue) {
                this.value = null;
                this.hasValue = false;
                this.destination.next(value);
            }
        };
        AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
            this.clearThrottle();
        };
        AuditSubscriber.prototype.notifyComplete = function () {
            this.clearThrottle();
        };
        return AuditSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/audit.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/audit.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var audit_1 = $__require('node_modules/rxjs/operator/audit.js');
  Observable_1.Observable.prototype.audit = audit_1.audit;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/auditTime.js', ['node_modules/rxjs/scheduler/async.js', 'node_modules/rxjs/Subscriber.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var async_1 = $__require('node_modules/rxjs/scheduler/async.js');
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    /**
     * Ignores source values for `duration` milliseconds, then emits the most recent
     * value from the source Observable, then repeats this process.
     *
     * <span class="informal">When it sees a source values, it ignores that plus
     * the next ones for `duration` milliseconds, and then it emits the most recent
     * value from the source.</span>
     *
     * <img src="./img/auditTime.png" width="100%">
     *
     * `auditTime` is similar to `throttleTime`, but emits the last value from the
     * silenced time window, instead of the first value. `auditTime` emits the most
     * recent value from the source Observable on the output Observable as soon as
     * its internal timer becomes disabled, and ignores source values while the
     * timer is enabled. Initially, the timer is disabled. As soon as the first
     * source value arrives, the timer is enabled. After `duration` milliseconds (or
     * the time unit determined internally by the optional `scheduler`) has passed,
     * the timer is disabled, then the most recent source value is emitted on the
     * output Observable, and this process repeats for the next source value.
     * Optionally takes a {@link Scheduler} for managing timers.
     *
     * @example <caption>Emit clicks at a rate of at most one click per second</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.auditTime(1000);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link audit}
     * @see {@link debounceTime}
     * @see {@link delay}
     * @see {@link sampleTime}
     * @see {@link throttleTime}
     *
     * @param {number} duration Time to wait before emitting the most recent source
     * value, measured in milliseconds or the time unit determined internally
     * by the optional `scheduler`.
     * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for
     * managing the timers that handle the rate-limiting behavior.
     * @return {Observable<T>} An Observable that performs rate-limiting of
     * emissions from the source Observable.
     * @method auditTime
     * @owner Observable
     */
    function auditTime(duration, scheduler) {
        if (scheduler === void 0) {
            scheduler = async_1.async;
        }
        return this.lift(new AuditTimeOperator(duration, scheduler));
    }
    exports.auditTime = auditTime;
    var AuditTimeOperator = function () {
        function AuditTimeOperator(duration, scheduler) {
            this.duration = duration;
            this.scheduler = scheduler;
        }
        AuditTimeOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));
        };
        return AuditTimeOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var AuditTimeSubscriber = function (_super) {
        __extends(AuditTimeSubscriber, _super);
        function AuditTimeSubscriber(destination, duration, scheduler) {
            _super.call(this, destination);
            this.duration = duration;
            this.scheduler = scheduler;
            this.hasValue = false;
        }
        AuditTimeSubscriber.prototype._next = function (value) {
            this.value = value;
            this.hasValue = true;
            if (!this.throttled) {
                this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));
            }
        };
        AuditTimeSubscriber.prototype.clearThrottle = function () {
            var _a = this,
                value = _a.value,
                hasValue = _a.hasValue,
                throttled = _a.throttled;
            if (throttled) {
                this.remove(throttled);
                this.throttled = null;
                throttled.unsubscribe();
            }
            if (hasValue) {
                this.value = null;
                this.hasValue = false;
                this.destination.next(value);
            }
        };
        return AuditTimeSubscriber;
    }(Subscriber_1.Subscriber);
    function dispatchNext(subscriber) {
        subscriber.clearThrottle();
    }
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/auditTime.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/auditTime.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var auditTime_1 = $__require('node_modules/rxjs/operator/auditTime.js');
  Observable_1.Observable.prototype.auditTime = auditTime_1.auditTime;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/last.js', ['node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/util/EmptyError.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var EmptyError_1 = $__require('node_modules/rxjs/util/EmptyError.js');
    /**
     * Returns an Observable that emits only the last item emitted by the source Observable.
     * It optionally takes a predicate function as a parameter, in which case, rather than emitting
     * the last item from the source Observable, the resulting Observable will emit the last item
     * from the source Observable that satisfies the predicate.
     *
     * <img src="./img/last.png" width="100%">
     *
     * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
     * callback if the Observable completes before any `next` notification was sent.
     * @param {function} predicate - the condition any source emitted item has to satisfy.
     * @return {Observable} an Observable that emits only the last item satisfying the given condition
     * from the source, or an NoSuchElementException if no such items are emitted.
     * @throws - Throws if no items that match the predicate are emitted by the source Observable.
     * @method last
     * @owner Observable
     */
    function last(predicate, resultSelector, defaultValue) {
        return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));
    }
    exports.last = last;
    var LastOperator = function () {
        function LastOperator(predicate, resultSelector, defaultValue, source) {
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
        }
        LastOperator.prototype.call = function (observer, source) {
            return source._subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
        };
        return LastOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var LastSubscriber = function (_super) {
        __extends(LastSubscriber, _super);
        function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
            this.hasValue = false;
            this.index = 0;
            if (typeof defaultValue !== 'undefined') {
                this.lastValue = defaultValue;
                this.hasValue = true;
            }
        }
        LastSubscriber.prototype._next = function (value) {
            var index = this.index++;
            if (this.predicate) {
                this._tryPredicate(value, index);
            } else {
                if (this.resultSelector) {
                    this._tryResultSelector(value, index);
                    return;
                }
                this.lastValue = value;
                this.hasValue = true;
            }
        };
        LastSubscriber.prototype._tryPredicate = function (value, index) {
            var result;
            try {
                result = this.predicate(value, index, this.source);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                if (this.resultSelector) {
                    this._tryResultSelector(value, index);
                    return;
                }
                this.lastValue = value;
                this.hasValue = true;
            }
        };
        LastSubscriber.prototype._tryResultSelector = function (value, index) {
            var result;
            try {
                result = this.resultSelector(value, index);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.lastValue = result;
            this.hasValue = true;
        };
        LastSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (this.hasValue) {
                destination.next(this.lastValue);
                destination.complete();
            } else {
                destination.error(new EmptyError_1.EmptyError());
            }
        };
        return LastSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/last.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/last.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var last_1 = $__require('node_modules/rxjs/operator/last.js');
  Observable_1.Observable.prototype.last = last_1.last;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/let.js", [], true, function ($__require, exports, module) {
  "use strict";
  /**
   * @param func
   * @return {Observable<R>}
   * @method let
   * @owner Observable
   */

  var define,
      global = this || self,
      GLOBAL = global;
  function letProto(func) {
    return func(this);
  }
  exports.letProto = letProto;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/let.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/let.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var let_1 = $__require('node_modules/rxjs/operator/let.js');
  Observable_1.Observable.prototype.let = let_1.letProto;
  Observable_1.Observable.prototype.letBind = let_1.letProto;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/every.js", ["node_modules/rxjs/Subscriber.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("node_modules/rxjs/Subscriber.js");
    /**
     * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.
     * @param {function} predicate a function for determining if an item meets a specified condition.
     * @param {any} [thisArg] optional object to use for `this` in the callback
     * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.
     * @method every
     * @owner Observable
     */
    function every(predicate, thisArg) {
        return this.lift(new EveryOperator(predicate, thisArg, this));
    }
    exports.every = every;
    var EveryOperator = function () {
        function EveryOperator(predicate, thisArg, source) {
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.source = source;
        }
        EveryOperator.prototype.call = function (observer, source) {
            return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
        };
        return EveryOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var EverySubscriber = function (_super) {
        __extends(EverySubscriber, _super);
        function EverySubscriber(destination, predicate, thisArg, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.source = source;
            this.index = 0;
            this.thisArg = thisArg || this;
        }
        EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
            this.destination.next(everyValueMatch);
            this.destination.complete();
        };
        EverySubscriber.prototype._next = function (value) {
            var result = false;
            try {
                result = this.predicate.call(this.thisArg, value, this.index++, this.source);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (!result) {
                this.notifyComplete(false);
            }
        };
        EverySubscriber.prototype._complete = function () {
            this.notifyComplete(true);
        };
        return EverySubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/every.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/every.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var every_1 = $__require('node_modules/rxjs/operator/every.js');
  Observable_1.Observable.prototype.every = every_1.every;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/mapTo.js", ["node_modules/rxjs/Subscriber.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("node_modules/rxjs/Subscriber.js");
    /**
     * Emits the given constant value on the output Observable every time the source
     * Observable emits a value.
     *
     * <span class="informal">Like {@link map}, but it maps every source value to
     * the same output value every time.</span>
     *
     * <img src="./img/mapTo.png" width="100%">
     *
     * Takes a constant `value` as argument, and emits that whenever the source
     * Observable emits a value. In other words, ignores the actual source value,
     * and simply uses the emission moment to know when to emit the given `value`.
     *
     * @example <caption>Map every every click to the string 'Hi'</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var greetings = clicks.mapTo('Hi');
     * greetings.subscribe(x => console.log(x));
     *
     * @see {@link map}
     *
     * @param {any} value The value to map each source value to.
     * @return {Observable} An Observable that emits the given `value` every time
     * the source Observable emits something.
     * @method mapTo
     * @owner Observable
     */
    function mapTo(value) {
        return this.lift(new MapToOperator(value));
    }
    exports.mapTo = mapTo;
    var MapToOperator = function () {
        function MapToOperator(value) {
            this.value = value;
        }
        MapToOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new MapToSubscriber(subscriber, this.value));
        };
        return MapToOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MapToSubscriber = function (_super) {
        __extends(MapToSubscriber, _super);
        function MapToSubscriber(destination, value) {
            _super.call(this, destination);
            this.value = value;
        }
        MapToSubscriber.prototype._next = function (x) {
            this.destination.next(this.value);
        };
        return MapToSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/mapTo.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/mapTo.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var mapTo_1 = $__require('node_modules/rxjs/operator/mapTo.js');
  Observable_1.Observable.prototype.mapTo = mapTo_1.mapTo;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/materialize.js', ['node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/Notification.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var Notification_1 = $__require('node_modules/rxjs/Notification.js');
    /**
     * Represents all of the notifications from the source Observable as `next`
     * emissions marked with their original types within {@link Notification}
     * objects.
     *
     * <span class="informal">Wraps `next`, `error` and `complete` emissions in
     * {@link Notification} objects, emitted as `next` on the output Observable.
     * </span>
     *
     * <img src="./img/materialize.png" width="100%">
     *
     * `materialize` returns an Observable that emits a `next` notification for each
     * `next`, `error`, or `complete` emission of the source Observable. When the
     * source Observable emits `complete`, the output Observable will emit `next` as
     * a Notification of type "complete", and then it will emit `complete` as well.
     * When the source Observable emits `error`, the output will emit `next` as a
     * Notification of type "error", and then `complete`.
     *
     * This operator is useful for producing metadata of the source Observable, to
     * be consumed as `next` emissions. Use it in conjunction with
     * {@link dematerialize}.
     *
     * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>
     * var letters = Rx.Observable.of('a', 'b', 13, 'd');
     * var upperCase = letters.map(x => x.toUpperCase());
     * var materialized = upperCase.materialize();
     * materialized.subscribe(x => console.log(x));
     *
     * @see {@link Notification}
     * @see {@link dematerialize}
     *
     * @return {Observable<Notification<T>>} An Observable that emits
     * {@link Notification} objects that wrap the original emissions from the source
     * Observable with metadata.
     * @method materialize
     * @owner Observable
     */
    function materialize() {
        return this.lift(new MaterializeOperator());
    }
    exports.materialize = materialize;
    var MaterializeOperator = function () {
        function MaterializeOperator() {}
        MaterializeOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new MaterializeSubscriber(subscriber));
        };
        return MaterializeOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MaterializeSubscriber = function (_super) {
        __extends(MaterializeSubscriber, _super);
        function MaterializeSubscriber(destination) {
            _super.call(this, destination);
        }
        MaterializeSubscriber.prototype._next = function (value) {
            this.destination.next(Notification_1.Notification.createNext(value));
        };
        MaterializeSubscriber.prototype._error = function (err) {
            var destination = this.destination;
            destination.next(Notification_1.Notification.createError(err));
            destination.complete();
        };
        MaterializeSubscriber.prototype._complete = function () {
            var destination = this.destination;
            destination.next(Notification_1.Notification.createComplete());
            destination.complete();
        };
        return MaterializeSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/materialize.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/materialize.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var materialize_1 = $__require('node_modules/rxjs/operator/materialize.js');
  Observable_1.Observable.prototype.materialize = materialize_1.materialize;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/max.js', ['node_modules/rxjs/operator/reduce.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var reduce_1 = $__require('node_modules/rxjs/operator/reduce.js');
    /**
     * The Max operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),
     * and when source Observable completes it emits a single item: the item with the largest number.
     *
     * <img src="./img/max.png" width="100%">
     *
     * @param {Function} optional comparer function that it will use instead of its default to compare the value of two
     * items.
     * @return {Observable} an Observable that emits item with the largest number.
     * @method max
     * @owner Observable
     */
    function max(comparer) {
        var max = typeof comparer === 'function' ? function (x, y) {
            return comparer(x, y) > 0 ? x : y;
        } : function (x, y) {
            return x > y ? x : y;
        };
        return this.lift(new reduce_1.ReduceOperator(max));
    }
    exports.max = max;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/max.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/max.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var max_1 = $__require('node_modules/rxjs/operator/max.js');
  Observable_1.Observable.prototype.max = max_1.max;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/merge.js', ['node_modules/rxjs/observable/ArrayObservable.js', 'node_modules/rxjs/operator/mergeAll.js', 'node_modules/rxjs/util/isScheduler.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var ArrayObservable_1 = $__require('node_modules/rxjs/observable/ArrayObservable.js');
    var mergeAll_1 = $__require('node_modules/rxjs/operator/mergeAll.js');
    var isScheduler_1 = $__require('node_modules/rxjs/util/isScheduler.js');
    /**
     * Creates an output Observable which concurrently emits all values from every
     * given input Observable.
     *
     * <span class="informal">Flattens multiple Observables together by blending
     * their values into one Observable.</span>
     *
     * <img src="./img/merge.png" width="100%">
     *
     * `merge` subscribes to each given input Observable (either the source or an
     * Observable given as argument), and simply forwards (without doing any
     * transformation) all the values from all the input Observables to the output
     * Observable. The output Observable only completes once all input Observables
     * have completed. Any error delivered by an input Observable will be immediately
     * emitted on the output Observable.
     *
     * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var timer = Rx.Observable.interval(1000);
     * var clicksOrTimer = clicks.merge(timer);
     * clicksOrTimer.subscribe(x => console.log(x));
     *
     * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
     * var timer1 = Rx.Observable.interval(1000).take(10);
     * var timer2 = Rx.Observable.interval(2000).take(6);
     * var timer3 = Rx.Observable.interval(500).take(10);
     * var concurrent = 2; // the argument
     * var merged = timer1.merge(timer2, timer3, concurrent);
     * merged.subscribe(x => console.log(x));
     *
     * @see {@link mergeAll}
     * @see {@link mergeMap}
     * @see {@link mergeMapTo}
     * @see {@link mergeScan}
     *
     * @param {Observable} other An input Observable to merge with the source
     * Observable. More than one input Observables may be given as argument.
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
     * Observables being subscribed to concurrently.
     * @param {Scheduler} [scheduler=null] The Scheduler to use for managing
     * concurrency of input Observables.
     * @return {Observable} an Observable that emits items that are the result of
     * every input Observable.
     * @method merge
     * @owner Observable
     */
    function merge() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i - 0] = arguments[_i];
        }
        observables.unshift(this);
        return mergeStatic.apply(this, observables);
    }
    exports.merge = merge;
    /* tslint:enable:max-line-length */
    /**
     * Creates an output Observable which concurrently emits all values from every
     * given input Observable.
     *
     * <span class="informal">Flattens multiple Observables together by blending
     * their values into one Observable.</span>
     *
     * <img src="./img/merge.png" width="100%">
     *
     * `merge` subscribes to each given input Observable (as arguments), and simply
     * forwards (without doing any transformation) all the values from all the input
     * Observables to the output Observable. The output Observable only completes
     * once all input Observables have completed. Any error delivered by an input
     * Observable will be immediately emitted on the output Observable.
     *
     * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var timer = Rx.Observable.interval(1000);
     * var clicksOrTimer = Rx.Observable.merge(clicks, timer);
     * clicksOrTimer.subscribe(x => console.log(x));
     *
     * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
     * var timer1 = Rx.Observable.interval(1000).take(10);
     * var timer2 = Rx.Observable.interval(2000).take(6);
     * var timer3 = Rx.Observable.interval(500).take(10);
     * var concurrent = 2; // the argument
     * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);
     * merged.subscribe(x => console.log(x));
     *
     * @see {@link mergeAll}
     * @see {@link mergeMap}
     * @see {@link mergeMapTo}
     * @see {@link mergeScan}
     *
     * @param {Observable} input1 An input Observable to merge with others.
     * @param {Observable} input2 An input Observable to merge with others.
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
     * Observables being subscribed to concurrently.
     * @param {Scheduler} [scheduler=null] The Scheduler to use for managing
     * concurrency of input Observables.
     * @return {Observable} an Observable that emits items that are the result of
     * every input Observable.
     * @static true
     * @name merge
     * @owner Observable
     */
    function mergeStatic() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i - 0] = arguments[_i];
        }
        var concurrent = Number.POSITIVE_INFINITY;
        var scheduler = null;
        var last = observables[observables.length - 1];
        if (isScheduler_1.isScheduler(last)) {
            scheduler = observables.pop();
            if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
                concurrent = observables.pop();
            }
        } else if (typeof last === 'number') {
            concurrent = observables.pop();
        }
        if (observables.length === 1) {
            return observables[0];
        }
        return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(concurrent));
    }
    exports.mergeStatic = mergeStatic;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/merge.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/merge.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var merge_1 = $__require('node_modules/rxjs/operator/merge.js');
  Observable_1.Observable.prototype.merge = merge_1.merge;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/mergeAll.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/mergeAll.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var mergeAll_1 = $__require('node_modules/rxjs/operator/mergeAll.js');
  Observable_1.Observable.prototype.mergeAll = mergeAll_1.mergeAll;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/mergeMap.js', ['node_modules/rxjs/util/subscribeToResult.js', 'node_modules/rxjs/OuterSubscriber.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    /**
     * Projects each source value to an Observable which is merged in the output
     * Observable.
     *
     * <span class="informal">Maps each value to an Observable, then flattens all of
     * these inner Observables using {@link mergeAll}.</span>
     *
     * <img src="./img/mergeMap.png" width="100%">
     *
     * Returns an Observable that emits items based on applying a function that you
     * supply to each item emitted by the source Observable, where that function
     * returns an Observable, and then merging those resulting Observables and
     * emitting the results of this merger.
     *
     * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
     * var letters = Rx.Observable.of('a', 'b', 'c');
     * var result = letters.mergeMap(x =>
     *   Rx.Observable.interval(1000).map(i => x+i)
     * );
     * result.subscribe(x => console.log(x));
     *
     * @see {@link concatMap}
     * @see {@link exhaustMap}
     * @see {@link merge}
     * @see {@link mergeAll}
     * @see {@link mergeMapTo}
     * @see {@link mergeScan}
     * @see {@link switchMap}
     *
     * @param {function(value: T, ?index: number): Observable} project A function
     * that, when applied to an item emitted by the source Observable, returns an
     * Observable.
     * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
     * A function to produce the value on the output Observable based on the values
     * and the indices of the source (outer) emission and the inner Observable
     * emission. The arguments passed to this function are:
     * - `outerValue`: the value that came from the source
     * - `innerValue`: the value that came from the projected Observable
     * - `outerIndex`: the "index" of the value that came from the source
     * - `innerIndex`: the "index" of the value from the projected Observable
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
     * Observables being subscribed to concurrently.
     * @return {Observable} An Observable that emits the result of applying the
     * projection function (and the optional `resultSelector`) to each item emitted
     * by the source Observable and merging the results of the Observables obtained
     * from this transformation.
     * @method mergeMap
     * @owner Observable
     */
    function mergeMap(project, resultSelector, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        if (typeof resultSelector === 'number') {
            concurrent = resultSelector;
            resultSelector = null;
        }
        return this.lift(new MergeMapOperator(project, resultSelector, concurrent));
    }
    exports.mergeMap = mergeMap;
    var MergeMapOperator = function () {
        function MergeMapOperator(project, resultSelector, concurrent) {
            if (concurrent === void 0) {
                concurrent = Number.POSITIVE_INFINITY;
            }
            this.project = project;
            this.resultSelector = resultSelector;
            this.concurrent = concurrent;
        }
        MergeMapOperator.prototype.call = function (observer, source) {
            return source._subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
        };
        return MergeMapOperator;
    }();
    exports.MergeMapOperator = MergeMapOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MergeMapSubscriber = function (_super) {
        __extends(MergeMapSubscriber, _super);
        function MergeMapSubscriber(destination, project, resultSelector, concurrent) {
            if (concurrent === void 0) {
                concurrent = Number.POSITIVE_INFINITY;
            }
            _super.call(this, destination);
            this.project = project;
            this.resultSelector = resultSelector;
            this.concurrent = concurrent;
            this.hasCompleted = false;
            this.buffer = [];
            this.active = 0;
            this.index = 0;
        }
        MergeMapSubscriber.prototype._next = function (value) {
            if (this.active < this.concurrent) {
                this._tryNext(value);
            } else {
                this.buffer.push(value);
            }
        };
        MergeMapSubscriber.prototype._tryNext = function (value) {
            var result;
            var index = this.index++;
            try {
                result = this.project(value, index);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.active++;
            this._innerSub(result, value, index);
        };
        MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
            this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
        };
        MergeMapSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                this.destination.complete();
            }
        };
        MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            if (this.resultSelector) {
                this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
            } else {
                this.destination.next(innerValue);
            }
        };
        MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
            var result;
            try {
                result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            } else if (this.active === 0 && this.hasCompleted) {
                this.destination.complete();
            }
        };
        return MergeMapSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    exports.MergeMapSubscriber = MergeMapSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/mergeMap.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/mergeMap.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var mergeMap_1 = $__require('node_modules/rxjs/operator/mergeMap.js');
  Observable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;
  Observable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/mergeMapTo.js', ['node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Projects each source value to the same Observable which is merged multiple
     * times in the output Observable.
     *
     * <span class="informal">It's like {@link mergeMap}, but maps each value always
     * to the same inner Observable.</span>
     *
     * <img src="./img/mergeMapTo.png" width="100%">
     *
     * Maps each source value to the given Observable `innerObservable` regardless
     * of the source value, and then merges those resulting Observables into one
     * single Observable, which is the output Observable.
     *
     * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));
     * result.subscribe(x => console.log(x));
     *
     * @see {@link concatMapTo}
     * @see {@link merge}
     * @see {@link mergeAll}
     * @see {@link mergeMap}
     * @see {@link mergeScan}
     * @see {@link switchMapTo}
     *
     * @param {Observable} innerObservable An Observable to replace each value from
     * the source Observable.
     * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
     * A function to produce the value on the output Observable based on the values
     * and the indices of the source (outer) emission and the inner Observable
     * emission. The arguments passed to this function are:
     * - `outerValue`: the value that came from the source
     * - `innerValue`: the value that came from the projected Observable
     * - `outerIndex`: the "index" of the value that came from the source
     * - `innerIndex`: the "index" of the value from the projected Observable
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
     * Observables being subscribed to concurrently.
     * @return {Observable} An Observable that emits items from the given
     * `innerObservable` (and optionally transformed through `resultSelector`) every
     * time a value is emitted on the source Observable.
     * @method mergeMapTo
     * @owner Observable
     */
    function mergeMapTo(innerObservable, resultSelector, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        if (typeof resultSelector === 'number') {
            concurrent = resultSelector;
            resultSelector = null;
        }
        return this.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent));
    }
    exports.mergeMapTo = mergeMapTo;
    // TODO: Figure out correct signature here: an Operator<Observable<T>, R>
    //       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>
    var MergeMapToOperator = function () {
        function MergeMapToOperator(ish, resultSelector, concurrent) {
            if (concurrent === void 0) {
                concurrent = Number.POSITIVE_INFINITY;
            }
            this.ish = ish;
            this.resultSelector = resultSelector;
            this.concurrent = concurrent;
        }
        MergeMapToOperator.prototype.call = function (observer, source) {
            return source._subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));
        };
        return MergeMapToOperator;
    }();
    exports.MergeMapToOperator = MergeMapToOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MergeMapToSubscriber = function (_super) {
        __extends(MergeMapToSubscriber, _super);
        function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {
            if (concurrent === void 0) {
                concurrent = Number.POSITIVE_INFINITY;
            }
            _super.call(this, destination);
            this.ish = ish;
            this.resultSelector = resultSelector;
            this.concurrent = concurrent;
            this.hasCompleted = false;
            this.buffer = [];
            this.active = 0;
            this.index = 0;
        }
        MergeMapToSubscriber.prototype._next = function (value) {
            if (this.active < this.concurrent) {
                var resultSelector = this.resultSelector;
                var index = this.index++;
                var ish = this.ish;
                var destination = this.destination;
                this.active++;
                this._innerSub(ish, destination, resultSelector, value, index);
            } else {
                this.buffer.push(value);
            }
        };
        MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {
            this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
        };
        MergeMapToSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                this.destination.complete();
            }
        };
        MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var _a = this,
                resultSelector = _a.resultSelector,
                destination = _a.destination;
            if (resultSelector) {
                this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);
            } else {
                destination.next(innerValue);
            }
        };
        MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {
            var _a = this,
                resultSelector = _a.resultSelector,
                destination = _a.destination;
            var result;
            try {
                result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
            } catch (err) {
                destination.error(err);
                return;
            }
            destination.next(result);
        };
        MergeMapToSubscriber.prototype.notifyError = function (err) {
            this.destination.error(err);
        };
        MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            } else if (this.active === 0 && this.hasCompleted) {
                this.destination.complete();
            }
        };
        return MergeMapToSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    exports.MergeMapToSubscriber = MergeMapToSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/mergeMapTo.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/mergeMapTo.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var mergeMapTo_1 = $__require('node_modules/rxjs/operator/mergeMapTo.js');
  Observable_1.Observable.prototype.flatMapTo = mergeMapTo_1.mergeMapTo;
  Observable_1.Observable.prototype.mergeMapTo = mergeMapTo_1.mergeMapTo;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/mergeScan.js', ['node_modules/rxjs/util/tryCatch.js', 'node_modules/rxjs/util/errorObject.js', 'node_modules/rxjs/util/subscribeToResult.js', 'node_modules/rxjs/OuterSubscriber.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var tryCatch_1 = $__require('node_modules/rxjs/util/tryCatch.js');
    var errorObject_1 = $__require('node_modules/rxjs/util/errorObject.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    /**
     * @param project
     * @param seed
     * @param concurrent
     * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
     * @method mergeScan
     * @owner Observable
     */
    function mergeScan(project, seed, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        return this.lift(new MergeScanOperator(project, seed, concurrent));
    }
    exports.mergeScan = mergeScan;
    var MergeScanOperator = function () {
        function MergeScanOperator(project, seed, concurrent) {
            this.project = project;
            this.seed = seed;
            this.concurrent = concurrent;
        }
        MergeScanOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new MergeScanSubscriber(subscriber, this.project, this.seed, this.concurrent));
        };
        return MergeScanOperator;
    }();
    exports.MergeScanOperator = MergeScanOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MergeScanSubscriber = function (_super) {
        __extends(MergeScanSubscriber, _super);
        function MergeScanSubscriber(destination, project, acc, concurrent) {
            _super.call(this, destination);
            this.project = project;
            this.acc = acc;
            this.concurrent = concurrent;
            this.hasValue = false;
            this.hasCompleted = false;
            this.buffer = [];
            this.active = 0;
            this.index = 0;
        }
        MergeScanSubscriber.prototype._next = function (value) {
            if (this.active < this.concurrent) {
                var index = this.index++;
                var ish = tryCatch_1.tryCatch(this.project)(this.acc, value);
                var destination = this.destination;
                if (ish === errorObject_1.errorObject) {
                    destination.error(errorObject_1.errorObject.e);
                } else {
                    this.active++;
                    this._innerSub(ish, value, index);
                }
            } else {
                this.buffer.push(value);
            }
        };
        MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {
            this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
        };
        MergeScanSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                if (this.hasValue === false) {
                    this.destination.next(this.acc);
                }
                this.destination.complete();
            }
        };
        MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var destination = this.destination;
            this.acc = innerValue;
            this.hasValue = true;
            destination.next(innerValue);
        };
        MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            } else if (this.active === 0 && this.hasCompleted) {
                if (this.hasValue === false) {
                    this.destination.next(this.acc);
                }
                this.destination.complete();
            }
        };
        return MergeScanSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    exports.MergeScanSubscriber = MergeScanSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/mergeScan.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/mergeScan.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var mergeScan_1 = $__require('node_modules/rxjs/operator/mergeScan.js');
  Observable_1.Observable.prototype.mergeScan = mergeScan_1.mergeScan;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/min.js', ['node_modules/rxjs/operator/reduce.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var reduce_1 = $__require('node_modules/rxjs/operator/reduce.js');
    /**
     * The Min operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),
     * and when source Observable completes it emits a single item: the item with the smallest number.
     *
     * <img src="./img/min.png" width="100%">
     *
     * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.
     * @return {Observable<R>} an Observable that emits item with the smallest number.
     * @method min
     * @owner Observable
     */
    function min(comparer) {
        var min = typeof comparer === 'function' ? function (x, y) {
            return comparer(x, y) < 0 ? x : y;
        } : function (x, y) {
            return x < y ? x : y;
        };
        return this.lift(new reduce_1.ReduceOperator(min));
    }
    exports.min = min;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/min.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/min.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var min_1 = $__require('node_modules/rxjs/operator/min.js');
  Observable_1.Observable.prototype.min = min_1.min;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/multicast.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/multicast.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var multicast_1 = $__require('node_modules/rxjs/operator/multicast.js');
  Observable_1.Observable.prototype.multicast = multicast_1.multicast;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/observeOn.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/observeOn.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var observeOn_1 = $__require('node_modules/rxjs/operator/observeOn.js');
  Observable_1.Observable.prototype.observeOn = observeOn_1.observeOn;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/observable/IteratorObservable.js', ['node_modules/rxjs/util/root.js', 'node_modules/rxjs/Observable.js', 'node_modules/rxjs/symbol/iterator.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var root_1 = $__require('node_modules/rxjs/util/root.js');
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var iterator_1 = $__require('node_modules/rxjs/symbol/iterator.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var IteratorObservable = function (_super) {
        __extends(IteratorObservable, _super);
        function IteratorObservable(iterator, scheduler) {
            _super.call(this);
            this.scheduler = scheduler;
            if (iterator == null) {
                throw new Error('iterator cannot be null.');
            }
            this.iterator = getIterator(iterator);
        }
        IteratorObservable.create = function (iterator, scheduler) {
            return new IteratorObservable(iterator, scheduler);
        };
        IteratorObservable.dispatch = function (state) {
            var index = state.index,
                hasError = state.hasError,
                iterator = state.iterator,
                subscriber = state.subscriber;
            if (hasError) {
                subscriber.error(state.error);
                return;
            }
            var result = iterator.next();
            if (result.done) {
                subscriber.complete();
                return;
            }
            subscriber.next(result.value);
            state.index = index + 1;
            if (subscriber.closed) {
                return;
            }
            this.schedule(state);
        };
        IteratorObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var _a = this,
                iterator = _a.iterator,
                scheduler = _a.scheduler;
            if (scheduler) {
                return scheduler.schedule(IteratorObservable.dispatch, 0, {
                    index: index, iterator: iterator, subscriber: subscriber
                });
            } else {
                do {
                    var result = iterator.next();
                    if (result.done) {
                        subscriber.complete();
                        break;
                    } else {
                        subscriber.next(result.value);
                    }
                    if (subscriber.closed) {
                        break;
                    }
                } while (true);
            }
        };
        return IteratorObservable;
    }(Observable_1.Observable);
    exports.IteratorObservable = IteratorObservable;
    var StringIterator = function () {
        function StringIterator(str, idx, len) {
            if (idx === void 0) {
                idx = 0;
            }
            if (len === void 0) {
                len = str.length;
            }
            this.str = str;
            this.idx = idx;
            this.len = len;
        }
        StringIterator.prototype[iterator_1.$$iterator] = function () {
            return this;
        };
        StringIterator.prototype.next = function () {
            return this.idx < this.len ? {
                done: false,
                value: this.str.charAt(this.idx++)
            } : {
                done: true,
                value: undefined
            };
        };
        return StringIterator;
    }();
    var ArrayIterator = function () {
        function ArrayIterator(arr, idx, len) {
            if (idx === void 0) {
                idx = 0;
            }
            if (len === void 0) {
                len = toLength(arr);
            }
            this.arr = arr;
            this.idx = idx;
            this.len = len;
        }
        ArrayIterator.prototype[iterator_1.$$iterator] = function () {
            return this;
        };
        ArrayIterator.prototype.next = function () {
            return this.idx < this.len ? {
                done: false,
                value: this.arr[this.idx++]
            } : {
                done: true,
                value: undefined
            };
        };
        return ArrayIterator;
    }();
    function getIterator(obj) {
        var i = obj[iterator_1.$$iterator];
        if (!i && typeof obj === 'string') {
            return new StringIterator(obj);
        }
        if (!i && obj.length !== undefined) {
            return new ArrayIterator(obj);
        }
        if (!i) {
            throw new TypeError('object is not iterable');
        }
        return obj[iterator_1.$$iterator]();
    }
    var maxSafeInteger = Math.pow(2, 53) - 1;
    function toLength(o) {
        var len = +o.length;
        if (isNaN(len)) {
            return 0;
        }
        if (len === 0 || !numberIsFinite(len)) {
            return len;
        }
        len = sign(len) * Math.floor(Math.abs(len));
        if (len <= 0) {
            return 0;
        }
        if (len > maxSafeInteger) {
            return maxSafeInteger;
        }
        return len;
    }
    function numberIsFinite(value) {
        return typeof value === 'number' && root_1.root.isFinite(value);
    }
    function sign(value) {
        var valueAsNumber = +value;
        if (valueAsNumber === 0) {
            return valueAsNumber;
        }
        if (isNaN(valueAsNumber)) {
            return valueAsNumber;
        }
        return valueAsNumber < 0 ? -1 : 1;
    }
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/observable/ArrayLikeObservable.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/ScalarObservable.js', 'node_modules/rxjs/observable/EmptyObservable.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var ScalarObservable_1 = $__require('node_modules/rxjs/observable/ScalarObservable.js');
    var EmptyObservable_1 = $__require('node_modules/rxjs/observable/EmptyObservable.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ArrayLikeObservable = function (_super) {
        __extends(ArrayLikeObservable, _super);
        function ArrayLikeObservable(arrayLike, scheduler) {
            _super.call(this);
            this.arrayLike = arrayLike;
            this.scheduler = scheduler;
            if (!scheduler && arrayLike.length === 1) {
                this._isScalar = true;
                this.value = arrayLike[0];
            }
        }
        ArrayLikeObservable.create = function (arrayLike, scheduler) {
            var length = arrayLike.length;
            if (length === 0) {
                return new EmptyObservable_1.EmptyObservable();
            } else if (length === 1) {
                return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);
            } else {
                return new ArrayLikeObservable(arrayLike, scheduler);
            }
        };
        ArrayLikeObservable.dispatch = function (state) {
            var arrayLike = state.arrayLike,
                index = state.index,
                length = state.length,
                subscriber = state.subscriber;
            if (subscriber.closed) {
                return;
            }
            if (index >= length) {
                subscriber.complete();
                return;
            }
            subscriber.next(arrayLike[index]);
            state.index = index + 1;
            this.schedule(state);
        };
        ArrayLikeObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var _a = this,
                arrayLike = _a.arrayLike,
                scheduler = _a.scheduler;
            var length = arrayLike.length;
            if (scheduler) {
                return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
                    arrayLike: arrayLike, index: index, length: length, subscriber: subscriber
                });
            } else {
                for (var i = 0; i < length && !subscriber.closed; i++) {
                    subscriber.next(arrayLike[i]);
                }
                subscriber.complete();
            }
        };
        return ArrayLikeObservable;
    }(Observable_1.Observable);
    exports.ArrayLikeObservable = ArrayLikeObservable;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/observable/FromObservable.js', ['node_modules/rxjs/util/isArray.js', 'node_modules/rxjs/util/isPromise.js', 'node_modules/rxjs/observable/PromiseObservable.js', 'node_modules/rxjs/observable/IteratorObservable.js', 'node_modules/rxjs/observable/ArrayObservable.js', 'node_modules/rxjs/observable/ArrayLikeObservable.js', 'node_modules/rxjs/symbol/iterator.js', 'node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/observeOn.js', 'node_modules/rxjs/symbol/observable.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var isArray_1 = $__require('node_modules/rxjs/util/isArray.js');
    var isPromise_1 = $__require('node_modules/rxjs/util/isPromise.js');
    var PromiseObservable_1 = $__require('node_modules/rxjs/observable/PromiseObservable.js');
    var IteratorObservable_1 = $__require('node_modules/rxjs/observable/IteratorObservable.js');
    var ArrayObservable_1 = $__require('node_modules/rxjs/observable/ArrayObservable.js');
    var ArrayLikeObservable_1 = $__require('node_modules/rxjs/observable/ArrayLikeObservable.js');
    var iterator_1 = $__require('node_modules/rxjs/symbol/iterator.js');
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var observeOn_1 = $__require('node_modules/rxjs/operator/observeOn.js');
    var observable_1 = $__require('node_modules/rxjs/symbol/observable.js');
    var isArrayLike = function (x) {
        return x && typeof x.length === 'number';
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var FromObservable = function (_super) {
        __extends(FromObservable, _super);
        function FromObservable(ish, scheduler) {
            _super.call(this, null);
            this.ish = ish;
            this.scheduler = scheduler;
        }
        /**
         * Creates an Observable from an Array, an array-like object, a Promise, an
         * iterable object, or an Observable-like object.
         *
         * <span class="informal">Converts almost anything to an Observable.</span>
         *
         * <img src="./img/from.png" width="100%">
         *
         * Convert various other objects and data types into Observables. `from`
         * converts a Promise or an array-like or an
         * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)
         * object into an Observable that emits the items in that promise or array or
         * iterable. A String, in this context, is treated as an array of characters.
         * Observable-like objects (contains a function named with the ES2015 Symbol
         * for Observable) can also be converted through this operator.
         *
         * @example <caption>Converts an array to an Observable</caption>
         * var array = [10, 20, 30];
         * var result = Rx.Observable.from(array);
         * result.subscribe(x => console.log(x));
         *
         * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>
         * function* generateDoubles(seed) {
         *   var i = seed;
         *   while (true) {
         *     yield i;
         *     i = 2 * i; // double it
         *   }
         * }
         *
         * var iterator = generateDoubles(3);
         * var result = Rx.Observable.from(iterator).take(10);
         * result.subscribe(x => console.log(x));
         *
         * @see {@link create}
         * @see {@link fromEvent}
         * @see {@link fromEventPattern}
         * @see {@link fromPromise}
         *
         * @param {ObservableInput<T>} ish A subscribable object, a Promise, an
         * Observable-like, an Array, an iterable or an array-like object to be
         * converted.
         * @param {Scheduler} [scheduler] The scheduler on which to schedule the
         * emissions of values.
         * @return {Observable<T>} The Observable whose values are originally from the
         * input object that was converted.
         * @static true
         * @name from
         * @owner Observable
         */
        FromObservable.create = function (ish, scheduler) {
            if (ish != null) {
                if (typeof ish[observable_1.$$observable] === 'function') {
                    if (ish instanceof Observable_1.Observable && !scheduler) {
                        return ish;
                    }
                    return new FromObservable(ish, scheduler);
                } else if (isArray_1.isArray(ish)) {
                    return new ArrayObservable_1.ArrayObservable(ish, scheduler);
                } else if (isPromise_1.isPromise(ish)) {
                    return new PromiseObservable_1.PromiseObservable(ish, scheduler);
                } else if (typeof ish[iterator_1.$$iterator] === 'function' || typeof ish === 'string') {
                    return new IteratorObservable_1.IteratorObservable(ish, scheduler);
                } else if (isArrayLike(ish)) {
                    return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);
                }
            }
            throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');
        };
        FromObservable.prototype._subscribe = function (subscriber) {
            var ish = this.ish;
            var scheduler = this.scheduler;
            if (scheduler == null) {
                return ish[observable_1.$$observable]().subscribe(subscriber);
            } else {
                return ish[observable_1.$$observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
            }
        };
        return FromObservable;
    }(Observable_1.Observable);
    exports.FromObservable = FromObservable;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/onErrorResumeNext.js', ['node_modules/rxjs/observable/FromObservable.js', 'node_modules/rxjs/util/isArray.js', 'node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var FromObservable_1 = $__require('node_modules/rxjs/observable/FromObservable.js');
    var isArray_1 = $__require('node_modules/rxjs/util/isArray.js');
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    function onErrorResumeNext() {
        var nextSources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            nextSources[_i - 0] = arguments[_i];
        }
        if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {
            nextSources = nextSources[0];
        }
        return this.lift(new OnErrorResumeNextOperator(nextSources));
    }
    exports.onErrorResumeNext = onErrorResumeNext;
    /* tslint:enable:max-line-length */
    function onErrorResumeNextStatic() {
        var nextSources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            nextSources[_i - 0] = arguments[_i];
        }
        var source = null;
        if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {
            nextSources = nextSources[0];
        }
        source = nextSources.shift();
        return new FromObservable_1.FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));
    }
    exports.onErrorResumeNextStatic = onErrorResumeNextStatic;
    var OnErrorResumeNextOperator = function () {
        function OnErrorResumeNextOperator(nextSources) {
            this.nextSources = nextSources;
        }
        OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
        };
        return OnErrorResumeNextOperator;
    }();
    var OnErrorResumeNextSubscriber = function (_super) {
        __extends(OnErrorResumeNextSubscriber, _super);
        function OnErrorResumeNextSubscriber(destination, nextSources) {
            _super.call(this, destination);
            this.destination = destination;
            this.nextSources = nextSources;
        }
        OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {
            this.subscribeToNextSource();
        };
        OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {
            this.subscribeToNextSource();
        };
        OnErrorResumeNextSubscriber.prototype._error = function (err) {
            this.subscribeToNextSource();
        };
        OnErrorResumeNextSubscriber.prototype._complete = function () {
            this.subscribeToNextSource();
        };
        OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {
            var next = this.nextSources.shift();
            if (next) {
                this.add(subscribeToResult_1.subscribeToResult(this, next));
            } else {
                this.destination.complete();
            }
        };
        return OnErrorResumeNextSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/onErrorResumeNext.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/onErrorResumeNext.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var onErrorResumeNext_1 = $__require('node_modules/rxjs/operator/onErrorResumeNext.js');
  Observable_1.Observable.prototype.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/pairwise.js", ["node_modules/rxjs/Subscriber.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("node_modules/rxjs/Subscriber.js");
    /**
     * Groups pairs of consecutive emissions together and emits them as an array of
     * two values.
     *
     * <span class="informal">Puts the current value and previous value together as
     * an array, and emits that.</span>
     *
     * <img src="./img/pairwise.png" width="100%">
     *
     * The Nth emission from the source Observable will cause the output Observable
     * to emit an array [(N-1)th, Nth] of the previous and the current value, as a
     * pair. For this reason, `pairwise` emits on the second and subsequent
     * emissions from the source Observable, but not on the first emission, because
     * there is no previous value in that case.
     *
     * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var pairs = clicks.pairwise();
     * var distance = pairs.map(pair => {
     *   var x0 = pair[0].clientX;
     *   var y0 = pair[0].clientY;
     *   var x1 = pair[1].clientX;
     *   var y1 = pair[1].clientY;
     *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));
     * });
     * distance.subscribe(x => console.log(x));
     *
     * @see {@link buffer}
     * @see {@link bufferCount}
     *
     * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of
     * consecutive values from the source Observable.
     * @method pairwise
     * @owner Observable
     */
    function pairwise() {
        return this.lift(new PairwiseOperator());
    }
    exports.pairwise = pairwise;
    var PairwiseOperator = function () {
        function PairwiseOperator() {}
        PairwiseOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new PairwiseSubscriber(subscriber));
        };
        return PairwiseOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var PairwiseSubscriber = function (_super) {
        __extends(PairwiseSubscriber, _super);
        function PairwiseSubscriber(destination) {
            _super.call(this, destination);
            this.hasPrev = false;
        }
        PairwiseSubscriber.prototype._next = function (value) {
            if (this.hasPrev) {
                this.destination.next([this.prev, value]);
            } else {
                this.hasPrev = true;
            }
            this.prev = value;
        };
        return PairwiseSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/pairwise.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/pairwise.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var pairwise_1 = $__require('node_modules/rxjs/operator/pairwise.js');
  Observable_1.Observable.prototype.pairwise = pairwise_1.pairwise;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/util/not.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function not(pred, thisArg) {
        function notPred() {
            return !notPred.pred.apply(notPred.thisArg, arguments);
        }
        notPred.pred = pred;
        notPred.thisArg = thisArg;
        return notPred;
    }
    exports.not = not;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/filter.js", ["node_modules/rxjs/Subscriber.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("node_modules/rxjs/Subscriber.js");
    /**
     * Filter items emitted by the source Observable by only emitting those that
     * satisfy a specified predicate.
     *
     * <span class="informal">Like
     * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
     * it only emits a value from the source if it passes a criterion function.</span>
     *
     * <img src="./img/filter.png" width="100%">
     *
     * Similar to the well-known `Array.prototype.filter` method, this operator
     * takes values from the source Observable, passes them through a `predicate`
     * function and only emits those values that yielded `true`.
     *
     * @example <caption>Emit only click events whose target was a DIV element</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');
     * clicksOnDivs.subscribe(x => console.log(x));
     *
     * @see {@link distinct}
     * @see {@link distinctKey}
     * @see {@link distinctUntilChanged}
     * @see {@link distinctUntilKeyChanged}
     * @see {@link ignoreElements}
     * @see {@link partition}
     * @see {@link skip}
     *
     * @param {function(value: T, index: number): boolean} predicate A function that
     * evaluates each value emitted by the source Observable. If it returns `true`,
     * the value is emitted, if `false` the value is not passed to the output
     * Observable. The `index` parameter is the number `i` for the i-th source
     * emission that has happened since the subscription, starting from the number
     * `0`.
     * @param {any} [thisArg] An optional argument to determine the value of `this`
     * in the `predicate` function.
     * @return {Observable} An Observable of values from the source that were
     * allowed by the `predicate` function.
     * @method filter
     * @owner Observable
     */
    function filter(predicate, thisArg) {
        return this.lift(new FilterOperator(predicate, thisArg));
    }
    exports.filter = filter;
    var FilterOperator = function () {
        function FilterOperator(predicate, thisArg) {
            this.predicate = predicate;
            this.thisArg = thisArg;
        }
        FilterOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
        };
        return FilterOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var FilterSubscriber = function (_super) {
        __extends(FilterSubscriber, _super);
        function FilterSubscriber(destination, predicate, thisArg) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.count = 0;
            this.predicate = predicate;
        }
        // the try catch block below is left specifically for
        // optimization and perf reasons. a tryCatcher is not necessary here.
        FilterSubscriber.prototype._next = function (value) {
            var result;
            try {
                result = this.predicate.call(this.thisArg, value, this.count++);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this.destination.next(value);
            }
        };
        return FilterSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/partition.js', ['node_modules/rxjs/util/not.js', 'node_modules/rxjs/operator/filter.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var not_1 = $__require('node_modules/rxjs/util/not.js');
    var filter_1 = $__require('node_modules/rxjs/operator/filter.js');
    /**
     * Splits the source Observable into two, one with values that satisfy a
     * predicate, and another with values that don't satisfy the predicate.
     *
     * <span class="informal">It's like {@link filter}, but returns two Observables:
     * one like the output of {@link filter}, and the other with values that did not
     * pass the condition.</span>
     *
     * <img src="./img/partition.png" width="100%">
     *
     * `partition` outputs an array with two Observables that partition the values
     * from the source Observable through the given `predicate` function. The first
     * Observable in that array emits source values for which the predicate argument
     * returns true. The second Observable emits source values for which the
     * predicate returns false. The first behaves like {@link filter} and the second
     * behaves like {@link filter} with the predicate negated.
     *
     * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');
     * var clicksOnDivs = parts[0];
     * var clicksElsewhere = parts[1];
     * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));
     * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));
     *
     * @see {@link filter}
     *
     * @param {function(value: T, index: number): boolean} predicate A function that
     * evaluates each value emitted by the source Observable. If it returns `true`,
     * the value is emitted on the first Observable in the returned array, if
     * `false` the value is emitted on the second Observable in the array. The
     * `index` parameter is the number `i` for the i-th source emission that has
     * happened since the subscription, starting from the number `0`.
     * @param {any} [thisArg] An optional argument to determine the value of `this`
     * in the `predicate` function.
     * @return {[Observable<T>, Observable<T>]} An array with two Observables: one
     * with values that passed the predicate, and another with values that did not
     * pass the predicate.
     * @method partition
     * @owner Observable
     */
    function partition(predicate, thisArg) {
        return [filter_1.filter.call(this, predicate), filter_1.filter.call(this, not_1.not(predicate, thisArg))];
    }
    exports.partition = partition;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/partition.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/partition.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var partition_1 = $__require('node_modules/rxjs/operator/partition.js');
  Observable_1.Observable.prototype.partition = partition_1.partition;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/pluck.js', ['node_modules/rxjs/operator/map.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var map_1 = $__require('node_modules/rxjs/operator/map.js');
    /**
     * Maps each source value (an object) to its specified nested property.
     *
     * <span class="informal">Like {@link map}, but meant only for picking one of
     * the nested properties of every emitted object.</span>
     *
     * <img src="./img/pluck.png" width="100%">
     *
     * Given a list of strings describing a path to an object property, retrieves
     * the value of a specified nested property from all values in the source
     * Observable. If a property can't be resolved, it will return `undefined` for
     * that value.
     *
     * @example <caption>Map every every click to the tagName of the clicked target element</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var tagNames = clicks.pluck('target', 'tagName');
     * tagNames.subscribe(x => console.log(x));
     *
     * @see {@link map}
     *
     * @param {...string} properties The nested properties to pluck from each source
     * value (an object).
     * @return {Observable} Returns a new Observable of property values from the
     * source values.
     * @method pluck
     * @owner Observable
     */
    function pluck() {
        var properties = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            properties[_i - 0] = arguments[_i];
        }
        var length = properties.length;
        if (length === 0) {
            throw new Error('list of properties cannot be empty.');
        }
        return map_1.map.call(this, plucker(properties, length));
    }
    exports.pluck = pluck;
    function plucker(props, length) {
        var mapper = function (x) {
            var currentProp = x;
            for (var i = 0; i < length; i++) {
                var p = currentProp[props[i]];
                if (typeof p !== 'undefined') {
                    currentProp = p;
                } else {
                    return undefined;
                }
            }
            return currentProp;
        };
        return mapper;
    }
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/pluck.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/pluck.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var pluck_1 = $__require('node_modules/rxjs/operator/pluck.js');
  Observable_1.Observable.prototype.pluck = pluck_1.pluck;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/publish.js', ['node_modules/rxjs/Subject.js', 'node_modules/rxjs/operator/multicast.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Subject_1 = $__require('node_modules/rxjs/Subject.js');
  var multicast_1 = $__require('node_modules/rxjs/operator/multicast.js');
  /**
   * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called
   * before it begins emitting items to those Observers that have subscribed to it.
   *
   * <img src="./img/publish.png" width="100%">
   *
   * @param {Function} Optional selector function which can use the multicasted source sequence as many times as needed,
   * without causing multiple subscriptions to the source sequence.
   * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.
   * @return a ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.
   * @method publish
   * @owner Observable
   */
  function publish(selector) {
    return selector ? multicast_1.multicast.call(this, function () {
      return new Subject_1.Subject();
    }, selector) : multicast_1.multicast.call(this, new Subject_1.Subject());
  }
  exports.publish = publish;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/publish.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/publish.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var publish_1 = $__require('node_modules/rxjs/operator/publish.js');
  Observable_1.Observable.prototype.publish = publish_1.publish;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/publishBehavior.js', ['node_modules/rxjs/BehaviorSubject.js', 'node_modules/rxjs/operator/multicast.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var BehaviorSubject_1 = $__require('node_modules/rxjs/BehaviorSubject.js');
  var multicast_1 = $__require('node_modules/rxjs/operator/multicast.js');
  /**
   * @param value
   * @return {ConnectableObservable<T>}
   * @method publishBehavior
   * @owner Observable
   */
  function publishBehavior(value) {
    return multicast_1.multicast.call(this, new BehaviorSubject_1.BehaviorSubject(value));
  }
  exports.publishBehavior = publishBehavior;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/publishBehavior.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/publishBehavior.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var publishBehavior_1 = $__require('node_modules/rxjs/operator/publishBehavior.js');
  Observable_1.Observable.prototype.publishBehavior = publishBehavior_1.publishBehavior;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/publishReplay.js', ['node_modules/rxjs/ReplaySubject.js', 'node_modules/rxjs/operator/multicast.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var ReplaySubject_1 = $__require('node_modules/rxjs/ReplaySubject.js');
  var multicast_1 = $__require('node_modules/rxjs/operator/multicast.js');
  /**
   * @param bufferSize
   * @param windowTime
   * @param scheduler
   * @return {ConnectableObservable<T>}
   * @method publishReplay
   * @owner Observable
   */
  function publishReplay(bufferSize, windowTime, scheduler) {
    if (bufferSize === void 0) {
      bufferSize = Number.POSITIVE_INFINITY;
    }
    if (windowTime === void 0) {
      windowTime = Number.POSITIVE_INFINITY;
    }
    return multicast_1.multicast.call(this, new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler));
  }
  exports.publishReplay = publishReplay;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/publishReplay.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/publishReplay.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var publishReplay_1 = $__require('node_modules/rxjs/operator/publishReplay.js');
  Observable_1.Observable.prototype.publishReplay = publishReplay_1.publishReplay;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/publishLast.js', ['node_modules/rxjs/AsyncSubject.js', 'node_modules/rxjs/operator/multicast.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var AsyncSubject_1 = $__require('node_modules/rxjs/AsyncSubject.js');
  var multicast_1 = $__require('node_modules/rxjs/operator/multicast.js');
  /**
   * @return {ConnectableObservable<T>}
   * @method publishLast
   * @owner Observable
   */
  function publishLast() {
    return multicast_1.multicast.call(this, new AsyncSubject_1.AsyncSubject());
  }
  exports.publishLast = publishLast;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/publishLast.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/publishLast.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var publishLast_1 = $__require('node_modules/rxjs/operator/publishLast.js');
  Observable_1.Observable.prototype.publishLast = publishLast_1.publishLast;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/race.js', ['node_modules/rxjs/util/isArray.js', 'node_modules/rxjs/observable/ArrayObservable.js', 'node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var isArray_1 = $__require('node_modules/rxjs/util/isArray.js');
    var ArrayObservable_1 = $__require('node_modules/rxjs/observable/ArrayObservable.js');
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Returns an Observable that mirrors the first source Observable to emit an item
     * from the combination of this Observable and supplied Observables
     * @param {...Observables} ...observables sources used to race for which Observable emits first.
     * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.
     * @method race
     * @owner Observable
     */
    function race() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i - 0] = arguments[_i];
        }
        // if the only argument is an array, it was most likely called with
        // `pair([obs1, obs2, ...])`
        if (observables.length === 1 && isArray_1.isArray(observables[0])) {
            observables = observables[0];
        }
        observables.unshift(this);
        return raceStatic.apply(this, observables);
    }
    exports.race = race;
    function raceStatic() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i - 0] = arguments[_i];
        }
        // if the only argument is an array, it was most likely called with
        // `pair([obs1, obs2, ...])`
        if (observables.length === 1) {
            if (isArray_1.isArray(observables[0])) {
                observables = observables[0];
            } else {
                return observables[0];
            }
        }
        return new ArrayObservable_1.ArrayObservable(observables).lift(new RaceOperator());
    }
    exports.raceStatic = raceStatic;
    var RaceOperator = function () {
        function RaceOperator() {}
        RaceOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new RaceSubscriber(subscriber));
        };
        return RaceOperator;
    }();
    exports.RaceOperator = RaceOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var RaceSubscriber = function (_super) {
        __extends(RaceSubscriber, _super);
        function RaceSubscriber(destination) {
            _super.call(this, destination);
            this.hasFirst = false;
            this.observables = [];
            this.subscriptions = [];
        }
        RaceSubscriber.prototype._next = function (observable) {
            this.observables.push(observable);
        };
        RaceSubscriber.prototype._complete = function () {
            var observables = this.observables;
            var len = observables.length;
            if (len === 0) {
                this.destination.complete();
            } else {
                for (var i = 0; i < len; i++) {
                    var observable = observables[i];
                    var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);
                    if (this.subscriptions) {
                        this.subscriptions.push(subscription);
                        this.add(subscription);
                    }
                }
                this.observables = null;
            }
        };
        RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            if (!this.hasFirst) {
                this.hasFirst = true;
                for (var i = 0; i < this.subscriptions.length; i++) {
                    if (i !== outerIndex) {
                        var subscription = this.subscriptions[i];
                        subscription.unsubscribe();
                        this.remove(subscription);
                    }
                }
                this.subscriptions = null;
            }
            this.destination.next(innerValue);
        };
        return RaceSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    exports.RaceSubscriber = RaceSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/race.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/race.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var race_1 = $__require('node_modules/rxjs/operator/race.js');
  Observable_1.Observable.prototype.race = race_1.race;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/reduce.js', ['node_modules/rxjs/Subscriber.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    /**
     * Applies an accumulator function over the source Observable, and returns the
     * accumulated result when the source completes, given an optional seed value.
     *
     * <span class="informal">Combines together all values emitted on the source,
     * using an accumulator function that knows how to join a new source value into
     * the accumulation from the past.</span>
     *
     * <img src="./img/reduce.png" width="100%">
     *
     * Like
     * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),
     * `reduce` applies an `accumulator` function against an accumulation and each
     * value of the source Observable (from the past) to reduce it to a single
     * value, emitted on the output Observable. Note that `reduce` will only emit
     * one value, only when the source Observable completes. It is equivalent to
     * applying operator {@link scan} followed by operator {@link last}.
     *
     * Returns an Observable that applies a specified `accumulator` function to each
     * item emitted by the source Observable. If a `seed` value is specified, then
     * that value will be used as the initial value for the accumulator. If no seed
     * value is specified, the first item of the source is used as the seed.
     *
     * @example <caption>Count the number of click events that happened in 5 seconds</caption>
     * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')
     *   .takeUntil(Rx.Observable.interval(5000));
     * var ones = clicksInFiveSeconds.mapTo(1);
     * var seed = 0;
     * var count = ones.reduce((acc, one) => acc + one, seed);
     * count.subscribe(x => console.log(x));
     *
     * @see {@link count}
     * @see {@link expand}
     * @see {@link mergeScan}
     * @see {@link scan}
     *
     * @param {function(acc: R, value: T): R} accumulator The accumulator function
     * called on each source value.
     * @param {R} [seed] The initial accumulation value.
     * @return {Observable<R>} An observable of the accumulated values.
     * @return {Observable<R>} An Observable that emits a single value that is the
     * result of accumulating the values emitted by the source Observable.
     * @method reduce
     * @owner Observable
     */
    function reduce(accumulator, seed) {
        return this.lift(new ReduceOperator(accumulator, seed));
    }
    exports.reduce = reduce;
    var ReduceOperator = function () {
        function ReduceOperator(accumulator, seed) {
            this.accumulator = accumulator;
            this.seed = seed;
        }
        ReduceOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed));
        };
        return ReduceOperator;
    }();
    exports.ReduceOperator = ReduceOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ReduceSubscriber = function (_super) {
        __extends(ReduceSubscriber, _super);
        function ReduceSubscriber(destination, accumulator, seed) {
            _super.call(this, destination);
            this.accumulator = accumulator;
            this.hasValue = false;
            this.acc = seed;
            this.accumulator = accumulator;
            this.hasSeed = typeof seed !== 'undefined';
        }
        ReduceSubscriber.prototype._next = function (value) {
            if (this.hasValue || (this.hasValue = this.hasSeed)) {
                this._tryReduce(value);
            } else {
                this.acc = value;
                this.hasValue = true;
            }
        };
        ReduceSubscriber.prototype._tryReduce = function (value) {
            var result;
            try {
                result = this.accumulator(this.acc, value);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.acc = result;
        };
        ReduceSubscriber.prototype._complete = function () {
            if (this.hasValue || this.hasSeed) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        };
        return ReduceSubscriber;
    }(Subscriber_1.Subscriber);
    exports.ReduceSubscriber = ReduceSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/reduce.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/reduce.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var reduce_1 = $__require('node_modules/rxjs/operator/reduce.js');
  Observable_1.Observable.prototype.reduce = reduce_1.reduce;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/repeat.js', ['node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/observable/EmptyObservable.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var EmptyObservable_1 = $__require('node_modules/rxjs/observable/EmptyObservable.js');
    /**
     * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times,
     * on a particular Scheduler.
     *
     * <img src="./img/repeat.png" width="100%">
     *
     * @param {Scheduler} [scheduler] the Scheduler to emit the items on.
     * @param {number} [count] the number of times the source Observable items are repeated, a count of 0 will yield
     * an empty Observable.
     * @return {Observable} an Observable that repeats the stream of items emitted by the source Observable at most
     * count times.
     * @method repeat
     * @owner Observable
     */
    function repeat(count) {
        if (count === void 0) {
            count = -1;
        }
        if (count === 0) {
            return new EmptyObservable_1.EmptyObservable();
        } else if (count < 0) {
            return this.lift(new RepeatOperator(-1, this));
        } else {
            return this.lift(new RepeatOperator(count - 1, this));
        }
    }
    exports.repeat = repeat;
    var RepeatOperator = function () {
        function RepeatOperator(count, source) {
            this.count = count;
            this.source = source;
        }
        RepeatOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
        };
        return RepeatOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var RepeatSubscriber = function (_super) {
        __extends(RepeatSubscriber, _super);
        function RepeatSubscriber(destination, count, source) {
            _super.call(this, destination);
            this.count = count;
            this.source = source;
        }
        RepeatSubscriber.prototype.complete = function () {
            if (!this.isStopped) {
                var _a = this,
                    source = _a.source,
                    count = _a.count;
                if (count === 0) {
                    return _super.prototype.complete.call(this);
                } else if (count > -1) {
                    this.count = count - 1;
                }
                this.unsubscribe();
                this.isStopped = false;
                this.closed = false;
                source.subscribe(this);
            }
        };
        return RepeatSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/repeat.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/repeat.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var repeat_1 = $__require('node_modules/rxjs/operator/repeat.js');
  Observable_1.Observable.prototype.repeat = repeat_1.repeat;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/repeatWhen.js', ['node_modules/rxjs/Subject.js', 'node_modules/rxjs/util/tryCatch.js', 'node_modules/rxjs/util/errorObject.js', 'node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require('node_modules/rxjs/Subject.js');
    var tryCatch_1 = $__require('node_modules/rxjs/util/tryCatch.js');
    var errorObject_1 = $__require('node_modules/rxjs/util/errorObject.js');
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Returns an Observable that emits the same values as the source observable with the exception of a `complete`.
     * A `complete` will cause the emission of the Throwable that cause the complete to the Observable returned from
     * notificationHandler. If that Observable calls onComplete or `complete` then retry will call `complete` or `error`
     * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular
     * Scheduler.
     *
     * <img src="./img/repeatWhen.png" width="100%">
     *
     * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,
     * aborting the retry.
     * @param {scheduler} the Scheduler on which to subscribe to the source Observable.
     * @return {Observable} the source Observable modified with retry logic.
     * @method repeatWhen
     * @owner Observable
     */
    function repeatWhen(notifier) {
        return this.lift(new RepeatWhenOperator(notifier, this));
    }
    exports.repeatWhen = repeatWhen;
    var RepeatWhenOperator = function () {
        function RepeatWhenOperator(notifier, source) {
            this.notifier = notifier;
            this.source = source;
        }
        RepeatWhenOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, this.source));
        };
        return RepeatWhenOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var RepeatWhenSubscriber = function (_super) {
        __extends(RepeatWhenSubscriber, _super);
        function RepeatWhenSubscriber(destination, notifier, source) {
            _super.call(this, destination);
            this.notifier = notifier;
            this.source = source;
        }
        RepeatWhenSubscriber.prototype.complete = function () {
            if (!this.isStopped) {
                var notifications = this.notifications;
                var retries = this.retries;
                var retriesSubscription = this.retriesSubscription;
                if (!retries) {
                    notifications = new Subject_1.Subject();
                    retries = tryCatch_1.tryCatch(this.notifier)(notifications);
                    if (retries === errorObject_1.errorObject) {
                        return _super.prototype.complete.call(this);
                    }
                    retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
                } else {
                    this.notifications = null;
                    this.retriesSubscription = null;
                }
                this.unsubscribe();
                this.closed = false;
                this.notifications = notifications;
                this.retries = retries;
                this.retriesSubscription = retriesSubscription;
                notifications.next();
            }
        };
        RepeatWhenSubscriber.prototype._unsubscribe = function () {
            var _a = this,
                notifications = _a.notifications,
                retriesSubscription = _a.retriesSubscription;
            if (notifications) {
                notifications.unsubscribe();
                this.notifications = null;
            }
            if (retriesSubscription) {
                retriesSubscription.unsubscribe();
                this.retriesSubscription = null;
            }
            this.retries = null;
        };
        RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var _a = this,
                notifications = _a.notifications,
                retries = _a.retries,
                retriesSubscription = _a.retriesSubscription;
            this.notifications = null;
            this.retries = null;
            this.retriesSubscription = null;
            this.unsubscribe();
            this.isStopped = false;
            this.closed = false;
            this.notifications = notifications;
            this.retries = retries;
            this.retriesSubscription = retriesSubscription;
            this.source.subscribe(this);
        };
        return RepeatWhenSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/repeatWhen.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/repeatWhen.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var repeatWhen_1 = $__require('node_modules/rxjs/operator/repeatWhen.js');
  Observable_1.Observable.prototype.repeatWhen = repeatWhen_1.repeatWhen;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/retry.js", ["node_modules/rxjs/Subscriber.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("node_modules/rxjs/Subscriber.js");
    /**
     * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `error` and the
     * predicate returns true for that specific exception and retry count.
     * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of
     * count resubscriptions (given as a number parameter) rather than propagating the `error` call.
     *
     * <img src="./img/retry.png" width="100%">
     *
     * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted
     * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second
     * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications
     * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].
     * @param {number} number of retry attempts before failing.
     * @return {Observable} the source Observable modified with the retry logic.
     * @method retry
     * @owner Observable
     */
    function retry(count) {
        if (count === void 0) {
            count = -1;
        }
        return this.lift(new RetryOperator(count, this));
    }
    exports.retry = retry;
    var RetryOperator = function () {
        function RetryOperator(count, source) {
            this.count = count;
            this.source = source;
        }
        RetryOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new RetrySubscriber(subscriber, this.count, this.source));
        };
        return RetryOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var RetrySubscriber = function (_super) {
        __extends(RetrySubscriber, _super);
        function RetrySubscriber(destination, count, source) {
            _super.call(this, destination);
            this.count = count;
            this.source = source;
        }
        RetrySubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var _a = this,
                    source = _a.source,
                    count = _a.count;
                if (count === 0) {
                    return _super.prototype.error.call(this, err);
                } else if (count > -1) {
                    this.count = count - 1;
                }
                this.unsubscribe();
                this.isStopped = false;
                this.closed = false;
                source.subscribe(this);
            }
        };
        return RetrySubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/retry.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/retry.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var retry_1 = $__require('node_modules/rxjs/operator/retry.js');
  Observable_1.Observable.prototype.retry = retry_1.retry;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/retryWhen.js', ['node_modules/rxjs/Subject.js', 'node_modules/rxjs/util/tryCatch.js', 'node_modules/rxjs/util/errorObject.js', 'node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require('node_modules/rxjs/Subject.js');
    var tryCatch_1 = $__require('node_modules/rxjs/util/tryCatch.js');
    var errorObject_1 = $__require('node_modules/rxjs/util/errorObject.js');
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Returns an Observable that emits the same values as the source observable with the exception of an `error`.
     * An `error` will cause the emission of the Throwable that cause the error to the Observable returned from
     * notificationHandler. If that Observable calls onComplete or `error` then retry will call `complete` or `error`
     * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular
     * Scheduler.
     *
     * <img src="./img/retryWhen.png" width="100%">
     *
     * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,
     * aborting the retry.
     * @param {scheduler} the Scheduler on which to subscribe to the source Observable.
     * @return {Observable} the source Observable modified with retry logic.
     * @method retryWhen
     * @owner Observable
     */
    function retryWhen(notifier) {
        return this.lift(new RetryWhenOperator(notifier, this));
    }
    exports.retryWhen = retryWhen;
    var RetryWhenOperator = function () {
        function RetryWhenOperator(notifier, source) {
            this.notifier = notifier;
            this.source = source;
        }
        RetryWhenOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
        };
        return RetryWhenOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var RetryWhenSubscriber = function (_super) {
        __extends(RetryWhenSubscriber, _super);
        function RetryWhenSubscriber(destination, notifier, source) {
            _super.call(this, destination);
            this.notifier = notifier;
            this.source = source;
        }
        RetryWhenSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var errors = this.errors;
                var retries = this.retries;
                var retriesSubscription = this.retriesSubscription;
                if (!retries) {
                    errors = new Subject_1.Subject();
                    retries = tryCatch_1.tryCatch(this.notifier)(errors);
                    if (retries === errorObject_1.errorObject) {
                        return _super.prototype.error.call(this, errorObject_1.errorObject.e);
                    }
                    retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
                } else {
                    this.errors = null;
                    this.retriesSubscription = null;
                }
                this.unsubscribe();
                this.closed = false;
                this.errors = errors;
                this.retries = retries;
                this.retriesSubscription = retriesSubscription;
                errors.next(err);
            }
        };
        RetryWhenSubscriber.prototype._unsubscribe = function () {
            var _a = this,
                errors = _a.errors,
                retriesSubscription = _a.retriesSubscription;
            if (errors) {
                errors.unsubscribe();
                this.errors = null;
            }
            if (retriesSubscription) {
                retriesSubscription.unsubscribe();
                this.retriesSubscription = null;
            }
            this.retries = null;
        };
        RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var _a = this,
                errors = _a.errors,
                retries = _a.retries,
                retriesSubscription = _a.retriesSubscription;
            this.errors = null;
            this.retries = null;
            this.retriesSubscription = null;
            this.unsubscribe();
            this.isStopped = false;
            this.closed = false;
            this.errors = errors;
            this.retries = retries;
            this.retriesSubscription = retriesSubscription;
            this.source.subscribe(this);
        };
        return RetryWhenSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/retryWhen.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/retryWhen.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var retryWhen_1 = $__require('node_modules/rxjs/operator/retryWhen.js');
  Observable_1.Observable.prototype.retryWhen = retryWhen_1.retryWhen;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/sample.js', ['node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Emits the most recently emitted value from the source Observable whenever
     * another Observable, the `notifier`, emits.
     *
     * <span class="informal">It's like {@link sampleTime}, but samples whenever
     * the `notifier` Observable emits something.</span>
     *
     * <img src="./img/sample.png" width="100%">
     *
     * Whenever the `notifier` Observable emits a value or completes, `sample`
     * looks at the source Observable and emits whichever value it has most recently
     * emitted since the previous sampling, unless the source has not emitted
     * anything since the previous sampling. The `notifier` is subscribed to as soon
     * as the output Observable is subscribed.
     *
     * @example <caption>On every click, sample the most recent "seconds" timer</caption>
     * var seconds = Rx.Observable.interval(1000);
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = seconds.sample(clicks);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link audit}
     * @see {@link debounce}
     * @see {@link sampleTime}
     * @see {@link throttle}
     *
     * @param {Observable<any>} notifier The Observable to use for sampling the
     * source Observable.
     * @return {Observable<T>} An Observable that emits the results of sampling the
     * values emitted by the source Observable whenever the notifier Observable
     * emits value or completes.
     * @method sample
     * @owner Observable
     */
    function sample(notifier) {
        return this.lift(new SampleOperator(notifier));
    }
    exports.sample = sample;
    var SampleOperator = function () {
        function SampleOperator(notifier) {
            this.notifier = notifier;
        }
        SampleOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new SampleSubscriber(subscriber, this.notifier));
        };
        return SampleOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SampleSubscriber = function (_super) {
        __extends(SampleSubscriber, _super);
        function SampleSubscriber(destination, notifier) {
            _super.call(this, destination);
            this.hasValue = false;
            this.add(subscribeToResult_1.subscribeToResult(this, notifier));
        }
        SampleSubscriber.prototype._next = function (value) {
            this.value = value;
            this.hasValue = true;
        };
        SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.emitValue();
        };
        SampleSubscriber.prototype.notifyComplete = function () {
            this.emitValue();
        };
        SampleSubscriber.prototype.emitValue = function () {
            if (this.hasValue) {
                this.hasValue = false;
                this.destination.next(this.value);
            }
        };
        return SampleSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/sample.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/sample.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var sample_1 = $__require('node_modules/rxjs/operator/sample.js');
  Observable_1.Observable.prototype.sample = sample_1.sample;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/sampleTime.js', ['node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/scheduler/async.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var async_1 = $__require('node_modules/rxjs/scheduler/async.js');
    /**
     * Emits the most recently emitted value from the source Observable within
     * periodic time intervals.
     *
     * <span class="informal">Samples the source Observable at periodic time
     * intervals, emitting what it samples.</span>
     *
     * <img src="./img/sampleTime.png" width="100%">
     *
     * `sampleTime` periodically looks at the source Observable and emits whichever
     * value it has most recently emitted since the previous sampling, unless the
     * source has not emitted anything since the previous sampling. The sampling
     * happens periodically in time every `period` milliseconds (or the time unit
     * defined by the optional `scheduler` argument). The sampling starts as soon as
     * the output Observable is subscribed.
     *
     * @example <caption>Every second, emit the most recent click at most once</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.sampleTime(1000);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link auditTime}
     * @see {@link debounceTime}
     * @see {@link delay}
     * @see {@link sample}
     * @see {@link throttleTime}
     *
     * @param {number} period The sampling period expressed in milliseconds or the
     * time unit determined internally by the optional `scheduler`.
     * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for
     * managing the timers that handle the sampling.
     * @return {Observable<T>} An Observable that emits the results of sampling the
     * values emitted by the source Observable at the specified time interval.
     * @method sampleTime
     * @owner Observable
     */
    function sampleTime(period, scheduler) {
        if (scheduler === void 0) {
            scheduler = async_1.async;
        }
        return this.lift(new SampleTimeOperator(period, scheduler));
    }
    exports.sampleTime = sampleTime;
    var SampleTimeOperator = function () {
        function SampleTimeOperator(period, scheduler) {
            this.period = period;
            this.scheduler = scheduler;
        }
        SampleTimeOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
        };
        return SampleTimeOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SampleTimeSubscriber = function (_super) {
        __extends(SampleTimeSubscriber, _super);
        function SampleTimeSubscriber(destination, period, scheduler) {
            _super.call(this, destination);
            this.period = period;
            this.scheduler = scheduler;
            this.hasValue = false;
            this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period: period }));
        }
        SampleTimeSubscriber.prototype._next = function (value) {
            this.lastValue = value;
            this.hasValue = true;
        };
        SampleTimeSubscriber.prototype.notifyNext = function () {
            if (this.hasValue) {
                this.hasValue = false;
                this.destination.next(this.lastValue);
            }
        };
        return SampleTimeSubscriber;
    }(Subscriber_1.Subscriber);
    function dispatchNotification(state) {
        var subscriber = state.subscriber,
            period = state.period;
        subscriber.notifyNext();
        this.schedule(state, period);
    }
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/sampleTime.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/sampleTime.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var sampleTime_1 = $__require('node_modules/rxjs/operator/sampleTime.js');
  Observable_1.Observable.prototype.sampleTime = sampleTime_1.sampleTime;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/scan.js', ['node_modules/rxjs/Subscriber.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    /**
     * Applies an accumulator function over the source Observable, and returns each
     * intermediate result, with an optional seed value.
     *
     * <span class="informal">It's like {@link reduce}, but emits the current
     * accumulation whenever the source emits a value.</span>
     *
     * <img src="./img/scan.png" width="100%">
     *
     * Combines together all values emitted on the source, using an accumulator
     * function that knows how to join a new source value into the accumulation from
     * the past. Is similar to {@link reduce}, but emits the intermediate
     * accumulations.
     *
     * Returns an Observable that applies a specified `accumulator` function to each
     * item emitted by the source Observable. If a `seed` value is specified, then
     * that value will be used as the initial value for the accumulator. If no seed
     * value is specified, the first item of the source is used as the seed.
     *
     * @example <caption>Count the number of click events</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var ones = clicks.mapTo(1);
     * var seed = 0;
     * var count = ones.scan((acc, one) => acc + one, seed);
     * count.subscribe(x => console.log(x));
     *
     * @see {@link expand}
     * @see {@link mergeScan}
     * @see {@link reduce}
     *
     * @param {function(acc: R, value: T, index: number): R} accumulator
     * The accumulator function called on each source value.
     * @param {T|R} [seed] The initial accumulation value.
     * @return {Observable<R>} An observable of the accumulated values.
     * @method scan
     * @owner Observable
     */
    function scan(accumulator, seed) {
        return this.lift(new ScanOperator(accumulator, seed));
    }
    exports.scan = scan;
    var ScanOperator = function () {
        function ScanOperator(accumulator, seed) {
            this.accumulator = accumulator;
            this.seed = seed;
        }
        ScanOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed));
        };
        return ScanOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ScanSubscriber = function (_super) {
        __extends(ScanSubscriber, _super);
        function ScanSubscriber(destination, accumulator, seed) {
            _super.call(this, destination);
            this.accumulator = accumulator;
            this.index = 0;
            this.accumulatorSet = false;
            this.seed = seed;
            this.accumulatorSet = typeof seed !== 'undefined';
        }
        Object.defineProperty(ScanSubscriber.prototype, "seed", {
            get: function () {
                return this._seed;
            },
            set: function (value) {
                this.accumulatorSet = true;
                this._seed = value;
            },
            enumerable: true,
            configurable: true
        });
        ScanSubscriber.prototype._next = function (value) {
            if (!this.accumulatorSet) {
                this.seed = value;
                this.destination.next(value);
            } else {
                return this._tryNext(value);
            }
        };
        ScanSubscriber.prototype._tryNext = function (value) {
            var index = this.index++;
            var result;
            try {
                result = this.accumulator(this.seed, value, index);
            } catch (err) {
                this.destination.error(err);
            }
            this.seed = result;
            this.destination.next(result);
        };
        return ScanSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/scan.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/scan.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var scan_1 = $__require('node_modules/rxjs/operator/scan.js');
  Observable_1.Observable.prototype.scan = scan_1.scan;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/sequenceEqual.js', ['node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/util/tryCatch.js', 'node_modules/rxjs/util/errorObject.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var tryCatch_1 = $__require('node_modules/rxjs/util/tryCatch.js');
    var errorObject_1 = $__require('node_modules/rxjs/util/errorObject.js');
    /**
     * Compares all values of two observables in sequence using an optional comparor function
     * and returns an observable of a single boolean value representing whether or not the two sequences
     * are equal.
     *
     * <span class="informal">Checks to see of all values emitted by both observables are equal, in order.</span>
     *
     * <img src="./img/sequenceEqual.png" width="100%">
     *
     * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either
     * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom
     * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the
     * observables completes, the operator will wait for the other observable to complete; If the other
     * observable emits before completing, the returned observable will emit `false` and complete. If one observable never
     * completes or emits after the other complets, the returned observable will never complete.
     *
     * @example <caption>figure out if the Konami code matches</caption>
     * var code = Observable.from([
     *  "ArrowUp",
     *  "ArrowUp",
     *  "ArrowDown",
     *  "ArrowDown",
     *  "ArrowLeft",
     *  "ArrowRight",
     *  "ArrowLeft",
     *  "ArrowRight",
     *  "KeyB",
     *  "KeyA",
     *  "Enter" // no start key, clearly.
     * ]);
     *
     * var keys = Rx.Observable.fromEvent(document, 'keyup')
     *  .map(e => e.code);
     * var matches = keys.bufferCount(11, 1)
     *  .mergeMap(
     *    last11 =>
     *      Rx.Observable.from(last11)
     *        .sequenceEqual(code)
     *   );
     * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));
     *
     * @see {@link combineLatest}
     * @see {@link zip}
     * @see {@link withLatestFrom}
     *
     * @param {Observable} compareTo the observable sequence to compare the source sequence to.
     * @param {function} [comparor] An optional function to compare each value pair
     * @return {Observable} An Observable of a single boolean value representing whether or not
     * the values emitted by both observables were equal in sequence
     * @method sequenceEqual
     * @owner Observable
     */
    function sequenceEqual(compareTo, comparor) {
        return this.lift(new SequenceEqualOperator(compareTo, comparor));
    }
    exports.sequenceEqual = sequenceEqual;
    var SequenceEqualOperator = function () {
        function SequenceEqualOperator(compareTo, comparor) {
            this.compareTo = compareTo;
            this.comparor = comparor;
        }
        SequenceEqualOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));
        };
        return SequenceEqualOperator;
    }();
    exports.SequenceEqualOperator = SequenceEqualOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SequenceEqualSubscriber = function (_super) {
        __extends(SequenceEqualSubscriber, _super);
        function SequenceEqualSubscriber(destination, compareTo, comparor) {
            _super.call(this, destination);
            this.compareTo = compareTo;
            this.comparor = comparor;
            this._a = [];
            this._b = [];
            this._oneComplete = false;
            this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));
        }
        SequenceEqualSubscriber.prototype._next = function (value) {
            if (this._oneComplete && this._b.length === 0) {
                this.emit(false);
            } else {
                this._a.push(value);
                this.checkValues();
            }
        };
        SequenceEqualSubscriber.prototype._complete = function () {
            if (this._oneComplete) {
                this.emit(this._a.length === 0 && this._b.length === 0);
            } else {
                this._oneComplete = true;
            }
        };
        SequenceEqualSubscriber.prototype.checkValues = function () {
            var _c = this,
                _a = _c._a,
                _b = _c._b,
                comparor = _c.comparor;
            while (_a.length > 0 && _b.length > 0) {
                var a = _a.shift();
                var b = _b.shift();
                var areEqual = false;
                if (comparor) {
                    areEqual = tryCatch_1.tryCatch(comparor)(a, b);
                    if (areEqual === errorObject_1.errorObject) {
                        this.destination.error(errorObject_1.errorObject.e);
                    }
                } else {
                    areEqual = a === b;
                }
                if (!areEqual) {
                    this.emit(false);
                }
            }
        };
        SequenceEqualSubscriber.prototype.emit = function (value) {
            var destination = this.destination;
            destination.next(value);
            destination.complete();
        };
        SequenceEqualSubscriber.prototype.nextB = function (value) {
            if (this._oneComplete && this._a.length === 0) {
                this.emit(false);
            } else {
                this._b.push(value);
                this.checkValues();
            }
        };
        return SequenceEqualSubscriber;
    }(Subscriber_1.Subscriber);
    exports.SequenceEqualSubscriber = SequenceEqualSubscriber;
    var SequenceEqualCompareToSubscriber = function (_super) {
        __extends(SequenceEqualCompareToSubscriber, _super);
        function SequenceEqualCompareToSubscriber(destination, parent) {
            _super.call(this, destination);
            this.parent = parent;
        }
        SequenceEqualCompareToSubscriber.prototype._next = function (value) {
            this.parent.nextB(value);
        };
        SequenceEqualCompareToSubscriber.prototype._error = function (err) {
            this.parent.error(err);
        };
        SequenceEqualCompareToSubscriber.prototype._complete = function () {
            this.parent._complete();
        };
        return SequenceEqualCompareToSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/sequenceEqual.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/sequenceEqual.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var sequenceEqual_1 = $__require('node_modules/rxjs/operator/sequenceEqual.js');
  Observable_1.Observable.prototype.sequenceEqual = sequenceEqual_1.sequenceEqual;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/multicast.js', ['node_modules/rxjs/observable/MulticastObservable.js', 'node_modules/rxjs/observable/ConnectableObservable.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var MulticastObservable_1 = $__require('node_modules/rxjs/observable/MulticastObservable.js');
    var ConnectableObservable_1 = $__require('node_modules/rxjs/observable/ConnectableObservable.js');
    /**
     * Returns an Observable that emits the results of invoking a specified selector on items
     * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.
     *
     * <img src="./img/multicast.png" width="100%">
     *
     * @param {Function|Subject} Factory function to create an intermediate subject through
     * which the source sequence's elements will be multicast to the selector function
     * or Subject to push source elements into.
     * @param {Function} Optional selector function that can use the multicasted source stream
     * as many times as needed, without causing multiple subscriptions to the source stream.
     * Subscribers to the given source will receive all notifications of the source from the
     * time of the subscription forward.
     * @return {Observable} an Observable that emits the results of invoking the selector
     * on the items emitted by a `ConnectableObservable` that shares a single subscription to
     * the underlying stream.
     * @method multicast
     * @owner Observable
     */
    function multicast(subjectOrSubjectFactory, selector) {
        var subjectFactory;
        if (typeof subjectOrSubjectFactory === 'function') {
            subjectFactory = subjectOrSubjectFactory;
        } else {
            subjectFactory = function subjectFactory() {
                return subjectOrSubjectFactory;
            };
        }
        return !selector ? new ConnectableObservable_1.ConnectableObservable(this, subjectFactory) : new MulticastObservable_1.MulticastObservable(this, subjectFactory, selector);
    }
    exports.multicast = multicast;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/share.js', ['node_modules/rxjs/operator/multicast.js', 'node_modules/rxjs/Subject.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var multicast_1 = $__require('node_modules/rxjs/operator/multicast.js');
    var Subject_1 = $__require('node_modules/rxjs/Subject.js');
    function shareSubjectFactory() {
        return new Subject_1.Subject();
    }
    /**
     * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
     * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
     * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
     * This is an alias for .publish().refCount().
     *
     * <img src="./img/share.png" width="100%">
     *
     * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers
     * @method share
     * @owner Observable
     */
    function share() {
        return multicast_1.multicast.call(this, shareSubjectFactory).refCount();
    }
    exports.share = share;
    ;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/share.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/share.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var share_1 = $__require('node_modules/rxjs/operator/share.js');
  Observable_1.Observable.prototype.share = share_1.share;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/single.js', ['node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/util/EmptyError.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var EmptyError_1 = $__require('node_modules/rxjs/util/EmptyError.js');
    /**
     * Returns an Observable that emits the single item emitted by the source Observable that matches a specified
     * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no
     * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.
     *
     * <img src="./img/single.png" width="100%">
     *
     * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
     * callback if the Observable completes before any `next` notification was sent.
     * @param {Function} a predicate function to evaluate items emitted by the source Observable.
     * @return {Observable<T>} an Observable that emits the single item emitted by the source Observable that matches
     * the predicate.
     .
     * @method single
     * @owner Observable
     */
    function single(predicate) {
        return this.lift(new SingleOperator(predicate, this));
    }
    exports.single = single;
    var SingleOperator = function () {
        function SingleOperator(predicate, source) {
            this.predicate = predicate;
            this.source = source;
        }
        SingleOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));
        };
        return SingleOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SingleSubscriber = function (_super) {
        __extends(SingleSubscriber, _super);
        function SingleSubscriber(destination, predicate, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.source = source;
            this.seenValue = false;
            this.index = 0;
        }
        SingleSubscriber.prototype.applySingleValue = function (value) {
            if (this.seenValue) {
                this.destination.error('Sequence contains more than one element');
            } else {
                this.seenValue = true;
                this.singleValue = value;
            }
        };
        SingleSubscriber.prototype._next = function (value) {
            var predicate = this.predicate;
            this.index++;
            if (predicate) {
                this.tryNext(value);
            } else {
                this.applySingleValue(value);
            }
        };
        SingleSubscriber.prototype.tryNext = function (value) {
            try {
                var result = this.predicate(value, this.index, this.source);
                if (result) {
                    this.applySingleValue(value);
                }
            } catch (err) {
                this.destination.error(err);
            }
        };
        SingleSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (this.index > 0) {
                destination.next(this.seenValue ? this.singleValue : undefined);
                destination.complete();
            } else {
                destination.error(new EmptyError_1.EmptyError());
            }
        };
        return SingleSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/single.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/single.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var single_1 = $__require('node_modules/rxjs/operator/single.js');
  Observable_1.Observable.prototype.single = single_1.single;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/skip.js", ["node_modules/rxjs/Subscriber.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("node_modules/rxjs/Subscriber.js");
    /**
     * Returns an Observable that skips `n` items emitted by an Observable.
     *
     * <img src="./img/skip.png" width="100%">
     *
     * @param {Number} the `n` of times, items emitted by source Observable should be skipped.
     * @return {Observable} an Observable that skips values emitted by the source Observable.
     *
     * @method skip
     * @owner Observable
     */
    function skip(total) {
        return this.lift(new SkipOperator(total));
    }
    exports.skip = skip;
    var SkipOperator = function () {
        function SkipOperator(total) {
            this.total = total;
        }
        SkipOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new SkipSubscriber(subscriber, this.total));
        };
        return SkipOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SkipSubscriber = function (_super) {
        __extends(SkipSubscriber, _super);
        function SkipSubscriber(destination, total) {
            _super.call(this, destination);
            this.total = total;
            this.count = 0;
        }
        SkipSubscriber.prototype._next = function (x) {
            if (++this.count > this.total) {
                this.destination.next(x);
            }
        };
        return SkipSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/skip.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/skip.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var skip_1 = $__require('node_modules/rxjs/operator/skip.js');
  Observable_1.Observable.prototype.skip = skip_1.skip;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/skipUntil.js', ['node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.
     *
     * <img src="./img/skipUntil.png" width="100%">
     *
     * @param {Observable} the second Observable that has to emit an item before the source Observable's elements begin to
     * be mirrored by the resulting Observable.
     * @return {Observable<T>} an Observable that skips items from the source Observable until the second Observable emits
     * an item, then emits the remaining items.
     * @method skipUntil
     * @owner Observable
     */
    function skipUntil(notifier) {
        return this.lift(new SkipUntilOperator(notifier));
    }
    exports.skipUntil = skipUntil;
    var SkipUntilOperator = function () {
        function SkipUntilOperator(notifier) {
            this.notifier = notifier;
        }
        SkipUntilOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new SkipUntilSubscriber(subscriber, this.notifier));
        };
        return SkipUntilOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SkipUntilSubscriber = function (_super) {
        __extends(SkipUntilSubscriber, _super);
        function SkipUntilSubscriber(destination, notifier) {
            _super.call(this, destination);
            this.hasValue = false;
            this.isInnerStopped = false;
            this.add(subscribeToResult_1.subscribeToResult(this, notifier));
        }
        SkipUntilSubscriber.prototype._next = function (value) {
            if (this.hasValue) {
                _super.prototype._next.call(this, value);
            }
        };
        SkipUntilSubscriber.prototype._complete = function () {
            if (this.isInnerStopped) {
                _super.prototype._complete.call(this);
            } else {
                this.unsubscribe();
            }
        };
        SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.hasValue = true;
        };
        SkipUntilSubscriber.prototype.notifyComplete = function () {
            this.isInnerStopped = true;
            if (this.isStopped) {
                _super.prototype._complete.call(this);
            }
        };
        return SkipUntilSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/skipUntil.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/skipUntil.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var skipUntil_1 = $__require('node_modules/rxjs/operator/skipUntil.js');
  Observable_1.Observable.prototype.skipUntil = skipUntil_1.skipUntil;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/skipWhile.js", ["node_modules/rxjs/Subscriber.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("node_modules/rxjs/Subscriber.js");
    /**
     * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds
     * true, but emits all further source items as soon as the condition becomes false.
     *
     * <img src="./img/skipWhile.png" width="100%">
     *
     * @param {Function} predicate - a function to test each item emitted from the source Observable.
     * @return {Observable<T>} an Observable that begins emitting items emitted by the source Observable when the
     * specified predicate becomes false.
     * @method skipWhile
     * @owner Observable
     */
    function skipWhile(predicate) {
        return this.lift(new SkipWhileOperator(predicate));
    }
    exports.skipWhile = skipWhile;
    var SkipWhileOperator = function () {
        function SkipWhileOperator(predicate) {
            this.predicate = predicate;
        }
        SkipWhileOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
        };
        return SkipWhileOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SkipWhileSubscriber = function (_super) {
        __extends(SkipWhileSubscriber, _super);
        function SkipWhileSubscriber(destination, predicate) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.skipping = true;
            this.index = 0;
        }
        SkipWhileSubscriber.prototype._next = function (value) {
            var destination = this.destination;
            if (this.skipping) {
                this.tryCallPredicate(value);
            }
            if (!this.skipping) {
                destination.next(value);
            }
        };
        SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
            try {
                var result = this.predicate(value, this.index++);
                this.skipping = Boolean(result);
            } catch (err) {
                this.destination.error(err);
            }
        };
        return SkipWhileSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/skipWhile.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/skipWhile.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var skipWhile_1 = $__require('node_modules/rxjs/operator/skipWhile.js');
  Observable_1.Observable.prototype.skipWhile = skipWhile_1.skipWhile;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/mergeAll.js', ['node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Converts a higher-order Observable into a first-order Observable which
     * concurrently delivers all values that are emitted on the inner Observables.
     *
     * <span class="informal">Flattens an Observable-of-Observables.</span>
     *
     * <img src="./img/mergeAll.png" width="100%">
     *
     * `mergeAll` subscribes to an Observable that emits Observables, also known as
     * a higher-order Observable. Each time it observes one of these emitted inner
     * Observables, it subscribes to that and delivers all the values from the
     * inner Observable on the output Observable. The output Observable only
     * completes once all inner Observables have completed. Any error delivered by
     * a inner Observable will be immediately emitted on the output Observable.
     *
     * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
     * var firstOrder = higherOrder.mergeAll();
     * firstOrder.subscribe(x => console.log(x));
     *
     * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
     * var firstOrder = higherOrder.mergeAll(2);
     * firstOrder.subscribe(x => console.log(x));
     *
     * @see {@link combineAll}
     * @see {@link concatAll}
     * @see {@link exhaust}
     * @see {@link merge}
     * @see {@link mergeMap}
     * @see {@link mergeMapTo}
     * @see {@link mergeScan}
     * @see {@link switch}
     * @see {@link zipAll}
     *
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
     * Observables being subscribed to concurrently.
     * @return {Observable} An Observable that emits values coming from all the
     * inner Observables emitted by the source Observable.
     * @method mergeAll
     * @owner Observable
     */
    function mergeAll(concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        return this.lift(new MergeAllOperator(concurrent));
    }
    exports.mergeAll = mergeAll;
    var MergeAllOperator = function () {
        function MergeAllOperator(concurrent) {
            this.concurrent = concurrent;
        }
        MergeAllOperator.prototype.call = function (observer, source) {
            return source._subscribe(new MergeAllSubscriber(observer, this.concurrent));
        };
        return MergeAllOperator;
    }();
    exports.MergeAllOperator = MergeAllOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MergeAllSubscriber = function (_super) {
        __extends(MergeAllSubscriber, _super);
        function MergeAllSubscriber(destination, concurrent) {
            _super.call(this, destination);
            this.concurrent = concurrent;
            this.hasCompleted = false;
            this.buffer = [];
            this.active = 0;
        }
        MergeAllSubscriber.prototype._next = function (observable) {
            if (this.active < this.concurrent) {
                this.active++;
                this.add(subscribeToResult_1.subscribeToResult(this, observable));
            } else {
                this.buffer.push(observable);
            }
        };
        MergeAllSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                this.destination.complete();
            }
        };
        MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            } else if (this.active === 0 && this.hasCompleted) {
                this.destination.complete();
            }
        };
        return MergeAllSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    exports.MergeAllSubscriber = MergeAllSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/concat.js', ['node_modules/rxjs/util/isScheduler.js', 'node_modules/rxjs/observable/ArrayObservable.js', 'node_modules/rxjs/operator/mergeAll.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var isScheduler_1 = $__require('node_modules/rxjs/util/isScheduler.js');
    var ArrayObservable_1 = $__require('node_modules/rxjs/observable/ArrayObservable.js');
    var mergeAll_1 = $__require('node_modules/rxjs/operator/mergeAll.js');
    /**
     * Creates an output Observable which sequentially emits all values from every
     * given input Observable after the current Observable.
     *
     * <span class="informal">Concatenates multiple Observables together by
     * sequentially emitting their values, one Observable after the other.</span>
     *
     * <img src="./img/concat.png" width="100%">
     *
     * Joins this Observable with multiple other Observables by subscribing to them
     * one at a time, starting with the source, and merging their results into the
     * output Observable. Will wait for each Observable to complete before moving
     * on to the next.
     *
     * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
     * var timer = Rx.Observable.interval(1000).take(4);
     * var sequence = Rx.Observable.range(1, 10);
     * var result = timer.concat(sequence);
     * result.subscribe(x => console.log(x));
     *
     * @example <caption>Concatenate 3 Observables</caption>
     * var timer1 = Rx.Observable.interval(1000).take(10);
     * var timer2 = Rx.Observable.interval(2000).take(6);
     * var timer3 = Rx.Observable.interval(500).take(10);
     * var result = timer1.concat(timer2, timer3);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link concatAll}
     * @see {@link concatMap}
     * @see {@link concatMapTo}
     *
     * @param {Observable} other An input Observable to concatenate after the source
     * Observable. More than one input Observables may be given as argument.
     * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each
     * Observable subscription on.
     * @return {Observable} All values of each passed Observable merged into a
     * single Observable, in order, in serial fashion.
     * @method concat
     * @owner Observable
     */
    function concat() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i - 0] = arguments[_i];
        }
        return concatStatic.apply(void 0, [this].concat(observables));
    }
    exports.concat = concat;
    /* tslint:enable:max-line-length */
    /**
     * Creates an output Observable which sequentially emits all values from every
     * given input Observable after the current Observable.
     *
     * <span class="informal">Concatenates multiple Observables together by
     * sequentially emitting their values, one Observable after the other.</span>
     *
     * <img src="./img/concat.png" width="100%">
     *
     * Joins multiple Observables together by subscribing to them one at a time and
     * merging their results into the output Observable. Will wait for each
     * Observable to complete before moving on to the next.
     *
     * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
     * var timer = Rx.Observable.interval(1000).take(4);
     * var sequence = Rx.Observable.range(1, 10);
     * var result = Rx.Observable.concat(timer, sequence);
     * result.subscribe(x => console.log(x));
     *
     * @example <caption>Concatenate 3 Observables</caption>
     * var timer1 = Rx.Observable.interval(1000).take(10);
     * var timer2 = Rx.Observable.interval(2000).take(6);
     * var timer3 = Rx.Observable.interval(500).take(10);
     * var result = Rx.Observable.concat(timer1, timer2, timer3);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link concatAll}
     * @see {@link concatMap}
     * @see {@link concatMapTo}
     *
     * @param {Observable} input1 An input Observable to concatenate with others.
     * @param {Observable} input2 An input Observable to concatenate with others.
     * More than one input Observables may be given as argument.
     * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each
     * Observable subscription on.
     * @return {Observable} All values of each passed Observable merged into a
     * single Observable, in order, in serial fashion.
     * @static true
     * @name concat
     * @owner Observable
     */
    function concatStatic() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i - 0] = arguments[_i];
        }
        var scheduler = null;
        var args = observables;
        if (isScheduler_1.isScheduler(args[observables.length - 1])) {
            scheduler = args.pop();
        }
        return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(1));
    }
    exports.concatStatic = concatStatic;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/startWith.js', ['node_modules/rxjs/observable/ArrayObservable.js', 'node_modules/rxjs/observable/ScalarObservable.js', 'node_modules/rxjs/observable/EmptyObservable.js', 'node_modules/rxjs/operator/concat.js', 'node_modules/rxjs/util/isScheduler.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var ArrayObservable_1 = $__require('node_modules/rxjs/observable/ArrayObservable.js');
    var ScalarObservable_1 = $__require('node_modules/rxjs/observable/ScalarObservable.js');
    var EmptyObservable_1 = $__require('node_modules/rxjs/observable/EmptyObservable.js');
    var concat_1 = $__require('node_modules/rxjs/operator/concat.js');
    var isScheduler_1 = $__require('node_modules/rxjs/util/isScheduler.js');
    /**
     * Returns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the
     * source Observable.
     *
     * <img src="./img/startWith.png" width="100%">
     *
     * @param {Values} an Iterable that contains the items you want the modified Observable to emit first.
     * @return {Observable} an Observable that emits the items in the specified Iterable and then emits the items
     * emitted by the source Observable.
     * @method startWith
     * @owner Observable
     */
    function startWith() {
        var array = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            array[_i - 0] = arguments[_i];
        }
        var scheduler = array[array.length - 1];
        if (isScheduler_1.isScheduler(scheduler)) {
            array.pop();
        } else {
            scheduler = null;
        }
        var len = array.length;
        if (len === 1) {
            return concat_1.concatStatic(new ScalarObservable_1.ScalarObservable(array[0], scheduler), this);
        } else if (len > 1) {
            return concat_1.concatStatic(new ArrayObservable_1.ArrayObservable(array, scheduler), this);
        } else {
            return concat_1.concatStatic(new EmptyObservable_1.EmptyObservable(scheduler), this);
        }
    }
    exports.startWith = startWith;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/startWith.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/startWith.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var startWith_1 = $__require('node_modules/rxjs/operator/startWith.js');
  Observable_1.Observable.prototype.startWith = startWith_1.startWith;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/util/isNumeric.js", ["node_modules/rxjs/util/isArray.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var isArray_1 = $__require("node_modules/rxjs/util/isArray.js");
    function isNumeric(val) {
        // parseFloat NaNs numeric-cast false positives (null|true|false|"")
        // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
        // subtraction forces infinities to NaN
        // adding 1 corrects loss of precision from parseFloat (#15100)
        return !isArray_1.isArray(val) && val - parseFloat(val) + 1 >= 0;
    }
    exports.isNumeric = isNumeric;
    ;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/observable/SubscribeOnObservable.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/scheduler/asap.js', 'node_modules/rxjs/util/isNumeric.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var asap_1 = $__require('node_modules/rxjs/scheduler/asap.js');
    var isNumeric_1 = $__require('node_modules/rxjs/util/isNumeric.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var SubscribeOnObservable = function (_super) {
        __extends(SubscribeOnObservable, _super);
        function SubscribeOnObservable(source, delayTime, scheduler) {
            if (delayTime === void 0) {
                delayTime = 0;
            }
            if (scheduler === void 0) {
                scheduler = asap_1.asap;
            }
            _super.call(this);
            this.source = source;
            this.delayTime = delayTime;
            this.scheduler = scheduler;
            if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) {
                this.delayTime = 0;
            }
            if (!scheduler || typeof scheduler.schedule !== 'function') {
                this.scheduler = asap_1.asap;
            }
        }
        SubscribeOnObservable.create = function (source, delay, scheduler) {
            if (delay === void 0) {
                delay = 0;
            }
            if (scheduler === void 0) {
                scheduler = asap_1.asap;
            }
            return new SubscribeOnObservable(source, delay, scheduler);
        };
        SubscribeOnObservable.dispatch = function (arg) {
            var source = arg.source,
                subscriber = arg.subscriber;
            return source.subscribe(subscriber);
        };
        SubscribeOnObservable.prototype._subscribe = function (subscriber) {
            var delay = this.delayTime;
            var source = this.source;
            var scheduler = this.scheduler;
            return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
                source: source, subscriber: subscriber
            });
        };
        return SubscribeOnObservable;
    }(Observable_1.Observable);
    exports.SubscribeOnObservable = SubscribeOnObservable;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/subscribeOn.js", ["node_modules/rxjs/observable/SubscribeOnObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var SubscribeOnObservable_1 = $__require("node_modules/rxjs/observable/SubscribeOnObservable.js");
  /**
   * Asynchronously subscribes Observers to this Observable on the specified Scheduler.
   *
   * <img src="./img/subscribeOn.png" width="100%">
   *
   * @param {Scheduler} the Scheduler to perform subscription actions on.
   * @return {Observable<T>} the source Observable modified so that its subscriptions happen on the specified Scheduler
   .
   * @method subscribeOn
   * @owner Observable
   */
  function subscribeOn(scheduler, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return new SubscribeOnObservable_1.SubscribeOnObservable(this, delay, scheduler);
  }
  exports.subscribeOn = subscribeOn;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/subscribeOn.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/subscribeOn.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var subscribeOn_1 = $__require('node_modules/rxjs/operator/subscribeOn.js');
  Observable_1.Observable.prototype.subscribeOn = subscribeOn_1.subscribeOn;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/switch.js', ['node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Converts a higher-order Observable into a first-order Observable by
     * subscribing to only the most recently emitted of those inner Observables.
     *
     * <span class="informal">Flattens an Observable-of-Observables by dropping the
     * previous inner Observable once a new one appears.</span>
     *
     * <img src="./img/switch.png" width="100%">
     *
     * `switch` subscribes to an Observable that emits Observables, also known as a
     * higher-order Observable. Each time it observes one of these emitted inner
     * Observables, the output Observable subscribes to the inner Observable and
     * begins emitting the items emitted by that. So far, it behaves
     * like {@link mergeAll}. However, when a new inner Observable is emitted,
     * `switch` unsubscribes from the earlier-emitted inner Observable and
     * subscribes to the new inner Observable and begins emitting items from it. It
     * continues to behave like this for subsequent inner Observables.
     *
     * @example <caption>Rerun an interval Observable on every click event</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * // Each click event is mapped to an Observable that ticks every second
     * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
     * var switched = higherOrder.switch();
     * // The outcome is that `switched` is essentially a timer that restarts
     * // on every click. The interval Observables from older clicks do not merge
     * // with the current interval Observable.
     * switched.subscribe(x => console.log(x));
     *
     * @see {@link combineAll}
     * @see {@link concatAll}
     * @see {@link exhaust}
     * @see {@link mergeAll}
     * @see {@link switchMap}
     * @see {@link switchMapTo}
     * @see {@link zipAll}
     *
     * @return {Observable<T>} An Observable that emits the items emitted by the
     * Observable most recently emitted by the source Observable.
     * @method switch
     * @name switch
     * @owner Observable
     */
    function _switch() {
        return this.lift(new SwitchOperator());
    }
    exports._switch = _switch;
    var SwitchOperator = function () {
        function SwitchOperator() {}
        SwitchOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new SwitchSubscriber(subscriber));
        };
        return SwitchOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SwitchSubscriber = function (_super) {
        __extends(SwitchSubscriber, _super);
        function SwitchSubscriber(destination) {
            _super.call(this, destination);
            this.active = 0;
            this.hasCompleted = false;
        }
        SwitchSubscriber.prototype._next = function (value) {
            this.unsubscribeInner();
            this.active++;
            this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, value));
        };
        SwitchSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0) {
                this.destination.complete();
            }
        };
        SwitchSubscriber.prototype.unsubscribeInner = function () {
            this.active = this.active > 0 ? this.active - 1 : 0;
            var innerSubscription = this.innerSubscription;
            if (innerSubscription) {
                innerSubscription.unsubscribe();
                this.remove(innerSubscription);
            }
        };
        SwitchSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(innerValue);
        };
        SwitchSubscriber.prototype.notifyError = function (err) {
            this.destination.error(err);
        };
        SwitchSubscriber.prototype.notifyComplete = function () {
            this.unsubscribeInner();
            if (this.hasCompleted && this.active === 0) {
                this.destination.complete();
            }
        };
        return SwitchSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/switch.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/switch.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var switch_1 = $__require('node_modules/rxjs/operator/switch.js');
  Observable_1.Observable.prototype.switch = switch_1._switch;
  Observable_1.Observable.prototype._switch = switch_1._switch;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/switchMap.js', ['node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Projects each source value to an Observable which is merged in the output
     * Observable, emitting values only from the most recently projected Observable.
     *
     * <span class="informal">Maps each value to an Observable, then flattens all of
     * these inner Observables using {@link switch}.</span>
     *
     * <img src="./img/switchMap.png" width="100%">
     *
     * Returns an Observable that emits items based on applying a function that you
     * supply to each item emitted by the source Observable, where that function
     * returns an (so-called "inner") Observable. Each time it observes one of these
     * inner Observables, the output Observable begins emitting the items emitted by
     * that inner Observable. When a new inner Observable is emitted, `switchMap`
     * stops emitting items from the earlier-emitted inner Observable and begins
     * emitting items from the new one. It continues to behave like this for
     * subsequent inner Observables.
     *
     * @example <caption>Rerun an interval Observable on every click event</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));
     * result.subscribe(x => console.log(x));
     *
     * @see {@link concatMap}
     * @see {@link exhaustMap}
     * @see {@link mergeMap}
     * @see {@link switch}
     * @see {@link switchMapTo}
     *
     * @param {function(value: T, ?index: number): Observable} project A function
     * that, when applied to an item emitted by the source Observable, returns an
     * Observable.
     * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
     * A function to produce the value on the output Observable based on the values
     * and the indices of the source (outer) emission and the inner Observable
     * emission. The arguments passed to this function are:
     * - `outerValue`: the value that came from the source
     * - `innerValue`: the value that came from the projected Observable
     * - `outerIndex`: the "index" of the value that came from the source
     * - `innerIndex`: the "index" of the value from the projected Observable
     * @return {Observable} An Observable that emits the result of applying the
     * projection function (and the optional `resultSelector`) to each item emitted
     * by the source Observable and taking only the values from the most recently
     * projected inner Observable.
     * @method switchMap
     * @owner Observable
     */
    function switchMap(project, resultSelector) {
        return this.lift(new SwitchMapOperator(project, resultSelector));
    }
    exports.switchMap = switchMap;
    var SwitchMapOperator = function () {
        function SwitchMapOperator(project, resultSelector) {
            this.project = project;
            this.resultSelector = resultSelector;
        }
        SwitchMapOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));
        };
        return SwitchMapOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SwitchMapSubscriber = function (_super) {
        __extends(SwitchMapSubscriber, _super);
        function SwitchMapSubscriber(destination, project, resultSelector) {
            _super.call(this, destination);
            this.project = project;
            this.resultSelector = resultSelector;
            this.index = 0;
        }
        SwitchMapSubscriber.prototype._next = function (value) {
            var result;
            var index = this.index++;
            try {
                result = this.project(value, index);
            } catch (error) {
                this.destination.error(error);
                return;
            }
            this._innerSub(result, value, index);
        };
        SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {
            var innerSubscription = this.innerSubscription;
            if (innerSubscription) {
                innerSubscription.unsubscribe();
            }
            this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));
        };
        SwitchMapSubscriber.prototype._complete = function () {
            var innerSubscription = this.innerSubscription;
            if (!innerSubscription || innerSubscription.closed) {
                _super.prototype._complete.call(this);
            }
        };
        SwitchMapSubscriber.prototype._unsubscribe = function () {
            this.innerSubscription = null;
        };
        SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {
            this.remove(innerSub);
            this.innerSubscription = null;
            if (this.isStopped) {
                _super.prototype._complete.call(this);
            }
        };
        SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            if (this.resultSelector) {
                this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);
            } else {
                this.destination.next(innerValue);
            }
        };
        SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
            var result;
            try {
                result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return SwitchMapSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/switchMap.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/switchMap.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var switchMap_1 = $__require('node_modules/rxjs/operator/switchMap.js');
  Observable_1.Observable.prototype.switchMap = switchMap_1.switchMap;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/switchMapTo.js', ['node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Projects each source value to the same Observable which is flattened multiple
     * times with {@link switch} in the output Observable.
     *
     * <span class="informal">It's like {@link switchMap}, but maps each value
     * always to the same inner Observable.</span>
     *
     * <img src="./img/switchMapTo.png" width="100%">
     *
     * Maps each source value to the given Observable `innerObservable` regardless
     * of the source value, and then flattens those resulting Observables into one
     * single Observable, which is the output Observable. The output Observables
     * emits values only from the most recently emitted instance of
     * `innerObservable`.
     *
     * @example <caption>Rerun an interval Observable on every click event</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.switchMapTo(Rx.Observable.interval(1000));
     * result.subscribe(x => console.log(x));
     *
     * @see {@link concatMapTo}
     * @see {@link switch}
     * @see {@link switchMap}
     * @see {@link mergeMapTo}
     *
     * @param {Observable} innerObservable An Observable to replace each value from
     * the source Observable.
     * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
     * A function to produce the value on the output Observable based on the values
     * and the indices of the source (outer) emission and the inner Observable
     * emission. The arguments passed to this function are:
     * - `outerValue`: the value that came from the source
     * - `innerValue`: the value that came from the projected Observable
     * - `outerIndex`: the "index" of the value that came from the source
     * - `innerIndex`: the "index" of the value from the projected Observable
     * @return {Observable} An Observable that emits items from the given
     * `innerObservable` every time a value is emitted on the source Observable.
     * @return {Observable} An Observable that emits items from the given
     * `innerObservable` (and optionally transformed through `resultSelector`) every
     * time a value is emitted on the source Observable, and taking only the values
     * from the most recently projected inner Observable.
     * @method switchMapTo
     * @owner Observable
     */
    function switchMapTo(innerObservable, resultSelector) {
        return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));
    }
    exports.switchMapTo = switchMapTo;
    var SwitchMapToOperator = function () {
        function SwitchMapToOperator(observable, resultSelector) {
            this.observable = observable;
            this.resultSelector = resultSelector;
        }
        SwitchMapToOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));
        };
        return SwitchMapToOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SwitchMapToSubscriber = function (_super) {
        __extends(SwitchMapToSubscriber, _super);
        function SwitchMapToSubscriber(destination, inner, resultSelector) {
            _super.call(this, destination);
            this.inner = inner;
            this.resultSelector = resultSelector;
            this.index = 0;
        }
        SwitchMapToSubscriber.prototype._next = function (value) {
            var innerSubscription = this.innerSubscription;
            if (innerSubscription) {
                innerSubscription.unsubscribe();
            }
            this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));
        };
        SwitchMapToSubscriber.prototype._complete = function () {
            var innerSubscription = this.innerSubscription;
            if (!innerSubscription || innerSubscription.closed) {
                _super.prototype._complete.call(this);
            }
        };
        SwitchMapToSubscriber.prototype._unsubscribe = function () {
            this.innerSubscription = null;
        };
        SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {
            this.remove(innerSub);
            this.innerSubscription = null;
            if (this.isStopped) {
                _super.prototype._complete.call(this);
            }
        };
        SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var _a = this,
                resultSelector = _a.resultSelector,
                destination = _a.destination;
            if (resultSelector) {
                this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);
            } else {
                destination.next(innerValue);
            }
        };
        SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
            var _a = this,
                resultSelector = _a.resultSelector,
                destination = _a.destination;
            var result;
            try {
                result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
            } catch (err) {
                destination.error(err);
                return;
            }
            destination.next(result);
        };
        return SwitchMapToSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/switchMapTo.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/switchMapTo.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var switchMapTo_1 = $__require('node_modules/rxjs/operator/switchMapTo.js');
  Observable_1.Observable.prototype.switchMapTo = switchMapTo_1.switchMapTo;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/take.js', ['node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/util/ArgumentOutOfRangeError.js', 'node_modules/rxjs/observable/EmptyObservable.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var ArgumentOutOfRangeError_1 = $__require('node_modules/rxjs/util/ArgumentOutOfRangeError.js');
    var EmptyObservable_1 = $__require('node_modules/rxjs/observable/EmptyObservable.js');
    /**
     * Emits only the first `count` values emitted by the source Observable.
     *
     * <span class="informal">Takes the first `count` values from the source, then
     * completes.</span>
     *
     * <img src="./img/take.png" width="100%">
     *
     * `take` returns an Observable that emits only the first `count` values emitted
     * by the source Observable. If the source emits fewer than `count` values then
     * all of its values are emitted. After that, it completes, regardless if the
     * source completes.
     *
     * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>
     * var interval = Rx.Observable.interval(1000);
     * var five = interval.take(5);
     * five.subscribe(x => console.log(x));
     *
     * @see {@link takeLast}
     * @see {@link takeUntil}
     * @see {@link takeWhile}
     * @see {@link skip}
     *
     * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an
     * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.
     *
     * @param {number} count The maximum number of `next` values to emit.
     * @return {Observable<T>} An Observable that emits only the first `count`
     * values emitted by the source Observable, or all of the values from the source
     * if the source emits fewer than `count` values.
     * @method take
     * @owner Observable
     */
    function take(count) {
        if (count === 0) {
            return new EmptyObservable_1.EmptyObservable();
        } else {
            return this.lift(new TakeOperator(count));
        }
    }
    exports.take = take;
    var TakeOperator = function () {
        function TakeOperator(total) {
            this.total = total;
            if (this.total < 0) {
                throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
            }
        }
        TakeOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new TakeSubscriber(subscriber, this.total));
        };
        return TakeOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var TakeSubscriber = function (_super) {
        __extends(TakeSubscriber, _super);
        function TakeSubscriber(destination, total) {
            _super.call(this, destination);
            this.total = total;
            this.count = 0;
        }
        TakeSubscriber.prototype._next = function (value) {
            var total = this.total;
            if (++this.count <= total) {
                this.destination.next(value);
                if (this.count === total) {
                    this.destination.complete();
                    this.unsubscribe();
                }
            }
        };
        return TakeSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/take.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/take.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var take_1 = $__require('node_modules/rxjs/operator/take.js');
  Observable_1.Observable.prototype.take = take_1.take;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/takeLast.js', ['node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/util/ArgumentOutOfRangeError.js', 'node_modules/rxjs/observable/EmptyObservable.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var ArgumentOutOfRangeError_1 = $__require('node_modules/rxjs/util/ArgumentOutOfRangeError.js');
    var EmptyObservable_1 = $__require('node_modules/rxjs/observable/EmptyObservable.js');
    /**
     * Emits only the last `count` values emitted by the source Observable.
     *
     * <span class="informal">Remembers the latest `count` values, then emits those
     * only when the source completes.</span>
     *
     * <img src="./img/takeLast.png" width="100%">
     *
     * `takeLast` returns an Observable that emits at most the last `count` values
     * emitted by the source Observable. If the source emits fewer than `count`
     * values then all of its values are emitted. This operator must wait until the
     * `complete` notification emission from the source in order to emit the `next`
     * values on the output Observable, because otherwise it is impossible to know
     * whether or not more values will be emitted on the source. For this reason,
     * all values are emitted synchronously, followed by the complete notification.
     *
     * @example <caption>Take the last 3 values of an Observable with many values</caption>
     * var many = Rx.Observable.range(1, 100);
     * var lastThree = many.takeLast(3);
     * lastThree.subscribe(x => console.log(x));
     *
     * @see {@link take}
     * @see {@link takeUntil}
     * @see {@link takeWhile}
     * @see {@link skip}
     *
     * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an
     * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.
     *
     * @param {number} count The maximum number of values to emit from the end of
     * the sequence of values emitted by the source Observable.
     * @return {Observable<T>} An Observable that emits at most the last count
     * values emitted by the source Observable.
     * @method takeLast
     * @owner Observable
     */
    function takeLast(count) {
        if (count === 0) {
            return new EmptyObservable_1.EmptyObservable();
        } else {
            return this.lift(new TakeLastOperator(count));
        }
    }
    exports.takeLast = takeLast;
    var TakeLastOperator = function () {
        function TakeLastOperator(total) {
            this.total = total;
            if (this.total < 0) {
                throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
            }
        }
        TakeLastOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new TakeLastSubscriber(subscriber, this.total));
        };
        return TakeLastOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var TakeLastSubscriber = function (_super) {
        __extends(TakeLastSubscriber, _super);
        function TakeLastSubscriber(destination, total) {
            _super.call(this, destination);
            this.total = total;
            this.ring = new Array();
            this.count = 0;
        }
        TakeLastSubscriber.prototype._next = function (value) {
            var ring = this.ring;
            var total = this.total;
            var count = this.count++;
            if (ring.length < total) {
                ring.push(value);
            } else {
                var index = count % total;
                ring[index] = value;
            }
        };
        TakeLastSubscriber.prototype._complete = function () {
            var destination = this.destination;
            var count = this.count;
            if (count > 0) {
                var total = this.count >= this.total ? this.total : this.count;
                var ring = this.ring;
                for (var i = 0; i < total; i++) {
                    var idx = count++ % total;
                    destination.next(ring[idx]);
                }
            }
            destination.complete();
        };
        return TakeLastSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/takeLast.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/takeLast.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var takeLast_1 = $__require('node_modules/rxjs/operator/takeLast.js');
  Observable_1.Observable.prototype.takeLast = takeLast_1.takeLast;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/takeUntil.js', ['node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Emits the values emitted by the source Observable until a `notifier`
     * Observable emits a value.
     *
     * <span class="informal">Lets values pass until a second Observable,
     * `notifier`, emits something. Then, it completes.</span>
     *
     * <img src="./img/takeUntil.png" width="100%">
     *
     * `takeUntil` subscribes and begins mirroring the source Observable. It also
     * monitors a second Observable, `notifier` that you provide. If the `notifier`
     * emits a value or a complete notification, the output Observable stops
     * mirroring the source Observable and completes.
     *
     * @example <caption>Tick every second until the first click happens</caption>
     * var interval = Rx.Observable.interval(1000);
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = interval.takeUntil(clicks);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link take}
     * @see {@link takeLast}
     * @see {@link takeWhile}
     * @see {@link skip}
     *
     * @param {Observable} notifier The Observable whose first emitted value will
     * cause the output Observable of `takeUntil` to stop emitting values from the
     * source Observable.
     * @return {Observable<T>} An Observable that emits the values from the source
     * Observable until such time as `notifier` emits its first value.
     * @method takeUntil
     * @owner Observable
     */
    function takeUntil(notifier) {
        return this.lift(new TakeUntilOperator(notifier));
    }
    exports.takeUntil = takeUntil;
    var TakeUntilOperator = function () {
        function TakeUntilOperator(notifier) {
            this.notifier = notifier;
        }
        TakeUntilOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new TakeUntilSubscriber(subscriber, this.notifier));
        };
        return TakeUntilOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var TakeUntilSubscriber = function (_super) {
        __extends(TakeUntilSubscriber, _super);
        function TakeUntilSubscriber(destination, notifier) {
            _super.call(this, destination);
            this.notifier = notifier;
            this.add(subscribeToResult_1.subscribeToResult(this, notifier));
        }
        TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.complete();
        };
        TakeUntilSubscriber.prototype.notifyComplete = function () {
            // noop
        };
        return TakeUntilSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/takeUntil.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/takeUntil.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var takeUntil_1 = $__require('node_modules/rxjs/operator/takeUntil.js');
  Observable_1.Observable.prototype.takeUntil = takeUntil_1.takeUntil;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/takeWhile.js", ["node_modules/rxjs/Subscriber.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("node_modules/rxjs/Subscriber.js");
    /**
     * Emits values emitted by the source Observable so long as each value satisfies
     * the given `predicate`, and then completes as soon as this `predicate` is not
     * satisfied.
     *
     * <span class="informal">Takes values from the source only while they pass the
     * condition given. When the first value does not satisfy, it completes.</span>
     *
     * <img src="./img/takeWhile.png" width="100%">
     *
     * `takeWhile` subscribes and begins mirroring the source Observable. Each value
     * emitted on the source is given to the `predicate` function which returns a
     * boolean, representing a condition to be satisfied by the source values. The
     * output Observable emits the source values until such time as the `predicate`
     * returns false, at which point `takeWhile` stops mirroring the source
     * Observable and completes the output Observable.
     *
     * @example <caption>Emit click events only while the clientX property is greater than 200</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.takeWhile(ev => ev.clientX > 200);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link take}
     * @see {@link takeLast}
     * @see {@link takeUntil}
     * @see {@link skip}
     *
     * @param {function(value: T, index: number): boolean} predicate A function that
     * evaluates a value emitted by the source Observable and returns a boolean.
     * Also takes the (zero-based) index as the second argument.
     * @return {Observable<T>} An Observable that emits the values from the source
     * Observable so long as each value satisfies the condition defined by the
     * `predicate`, then completes.
     * @method takeWhile
     * @owner Observable
     */
    function takeWhile(predicate) {
        return this.lift(new TakeWhileOperator(predicate));
    }
    exports.takeWhile = takeWhile;
    var TakeWhileOperator = function () {
        function TakeWhileOperator(predicate) {
            this.predicate = predicate;
        }
        TakeWhileOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new TakeWhileSubscriber(subscriber, this.predicate));
        };
        return TakeWhileOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var TakeWhileSubscriber = function (_super) {
        __extends(TakeWhileSubscriber, _super);
        function TakeWhileSubscriber(destination, predicate) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.index = 0;
        }
        TakeWhileSubscriber.prototype._next = function (value) {
            var destination = this.destination;
            var result;
            try {
                result = this.predicate(value, this.index++);
            } catch (err) {
                destination.error(err);
                return;
            }
            this.nextOrComplete(value, result);
        };
        TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
            var destination = this.destination;
            if (Boolean(predicateResult)) {
                destination.next(value);
            } else {
                destination.complete();
            }
        };
        return TakeWhileSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/takeWhile.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/takeWhile.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var takeWhile_1 = $__require('node_modules/rxjs/operator/takeWhile.js');
  Observable_1.Observable.prototype.takeWhile = takeWhile_1.takeWhile;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/throttle.js', ['node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Emits a value from the source Observable, then ignores subsequent source
     * values for a duration determined by another Observable, then repeats this
     * process.
     *
     * <span class="informal">It's like {@link throttleTime}, but the silencing
     * duration is determined by a second Observable.</span>
     *
     * <img src="./img/throttle.png" width="100%">
     *
     * `throttle` emits the source Observable values on the output Observable
     * when its internal timer is disabled, and ignores source values when the timer
     * is enabled. Initially, the timer is disabled. As soon as the first source
     * value arrives, it is forwarded to the output Observable, and then the timer
     * is enabled by calling the `durationSelector` function with the source value,
     * which returns the "duration" Observable. When the duration Observable emits a
     * value or completes, the timer is disabled, and this process repeats for the
     * next source value.
     *
     * @example <caption>Emit clicks at a rate of at most one click per second</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.throttle(ev => Rx.Observable.interval(1000));
     * result.subscribe(x => console.log(x));
     *
     * @see {@link audit}
     * @see {@link debounce}
     * @see {@link delayWhen}
     * @see {@link sample}
     * @see {@link throttleTime}
     *
     * @param {function(value: T): Observable|Promise} durationSelector A function
     * that receives a value from the source Observable, for computing the silencing
     * duration for each source value, returned as an Observable or a Promise.
     * @return {Observable<T>} An Observable that performs the throttle operation to
     * limit the rate of emissions from the source.
     * @method throttle
     * @owner Observable
     */
    function throttle(durationSelector) {
        return this.lift(new ThrottleOperator(durationSelector));
    }
    exports.throttle = throttle;
    var ThrottleOperator = function () {
        function ThrottleOperator(durationSelector) {
            this.durationSelector = durationSelector;
        }
        ThrottleOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));
        };
        return ThrottleOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ThrottleSubscriber = function (_super) {
        __extends(ThrottleSubscriber, _super);
        function ThrottleSubscriber(destination, durationSelector) {
            _super.call(this, destination);
            this.destination = destination;
            this.durationSelector = durationSelector;
        }
        ThrottleSubscriber.prototype._next = function (value) {
            if (!this.throttled) {
                this.tryDurationSelector(value);
            }
        };
        ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
            var duration = null;
            try {
                duration = this.durationSelector(value);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.emitAndThrottle(value, duration);
        };
        ThrottleSubscriber.prototype.emitAndThrottle = function (value, duration) {
            this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));
            this.destination.next(value);
        };
        ThrottleSubscriber.prototype._unsubscribe = function () {
            var throttled = this.throttled;
            if (throttled) {
                this.remove(throttled);
                this.throttled = null;
                throttled.unsubscribe();
            }
        };
        ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this._unsubscribe();
        };
        ThrottleSubscriber.prototype.notifyComplete = function () {
            this._unsubscribe();
        };
        return ThrottleSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/throttle.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/throttle.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var throttle_1 = $__require('node_modules/rxjs/operator/throttle.js');
  Observable_1.Observable.prototype.throttle = throttle_1.throttle;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/throttleTime.js', ['node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/scheduler/async.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var async_1 = $__require('node_modules/rxjs/scheduler/async.js');
    /**
     * Emits a value from the source Observable, then ignores subsequent source
     * values for `duration` milliseconds, then repeats this process.
     *
     * <span class="informal">Lets a value pass, then ignores source values for the
     * next `duration` milliseconds.</span>
     *
     * <img src="./img/throttleTime.png" width="100%">
     *
     * `throttleTime` emits the source Observable values on the output Observable
     * when its internal timer is disabled, and ignores source values when the timer
     * is enabled. Initially, the timer is disabled. As soon as the first source
     * value arrives, it is forwarded to the output Observable, and then the timer
     * is enabled. After `duration` milliseconds (or the time unit determined
     * internally by the optional `scheduler`) has passed, the timer is disabled,
     * and this process repeats for the next source value. Optionally takes a
     * {@link Scheduler} for managing timers.
     *
     * @example <caption>Emit clicks at a rate of at most one click per second</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.throttleTime(1000);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link auditTime}
     * @see {@link debounceTime}
     * @see {@link delay}
     * @see {@link sampleTime}
     * @see {@link throttle}
     *
     * @param {number} duration Time to wait before emitting another value after
     * emitting the last value, measured in milliseconds or the time unit determined
     * internally by the optional `scheduler`.
     * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for
     * managing the timers that handle the sampling.
     * @return {Observable<T>} An Observable that performs the throttle operation to
     * limit the rate of emissions from the source.
     * @method throttleTime
     * @owner Observable
     */
    function throttleTime(duration, scheduler) {
        if (scheduler === void 0) {
            scheduler = async_1.async;
        }
        return this.lift(new ThrottleTimeOperator(duration, scheduler));
    }
    exports.throttleTime = throttleTime;
    var ThrottleTimeOperator = function () {
        function ThrottleTimeOperator(duration, scheduler) {
            this.duration = duration;
            this.scheduler = scheduler;
        }
        ThrottleTimeOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));
        };
        return ThrottleTimeOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ThrottleTimeSubscriber = function (_super) {
        __extends(ThrottleTimeSubscriber, _super);
        function ThrottleTimeSubscriber(destination, duration, scheduler) {
            _super.call(this, destination);
            this.duration = duration;
            this.scheduler = scheduler;
        }
        ThrottleTimeSubscriber.prototype._next = function (value) {
            if (!this.throttled) {
                this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));
                this.destination.next(value);
            }
        };
        ThrottleTimeSubscriber.prototype.clearThrottle = function () {
            var throttled = this.throttled;
            if (throttled) {
                throttled.unsubscribe();
                this.remove(throttled);
                this.throttled = null;
            }
        };
        return ThrottleTimeSubscriber;
    }(Subscriber_1.Subscriber);
    function dispatchNext(arg) {
        var subscriber = arg.subscriber;
        subscriber.clearThrottle();
    }
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/throttleTime.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/throttleTime.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var throttleTime_1 = $__require('node_modules/rxjs/operator/throttleTime.js');
  Observable_1.Observable.prototype.throttleTime = throttleTime_1.throttleTime;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/timeInterval.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/timeInterval.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var timeInterval_1 = $__require('node_modules/rxjs/operator/timeInterval.js');
  Observable_1.Observable.prototype.timeInterval = timeInterval_1.timeInterval;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/timeout.js', ['node_modules/rxjs/scheduler/async.js', 'node_modules/rxjs/util/isDate.js', 'node_modules/rxjs/Subscriber.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var async_1 = $__require('node_modules/rxjs/scheduler/async.js');
    var isDate_1 = $__require('node_modules/rxjs/util/isDate.js');
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    /**
     * @param due
     * @param errorToSend
     * @param scheduler
     * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
     * @method timeout
     * @owner Observable
     */
    function timeout(due, errorToSend, scheduler) {
        if (errorToSend === void 0) {
            errorToSend = null;
        }
        if (scheduler === void 0) {
            scheduler = async_1.async;
        }
        var absoluteTimeout = isDate_1.isDate(due);
        var waitFor = absoluteTimeout ? +due - scheduler.now() : Math.abs(due);
        return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler));
    }
    exports.timeout = timeout;
    var TimeoutOperator = function () {
        function TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler) {
            this.waitFor = waitFor;
            this.absoluteTimeout = absoluteTimeout;
            this.errorToSend = errorToSend;
            this.scheduler = scheduler;
        }
        TimeoutOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.errorToSend, this.scheduler));
        };
        return TimeoutOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var TimeoutSubscriber = function (_super) {
        __extends(TimeoutSubscriber, _super);
        function TimeoutSubscriber(destination, absoluteTimeout, waitFor, errorToSend, scheduler) {
            _super.call(this, destination);
            this.absoluteTimeout = absoluteTimeout;
            this.waitFor = waitFor;
            this.errorToSend = errorToSend;
            this.scheduler = scheduler;
            this.index = 0;
            this._previousIndex = 0;
            this._hasCompleted = false;
            this.scheduleTimeout();
        }
        Object.defineProperty(TimeoutSubscriber.prototype, "previousIndex", {
            get: function () {
                return this._previousIndex;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimeoutSubscriber.prototype, "hasCompleted", {
            get: function () {
                return this._hasCompleted;
            },
            enumerable: true,
            configurable: true
        });
        TimeoutSubscriber.dispatchTimeout = function (state) {
            var source = state.subscriber;
            var currentIndex = state.index;
            if (!source.hasCompleted && source.previousIndex === currentIndex) {
                source.notifyTimeout();
            }
        };
        TimeoutSubscriber.prototype.scheduleTimeout = function () {
            var currentIndex = this.index;
            this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });
            this.index++;
            this._previousIndex = currentIndex;
        };
        TimeoutSubscriber.prototype._next = function (value) {
            this.destination.next(value);
            if (!this.absoluteTimeout) {
                this.scheduleTimeout();
            }
        };
        TimeoutSubscriber.prototype._error = function (err) {
            this.destination.error(err);
            this._hasCompleted = true;
        };
        TimeoutSubscriber.prototype._complete = function () {
            this.destination.complete();
            this._hasCompleted = true;
        };
        TimeoutSubscriber.prototype.notifyTimeout = function () {
            this.error(this.errorToSend || new Error('timeout'));
        };
        return TimeoutSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/timeout.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/timeout.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var timeout_1 = $__require('node_modules/rxjs/operator/timeout.js');
  Observable_1.Observable.prototype.timeout = timeout_1.timeout;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/util/isDate.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isDate(value) {
        return value instanceof Date && !isNaN(+value);
    }
    exports.isDate = isDate;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/timeoutWith.js', ['node_modules/rxjs/scheduler/async.js', 'node_modules/rxjs/util/isDate.js', 'node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var async_1 = $__require('node_modules/rxjs/scheduler/async.js');
    var isDate_1 = $__require('node_modules/rxjs/util/isDate.js');
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * @param due
     * @param withObservable
     * @param scheduler
     * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
     * @method timeoutWith
     * @owner Observable
     */
    function timeoutWith(due, withObservable, scheduler) {
        if (scheduler === void 0) {
            scheduler = async_1.async;
        }
        var absoluteTimeout = isDate_1.isDate(due);
        var waitFor = absoluteTimeout ? +due - scheduler.now() : Math.abs(due);
        return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
    }
    exports.timeoutWith = timeoutWith;
    var TimeoutWithOperator = function () {
        function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
            this.waitFor = waitFor;
            this.absoluteTimeout = absoluteTimeout;
            this.withObservable = withObservable;
            this.scheduler = scheduler;
        }
        TimeoutWithOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
        };
        return TimeoutWithOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var TimeoutWithSubscriber = function (_super) {
        __extends(TimeoutWithSubscriber, _super);
        function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
            _super.call(this);
            this.destination = destination;
            this.absoluteTimeout = absoluteTimeout;
            this.waitFor = waitFor;
            this.withObservable = withObservable;
            this.scheduler = scheduler;
            this.timeoutSubscription = undefined;
            this.index = 0;
            this._previousIndex = 0;
            this._hasCompleted = false;
            destination.add(this);
            this.scheduleTimeout();
        }
        Object.defineProperty(TimeoutWithSubscriber.prototype, "previousIndex", {
            get: function () {
                return this._previousIndex;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimeoutWithSubscriber.prototype, "hasCompleted", {
            get: function () {
                return this._hasCompleted;
            },
            enumerable: true,
            configurable: true
        });
        TimeoutWithSubscriber.dispatchTimeout = function (state) {
            var source = state.subscriber;
            var currentIndex = state.index;
            if (!source.hasCompleted && source.previousIndex === currentIndex) {
                source.handleTimeout();
            }
        };
        TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
            var currentIndex = this.index;
            var timeoutState = { subscriber: this, index: currentIndex };
            this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);
            this.index++;
            this._previousIndex = currentIndex;
        };
        TimeoutWithSubscriber.prototype._next = function (value) {
            this.destination.next(value);
            if (!this.absoluteTimeout) {
                this.scheduleTimeout();
            }
        };
        TimeoutWithSubscriber.prototype._error = function (err) {
            this.destination.error(err);
            this._hasCompleted = true;
        };
        TimeoutWithSubscriber.prototype._complete = function () {
            this.destination.complete();
            this._hasCompleted = true;
        };
        TimeoutWithSubscriber.prototype.handleTimeout = function () {
            if (!this.closed) {
                var withObservable = this.withObservable;
                this.unsubscribe();
                this.destination.add(this.timeoutSubscription = subscribeToResult_1.subscribeToResult(this, withObservable));
            }
        };
        return TimeoutWithSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/timeoutWith.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/timeoutWith.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var timeoutWith_1 = $__require('node_modules/rxjs/operator/timeoutWith.js');
  Observable_1.Observable.prototype.timeoutWith = timeoutWith_1.timeoutWith;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/timestamp.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/timestamp.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var timestamp_1 = $__require('node_modules/rxjs/operator/timestamp.js');
  Observable_1.Observable.prototype.timestamp = timestamp_1.timestamp;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/toArray.js", ["node_modules/rxjs/Subscriber.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("node_modules/rxjs/Subscriber.js");
    /**
     * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}
     * @method toArray
     * @owner Observable
     */
    function toArray() {
        return this.lift(new ToArrayOperator());
    }
    exports.toArray = toArray;
    var ToArrayOperator = function () {
        function ToArrayOperator() {}
        ToArrayOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new ToArraySubscriber(subscriber));
        };
        return ToArrayOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ToArraySubscriber = function (_super) {
        __extends(ToArraySubscriber, _super);
        function ToArraySubscriber(destination) {
            _super.call(this, destination);
            this.array = [];
        }
        ToArraySubscriber.prototype._next = function (x) {
            this.array.push(x);
        };
        ToArraySubscriber.prototype._complete = function () {
            this.destination.next(this.array);
            this.destination.complete();
        };
        return ToArraySubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/toArray.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/toArray.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var toArray_1 = $__require('node_modules/rxjs/operator/toArray.js');
  Observable_1.Observable.prototype.toArray = toArray_1.toArray;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/toPromise.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/toPromise.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var toPromise_1 = $__require('node_modules/rxjs/operator/toPromise.js');
  Observable_1.Observable.prototype.toPromise = toPromise_1.toPromise;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/window.js', ['node_modules/rxjs/Subject.js', 'node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require('node_modules/rxjs/Subject.js');
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Branch out the source Observable values as a nested Observable whenever
     * `windowBoundaries` emits.
     *
     * <span class="informal">It's like {@link buffer}, but emits a nested Observable
     * instead of an array.</span>
     *
     * <img src="./img/window.png" width="100%">
     *
     * Returns an Observable that emits windows of items it collects from the source
     * Observable. The output Observable emits connected, non-overlapping
     * windows. It emits the current window and opens a new one whenever the
     * Observable `windowBoundaries` emits an item. Because each window is an
     * Observable, the output is a higher-order Observable.
     *
     * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var interval = Rx.Observable.interval(1000);
     * var result = clicks.window(interval)
     *   .map(win => win.take(2)) // each window has at most 2 emissions
     *   .mergeAll(); // flatten the Observable-of-Observables
     * result.subscribe(x => console.log(x));
     *
     * @see {@link windowCount}
     * @see {@link windowTime}
     * @see {@link windowToggle}
     * @see {@link windowWhen}
     * @see {@link buffer}
     *
     * @param {Observable<any>} windowBoundaries An Observable that completes the
     * previous window and starts a new window.
     * @return {Observable<Observable<T>>} An Observable of windows, which are
     * Observables emitting values of the source Observable.
     * @method window
     * @owner Observable
     */
    function window(windowBoundaries) {
        return this.lift(new WindowOperator(windowBoundaries));
    }
    exports.window = window;
    var WindowOperator = function () {
        function WindowOperator(windowBoundaries) {
            this.windowBoundaries = windowBoundaries;
        }
        WindowOperator.prototype.call = function (subscriber, source) {
            var windowSubscriber = new WindowSubscriber(subscriber);
            var sourceSubscription = source._subscribe(windowSubscriber);
            if (!sourceSubscription.closed) {
                windowSubscriber.add(subscribeToResult_1.subscribeToResult(windowSubscriber, this.windowBoundaries));
            }
            return sourceSubscription;
        };
        return WindowOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var WindowSubscriber = function (_super) {
        __extends(WindowSubscriber, _super);
        function WindowSubscriber(destination) {
            _super.call(this, destination);
            this.window = new Subject_1.Subject();
            destination.next(this.window);
        }
        WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.openWindow();
        };
        WindowSubscriber.prototype.notifyError = function (error, innerSub) {
            this._error(error);
        };
        WindowSubscriber.prototype.notifyComplete = function (innerSub) {
            this._complete();
        };
        WindowSubscriber.prototype._next = function (value) {
            this.window.next(value);
        };
        WindowSubscriber.prototype._error = function (err) {
            this.window.error(err);
            this.destination.error(err);
        };
        WindowSubscriber.prototype._complete = function () {
            this.window.complete();
            this.destination.complete();
        };
        WindowSubscriber.prototype._unsubscribe = function () {
            this.window = null;
        };
        WindowSubscriber.prototype.openWindow = function () {
            var prevWindow = this.window;
            if (prevWindow) {
                prevWindow.complete();
            }
            var destination = this.destination;
            var newWindow = this.window = new Subject_1.Subject();
            destination.next(newWindow);
        };
        return WindowSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/window.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/window.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var window_1 = $__require('node_modules/rxjs/operator/window.js');
  Observable_1.Observable.prototype.window = window_1.window;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/windowCount.js', ['node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/Subject.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var Subject_1 = $__require('node_modules/rxjs/Subject.js');
    /**
     * Branch out the source Observable values as a nested Observable with each
     * nested Observable emitting at most `windowSize` values.
     *
     * <span class="informal">It's like {@link bufferCount}, but emits a nested
     * Observable instead of an array.</span>
     *
     * <img src="./img/windowCount.png" width="100%">
     *
     * Returns an Observable that emits windows of items it collects from the source
     * Observable. The output Observable emits windows every `startWindowEvery`
     * items, each containing no more than `windowSize` items. When the source
     * Observable completes or encounters an error, the output Observable emits
     * the current window and propagates the notification from the source
     * Observable. If `startWindowEvery` is not provided, then new windows are
     * started immediately at the start of the source and when each window completes
     * with size `windowSize`.
     *
     * @example <caption>Ignore every 3rd click event, starting from the first one</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.windowCount(3)
     *   .map(win => win.skip(1)) // skip first of every 3 clicks
     *   .mergeAll(); // flatten the Observable-of-Observables
     * result.subscribe(x => console.log(x));
     *
     * @example <caption>Ignore every 3rd click event, starting from the third one</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.windowCount(2, 3)
     *   .mergeAll(); // flatten the Observable-of-Observables
     * result.subscribe(x => console.log(x));
     *
     * @see {@link window}
     * @see {@link windowTime}
     * @see {@link windowToggle}
     * @see {@link windowWhen}
     * @see {@link bufferCount}
     *
     * @param {number} windowSize The maximum number of values emitted by each
     * window.
     * @param {number} [startWindowEvery] Interval at which to start a new window.
     * For example if `startWindowEvery` is `2`, then a new window will be started
     * on every other value from the source. A new window is started at the
     * beginning of the source by default.
     * @return {Observable<Observable<T>>} An Observable of windows, which in turn
     * are Observable of values.
     * @method windowCount
     * @owner Observable
     */
    function windowCount(windowSize, startWindowEvery) {
        if (startWindowEvery === void 0) {
            startWindowEvery = 0;
        }
        return this.lift(new WindowCountOperator(windowSize, startWindowEvery));
    }
    exports.windowCount = windowCount;
    var WindowCountOperator = function () {
        function WindowCountOperator(windowSize, startWindowEvery) {
            this.windowSize = windowSize;
            this.startWindowEvery = startWindowEvery;
        }
        WindowCountOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
        };
        return WindowCountOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var WindowCountSubscriber = function (_super) {
        __extends(WindowCountSubscriber, _super);
        function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
            _super.call(this, destination);
            this.destination = destination;
            this.windowSize = windowSize;
            this.startWindowEvery = startWindowEvery;
            this.windows = [new Subject_1.Subject()];
            this.count = 0;
            destination.next(this.windows[0]);
        }
        WindowCountSubscriber.prototype._next = function (value) {
            var startWindowEvery = this.startWindowEvery > 0 ? this.startWindowEvery : this.windowSize;
            var destination = this.destination;
            var windowSize = this.windowSize;
            var windows = this.windows;
            var len = windows.length;
            for (var i = 0; i < len && !this.closed; i++) {
                windows[i].next(value);
            }
            var c = this.count - windowSize + 1;
            if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
                windows.shift().complete();
            }
            if (++this.count % startWindowEvery === 0 && !this.closed) {
                var window_1 = new Subject_1.Subject();
                windows.push(window_1);
                destination.next(window_1);
            }
        };
        WindowCountSubscriber.prototype._error = function (err) {
            var windows = this.windows;
            if (windows) {
                while (windows.length > 0 && !this.closed) {
                    windows.shift().error(err);
                }
            }
            this.destination.error(err);
        };
        WindowCountSubscriber.prototype._complete = function () {
            var windows = this.windows;
            if (windows) {
                while (windows.length > 0 && !this.closed) {
                    windows.shift().complete();
                }
            }
            this.destination.complete();
        };
        WindowCountSubscriber.prototype._unsubscribe = function () {
            this.count = 0;
            this.windows = null;
        };
        return WindowCountSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/windowCount.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/windowCount.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var windowCount_1 = $__require('node_modules/rxjs/operator/windowCount.js');
  Observable_1.Observable.prototype.windowCount = windowCount_1.windowCount;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/windowTime.js', ['node_modules/rxjs/Subject.js', 'node_modules/rxjs/scheduler/async.js', 'node_modules/rxjs/Subscriber.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require('node_modules/rxjs/Subject.js');
    var async_1 = $__require('node_modules/rxjs/scheduler/async.js');
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    /**
     * Branch out the source Observable values as a nested Observable periodically
     * in time.
     *
     * <span class="informal">It's like {@link bufferTime}, but emits a nested
     * Observable instead of an array.</span>
     *
     * <img src="./img/windowTime.png" width="100%">
     *
     * Returns an Observable that emits windows of items it collects from the source
     * Observable. The output Observable starts a new window periodically, as
     * determined by the `windowCreationInterval` argument. It emits each window
     * after a fixed timespan, specified by the `windowTimeSpan` argument. When the
     * source Observable completes or encounters an error, the output Observable
     * emits the current window and propagates the notification from the source
     * Observable. If `windowCreationInterval` is not provided, the output
     * Observable starts a new window when the previous window of duration
     * `windowTimeSpan` completes.
     *
     * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.windowTime(1000)
     *   .map(win => win.take(2)) // each window has at most 2 emissions
     *   .mergeAll(); // flatten the Observable-of-Observables
     * result.subscribe(x => console.log(x));
     *
     * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.windowTime(1000, 5000)
     *   .map(win => win.take(2)) // each window has at most 2 emissions
     *   .mergeAll(); // flatten the Observable-of-Observables
     * result.subscribe(x => console.log(x));
     *
     * @see {@link window}
     * @see {@link windowCount}
     * @see {@link windowToggle}
     * @see {@link windowWhen}
     * @see {@link bufferTime}
     *
     * @param {number} windowTimeSpan The amount of time to fill each window.
     * @param {number} [windowCreationInterval] The interval at which to start new
     * windows.
     * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the
     * intervals that determine window boundaries.
     * @return {Observable<Observable<T>>} An observable of windows, which in turn
     * are Observables.
     * @method windowTime
     * @owner Observable
     */
    function windowTime(windowTimeSpan, windowCreationInterval, scheduler) {
        if (windowCreationInterval === void 0) {
            windowCreationInterval = null;
        }
        if (scheduler === void 0) {
            scheduler = async_1.async;
        }
        return this.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, scheduler));
    }
    exports.windowTime = windowTime;
    var WindowTimeOperator = function () {
        function WindowTimeOperator(windowTimeSpan, windowCreationInterval, scheduler) {
            this.windowTimeSpan = windowTimeSpan;
            this.windowCreationInterval = windowCreationInterval;
            this.scheduler = scheduler;
        }
        WindowTimeOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler));
        };
        return WindowTimeOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var WindowTimeSubscriber = function (_super) {
        __extends(WindowTimeSubscriber, _super);
        function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, scheduler) {
            _super.call(this, destination);
            this.destination = destination;
            this.windowTimeSpan = windowTimeSpan;
            this.windowCreationInterval = windowCreationInterval;
            this.scheduler = scheduler;
            this.windows = [];
            if (windowCreationInterval !== null && windowCreationInterval >= 0) {
                var window_1 = this.openWindow();
                var closeState = { subscriber: this, window: window_1, context: null };
                var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: this, scheduler: scheduler };
                this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
                this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
            } else {
                var window_2 = this.openWindow();
                var timeSpanOnlyState = { subscriber: this, window: window_2, windowTimeSpan: windowTimeSpan };
                this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
            }
        }
        WindowTimeSubscriber.prototype._next = function (value) {
            var windows = this.windows;
            var len = windows.length;
            for (var i = 0; i < len; i++) {
                var window_3 = windows[i];
                if (!window_3.closed) {
                    window_3.next(value);
                }
            }
        };
        WindowTimeSubscriber.prototype._error = function (err) {
            var windows = this.windows;
            while (windows.length > 0) {
                windows.shift().error(err);
            }
            this.destination.error(err);
        };
        WindowTimeSubscriber.prototype._complete = function () {
            var windows = this.windows;
            while (windows.length > 0) {
                var window_4 = windows.shift();
                if (!window_4.closed) {
                    window_4.complete();
                }
            }
            this.destination.complete();
        };
        WindowTimeSubscriber.prototype.openWindow = function () {
            var window = new Subject_1.Subject();
            this.windows.push(window);
            var destination = this.destination;
            destination.next(window);
            return window;
        };
        WindowTimeSubscriber.prototype.closeWindow = function (window) {
            window.complete();
            var windows = this.windows;
            windows.splice(windows.indexOf(window), 1);
        };
        return WindowTimeSubscriber;
    }(Subscriber_1.Subscriber);
    function dispatchWindowTimeSpanOnly(state) {
        var subscriber = state.subscriber,
            windowTimeSpan = state.windowTimeSpan,
            window = state.window;
        if (window) {
            window.complete();
        }
        state.window = subscriber.openWindow();
        this.schedule(state, windowTimeSpan);
    }
    function dispatchWindowCreation(state) {
        var windowTimeSpan = state.windowTimeSpan,
            subscriber = state.subscriber,
            scheduler = state.scheduler,
            windowCreationInterval = state.windowCreationInterval;
        var window = subscriber.openWindow();
        var action = this;
        var context = { action: action, subscription: null };
        var timeSpanState = { subscriber: subscriber, window: window, context: context };
        context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
        action.add(context.subscription);
        action.schedule(state, windowCreationInterval);
    }
    function dispatchWindowClose(arg) {
        var subscriber = arg.subscriber,
            window = arg.window,
            context = arg.context;
        if (context && context.action && context.subscription) {
            context.action.remove(context.subscription);
        }
        subscriber.closeWindow(window);
    }
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/windowTime.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/windowTime.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var windowTime_1 = $__require('node_modules/rxjs/operator/windowTime.js');
  Observable_1.Observable.prototype.windowTime = windowTime_1.windowTime;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/windowToggle.js', ['node_modules/rxjs/Subject.js', 'node_modules/rxjs/Subscription.js', 'node_modules/rxjs/util/tryCatch.js', 'node_modules/rxjs/util/errorObject.js', 'node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require('node_modules/rxjs/Subject.js');
    var Subscription_1 = $__require('node_modules/rxjs/Subscription.js');
    var tryCatch_1 = $__require('node_modules/rxjs/util/tryCatch.js');
    var errorObject_1 = $__require('node_modules/rxjs/util/errorObject.js');
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Branch out the source Observable values as a nested Observable starting from
     * an emission from `openings` and ending when the output of `closingSelector`
     * emits.
     *
     * <span class="informal">It's like {@link bufferToggle}, but emits a nested
     * Observable instead of an array.</span>
     *
     * <img src="./img/windowToggle.png" width="100%">
     *
     * Returns an Observable that emits windows of items it collects from the source
     * Observable. The output Observable emits windows that contain those items
     * emitted by the source Observable between the time when the `openings`
     * Observable emits an item and when the Observable returned by
     * `closingSelector` emits an item.
     *
     * @example <caption>Every other second, emit the click events from the next 500ms</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var openings = Rx.Observable.interval(1000);
     * var result = clicks.windowToggle(openings, i =>
     *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()
     * ).mergeAll();
     * result.subscribe(x => console.log(x));
     *
     * @see {@link window}
     * @see {@link windowCount}
     * @see {@link windowTime}
     * @see {@link windowWhen}
     * @see {@link bufferToggle}
     *
     * @param {Observable<O>} openings An observable of notifications to start new
     * windows.
     * @param {function(value: O): Observable} closingSelector A function that takes
     * the value emitted by the `openings` observable and returns an Observable,
     * which, when it emits (either `next` or `complete`), signals that the
     * associated window should complete.
     * @return {Observable<Observable<T>>} An observable of windows, which in turn
     * are Observables.
     * @method windowToggle
     * @owner Observable
     */
    function windowToggle(openings, closingSelector) {
        return this.lift(new WindowToggleOperator(openings, closingSelector));
    }
    exports.windowToggle = windowToggle;
    var WindowToggleOperator = function () {
        function WindowToggleOperator(openings, closingSelector) {
            this.openings = openings;
            this.closingSelector = closingSelector;
        }
        WindowToggleOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
        };
        return WindowToggleOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var WindowToggleSubscriber = function (_super) {
        __extends(WindowToggleSubscriber, _super);
        function WindowToggleSubscriber(destination, openings, closingSelector) {
            _super.call(this, destination);
            this.openings = openings;
            this.closingSelector = closingSelector;
            this.contexts = [];
            this.add(this.openSubscription = subscribeToResult_1.subscribeToResult(this, openings, openings));
        }
        WindowToggleSubscriber.prototype._next = function (value) {
            var contexts = this.contexts;
            if (contexts) {
                var len = contexts.length;
                for (var i = 0; i < len; i++) {
                    contexts[i].window.next(value);
                }
            }
        };
        WindowToggleSubscriber.prototype._error = function (err) {
            var contexts = this.contexts;
            this.contexts = null;
            if (contexts) {
                var len = contexts.length;
                var index = -1;
                while (++index < len) {
                    var context = contexts[index];
                    context.window.error(err);
                    context.subscription.unsubscribe();
                }
            }
            _super.prototype._error.call(this, err);
        };
        WindowToggleSubscriber.prototype._complete = function () {
            var contexts = this.contexts;
            this.contexts = null;
            if (contexts) {
                var len = contexts.length;
                var index = -1;
                while (++index < len) {
                    var context = contexts[index];
                    context.window.complete();
                    context.subscription.unsubscribe();
                }
            }
            _super.prototype._complete.call(this);
        };
        WindowToggleSubscriber.prototype._unsubscribe = function () {
            var contexts = this.contexts;
            this.contexts = null;
            if (contexts) {
                var len = contexts.length;
                var index = -1;
                while (++index < len) {
                    var context = contexts[index];
                    context.window.unsubscribe();
                    context.subscription.unsubscribe();
                }
            }
        };
        WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            if (outerValue === this.openings) {
                var closingSelector = this.closingSelector;
                var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);
                if (closingNotifier === errorObject_1.errorObject) {
                    return this.error(errorObject_1.errorObject.e);
                } else {
                    var window_1 = new Subject_1.Subject();
                    var subscription = new Subscription_1.Subscription();
                    var context = { window: window_1, subscription: subscription };
                    this.contexts.push(context);
                    var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);
                    if (innerSubscription.closed) {
                        this.closeWindow(this.contexts.length - 1);
                    } else {
                        innerSubscription.context = context;
                        subscription.add(innerSubscription);
                    }
                    this.destination.next(window_1);
                }
            } else {
                this.closeWindow(this.contexts.indexOf(outerValue));
            }
        };
        WindowToggleSubscriber.prototype.notifyError = function (err) {
            this.error(err);
        };
        WindowToggleSubscriber.prototype.notifyComplete = function (inner) {
            if (inner !== this.openSubscription) {
                this.closeWindow(this.contexts.indexOf(inner.context));
            }
        };
        WindowToggleSubscriber.prototype.closeWindow = function (index) {
            if (index === -1) {
                return;
            }
            var contexts = this.contexts;
            var context = contexts[index];
            var window = context.window,
                subscription = context.subscription;
            contexts.splice(index, 1);
            window.complete();
            subscription.unsubscribe();
        };
        return WindowToggleSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/windowToggle.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/windowToggle.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var windowToggle_1 = $__require('node_modules/rxjs/operator/windowToggle.js');
  Observable_1.Observable.prototype.windowToggle = windowToggle_1.windowToggle;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/windowWhen.js', ['node_modules/rxjs/Subject.js', 'node_modules/rxjs/util/tryCatch.js', 'node_modules/rxjs/util/errorObject.js', 'node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require('node_modules/rxjs/Subject.js');
    var tryCatch_1 = $__require('node_modules/rxjs/util/tryCatch.js');
    var errorObject_1 = $__require('node_modules/rxjs/util/errorObject.js');
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Branch out the source Observable values as a nested Observable using a
     * factory function of closing Observables to determine when to start a new
     * window.
     *
     * <span class="informal">It's like {@link bufferWhen}, but emits a nested
     * Observable instead of an array.</span>
     *
     * <img src="./img/windowWhen.png" width="100%">
     *
     * Returns an Observable that emits windows of items it collects from the source
     * Observable. The output Observable emits connected, non-overlapping windows.
     * It emits the current window and opens a new one whenever the Observable
     * produced by the specified `closingSelector` function emits an item. The first
     * window is opened immediately when subscribing to the output Observable.
     *
     * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks
     *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))
     *   .map(win => win.take(2)) // each window has at most 2 emissions
     *   .mergeAll(); // flatten the Observable-of-Observables
     * result.subscribe(x => console.log(x));
     *
     * @see {@link window}
     * @see {@link windowCount}
     * @see {@link windowTime}
     * @see {@link windowToggle}
     * @see {@link bufferWhen}
     *
     * @param {function(): Observable} closingSelector A function that takes no
     * arguments and returns an Observable that signals (on either `next` or
     * `complete`) when to close the previous window and start a new one.
     * @return {Observable<Observable<T>>} An observable of windows, which in turn
     * are Observables.
     * @method windowWhen
     * @owner Observable
     */
    function windowWhen(closingSelector) {
        return this.lift(new WindowOperator(closingSelector));
    }
    exports.windowWhen = windowWhen;
    var WindowOperator = function () {
        function WindowOperator(closingSelector) {
            this.closingSelector = closingSelector;
        }
        WindowOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new WindowSubscriber(subscriber, this.closingSelector));
        };
        return WindowOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var WindowSubscriber = function (_super) {
        __extends(WindowSubscriber, _super);
        function WindowSubscriber(destination, closingSelector) {
            _super.call(this, destination);
            this.destination = destination;
            this.closingSelector = closingSelector;
            this.openWindow();
        }
        WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.openWindow(innerSub);
        };
        WindowSubscriber.prototype.notifyError = function (error, innerSub) {
            this._error(error);
        };
        WindowSubscriber.prototype.notifyComplete = function (innerSub) {
            this.openWindow(innerSub);
        };
        WindowSubscriber.prototype._next = function (value) {
            this.window.next(value);
        };
        WindowSubscriber.prototype._error = function (err) {
            this.window.error(err);
            this.destination.error(err);
            this.unsubscribeClosingNotification();
        };
        WindowSubscriber.prototype._complete = function () {
            this.window.complete();
            this.destination.complete();
            this.unsubscribeClosingNotification();
        };
        WindowSubscriber.prototype.unsubscribeClosingNotification = function () {
            if (this.closingNotification) {
                this.closingNotification.unsubscribe();
            }
        };
        WindowSubscriber.prototype.openWindow = function (innerSub) {
            if (innerSub === void 0) {
                innerSub = null;
            }
            if (innerSub) {
                this.remove(innerSub);
                innerSub.unsubscribe();
            }
            var prevWindow = this.window;
            if (prevWindow) {
                prevWindow.complete();
            }
            var window = this.window = new Subject_1.Subject();
            this.destination.next(window);
            var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
            if (closingNotifier === errorObject_1.errorObject) {
                var err = errorObject_1.errorObject.e;
                this.destination.error(err);
                this.window.error(err);
            } else {
                this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));
            }
        };
        return WindowSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/windowWhen.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/windowWhen.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var windowWhen_1 = $__require('node_modules/rxjs/operator/windowWhen.js');
  Observable_1.Observable.prototype.windowWhen = windowWhen_1.windowWhen;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/withLatestFrom.js', ['node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    /**
     * Combines the source Observable with other Observables to create an Observable
     * whose values are calculated from the latest values of each, only when the
     * source emits.
     *
     * <span class="informal">Whenever the source Observable emits a value, it
     * computes a formula using that value plus the latest values from other input
     * Observables, then emits the output of that formula.</span>
     *
     * <img src="./img/withLatestFrom.png" width="100%">
     *
     * `withLatestFrom` combines each value from the source Observable (the
     * instance) with the latest values from the other input Observables only when
     * the source emits a value, optionally using a `project` function to determine
     * the value to be emitted on the output Observable. All input Observables must
     * emit at least one value before the output Observable will emit a value.
     *
     * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var timer = Rx.Observable.interval(1000);
     * var result = clicks.withLatestFrom(timer);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link combineLatest}
     *
     * @param {Observable} other An input Observable to combine with the source
     * Observable. More than one input Observables may be given as argument.
     * @param {Function} [project] Projection function for combining values
     * together. Receives all values in order of the Observables passed, where the
     * first parameter is a value from the source Observable. (e.g.
     * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not
     * passed, arrays will be emitted on the output Observable.
     * @return {Observable} An Observable of projected values from the most recent
     * values from each input Observable, or an array of the most recent values from
     * each input Observable.
     * @method withLatestFrom
     * @owner Observable
     */
    function withLatestFrom() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        var project;
        if (typeof args[args.length - 1] === 'function') {
            project = args.pop();
        }
        var observables = args;
        return this.lift(new WithLatestFromOperator(observables, project));
    }
    exports.withLatestFrom = withLatestFrom;
    /* tslint:enable:max-line-length */
    var WithLatestFromOperator = function () {
        function WithLatestFromOperator(observables, project) {
            this.observables = observables;
            this.project = project;
        }
        WithLatestFromOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
        };
        return WithLatestFromOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var WithLatestFromSubscriber = function (_super) {
        __extends(WithLatestFromSubscriber, _super);
        function WithLatestFromSubscriber(destination, observables, project) {
            _super.call(this, destination);
            this.observables = observables;
            this.project = project;
            this.toRespond = [];
            var len = observables.length;
            this.values = new Array(len);
            for (var i = 0; i < len; i++) {
                this.toRespond.push(i);
            }
            for (var i = 0; i < len; i++) {
                var observable = observables[i];
                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
            }
        }
        WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.values[outerIndex] = innerValue;
            var toRespond = this.toRespond;
            if (toRespond.length > 0) {
                var found = toRespond.indexOf(outerIndex);
                if (found !== -1) {
                    toRespond.splice(found, 1);
                }
            }
        };
        WithLatestFromSubscriber.prototype.notifyComplete = function () {
            // noop
        };
        WithLatestFromSubscriber.prototype._next = function (value) {
            if (this.toRespond.length === 0) {
                var args = [value].concat(this.values);
                if (this.project) {
                    this._tryProject(args);
                } else {
                    this.destination.next(args);
                }
            }
        };
        WithLatestFromSubscriber.prototype._tryProject = function (args) {
            var result;
            try {
                result = this.project.apply(this, args);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return WithLatestFromSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/withLatestFrom.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/withLatestFrom.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var withLatestFrom_1 = $__require('node_modules/rxjs/operator/withLatestFrom.js');
  Observable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/zip.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/zip.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var zip_1 = $__require('node_modules/rxjs/operator/zip.js');
  Observable_1.Observable.prototype.zip = zip_1.zipProto;
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/ScalarObservable.js", ["node_modules/rxjs/Observable.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require("node_modules/rxjs/Observable.js");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ScalarObservable = function (_super) {
        __extends(ScalarObservable, _super);
        function ScalarObservable(value, scheduler) {
            _super.call(this);
            this.value = value;
            this.scheduler = scheduler;
            this._isScalar = true;
            if (scheduler) {
                this._isScalar = false;
            }
        }
        ScalarObservable.create = function (value, scheduler) {
            return new ScalarObservable(value, scheduler);
        };
        ScalarObservable.dispatch = function (state) {
            var done = state.done,
                value = state.value,
                subscriber = state.subscriber;
            if (done) {
                subscriber.complete();
                return;
            }
            subscriber.next(value);
            if (subscriber.closed) {
                return;
            }
            state.done = true;
            this.schedule(state);
        };
        ScalarObservable.prototype._subscribe = function (subscriber) {
            var value = this.value;
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(ScalarObservable.dispatch, 0, {
                    done: false, value: value, subscriber: subscriber
                });
            } else {
                subscriber.next(value);
                if (!subscriber.closed) {
                    subscriber.complete();
                }
            }
        };
        return ScalarObservable;
    }(Observable_1.Observable);
    exports.ScalarObservable = ScalarObservable;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/util/isScheduler.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isScheduler(value) {
        return value && typeof value.schedule === 'function';
    }
    exports.isScheduler = isScheduler;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/observable/ArrayObservable.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/ScalarObservable.js', 'node_modules/rxjs/observable/EmptyObservable.js', 'node_modules/rxjs/util/isScheduler.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var ScalarObservable_1 = $__require('node_modules/rxjs/observable/ScalarObservable.js');
    var EmptyObservable_1 = $__require('node_modules/rxjs/observable/EmptyObservable.js');
    var isScheduler_1 = $__require('node_modules/rxjs/util/isScheduler.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ArrayObservable = function (_super) {
        __extends(ArrayObservable, _super);
        function ArrayObservable(array, scheduler) {
            _super.call(this);
            this.array = array;
            this.scheduler = scheduler;
            if (!scheduler && array.length === 1) {
                this._isScalar = true;
                this.value = array[0];
            }
        }
        ArrayObservable.create = function (array, scheduler) {
            return new ArrayObservable(array, scheduler);
        };
        /**
         * Creates an Observable that emits some values you specify as arguments,
         * immediately one after the other, and then emits a complete notification.
         *
         * <span class="informal">Emits the arguments you provide, then completes.
         * </span>
         *
         * <img src="./img/of.png" width="100%">
         *
         * This static operator is useful for creating a simple Observable that only
         * emits the arguments given, and the complete notification thereafter. It can
         * be used for composing with other Observables, such as with {@link concat}.
         * By default, it uses a `null` Scheduler, which means the `next`
         * notifications are sent synchronously, although with a different Scheduler
         * it is possible to determine when those notifications will be delivered.
         *
         * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>
         * var numbers = Rx.Observable.of(10, 20, 30);
         * var letters = Rx.Observable.of('a', 'b', 'c');
         * var interval = Rx.Observable.interval(1000);
         * var result = numbers.concat(letters).concat(interval);
         * result.subscribe(x => console.log(x));
         *
         * @see {@link create}
         * @see {@link empty}
         * @see {@link never}
         * @see {@link throw}
         *
         * @param {...T} values Arguments that represent `next` values to be emitted.
         * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
         * the emissions of the `next` notifications.
         * @return {Observable<T>} An Observable that emits each given input value.
         * @static true
         * @name of
         * @owner Observable
         */
        ArrayObservable.of = function () {
            var array = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                array[_i - 0] = arguments[_i];
            }
            var scheduler = array[array.length - 1];
            if (isScheduler_1.isScheduler(scheduler)) {
                array.pop();
            } else {
                scheduler = null;
            }
            var len = array.length;
            if (len > 1) {
                return new ArrayObservable(array, scheduler);
            } else if (len === 1) {
                return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
            } else {
                return new EmptyObservable_1.EmptyObservable(scheduler);
            }
        };
        ArrayObservable.dispatch = function (state) {
            var array = state.array,
                index = state.index,
                count = state.count,
                subscriber = state.subscriber;
            if (index >= count) {
                subscriber.complete();
                return;
            }
            subscriber.next(array[index]);
            if (subscriber.closed) {
                return;
            }
            state.index = index + 1;
            this.schedule(state);
        };
        ArrayObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var array = this.array;
            var count = array.length;
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(ArrayObservable.dispatch, 0, {
                    array: array, index: index, count: count, subscriber: subscriber
                });
            } else {
                for (var i = 0; i < count && !subscriber.closed; i++) {
                    subscriber.next(array[i]);
                }
                subscriber.complete();
            }
        };
        return ArrayObservable;
    }(Observable_1.Observable);
    exports.ArrayObservable = ArrayObservable;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/zip.js', ['node_modules/rxjs/observable/ArrayObservable.js', 'node_modules/rxjs/util/isArray.js', 'node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/OuterSubscriber.js', 'node_modules/rxjs/util/subscribeToResult.js', 'node_modules/rxjs/symbol/iterator.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var ArrayObservable_1 = $__require('node_modules/rxjs/observable/ArrayObservable.js');
    var isArray_1 = $__require('node_modules/rxjs/util/isArray.js');
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    var iterator_1 = $__require('node_modules/rxjs/symbol/iterator.js');
    /**
     * @param observables
     * @return {Observable<R>}
     * @method zip
     * @owner Observable
     */
    function zipProto() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i - 0] = arguments[_i];
        }
        observables.unshift(this);
        return zipStatic.apply(this, observables);
    }
    exports.zipProto = zipProto;
    /* tslint:enable:max-line-length */
    /**
     * @param observables
     * @return {Observable<R>}
     * @static true
     * @name zip
     * @owner Observable
     */
    function zipStatic() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i - 0] = arguments[_i];
        }
        var project = observables[observables.length - 1];
        if (typeof project === 'function') {
            observables.pop();
        }
        return new ArrayObservable_1.ArrayObservable(observables).lift(new ZipOperator(project));
    }
    exports.zipStatic = zipStatic;
    var ZipOperator = function () {
        function ZipOperator(project) {
            this.project = project;
        }
        ZipOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new ZipSubscriber(subscriber, this.project));
        };
        return ZipOperator;
    }();
    exports.ZipOperator = ZipOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ZipSubscriber = function (_super) {
        __extends(ZipSubscriber, _super);
        function ZipSubscriber(destination, project, values) {
            if (values === void 0) {
                values = Object.create(null);
            }
            _super.call(this, destination);
            this.index = 0;
            this.iterators = [];
            this.active = 0;
            this.project = typeof project === 'function' ? project : null;
            this.values = values;
        }
        ZipSubscriber.prototype._next = function (value) {
            var iterators = this.iterators;
            var index = this.index++;
            if (isArray_1.isArray(value)) {
                iterators.push(new StaticArrayIterator(value));
            } else if (typeof value[iterator_1.$$iterator] === 'function') {
                iterators.push(new StaticIterator(value[iterator_1.$$iterator]()));
            } else {
                iterators.push(new ZipBufferIterator(this.destination, this, value, index));
            }
        };
        ZipSubscriber.prototype._complete = function () {
            var iterators = this.iterators;
            var len = iterators.length;
            this.active = len;
            for (var i = 0; i < len; i++) {
                var iterator = iterators[i];
                if (iterator.stillUnsubscribed) {
                    this.add(iterator.subscribe(iterator, i));
                } else {
                    this.active--; // not an observable
                }
            }
        };
        ZipSubscriber.prototype.notifyInactive = function () {
            this.active--;
            if (this.active === 0) {
                this.destination.complete();
            }
        };
        ZipSubscriber.prototype.checkIterators = function () {
            var iterators = this.iterators;
            var len = iterators.length;
            var destination = this.destination;
            // abort if not all of them have values
            for (var i = 0; i < len; i++) {
                var iterator = iterators[i];
                if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
                    return;
                }
            }
            var shouldComplete = false;
            var args = [];
            for (var i = 0; i < len; i++) {
                var iterator = iterators[i];
                var result = iterator.next();
                // check to see if it's completed now that you've gotten
                // the next value.
                if (iterator.hasCompleted()) {
                    shouldComplete = true;
                }
                if (result.done) {
                    destination.complete();
                    return;
                }
                args.push(result.value);
            }
            if (this.project) {
                this._tryProject(args);
            } else {
                destination.next(args);
            }
            if (shouldComplete) {
                destination.complete();
            }
        };
        ZipSubscriber.prototype._tryProject = function (args) {
            var result;
            try {
                result = this.project.apply(this, args);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return ZipSubscriber;
    }(Subscriber_1.Subscriber);
    exports.ZipSubscriber = ZipSubscriber;
    var StaticIterator = function () {
        function StaticIterator(iterator) {
            this.iterator = iterator;
            this.nextResult = iterator.next();
        }
        StaticIterator.prototype.hasValue = function () {
            return true;
        };
        StaticIterator.prototype.next = function () {
            var result = this.nextResult;
            this.nextResult = this.iterator.next();
            return result;
        };
        StaticIterator.prototype.hasCompleted = function () {
            var nextResult = this.nextResult;
            return nextResult && nextResult.done;
        };
        return StaticIterator;
    }();
    var StaticArrayIterator = function () {
        function StaticArrayIterator(array) {
            this.array = array;
            this.index = 0;
            this.length = 0;
            this.length = array.length;
        }
        StaticArrayIterator.prototype[iterator_1.$$iterator] = function () {
            return this;
        };
        StaticArrayIterator.prototype.next = function (value) {
            var i = this.index++;
            var array = this.array;
            return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
        };
        StaticArrayIterator.prototype.hasValue = function () {
            return this.array.length > this.index;
        };
        StaticArrayIterator.prototype.hasCompleted = function () {
            return this.array.length === this.index;
        };
        return StaticArrayIterator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ZipBufferIterator = function (_super) {
        __extends(ZipBufferIterator, _super);
        function ZipBufferIterator(destination, parent, observable, index) {
            _super.call(this, destination);
            this.parent = parent;
            this.observable = observable;
            this.index = index;
            this.stillUnsubscribed = true;
            this.buffer = [];
            this.isComplete = false;
        }
        ZipBufferIterator.prototype[iterator_1.$$iterator] = function () {
            return this;
        };
        // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next
        //    this is legit because `next()` will never be called by a subscription in this case.
        ZipBufferIterator.prototype.next = function () {
            var buffer = this.buffer;
            if (buffer.length === 0 && this.isComplete) {
                return { value: null, done: true };
            } else {
                return { value: buffer.shift(), done: false };
            }
        };
        ZipBufferIterator.prototype.hasValue = function () {
            return this.buffer.length > 0;
        };
        ZipBufferIterator.prototype.hasCompleted = function () {
            return this.buffer.length === 0 && this.isComplete;
        };
        ZipBufferIterator.prototype.notifyComplete = function () {
            if (this.buffer.length > 0) {
                this.isComplete = true;
                this.parent.notifyInactive();
            } else {
                this.destination.complete();
            }
        };
        ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.buffer.push(innerValue);
            this.parent.checkIterators();
        };
        ZipBufferIterator.prototype.subscribe = function (value, index) {
            return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);
        };
        return ZipBufferIterator;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/operator/zipAll.js", ["node_modules/rxjs/operator/zip.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var zip_1 = $__require("node_modules/rxjs/operator/zip.js");
  /**
   * @param project
   * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
   * @method zipAll
   * @owner Observable
   */
  function zipAll(project) {
    return this.lift(new zip_1.ZipOperator(project));
  }
  exports.zipAll = zipAll;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/zipAll.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/zipAll.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var zipAll_1 = $__require('node_modules/rxjs/operator/zipAll.js');
  Observable_1.Observable.prototype.zipAll = zipAll_1.zipAll;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/AsyncSubject.js', ['node_modules/rxjs/Subject.js', 'node_modules/rxjs/Subscription.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require('node_modules/rxjs/Subject.js');
    var Subscription_1 = $__require('node_modules/rxjs/Subscription.js');
    /**
     * @class AsyncSubject<T>
     */
    var AsyncSubject = function (_super) {
        __extends(AsyncSubject, _super);
        function AsyncSubject() {
            _super.apply(this, arguments);
            this.value = null;
            this.hasNext = false;
            this.hasCompleted = false;
        }
        AsyncSubject.prototype._subscribe = function (subscriber) {
            if (this.hasCompleted && this.hasNext) {
                subscriber.next(this.value);
                subscriber.complete();
                return Subscription_1.Subscription.EMPTY;
            } else if (this.hasError) {
                subscriber.error(this.thrownError);
                return Subscription_1.Subscription.EMPTY;
            }
            return _super.prototype._subscribe.call(this, subscriber);
        };
        AsyncSubject.prototype.next = function (value) {
            if (!this.hasCompleted) {
                this.value = value;
                this.hasNext = true;
            }
        };
        AsyncSubject.prototype.complete = function () {
            this.hasCompleted = true;
            if (this.hasNext) {
                _super.prototype.next.call(this, this.value);
            }
            _super.prototype.complete.call(this);
        };
        return AsyncSubject;
    }(Subject_1.Subject);
    exports.AsyncSubject = AsyncSubject;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/observeOn.js', ['node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/Notification.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var Notification_1 = $__require('node_modules/rxjs/Notification.js');
    /**
     * @see {@link Notification}
     *
     * @param scheduler
     * @param delay
     * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
     * @method observeOn
     * @owner Observable
     */
    function observeOn(scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return this.lift(new ObserveOnOperator(scheduler, delay));
    }
    exports.observeOn = observeOn;
    var ObserveOnOperator = function () {
        function ObserveOnOperator(scheduler, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            this.scheduler = scheduler;
            this.delay = delay;
        }
        ObserveOnOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
        };
        return ObserveOnOperator;
    }();
    exports.ObserveOnOperator = ObserveOnOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ObserveOnSubscriber = function (_super) {
        __extends(ObserveOnSubscriber, _super);
        function ObserveOnSubscriber(destination, scheduler, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            _super.call(this, destination);
            this.scheduler = scheduler;
            this.delay = delay;
        }
        ObserveOnSubscriber.dispatch = function (arg) {
            var notification = arg.notification,
                destination = arg.destination;
            notification.observe(destination);
        };
        ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
            this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
        };
        ObserveOnSubscriber.prototype._next = function (value) {
            this.scheduleMessage(Notification_1.Notification.createNext(value));
        };
        ObserveOnSubscriber.prototype._error = function (err) {
            this.scheduleMessage(Notification_1.Notification.createError(err));
        };
        ObserveOnSubscriber.prototype._complete = function () {
            this.scheduleMessage(Notification_1.Notification.createComplete());
        };
        return ObserveOnSubscriber;
    }(Subscriber_1.Subscriber);
    exports.ObserveOnSubscriber = ObserveOnSubscriber;
    var ObserveOnMessage = function () {
        function ObserveOnMessage(notification, destination) {
            this.notification = notification;
            this.destination = destination;
        }
        return ObserveOnMessage;
    }();
    exports.ObserveOnMessage = ObserveOnMessage;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/ReplaySubject.js', ['node_modules/rxjs/Subject.js', 'node_modules/rxjs/scheduler/queue.js', 'node_modules/rxjs/operator/observeOn.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require('node_modules/rxjs/Subject.js');
    var queue_1 = $__require('node_modules/rxjs/scheduler/queue.js');
    var observeOn_1 = $__require('node_modules/rxjs/operator/observeOn.js');
    /**
     * @class ReplaySubject<T>
     */
    var ReplaySubject = function (_super) {
        __extends(ReplaySubject, _super);
        function ReplaySubject(bufferSize, windowTime, scheduler) {
            if (bufferSize === void 0) {
                bufferSize = Number.POSITIVE_INFINITY;
            }
            if (windowTime === void 0) {
                windowTime = Number.POSITIVE_INFINITY;
            }
            _super.call(this);
            this.scheduler = scheduler;
            this._events = [];
            this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
            this._windowTime = windowTime < 1 ? 1 : windowTime;
        }
        ReplaySubject.prototype.next = function (value) {
            var now = this._getNow();
            this._events.push(new ReplayEvent(now, value));
            this._trimBufferThenGetEvents();
            _super.prototype.next.call(this, value);
        };
        ReplaySubject.prototype._subscribe = function (subscriber) {
            var _events = this._trimBufferThenGetEvents();
            var scheduler = this.scheduler;
            if (scheduler) {
                subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));
            }
            var len = _events.length;
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i].value);
            }
            return _super.prototype._subscribe.call(this, subscriber);
        };
        ReplaySubject.prototype._getNow = function () {
            return (this.scheduler || queue_1.queue).now();
        };
        ReplaySubject.prototype._trimBufferThenGetEvents = function () {
            var now = this._getNow();
            var _bufferSize = this._bufferSize;
            var _windowTime = this._windowTime;
            var _events = this._events;
            var eventsCount = _events.length;
            var spliceCount = 0;
            // Trim events that fall out of the time window.
            // Start at the front of the list. Break early once
            // we encounter an event that falls within the window.
            while (spliceCount < eventsCount) {
                if (now - _events[spliceCount].time < _windowTime) {
                    break;
                }
                spliceCount++;
            }
            if (eventsCount > _bufferSize) {
                spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
            }
            if (spliceCount > 0) {
                _events.splice(0, spliceCount);
            }
            return _events;
        };
        return ReplaySubject;
    }(Subject_1.Subject);
    exports.ReplaySubject = ReplaySubject;
    var ReplayEvent = function () {
        function ReplayEvent(time, value) {
            this.time = time;
            this.value = value;
        }
        return ReplayEvent;
    }();
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/BehaviorSubject.js', ['node_modules/rxjs/Subject.js', 'node_modules/rxjs/util/ObjectUnsubscribedError.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require('node_modules/rxjs/Subject.js');
    var ObjectUnsubscribedError_1 = $__require('node_modules/rxjs/util/ObjectUnsubscribedError.js');
    /**
     * @class BehaviorSubject<T>
     */
    var BehaviorSubject = function (_super) {
        __extends(BehaviorSubject, _super);
        function BehaviorSubject(_value) {
            _super.call(this);
            this._value = _value;
        }
        Object.defineProperty(BehaviorSubject.prototype, "value", {
            get: function () {
                return this.getValue();
            },
            enumerable: true,
            configurable: true
        });
        BehaviorSubject.prototype._subscribe = function (subscriber) {
            var subscription = _super.prototype._subscribe.call(this, subscriber);
            if (subscription && !subscription.closed) {
                subscriber.next(this._value);
            }
            return subscription;
        };
        BehaviorSubject.prototype.getValue = function () {
            if (this.hasError) {
                throw this.thrownError;
            } else if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            } else {
                return this._value;
            }
        };
        BehaviorSubject.prototype.next = function (value) {
            _super.prototype.next.call(this, this._value = value);
        };
        return BehaviorSubject;
    }(Subject_1.Subject);
    exports.BehaviorSubject = BehaviorSubject;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/observable/MulticastObservable.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/ConnectableObservable.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var ConnectableObservable_1 = $__require('node_modules/rxjs/observable/ConnectableObservable.js');
    var MulticastObservable = function (_super) {
        __extends(MulticastObservable, _super);
        function MulticastObservable(source, subjectFactory, selector) {
            _super.call(this);
            this.source = source;
            this.subjectFactory = subjectFactory;
            this.selector = selector;
        }
        MulticastObservable.prototype._subscribe = function (subscriber) {
            var _a = this,
                selector = _a.selector,
                source = _a.source;
            var connectable = new ConnectableObservable_1.ConnectableObservable(source, this.subjectFactory);
            var subscription = selector(connectable).subscribe(subscriber);
            subscription.add(connectable.connect());
            return subscription;
        };
        return MulticastObservable;
    }(Observable_1.Observable);
    exports.MulticastObservable = MulticastObservable;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/observable/ConnectableObservable.js', ['node_modules/rxjs/Subject.js', 'node_modules/rxjs/Observable.js', 'node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/Subscription.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require('node_modules/rxjs/Subject.js');
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var Subscription_1 = $__require('node_modules/rxjs/Subscription.js');
    /**
     * @class ConnectableObservable<T>
     */
    var ConnectableObservable = function (_super) {
        __extends(ConnectableObservable, _super);
        function ConnectableObservable(source, subjectFactory) {
            _super.call(this);
            this.source = source;
            this.subjectFactory = subjectFactory;
            this._refCount = 0;
        }
        ConnectableObservable.prototype._subscribe = function (subscriber) {
            return this.getSubject().subscribe(subscriber);
        };
        ConnectableObservable.prototype.getSubject = function () {
            var subject = this._subject;
            if (!subject || subject.isStopped) {
                this._subject = this.subjectFactory();
            }
            return this._subject;
        };
        ConnectableObservable.prototype.connect = function () {
            var connection = this._connection;
            if (!connection) {
                connection = this._connection = new Subscription_1.Subscription();
                connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));
                if (connection.closed) {
                    this._connection = null;
                    connection = Subscription_1.Subscription.EMPTY;
                } else {
                    this._connection = connection;
                }
            }
            return connection;
        };
        ConnectableObservable.prototype.refCount = function () {
            return this.lift(new RefCountOperator(this));
        };
        return ConnectableObservable;
    }(Observable_1.Observable);
    exports.ConnectableObservable = ConnectableObservable;
    var ConnectableSubscriber = function (_super) {
        __extends(ConnectableSubscriber, _super);
        function ConnectableSubscriber(destination, connectable) {
            _super.call(this, destination);
            this.connectable = connectable;
        }
        ConnectableSubscriber.prototype._error = function (err) {
            this._unsubscribe();
            _super.prototype._error.call(this, err);
        };
        ConnectableSubscriber.prototype._complete = function () {
            this._unsubscribe();
            _super.prototype._complete.call(this);
        };
        ConnectableSubscriber.prototype._unsubscribe = function () {
            var connectable = this.connectable;
            if (connectable) {
                this.connectable = null;
                var connection = connectable._connection;
                connectable._refCount = 0;
                connectable._subject = null;
                connectable._connection = null;
                if (connection) {
                    connection.unsubscribe();
                }
            }
        };
        return ConnectableSubscriber;
    }(Subject_1.SubjectSubscriber);
    var RefCountOperator = function () {
        function RefCountOperator(connectable) {
            this.connectable = connectable;
        }
        RefCountOperator.prototype.call = function (subscriber, source) {
            var connectable = this.connectable;
            connectable._refCount++;
            var refCounter = new RefCountSubscriber(subscriber, connectable);
            var subscription = source._subscribe(refCounter);
            if (!refCounter.closed) {
                refCounter.connection = connectable.connect();
            }
            return subscription;
        };
        return RefCountOperator;
    }();
    var RefCountSubscriber = function (_super) {
        __extends(RefCountSubscriber, _super);
        function RefCountSubscriber(destination, connectable) {
            _super.call(this, destination);
            this.connectable = connectable;
        }
        RefCountSubscriber.prototype._unsubscribe = function () {
            var connectable = this.connectable;
            if (!connectable) {
                this.connection = null;
                return;
            }
            this.connectable = null;
            var refCount = connectable._refCount;
            if (refCount <= 0) {
                this.connection = null;
                return;
            }
            connectable._refCount = refCount - 1;
            if (refCount > 1) {
                this.connection = null;
                return;
            }
            ///
            // Compare the local RefCountSubscriber's connection Subscription to the
            // connection Subscription on the shared ConnectableObservable. In cases
            // where the ConnectableObservable source synchronously emits values, and
            // the RefCountSubscriber's dowstream Observers synchronously unsubscribe,
            // execution continues to here before the RefCountOperator has a chance to
            // supply the RefCountSubscriber with the shared connection Subscription.
            // For example:
            // ```
            // Observable.range(0, 10)
            //   .publish()
            //   .refCount()
            //   .take(5)
            //   .subscribe();
            // ```
            // In order to account for this case, RefCountSubscriber should only dispose
            // the ConnectableObservable's shared connection Subscription if the
            // connection Subscription exists, *and* either:
            //   a. RefCountSubscriber doesn't have a reference to the shared connection
            //      Subscription yet, or,
            //   b. RefCountSubscriber's connection Subscription reference is identical
            //      to the shared connection Subscription
            ///
            var connection = this.connection;
            var sharedConnection = connectable._connection;
            this.connection = null;
            if (sharedConnection && (!connection || sharedConnection === connection)) {
                sharedConnection.unsubscribe();
            }
        };
        return RefCountSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/util/EmptyError.js', [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when an Observable or a sequence was queried but has no
     * elements.
     *
     * @see {@link first}
     * @see {@link last}
     * @see {@link single}
     *
     * @class EmptyError
     */
    var EmptyError = function (_super) {
        __extends(EmptyError, _super);
        function EmptyError() {
            var err = _super.call(this, 'no elements in sequence');
            this.name = err.name = 'EmptyError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return EmptyError;
    }(Error);
    exports.EmptyError = EmptyError;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/util/ArgumentOutOfRangeError.js', [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when an element was queried at a certain index of an
     * Observable, but no such index or position exists in that sequence.
     *
     * @see {@link elementAt}
     * @see {@link take}
     * @see {@link takeLast}
     *
     * @class ArgumentOutOfRangeError
     */
    var ArgumentOutOfRangeError = function (_super) {
        __extends(ArgumentOutOfRangeError, _super);
        function ArgumentOutOfRangeError() {
            var err = _super.call(this, 'argument out of range');
            this.name = err.name = 'ArgumentOutOfRangeError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return ArgumentOutOfRangeError;
    }(Error);
    exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/timeInterval.js', ['node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/scheduler/async.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var async_1 = $__require('node_modules/rxjs/scheduler/async.js');
    /**
     * @param scheduler
     * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}
     * @method timeInterval
     * @owner Observable
     */
    function timeInterval(scheduler) {
        if (scheduler === void 0) {
            scheduler = async_1.async;
        }
        return this.lift(new TimeIntervalOperator(scheduler));
    }
    exports.timeInterval = timeInterval;
    var TimeInterval = function () {
        function TimeInterval(value, interval) {
            this.value = value;
            this.interval = interval;
        }
        return TimeInterval;
    }();
    exports.TimeInterval = TimeInterval;
    ;
    var TimeIntervalOperator = function () {
        function TimeIntervalOperator(scheduler) {
            this.scheduler = scheduler;
        }
        TimeIntervalOperator.prototype.call = function (observer, source) {
            return source._subscribe(new TimeIntervalSubscriber(observer, this.scheduler));
        };
        return TimeIntervalOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var TimeIntervalSubscriber = function (_super) {
        __extends(TimeIntervalSubscriber, _super);
        function TimeIntervalSubscriber(destination, scheduler) {
            _super.call(this, destination);
            this.scheduler = scheduler;
            this.lastTime = 0;
            this.lastTime = scheduler.now();
        }
        TimeIntervalSubscriber.prototype._next = function (value) {
            var now = this.scheduler.now();
            var span = now - this.lastTime;
            this.lastTime = now;
            this.destination.next(new TimeInterval(value, span));
        };
        return TimeIntervalSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/timestamp.js', ['node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/scheduler/async.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var async_1 = $__require('node_modules/rxjs/scheduler/async.js');
    /**
     * @param scheduler
     * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}
     * @method timestamp
     * @owner Observable
     */
    function timestamp(scheduler) {
        if (scheduler === void 0) {
            scheduler = async_1.async;
        }
        return this.lift(new TimestampOperator(scheduler));
    }
    exports.timestamp = timestamp;
    var Timestamp = function () {
        function Timestamp(value, timestamp) {
            this.value = value;
            this.timestamp = timestamp;
        }
        return Timestamp;
    }();
    exports.Timestamp = Timestamp;
    ;
    var TimestampOperator = function () {
        function TimestampOperator(scheduler) {
            this.scheduler = scheduler;
        }
        TimestampOperator.prototype.call = function (observer, source) {
            return source._subscribe(new TimestampSubscriber(observer, this.scheduler));
        };
        return TimestampOperator;
    }();
    var TimestampSubscriber = function (_super) {
        __extends(TimestampSubscriber, _super);
        function TimestampSubscriber(destination, scheduler) {
            _super.call(this, destination);
            this.scheduler = scheduler;
        }
        TimestampSubscriber.prototype._next = function (value) {
            var now = this.scheduler.now();
            this.destination.next(new Timestamp(value, now));
        };
        return TimestampSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/Notification.js', ['node_modules/rxjs/Observable.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    /**
     * Represents a push-based event or value that an {@link Observable} can emit.
     * This class is particularly useful for operators that manage notifications,
     * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
     * others. Besides wrapping the actual delivered value, it also annotates it
     * with metadata of, for instance, what type of push message it is (`next`,
     * `error`, or `complete`).
     *
     * @see {@link materialize}
     * @see {@link dematerialize}
     * @see {@link observeOn}
     *
     * @class Notification<T>
     */
    var Notification = function () {
        function Notification(kind, value, exception) {
            this.kind = kind;
            this.value = value;
            this.exception = exception;
            this.hasValue = kind === 'N';
        }
        /**
         * Delivers to the given `observer` the value wrapped by this Notification.
         * @param {Observer} observer
         * @return
         */
        Notification.prototype.observe = function (observer) {
            switch (this.kind) {
                case 'N':
                    return observer.next && observer.next(this.value);
                case 'E':
                    return observer.error && observer.error(this.exception);
                case 'C':
                    return observer.complete && observer.complete();
            }
        };
        /**
         * Given some {@link Observer} callbacks, deliver the value represented by the
         * current Notification to the correctly corresponding callback.
         * @param {function(value: T): void} next An Observer `next` callback.
         * @param {function(err: any): void} [error] An Observer `error` callback.
         * @param {function(): void} [complete] An Observer `complete` callback.
         * @return {any}
         */
        Notification.prototype.do = function (next, error, complete) {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return next && next(this.value);
                case 'E':
                    return error && error(this.exception);
                case 'C':
                    return complete && complete();
            }
        };
        /**
         * Takes an Observer or its individual callback functions, and calls `observe`
         * or `do` methods accordingly.
         * @param {Observer|function(value: T): void} nextOrObserver An Observer or
         * the `next` callback.
         * @param {function(err: any): void} [error] An Observer `error` callback.
         * @param {function(): void} [complete] An Observer `complete` callback.
         * @return {any}
         */
        Notification.prototype.accept = function (nextOrObserver, error, complete) {
            if (nextOrObserver && typeof nextOrObserver.next === 'function') {
                return this.observe(nextOrObserver);
            } else {
                return this.do(nextOrObserver, error, complete);
            }
        };
        /**
         * Returns a simple Observable that just delivers the notification represented
         * by this Notification instance.
         * @return {any}
         */
        Notification.prototype.toObservable = function () {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return Observable_1.Observable.of(this.value);
                case 'E':
                    return Observable_1.Observable.throw(this.exception);
                case 'C':
                    return Observable_1.Observable.empty();
            }
            throw new Error('unexpected notification kind value');
        };
        /**
         * A shortcut to create a Notification instance of the type `next` from a
         * given value.
         * @param {T} value The `next` value.
         * @return {Notification<T>} The "next" Notification representing the
         * argument.
         */
        Notification.createNext = function (value) {
            if (typeof value !== 'undefined') {
                return new Notification('N', value);
            }
            return this.undefinedValueNotification;
        };
        /**
         * A shortcut to create a Notification instance of the type `error` from a
         * given error.
         * @param {any} [err] The `error` exception.
         * @return {Notification<T>} The "error" Notification representing the
         * argument.
         */
        Notification.createError = function (err) {
            return new Notification('E', undefined, err);
        };
        /**
         * A shortcut to create a Notification instance of the type `complete`.
         * @return {Notification<any>} The valueless "complete" Notification.
         */
        Notification.createComplete = function () {
            return this.completeNotification;
        };
        Notification.completeNotification = new Notification('C');
        Notification.undefinedValueNotification = new Notification('N', undefined);
        return Notification;
    }();
    exports.Notification = Notification;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/testing/ColdObservable.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/Subscription.js', 'node_modules/rxjs/testing/SubscriptionLoggable.js', 'node_modules/rxjs/util/applyMixins.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var Subscription_1 = $__require('node_modules/rxjs/Subscription.js');
    var SubscriptionLoggable_1 = $__require('node_modules/rxjs/testing/SubscriptionLoggable.js');
    var applyMixins_1 = $__require('node_modules/rxjs/util/applyMixins.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ColdObservable = function (_super) {
        __extends(ColdObservable, _super);
        function ColdObservable(messages, scheduler) {
            _super.call(this, function (subscriber) {
                var observable = this;
                var index = observable.logSubscribedFrame();
                subscriber.add(new Subscription_1.Subscription(function () {
                    observable.logUnsubscribedFrame(index);
                }));
                observable.scheduleMessages(subscriber);
                return subscriber;
            });
            this.messages = messages;
            this.subscriptions = [];
            this.scheduler = scheduler;
        }
        ColdObservable.prototype.scheduleMessages = function (subscriber) {
            var messagesLength = this.messages.length;
            for (var i = 0; i < messagesLength; i++) {
                var message = this.messages[i];
                subscriber.add(this.scheduler.schedule(function (_a) {
                    var message = _a.message,
                        subscriber = _a.subscriber;
                    message.notification.observe(subscriber);
                }, message.frame, { message: message, subscriber: subscriber }));
            }
        };
        return ColdObservable;
    }(Observable_1.Observable);
    exports.ColdObservable = ColdObservable;
    applyMixins_1.applyMixins(ColdObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/testing/SubscriptionLoggable.js", ["node_modules/rxjs/testing/SubscriptionLog.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var SubscriptionLog_1 = $__require("node_modules/rxjs/testing/SubscriptionLog.js");
    var SubscriptionLoggable = function () {
        function SubscriptionLoggable() {
            this.subscriptions = [];
        }
        SubscriptionLoggable.prototype.logSubscribedFrame = function () {
            this.subscriptions.push(new SubscriptionLog_1.SubscriptionLog(this.scheduler.now()));
            return this.subscriptions.length - 1;
        };
        SubscriptionLoggable.prototype.logUnsubscribedFrame = function (index) {
            var subscriptionLogs = this.subscriptions;
            var oldSubscriptionLog = subscriptionLogs[index];
            subscriptionLogs[index] = new SubscriptionLog_1.SubscriptionLog(oldSubscriptionLog.subscribedFrame, this.scheduler.now());
        };
        return SubscriptionLoggable;
    }();
    exports.SubscriptionLoggable = SubscriptionLoggable;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/util/applyMixins.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function applyMixins(derivedCtor, baseCtors) {
        for (var i = 0, len = baseCtors.length; i < len; i++) {
            var baseCtor = baseCtors[i];
            var propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);
            for (var j = 0, len2 = propertyKeys.length; j < len2; j++) {
                var name_1 = propertyKeys[j];
                derivedCtor.prototype[name_1] = baseCtor.prototype[name_1];
            }
        }
    }
    exports.applyMixins = applyMixins;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/testing/HotObservable.js', ['node_modules/rxjs/Subject.js', 'node_modules/rxjs/Subscription.js', 'node_modules/rxjs/testing/SubscriptionLoggable.js', 'node_modules/rxjs/util/applyMixins.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require('node_modules/rxjs/Subject.js');
    var Subscription_1 = $__require('node_modules/rxjs/Subscription.js');
    var SubscriptionLoggable_1 = $__require('node_modules/rxjs/testing/SubscriptionLoggable.js');
    var applyMixins_1 = $__require('node_modules/rxjs/util/applyMixins.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var HotObservable = function (_super) {
        __extends(HotObservable, _super);
        function HotObservable(messages, scheduler) {
            _super.call(this);
            this.messages = messages;
            this.subscriptions = [];
            this.scheduler = scheduler;
        }
        HotObservable.prototype._subscribe = function (subscriber) {
            var subject = this;
            var index = subject.logSubscribedFrame();
            subscriber.add(new Subscription_1.Subscription(function () {
                subject.logUnsubscribedFrame(index);
            }));
            return _super.prototype._subscribe.call(this, subscriber);
        };
        HotObservable.prototype.setup = function () {
            var subject = this;
            var messagesLength = subject.messages.length;
            /* tslint:disable:no-var-keyword */
            for (var i = 0; i < messagesLength; i++) {
                (function () {
                    var message = subject.messages[i];
                    /* tslint:enable */
                    subject.scheduler.schedule(function () {
                        message.notification.observe(subject);
                    }, message.frame);
                })();
            }
        };
        return HotObservable;
    }(Subject_1.Subject);
    exports.HotObservable = HotObservable;
    applyMixins_1.applyMixins(HotObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/testing/SubscriptionLog.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var SubscriptionLog = function () {
        function SubscriptionLog(subscribedFrame, unsubscribedFrame) {
            if (unsubscribedFrame === void 0) {
                unsubscribedFrame = Number.POSITIVE_INFINITY;
            }
            this.subscribedFrame = subscribedFrame;
            this.unsubscribedFrame = unsubscribedFrame;
        }
        return SubscriptionLog;
    }();
    exports.SubscriptionLog = SubscriptionLog;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/testing/TestScheduler.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/Notification.js', 'node_modules/rxjs/testing/ColdObservable.js', 'node_modules/rxjs/testing/HotObservable.js', 'node_modules/rxjs/testing/SubscriptionLog.js', 'node_modules/rxjs/scheduler/VirtualTimeScheduler.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var Notification_1 = $__require('node_modules/rxjs/Notification.js');
    var ColdObservable_1 = $__require('node_modules/rxjs/testing/ColdObservable.js');
    var HotObservable_1 = $__require('node_modules/rxjs/testing/HotObservable.js');
    var SubscriptionLog_1 = $__require('node_modules/rxjs/testing/SubscriptionLog.js');
    var VirtualTimeScheduler_1 = $__require('node_modules/rxjs/scheduler/VirtualTimeScheduler.js');
    var defaultMaxFrame = 750;
    var TestScheduler = function (_super) {
        __extends(TestScheduler, _super);
        function TestScheduler(assertDeepEqual) {
            _super.call(this, VirtualTimeScheduler_1.VirtualAction, defaultMaxFrame);
            this.assertDeepEqual = assertDeepEqual;
            this.hotObservables = [];
            this.coldObservables = [];
            this.flushTests = [];
        }
        TestScheduler.prototype.createTime = function (marbles) {
            var indexOf = marbles.indexOf('|');
            if (indexOf === -1) {
                throw new Error('marble diagram for time should have a completion marker "|"');
            }
            return indexOf * TestScheduler.frameTimeFactor;
        };
        TestScheduler.prototype.createColdObservable = function (marbles, values, error) {
            if (marbles.indexOf('^') !== -1) {
                throw new Error('cold observable cannot have subscription offset "^"');
            }
            if (marbles.indexOf('!') !== -1) {
                throw new Error('cold observable cannot have unsubscription marker "!"');
            }
            var messages = TestScheduler.parseMarbles(marbles, values, error);
            var cold = new ColdObservable_1.ColdObservable(messages, this);
            this.coldObservables.push(cold);
            return cold;
        };
        TestScheduler.prototype.createHotObservable = function (marbles, values, error) {
            if (marbles.indexOf('!') !== -1) {
                throw new Error('hot observable cannot have unsubscription marker "!"');
            }
            var messages = TestScheduler.parseMarbles(marbles, values, error);
            var subject = new HotObservable_1.HotObservable(messages, this);
            this.hotObservables.push(subject);
            return subject;
        };
        TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {
            var _this = this;
            var messages = [];
            observable.subscribe(function (value) {
                messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createNext(value) });
            }, function (err) {
                messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createError(err) });
            }, function () {
                messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createComplete() });
            });
            return messages;
        };
        TestScheduler.prototype.expectObservable = function (observable, unsubscriptionMarbles) {
            var _this = this;
            if (unsubscriptionMarbles === void 0) {
                unsubscriptionMarbles = null;
            }
            var actual = [];
            var flushTest = { actual: actual, ready: false };
            var unsubscriptionFrame = TestScheduler.parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;
            var subscription;
            this.schedule(function () {
                subscription = observable.subscribe(function (x) {
                    var value = x;
                    // Support Observable-of-Observables
                    if (x instanceof Observable_1.Observable) {
                        value = _this.materializeInnerObservable(value, _this.frame);
                    }
                    actual.push({ frame: _this.frame, notification: Notification_1.Notification.createNext(value) });
                }, function (err) {
                    actual.push({ frame: _this.frame, notification: Notification_1.Notification.createError(err) });
                }, function () {
                    actual.push({ frame: _this.frame, notification: Notification_1.Notification.createComplete() });
                });
            }, 0);
            if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {
                this.schedule(function () {
                    return subscription.unsubscribe();
                }, unsubscriptionFrame);
            }
            this.flushTests.push(flushTest);
            return {
                toBe: function (marbles, values, errorValue) {
                    flushTest.ready = true;
                    flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);
                }
            };
        };
        TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {
            var flushTest = { actual: actualSubscriptionLogs, ready: false };
            this.flushTests.push(flushTest);
            return {
                toBe: function (marbles) {
                    var marblesArray = typeof marbles === 'string' ? [marbles] : marbles;
                    flushTest.ready = true;
                    flushTest.expected = marblesArray.map(function (marbles) {
                        return TestScheduler.parseMarblesAsSubscriptions(marbles);
                    });
                }
            };
        };
        TestScheduler.prototype.flush = function () {
            var hotObservables = this.hotObservables;
            while (hotObservables.length > 0) {
                hotObservables.shift().setup();
            }
            _super.prototype.flush.call(this);
            var readyFlushTests = this.flushTests.filter(function (test) {
                return test.ready;
            });
            while (readyFlushTests.length > 0) {
                var test = readyFlushTests.shift();
                this.assertDeepEqual(test.actual, test.expected);
            }
        };
        TestScheduler.parseMarblesAsSubscriptions = function (marbles) {
            if (typeof marbles !== 'string') {
                return new SubscriptionLog_1.SubscriptionLog(Number.POSITIVE_INFINITY);
            }
            var len = marbles.length;
            var groupStart = -1;
            var subscriptionFrame = Number.POSITIVE_INFINITY;
            var unsubscriptionFrame = Number.POSITIVE_INFINITY;
            for (var i = 0; i < len; i++) {
                var frame = i * this.frameTimeFactor;
                var c = marbles[i];
                switch (c) {
                    case '-':
                    case ' ':
                        break;
                    case '(':
                        groupStart = frame;
                        break;
                    case ')':
                        groupStart = -1;
                        break;
                    case '^':
                        if (subscriptionFrame !== Number.POSITIVE_INFINITY) {
                            throw new Error('found a second subscription point \'^\' in a ' + 'subscription marble diagram. There can only be one.');
                        }
                        subscriptionFrame = groupStart > -1 ? groupStart : frame;
                        break;
                    case '!':
                        if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {
                            throw new Error('found a second subscription point \'^\' in a ' + 'subscription marble diagram. There can only be one.');
                        }
                        unsubscriptionFrame = groupStart > -1 ? groupStart : frame;
                        break;
                    default:
                        throw new Error('there can only be \'^\' and \'!\' markers in a ' + 'subscription marble diagram. Found instead \'' + c + '\'.');
                }
            }
            if (unsubscriptionFrame < 0) {
                return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame);
            } else {
                return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame, unsubscriptionFrame);
            }
        };
        TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables) {
            if (materializeInnerObservables === void 0) {
                materializeInnerObservables = false;
            }
            if (marbles.indexOf('!') !== -1) {
                throw new Error('conventional marble diagrams cannot have the ' + 'unsubscription marker "!"');
            }
            var len = marbles.length;
            var testMessages = [];
            var subIndex = marbles.indexOf('^');
            var frameOffset = subIndex === -1 ? 0 : subIndex * -this.frameTimeFactor;
            var getValue = typeof values !== 'object' ? function (x) {
                return x;
            } : function (x) {
                // Support Observable-of-Observables
                if (materializeInnerObservables && values[x] instanceof ColdObservable_1.ColdObservable) {
                    return values[x].messages;
                }
                return values[x];
            };
            var groupStart = -1;
            for (var i = 0; i < len; i++) {
                var frame = i * this.frameTimeFactor + frameOffset;
                var notification = void 0;
                var c = marbles[i];
                switch (c) {
                    case '-':
                    case ' ':
                        break;
                    case '(':
                        groupStart = frame;
                        break;
                    case ')':
                        groupStart = -1;
                        break;
                    case '|':
                        notification = Notification_1.Notification.createComplete();
                        break;
                    case '^':
                        break;
                    case '#':
                        notification = Notification_1.Notification.createError(errorValue || 'error');
                        break;
                    default:
                        notification = Notification_1.Notification.createNext(getValue(c));
                        break;
                }
                if (notification) {
                    testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification: notification });
                }
            }
            return testMessages;
        };
        return TestScheduler;
    }(VirtualTimeScheduler_1.VirtualTimeScheduler);
    exports.TestScheduler = TestScheduler;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/scheduler/VirtualTimeScheduler.js', ['node_modules/rxjs/scheduler/AsyncAction.js', 'node_modules/rxjs/scheduler/AsyncScheduler.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var AsyncAction_1 = $__require('node_modules/rxjs/scheduler/AsyncAction.js');
    var AsyncScheduler_1 = $__require('node_modules/rxjs/scheduler/AsyncScheduler.js');
    var VirtualTimeScheduler = function (_super) {
        __extends(VirtualTimeScheduler, _super);
        function VirtualTimeScheduler(SchedulerAction, maxFrames) {
            var _this = this;
            if (SchedulerAction === void 0) {
                SchedulerAction = VirtualAction;
            }
            if (maxFrames === void 0) {
                maxFrames = Number.POSITIVE_INFINITY;
            }
            _super.call(this, SchedulerAction, function () {
                return _this.frame;
            });
            this.maxFrames = maxFrames;
            this.frame = 0;
            this.index = -1;
        }
        /**
         * Prompt the Scheduler to execute all of its queued actions, therefore
         * clearing its queue.
         * @return {void}
         */
        VirtualTimeScheduler.prototype.flush = function () {
            var _a = this,
                actions = _a.actions,
                maxFrames = _a.maxFrames;
            var error, action;
            while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            }
            if (error) {
                while (action = actions.shift()) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        VirtualTimeScheduler.frameTimeFactor = 10;
        return VirtualTimeScheduler;
    }(AsyncScheduler_1.AsyncScheduler);
    exports.VirtualTimeScheduler = VirtualTimeScheduler;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var VirtualAction = function (_super) {
        __extends(VirtualAction, _super);
        function VirtualAction(scheduler, work, index) {
            if (index === void 0) {
                index = scheduler.index += 1;
            }
            _super.call(this, scheduler, work);
            this.scheduler = scheduler;
            this.work = work;
            this.index = index;
            this.index = scheduler.index = index;
        }
        VirtualAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            return !this.id ? _super.prototype.schedule.call(this, state, delay) : this.add(new VirtualAction(this.scheduler, this.work)).schedule(state, delay);
        };
        VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            this.delay = scheduler.frame + delay;
            var actions = scheduler.actions;
            actions.push(this);
            actions.sort(VirtualAction.sortActions);
            return true;
        };
        VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            return undefined;
        };
        VirtualAction.sortActions = function (a, b) {
            if (a.delay === b.delay) {
                if (a.index === b.index) {
                    return 0;
                } else if (a.index > b.index) {
                    return 1;
                } else {
                    return -1;
                }
            } else if (a.delay > b.delay) {
                return 1;
            } else {
                return -1;
            }
        };
        return VirtualAction;
    }(AsyncAction_1.AsyncAction);
    exports.VirtualAction = VirtualAction;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/observable/dom/AjaxObservable.js', ['node_modules/rxjs/util/root.js', 'node_modules/rxjs/util/tryCatch.js', 'node_modules/rxjs/util/errorObject.js', 'node_modules/rxjs/Observable.js', 'node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/operator/map.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var root_1 = $__require('node_modules/rxjs/util/root.js');
    var tryCatch_1 = $__require('node_modules/rxjs/util/tryCatch.js');
    var errorObject_1 = $__require('node_modules/rxjs/util/errorObject.js');
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var map_1 = $__require('node_modules/rxjs/operator/map.js');
    function getCORSRequest() {
        if (root_1.root.XMLHttpRequest) {
            var xhr = new root_1.root.XMLHttpRequest();
            if ('withCredentials' in xhr) {
                xhr.withCredentials = !!this.withCredentials;
            }
            return xhr;
        } else if (!!root_1.root.XDomainRequest) {
            return new root_1.root.XDomainRequest();
        } else {
            throw new Error('CORS is not supported by your browser');
        }
    }
    function getXMLHttpRequest() {
        if (root_1.root.XMLHttpRequest) {
            return new root_1.root.XMLHttpRequest();
        } else {
            var progId = void 0;
            try {
                var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];
                for (var i = 0; i < 3; i++) {
                    try {
                        progId = progIds[i];
                        if (new root_1.root.ActiveXObject(progId)) {
                            break;
                        }
                    } catch (e) {}
                }
                return new root_1.root.ActiveXObject(progId);
            } catch (e) {
                throw new Error('XMLHttpRequest is not supported by your browser');
            }
        }
    }
    function ajaxGet(url, headers) {
        if (headers === void 0) {
            headers = null;
        }
        return new AjaxObservable({ method: 'GET', url: url, headers: headers });
    }
    exports.ajaxGet = ajaxGet;
    ;
    function ajaxPost(url, body, headers) {
        return new AjaxObservable({ method: 'POST', url: url, body: body, headers: headers });
    }
    exports.ajaxPost = ajaxPost;
    ;
    function ajaxDelete(url, headers) {
        return new AjaxObservable({ method: 'DELETE', url: url, headers: headers });
    }
    exports.ajaxDelete = ajaxDelete;
    ;
    function ajaxPut(url, body, headers) {
        return new AjaxObservable({ method: 'PUT', url: url, body: body, headers: headers });
    }
    exports.ajaxPut = ajaxPut;
    ;
    function ajaxGetJSON(url, headers) {
        return new AjaxObservable({ method: 'GET', url: url, responseType: 'json', headers: headers }).lift(new map_1.MapOperator(function (x, index) {
            return x.response;
        }, null));
    }
    exports.ajaxGetJSON = ajaxGetJSON;
    ;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var AjaxObservable = function (_super) {
        __extends(AjaxObservable, _super);
        function AjaxObservable(urlOrRequest) {
            _super.call(this);
            var request = {
                async: true,
                createXHR: function () {
                    return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();
                },
                crossDomain: false,
                withCredentials: false,
                headers: {},
                method: 'GET',
                responseType: 'json',
                timeout: 0
            };
            if (typeof urlOrRequest === 'string') {
                request.url = urlOrRequest;
            } else {
                for (var prop in urlOrRequest) {
                    if (urlOrRequest.hasOwnProperty(prop)) {
                        request[prop] = urlOrRequest[prop];
                    }
                }
            }
            this.request = request;
        }
        AjaxObservable.prototype._subscribe = function (subscriber) {
            return new AjaxSubscriber(subscriber, this.request);
        };
        /**
         * Creates an observable for an Ajax request with either a request object with
         * url, headers, etc or a string for a URL.
         *
         * @example
         * source = Rx.Observable.ajax('/products');
         * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });
         *
         * @param {string|Object} request Can be one of the following:
         *   A string of the URL to make the Ajax call.
         *   An object with the following properties
         *   - url: URL of the request
         *   - body: The body of the request
         *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE
         *   - async: Whether the request is async
         *   - headers: Optional headers
         *   - crossDomain: true if a cross domain request, else false
         *   - createXHR: a function to override if you need to use an alternate
         *   XMLHttpRequest implementation.
         *   - resultSelector: a function to use to alter the output value type of
         *   the Observable. Gets {@link AjaxResponse} as an argument.
         * @return {Observable} An observable sequence containing the XMLHttpRequest.
         * @static true
         * @name ajax
         * @owner Observable
        */
        AjaxObservable.create = function () {
            var create = function (urlOrRequest) {
                return new AjaxObservable(urlOrRequest);
            };
            create.get = ajaxGet;
            create.post = ajaxPost;
            create.delete = ajaxDelete;
            create.put = ajaxPut;
            create.getJSON = ajaxGetJSON;
            return create;
        }();
        return AjaxObservable;
    }(Observable_1.Observable);
    exports.AjaxObservable = AjaxObservable;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var AjaxSubscriber = function (_super) {
        __extends(AjaxSubscriber, _super);
        function AjaxSubscriber(destination, request) {
            _super.call(this, destination);
            this.request = request;
            this.done = false;
            var headers = request.headers = request.headers || {};
            // force CORS if requested
            if (!request.crossDomain && !headers['X-Requested-With']) {
                headers['X-Requested-With'] = 'XMLHttpRequest';
            }
            // ensure content type is set
            if (!('Content-Type' in headers) && !(root_1.root.FormData && request.body instanceof root_1.root.FormData) && typeof request.body !== 'undefined') {
                headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            }
            // properly serialize body
            request.body = this.serializeBody(request.body, request.headers['Content-Type']);
            this.send();
        }
        AjaxSubscriber.prototype.next = function (e) {
            this.done = true;
            var _a = this,
                xhr = _a.xhr,
                request = _a.request,
                destination = _a.destination;
            var response = new AjaxResponse(e, xhr, request);
            destination.next(response);
        };
        AjaxSubscriber.prototype.send = function () {
            var _a = this,
                request = _a.request,
                _b = _a.request,
                user = _b.user,
                method = _b.method,
                url = _b.url,
                async = _b.async,
                password = _b.password,
                headers = _b.headers,
                body = _b.body;
            var createXHR = request.createXHR;
            var xhr = tryCatch_1.tryCatch(createXHR).call(request);
            if (xhr === errorObject_1.errorObject) {
                this.error(errorObject_1.errorObject.e);
            } else {
                this.xhr = xhr;
                // open XHR first
                var result = void 0;
                if (user) {
                    result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async, user, password);
                } else {
                    result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async);
                }
                if (result === errorObject_1.errorObject) {
                    this.error(errorObject_1.errorObject.e);
                    return null;
                }
                // timeout and responseType can be set once the XHR is open
                xhr.timeout = request.timeout;
                xhr.responseType = request.responseType;
                // set headers
                this.setHeaders(xhr, headers);
                // now set up the events
                this.setupEvents(xhr, request);
                // finally send the request
                if (body) {
                    xhr.send(body);
                } else {
                    xhr.send();
                }
            }
            return xhr;
        };
        AjaxSubscriber.prototype.serializeBody = function (body, contentType) {
            if (!body || typeof body === 'string') {
                return body;
            } else if (root_1.root.FormData && body instanceof root_1.root.FormData) {
                return body;
            }
            if (contentType) {
                var splitIndex = contentType.indexOf(';');
                if (splitIndex !== -1) {
                    contentType = contentType.substring(0, splitIndex);
                }
            }
            switch (contentType) {
                case 'application/x-www-form-urlencoded':
                    return Object.keys(body).map(function (key) {
                        return encodeURI(key) + "=" + encodeURI(body[key]);
                    }).join('&');
                case 'application/json':
                    return JSON.stringify(body);
                default:
                    return body;
            }
        };
        AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {
            for (var key in headers) {
                if (headers.hasOwnProperty(key)) {
                    xhr.setRequestHeader(key, headers[key]);
                }
            }
        };
        AjaxSubscriber.prototype.setupEvents = function (xhr, request) {
            var progressSubscriber = request.progressSubscriber;
            xhr.ontimeout = function xhrTimeout(e) {
                var _a = xhrTimeout,
                    subscriber = _a.subscriber,
                    progressSubscriber = _a.progressSubscriber,
                    request = _a.request;
                if (progressSubscriber) {
                    progressSubscriber.error(e);
                }
                subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.
            };
            xhr.ontimeout.request = request;
            xhr.ontimeout.subscriber = this;
            xhr.ontimeout.progressSubscriber = progressSubscriber;
            if (xhr.upload && 'withCredentials' in xhr && root_1.root.XDomainRequest) {
                if (progressSubscriber) {
                    xhr.onprogress = function xhrProgress(e) {
                        var progressSubscriber = xhrProgress.progressSubscriber;
                        progressSubscriber.next(e);
                    };
                    xhr.onprogress.progressSubscriber = progressSubscriber;
                }
                xhr.onerror = function xhrError(e) {
                    var _a = xhrError,
                        progressSubscriber = _a.progressSubscriber,
                        subscriber = _a.subscriber,
                        request = _a.request;
                    if (progressSubscriber) {
                        progressSubscriber.error(e);
                    }
                    subscriber.error(new AjaxError('ajax error', this, request));
                };
                xhr.onerror.request = request;
                xhr.onerror.subscriber = this;
                xhr.onerror.progressSubscriber = progressSubscriber;
            }
            xhr.onreadystatechange = function xhrReadyStateChange(e) {
                var _a = xhrReadyStateChange,
                    subscriber = _a.subscriber,
                    progressSubscriber = _a.progressSubscriber,
                    request = _a.request;
                if (this.readyState === 4) {
                    // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
                    var status_1 = this.status === 1223 ? 204 : this.status;
                    var response = this.responseType === 'text' ? this.response || this.responseText : this.response;
                    // fix status code when it is 0 (0 status is undocumented).
                    // Occurs when accessing file resources or on Android 4.1 stock browser
                    // while retrieving files from application cache.
                    if (status_1 === 0) {
                        status_1 = response ? 200 : 0;
                    }
                    if (200 <= status_1 && status_1 < 300) {
                        if (progressSubscriber) {
                            progressSubscriber.complete();
                        }
                        subscriber.next(e);
                        subscriber.complete();
                    } else {
                        if (progressSubscriber) {
                            progressSubscriber.error(e);
                        }
                        subscriber.error(new AjaxError('ajax error ' + status_1, this, request));
                    }
                }
            };
            xhr.onreadystatechange.subscriber = this;
            xhr.onreadystatechange.progressSubscriber = progressSubscriber;
            xhr.onreadystatechange.request = request;
        };
        AjaxSubscriber.prototype.unsubscribe = function () {
            var _a = this,
                done = _a.done,
                xhr = _a.xhr;
            if (!done && xhr && xhr.readyState !== 4) {
                xhr.abort();
            }
            _super.prototype.unsubscribe.call(this);
        };
        return AjaxSubscriber;
    }(Subscriber_1.Subscriber);
    exports.AjaxSubscriber = AjaxSubscriber;
    /**
     * A normalized AJAX response.
     *
     * @see {@link ajax}
     *
     * @class AjaxResponse
     */
    var AjaxResponse = function () {
        function AjaxResponse(originalEvent, xhr, request) {
            this.originalEvent = originalEvent;
            this.xhr = xhr;
            this.request = request;
            this.status = xhr.status;
            this.responseType = xhr.responseType || request.responseType;
            switch (this.responseType) {
                case 'json':
                    if ('response' in xhr) {
                        //IE does not support json as responseType, parse it internally
                        this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');
                    } else {
                        this.response = JSON.parse(xhr.responseText || 'null');
                    }
                    break;
                case 'xml':
                    this.response = xhr.responseXML;
                    break;
                case 'text':
                default:
                    this.response = 'response' in xhr ? xhr.response : xhr.responseText;
                    break;
            }
        }
        return AjaxResponse;
    }();
    exports.AjaxResponse = AjaxResponse;
    /**
     * A normalized AJAX error.
     *
     * @see {@link ajax}
     *
     * @class AjaxError
     */
    var AjaxError = function (_super) {
        __extends(AjaxError, _super);
        function AjaxError(message, xhr, request) {
            _super.call(this, message);
            this.message = message;
            this.xhr = xhr;
            this.request = request;
            this.status = xhr.status;
        }
        return AjaxError;
    }(Error);
    exports.AjaxError = AjaxError;
    /**
     * @see {@link ajax}
     *
     * @class AjaxTimeoutError
     */
    var AjaxTimeoutError = function (_super) {
        __extends(AjaxTimeoutError, _super);
        function AjaxTimeoutError(xhr, request) {
            _super.call(this, 'ajax timeout', xhr, request);
        }
        return AjaxTimeoutError;
    }(AjaxError);
    exports.AjaxTimeoutError = AjaxTimeoutError;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/util/Immediate.js', ['node_modules/rxjs/util/root.js'], true, function ($__require, exports, module) {
    /**
    Some credit for this helper goes to http://github.com/YuzuJS/setImmediate
    */
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('node_modules/rxjs/util/root.js');
    var ImmediateDefinition = function () {
        function ImmediateDefinition(root) {
            this.root = root;
            if (root.setImmediate && typeof root.setImmediate === 'function') {
                this.setImmediate = root.setImmediate.bind(root);
                this.clearImmediate = root.clearImmediate.bind(root);
            } else {
                this.nextHandle = 1;
                this.tasksByHandle = {};
                this.currentlyRunningATask = false;
                // Don't get fooled by e.g. browserify environments.
                if (this.canUseProcessNextTick()) {
                    // For Node.js before 0.9
                    this.setImmediate = this.createProcessNextTickSetImmediate();
                } else if (this.canUsePostMessage()) {
                    // For non-IE10 modern browsers
                    this.setImmediate = this.createPostMessageSetImmediate();
                } else if (this.canUseMessageChannel()) {
                    // For web workers, where supported
                    this.setImmediate = this.createMessageChannelSetImmediate();
                } else if (this.canUseReadyStateChange()) {
                    // For IE 6–8
                    this.setImmediate = this.createReadyStateChangeSetImmediate();
                } else {
                    // For older browsers
                    this.setImmediate = this.createSetTimeoutSetImmediate();
                }
                var ci = function clearImmediate(handle) {
                    delete clearImmediate.instance.tasksByHandle[handle];
                };
                ci.instance = this;
                this.clearImmediate = ci;
            }
        }
        ImmediateDefinition.prototype.identify = function (o) {
            return this.root.Object.prototype.toString.call(o);
        };
        ImmediateDefinition.prototype.canUseProcessNextTick = function () {
            return this.identify(this.root.process) === '[object process]';
        };
        ImmediateDefinition.prototype.canUseMessageChannel = function () {
            return Boolean(this.root.MessageChannel);
        };
        ImmediateDefinition.prototype.canUseReadyStateChange = function () {
            var document = this.root.document;
            return Boolean(document && 'onreadystatechange' in document.createElement('script'));
        };
        ImmediateDefinition.prototype.canUsePostMessage = function () {
            var root = this.root;
            // The test against `importScripts` prevents this implementation from being installed inside a web worker,
            // where `root.postMessage` means something completely different and can't be used for this purpose.
            if (root.postMessage && !root.importScripts) {
                var postMessageIsAsynchronous_1 = true;
                var oldOnMessage = root.onmessage;
                root.onmessage = function () {
                    postMessageIsAsynchronous_1 = false;
                };
                root.postMessage('', '*');
                root.onmessage = oldOnMessage;
                return postMessageIsAsynchronous_1;
            }
            return false;
        };
        // This function accepts the same arguments as setImmediate, but
        // returns a function that requires no arguments.
        ImmediateDefinition.prototype.partiallyApplied = function (handler) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var fn = function result() {
                var _a = result,
                    handler = _a.handler,
                    args = _a.args;
                if (typeof handler === 'function') {
                    handler.apply(undefined, args);
                } else {
                    new Function('' + handler)();
                }
            };
            fn.handler = handler;
            fn.args = args;
            return fn;
        };
        ImmediateDefinition.prototype.addFromSetImmediateArguments = function (args) {
            this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);
            return this.nextHandle++;
        };
        ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function () {
            var fn = function setImmediate() {
                var instance = setImmediate.instance;
                var handle = instance.addFromSetImmediateArguments(arguments);
                instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));
                return handle;
            };
            fn.instance = this;
            return fn;
        };
        ImmediateDefinition.prototype.createPostMessageSetImmediate = function () {
            // Installs an event handler on `global` for the `message` event: see
            // * https://developer.mozilla.org/en/DOM/window.postMessage
            // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
            var root = this.root;
            var messagePrefix = 'setImmediate$' + root.Math.random() + '$';
            var onGlobalMessage = function globalMessageHandler(event) {
                var instance = globalMessageHandler.instance;
                if (event.source === root && typeof event.data === 'string' && event.data.indexOf(messagePrefix) === 0) {
                    instance.runIfPresent(+event.data.slice(messagePrefix.length));
                }
            };
            onGlobalMessage.instance = this;
            root.addEventListener('message', onGlobalMessage, false);
            var fn = function setImmediate() {
                var _a = setImmediate,
                    messagePrefix = _a.messagePrefix,
                    instance = _a.instance;
                var handle = instance.addFromSetImmediateArguments(arguments);
                instance.root.postMessage(messagePrefix + handle, '*');
                return handle;
            };
            fn.instance = this;
            fn.messagePrefix = messagePrefix;
            return fn;
        };
        ImmediateDefinition.prototype.runIfPresent = function (handle) {
            // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'
            // So if we're currently running a task, we'll need to delay this invocation.
            if (this.currentlyRunningATask) {
                // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
                // 'too much recursion' error.
                this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);
            } else {
                var task = this.tasksByHandle[handle];
                if (task) {
                    this.currentlyRunningATask = true;
                    try {
                        task();
                    } finally {
                        this.clearImmediate(handle);
                        this.currentlyRunningATask = false;
                    }
                }
            }
        };
        ImmediateDefinition.prototype.createMessageChannelSetImmediate = function () {
            var _this = this;
            var channel = new this.root.MessageChannel();
            channel.port1.onmessage = function (event) {
                var handle = event.data;
                _this.runIfPresent(handle);
            };
            var fn = function setImmediate() {
                var _a = setImmediate,
                    channel = _a.channel,
                    instance = _a.instance;
                var handle = instance.addFromSetImmediateArguments(arguments);
                channel.port2.postMessage(handle);
                return handle;
            };
            fn.channel = channel;
            fn.instance = this;
            return fn;
        };
        ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function () {
            var fn = function setImmediate() {
                var instance = setImmediate.instance;
                var root = instance.root;
                var doc = root.document;
                var html = doc.documentElement;
                var handle = instance.addFromSetImmediateArguments(arguments);
                // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
                // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
                var script = doc.createElement('script');
                script.onreadystatechange = function () {
                    instance.runIfPresent(handle);
                    script.onreadystatechange = null;
                    html.removeChild(script);
                    script = null;
                };
                html.appendChild(script);
                return handle;
            };
            fn.instance = this;
            return fn;
        };
        ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function () {
            var fn = function setImmediate() {
                var instance = setImmediate.instance;
                var handle = instance.addFromSetImmediateArguments(arguments);
                instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);
                return handle;
            };
            fn.instance = this;
            return fn;
        };
        return ImmediateDefinition;
    }();
    exports.ImmediateDefinition = ImmediateDefinition;
    exports.Immediate = new ImmediateDefinition(root_1.root);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/scheduler/AsapAction.js', ['node_modules/rxjs/util/Immediate.js', 'node_modules/rxjs/scheduler/AsyncAction.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Immediate_1 = $__require('node_modules/rxjs/util/Immediate.js');
    var AsyncAction_1 = $__require('node_modules/rxjs/scheduler/AsyncAction.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var AsapAction = function (_super) {
        __extends(AsapAction, _super);
        function AsapAction(scheduler, work) {
            _super.call(this, scheduler, work);
            this.scheduler = scheduler;
            this.work = work;
        }
        AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            // If delay is greater than 0, request as an async action.
            if (delay !== null && delay > 0) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            // Push the action to the end of the scheduler queue.
            scheduler.actions.push(this);
            // If a microtask has already been scheduled, don't schedule another
            // one. If a microtask hasn't been scheduled yet, schedule one now. Return
            // the current scheduled microtask id.
            return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
        };
        AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            // If delay exists and is greater than 0, recycle as an async action.
            if (delay !== null && delay > 0) {
                return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
            }
            // If the scheduler queue is empty, cancel the requested microtask and
            // set the scheduled flag to undefined so the next AsapAction will schedule
            // its own.
            if (scheduler.actions.length === 0) {
                Immediate_1.Immediate.clearImmediate(id);
                scheduler.scheduled = undefined;
            }
            // Return undefined so the action knows to request a new async id if it's rescheduled.
            return undefined;
        };
        return AsapAction;
    }(AsyncAction_1.AsyncAction);
    exports.AsapAction = AsapAction;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/scheduler/AsapScheduler.js", ["node_modules/rxjs/scheduler/AsyncScheduler.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var AsyncScheduler_1 = $__require("node_modules/rxjs/scheduler/AsyncScheduler.js");
    var AsapScheduler = function (_super) {
        __extends(AsapScheduler, _super);
        function AsapScheduler() {
            _super.apply(this, arguments);
        }
        AsapScheduler.prototype.flush = function () {
            this.active = true;
            this.scheduled = undefined;
            var actions = this.actions;
            var error;
            var index = -1;
            var count = actions.length;
            var action = actions.shift();
            do {
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            } while (++index < count && (action = actions.shift()));
            this.active = false;
            if (error) {
                while (++index < count && (action = actions.shift())) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AsapScheduler;
    }(AsyncScheduler_1.AsyncScheduler);
    exports.AsapScheduler = AsapScheduler;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/scheduler/asap.js', ['node_modules/rxjs/scheduler/AsapAction.js', 'node_modules/rxjs/scheduler/AsapScheduler.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var AsapAction_1 = $__require('node_modules/rxjs/scheduler/AsapAction.js');
  var AsapScheduler_1 = $__require('node_modules/rxjs/scheduler/AsapScheduler.js');
  exports.asap = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/scheduler/async.js', ['node_modules/rxjs/scheduler/AsyncAction.js', 'node_modules/rxjs/scheduler/AsyncScheduler.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var AsyncAction_1 = $__require('node_modules/rxjs/scheduler/AsyncAction.js');
  var AsyncScheduler_1 = $__require('node_modules/rxjs/scheduler/AsyncScheduler.js');
  exports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/scheduler/QueueAction.js", ["node_modules/rxjs/scheduler/AsyncAction.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var AsyncAction_1 = $__require("node_modules/rxjs/scheduler/AsyncAction.js");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var QueueAction = function (_super) {
        __extends(QueueAction, _super);
        function QueueAction(scheduler, work) {
            _super.call(this, scheduler, work);
            this.scheduler = scheduler;
            this.work = work;
        }
        QueueAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (delay > 0) {
                return _super.prototype.schedule.call(this, state, delay);
            }
            this.delay = delay;
            this.state = state;
            this.scheduler.flush(this);
            return this;
        };
        QueueAction.prototype.execute = function (state, delay) {
            return delay > 0 || this.closed ? _super.prototype.execute.call(this, state, delay) : this._execute(state, delay);
        };
        QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            // If delay is greater than 0, enqueue as an async action.
            if (delay !== null && delay > 0) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            // Otherwise flush the scheduler starting with this action.
            return scheduler.flush(this);
        };
        return QueueAction;
    }(AsyncAction_1.AsyncAction);
    exports.QueueAction = QueueAction;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/scheduler/QueueScheduler.js", ["node_modules/rxjs/scheduler/AsyncScheduler.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var AsyncScheduler_1 = $__require("node_modules/rxjs/scheduler/AsyncScheduler.js");
    var QueueScheduler = function (_super) {
        __extends(QueueScheduler, _super);
        function QueueScheduler() {
            _super.apply(this, arguments);
        }
        return QueueScheduler;
    }(AsyncScheduler_1.AsyncScheduler);
    exports.QueueScheduler = QueueScheduler;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/scheduler/queue.js', ['node_modules/rxjs/scheduler/QueueAction.js', 'node_modules/rxjs/scheduler/QueueScheduler.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var QueueAction_1 = $__require('node_modules/rxjs/scheduler/QueueAction.js');
  var QueueScheduler_1 = $__require('node_modules/rxjs/scheduler/QueueScheduler.js');
  exports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/scheduler/Action.js", ["node_modules/rxjs/Subscription.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscription_1 = $__require("node_modules/rxjs/Subscription.js");
    /**
     * A unit of work to be executed in a {@link Scheduler}. An action is typically
     * created from within a Scheduler and an RxJS user does not need to concern
     * themselves about creating and manipulating an Action.
     *
     * ```ts
     * class Action<T> extends Subscription {
     *   new (scheduler: Scheduler, work: (state?: T) => void);
     *   schedule(state?: T, delay: number = 0): Subscription;
     * }
     * ```
     *
     * @class Action<T>
     */
    var Action = function (_super) {
        __extends(Action, _super);
        function Action(scheduler, work) {
            _super.call(this);
        }
        /**
         * Schedules this action on its parent Scheduler for execution. May be passed
         * some context object, `state`. May happen at some point in the future,
         * according to the `delay` parameter, if specified.
         * @param {T} [state] Some contextual data that the `work` function uses when
         * called by the Scheduler.
         * @param {number} [delay] Time to wait before executing the work, where the
         * time unit is implicit and defined by the Scheduler.
         * @return {void}
         */
        Action.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            return this;
        };
        return Action;
    }(Subscription_1.Subscription);
    exports.Action = Action;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/scheduler/AsyncAction.js', ['node_modules/rxjs/util/root.js', 'node_modules/rxjs/scheduler/Action.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var root_1 = $__require('node_modules/rxjs/util/root.js');
    var Action_1 = $__require('node_modules/rxjs/scheduler/Action.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var AsyncAction = function (_super) {
        __extends(AsyncAction, _super);
        function AsyncAction(scheduler, work) {
            _super.call(this, scheduler, work);
            this.scheduler = scheduler;
            this.work = work;
            this.pending = false;
        }
        AsyncAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (this.closed) {
                return this;
            }
            // Always replace the current state with the new state.
            this.state = state;
            // Set the pending flag indicating that this action has been scheduled, or
            // has recursively rescheduled itself.
            this.pending = true;
            var id = this.id;
            var scheduler = this.scheduler;
            //
            // Important implementation note:
            //
            // Actions only execute once by default, unless rescheduled from within the
            // scheduled callback. This allows us to implement single and repeat
            // actions via the same code path, without adding API surface area, as well
            // as mimic traditional recursion but across asynchronous boundaries.
            //
            // However, JS runtimes and timers distinguish between intervals achieved by
            // serial `setTimeout` calls vs. a single `setInterval` call. An interval of
            // serial `setTimeout` calls can be individually delayed, which delays
            // scheduling the next `setTimeout`, and so on. `setInterval` attempts to
            // guarantee the interval callback will be invoked more precisely to the
            // interval period, regardless of load.
            //
            // Therefore, we use `setInterval` to schedule single and repeat actions.
            // If the action reschedules itself with the same delay, the interval is not
            // canceled. If the action doesn't reschedule, or reschedules with a
            // different delay, the interval will be canceled after scheduled callback
            // execution.
            //
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, delay);
            }
            this.delay = delay;
            // If this action has already an async Id, don't request a new one.
            this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
            return this;
        };
        AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);
        };
        AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            // If this action is rescheduled with the same delay time, don't clear the interval id.
            if (delay !== null && this.delay === delay) {
                return id;
            }
            // Otherwise, if the action's delay time is different from the current delay,
            // clear the interval id
            return root_1.root.clearInterval(id) && undefined || undefined;
        };
        /**
         * Immediately executes this action and the `work` it contains.
         * @return {any}
         */
        AsyncAction.prototype.execute = function (state, delay) {
            if (this.closed) {
                return new Error('executing a cancelled action');
            }
            this.pending = false;
            var error = this._execute(state, delay);
            if (error) {
                return error;
            } else if (this.pending === false && this.id != null) {
                // Dequeue if the action didn't reschedule itself. Don't call
                // unsubscribe(), because the action could reschedule later.
                // For example:
                // ```
                // scheduler.schedule(function doWork(counter) {
                //   /* ... I'm a busy worker bee ... */
                //   var originalAction = this;
                //   /* wait 100ms before rescheduling the action */
                //   setTimeout(function () {
                //     originalAction.schedule(counter + 1);
                //   }, 100);
                // }, 1000);
                // ```
                this.id = this.recycleAsyncId(this.scheduler, this.id, null);
            }
        };
        AsyncAction.prototype._execute = function (state, delay) {
            var errored = false;
            var errorValue = undefined;
            try {
                this.work(state);
            } catch (e) {
                errored = true;
                errorValue = !!e && e || new Error(e);
            }
            if (errored) {
                this.unsubscribe();
                return errorValue;
            }
        };
        AsyncAction.prototype._unsubscribe = function () {
            var id = this.id;
            var scheduler = this.scheduler;
            var actions = scheduler.actions;
            var index = actions.indexOf(this);
            this.work = null;
            this.delay = null;
            this.state = null;
            this.pending = false;
            this.scheduler = null;
            if (index !== -1) {
                actions.splice(index, 1);
            }
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, null);
            }
        };
        return AsyncAction;
    }(Action_1.Action);
    exports.AsyncAction = AsyncAction;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/util/AnimationFrame.js", ["node_modules/rxjs/util/root.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require("node_modules/rxjs/util/root.js");
    var RequestAnimationFrameDefinition = function () {
        function RequestAnimationFrameDefinition(root) {
            if (root.requestAnimationFrame) {
                this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);
                this.requestAnimationFrame = root.requestAnimationFrame.bind(root);
            } else if (root.mozRequestAnimationFrame) {
                this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);
                this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);
            } else if (root.webkitRequestAnimationFrame) {
                this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);
                this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);
            } else if (root.msRequestAnimationFrame) {
                this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);
                this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);
            } else if (root.oRequestAnimationFrame) {
                this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);
                this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);
            } else {
                this.cancelAnimationFrame = root.clearTimeout.bind(root);
                this.requestAnimationFrame = function (cb) {
                    return root.setTimeout(cb, 1000 / 60);
                };
            }
        }
        return RequestAnimationFrameDefinition;
    }();
    exports.RequestAnimationFrameDefinition = RequestAnimationFrameDefinition;
    exports.AnimationFrame = new RequestAnimationFrameDefinition(root_1.root);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/scheduler/AnimationFrameAction.js', ['node_modules/rxjs/scheduler/AsyncAction.js', 'node_modules/rxjs/util/AnimationFrame.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var AsyncAction_1 = $__require('node_modules/rxjs/scheduler/AsyncAction.js');
    var AnimationFrame_1 = $__require('node_modules/rxjs/util/AnimationFrame.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var AnimationFrameAction = function (_super) {
        __extends(AnimationFrameAction, _super);
        function AnimationFrameAction(scheduler, work) {
            _super.call(this, scheduler, work);
            this.scheduler = scheduler;
            this.work = work;
        }
        AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            // If delay is greater than 0, request as an async action.
            if (delay !== null && delay > 0) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            // Push the action to the end of the scheduler queue.
            scheduler.actions.push(this);
            // If an animation frame has already been requested, don't request another
            // one. If an animation frame hasn't been requested yet, request one. Return
            // the current animation frame request id.
            return scheduler.scheduled || (scheduler.scheduled = AnimationFrame_1.AnimationFrame.requestAnimationFrame(scheduler.flush.bind(scheduler, null)));
        };
        AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            // If delay exists and is greater than 0, recycle as an async action.
            if (delay !== null && delay > 0) {
                return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
            }
            // If the scheduler queue is empty, cancel the requested animation frame and
            // set the scheduled flag to undefined so the next AnimationFrameAction will
            // request its own.
            if (scheduler.actions.length === 0) {
                AnimationFrame_1.AnimationFrame.cancelAnimationFrame(id);
                scheduler.scheduled = undefined;
            }
            // Return undefined so the action knows to request a new async id if it's rescheduled.
            return undefined;
        };
        return AnimationFrameAction;
    }(AsyncAction_1.AsyncAction);
    exports.AnimationFrameAction = AnimationFrameAction;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/Scheduler.js", [], true, function ($__require, exports, module) {
    "use strict";
    /**
     * An execution context and a data structure to order tasks and schedule their
     * execution. Provides a notion of (potentially virtual) time, through the
     * `now()` getter method.
     *
     * Each unit of work in a Scheduler is called an {@link Action}.
     *
     * ```ts
     * class Scheduler {
     *   now(): number;
     *   schedule(work, delay?, state?): Subscription;
     * }
     * ```
     *
     * @class Scheduler
     */

    var define,
        global = this || self,
        GLOBAL = global;
    var Scheduler = function () {
        function Scheduler(SchedulerAction, now) {
            if (now === void 0) {
                now = Scheduler.now;
            }
            this.SchedulerAction = SchedulerAction;
            this.now = now;
        }
        /**
         * Schedules a function, `work`, for execution. May happen at some point in
         * the future, according to the `delay` parameter, if specified. May be passed
         * some context object, `state`, which will be passed to the `work` function.
         *
         * The given arguments will be processed an stored as an Action object in a
         * queue of actions.
         *
         * @param {function(state: ?T): ?Subscription} work A function representing a
         * task, or some unit of work to be executed by the Scheduler.
         * @param {number} [delay] Time to wait before executing the work, where the
         * time unit is implicit and defined by the Scheduler itself.
         * @param {T} [state] Some contextual data that the `work` function uses when
         * called by the Scheduler.
         * @return {Subscription} A subscription in order to be able to unsubscribe
         * the scheduled work.
         */
        Scheduler.prototype.schedule = function (work, delay, state) {
            if (delay === void 0) {
                delay = 0;
            }
            return new this.SchedulerAction(this, work).schedule(state, delay);
        };
        Scheduler.now = Date.now ? Date.now : function () {
            return +new Date();
        };
        return Scheduler;
    }();
    exports.Scheduler = Scheduler;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/scheduler/AsyncScheduler.js", ["node_modules/rxjs/Scheduler.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Scheduler_1 = $__require("node_modules/rxjs/Scheduler.js");
    var AsyncScheduler = function (_super) {
        __extends(AsyncScheduler, _super);
        function AsyncScheduler() {
            _super.apply(this, arguments);
            this.actions = [];
            /**
             * A flag to indicate whether the Scheduler is currently executing a batch of
             * queued actions.
             * @type {boolean}
             */
            this.active = false;
            /**
             * An internal ID used to track the latest asynchronous task such as those
             * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and
             * others.
             * @type {any}
             */
            this.scheduled = undefined;
        }
        AsyncScheduler.prototype.flush = function (action) {
            var actions = this.actions;
            if (this.active) {
                actions.push(action);
                return;
            }
            var error;
            this.active = true;
            do {
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            } while (action = actions.shift()); // exhaust the scheduler queue
            this.active = false;
            if (error) {
                while (action = actions.shift()) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AsyncScheduler;
    }(Scheduler_1.Scheduler);
    exports.AsyncScheduler = AsyncScheduler;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/scheduler/AnimationFrameScheduler.js", ["node_modules/rxjs/scheduler/AsyncScheduler.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var AsyncScheduler_1 = $__require("node_modules/rxjs/scheduler/AsyncScheduler.js");
    var AnimationFrameScheduler = function (_super) {
        __extends(AnimationFrameScheduler, _super);
        function AnimationFrameScheduler() {
            _super.apply(this, arguments);
        }
        AnimationFrameScheduler.prototype.flush = function () {
            this.active = true;
            this.scheduled = undefined;
            var actions = this.actions;
            var error;
            var index = -1;
            var count = actions.length;
            var action = actions.shift();
            do {
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            } while (++index < count && (action = actions.shift()));
            this.active = false;
            if (error) {
                while (++index < count && (action = actions.shift())) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AnimationFrameScheduler;
    }(AsyncScheduler_1.AsyncScheduler);
    exports.AnimationFrameScheduler = AnimationFrameScheduler;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/scheduler/animationFrame.js', ['node_modules/rxjs/scheduler/AnimationFrameAction.js', 'node_modules/rxjs/scheduler/AnimationFrameScheduler.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var AnimationFrameAction_1 = $__require('node_modules/rxjs/scheduler/AnimationFrameAction.js');
  var AnimationFrameScheduler_1 = $__require('node_modules/rxjs/scheduler/AnimationFrameScheduler.js');
  exports.animationFrame = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/Rx.js', ['node_modules/rxjs/Subject.js', 'node_modules/rxjs/Observable.js', 'node_modules/rxjs/add/observable/bindCallback.js', 'node_modules/rxjs/add/observable/bindNodeCallback.js', 'node_modules/rxjs/add/observable/combineLatest.js', 'node_modules/rxjs/add/observable/concat.js', 'node_modules/rxjs/add/observable/defer.js', 'node_modules/rxjs/add/observable/empty.js', 'node_modules/rxjs/add/observable/forkJoin.js', 'node_modules/rxjs/add/observable/from.js', 'node_modules/rxjs/add/observable/fromEvent.js', 'node_modules/rxjs/add/observable/fromEventPattern.js', 'node_modules/rxjs/add/observable/fromPromise.js', 'node_modules/rxjs/add/observable/generate.js', 'node_modules/rxjs/add/observable/if.js', 'node_modules/rxjs/add/observable/interval.js', 'node_modules/rxjs/add/observable/merge.js', 'node_modules/rxjs/add/observable/race.js', 'node_modules/rxjs/add/observable/never.js', 'node_modules/rxjs/add/observable/of.js', 'node_modules/rxjs/add/observable/onErrorResumeNext.js', 'node_modules/rxjs/add/observable/pairs.js', 'node_modules/rxjs/add/observable/range.js', 'node_modules/rxjs/add/observable/using.js', 'node_modules/rxjs/add/observable/throw.js', 'node_modules/rxjs/add/observable/timer.js', 'node_modules/rxjs/add/observable/zip.js', 'node_modules/rxjs/add/observable/dom/ajax.js', 'node_modules/rxjs/add/observable/dom/webSocket.js', 'node_modules/rxjs/add/operator/buffer.js', 'node_modules/rxjs/add/operator/bufferCount.js', 'node_modules/rxjs/add/operator/bufferTime.js', 'node_modules/rxjs/add/operator/bufferToggle.js', 'node_modules/rxjs/add/operator/bufferWhen.js', 'node_modules/rxjs/add/operator/cache.js', 'node_modules/rxjs/add/operator/catch.js', 'node_modules/rxjs/add/operator/combineAll.js', 'node_modules/rxjs/add/operator/combineLatest.js', 'node_modules/rxjs/add/operator/concat.js', 'node_modules/rxjs/add/operator/concatAll.js', 'node_modules/rxjs/add/operator/concatMap.js', 'node_modules/rxjs/add/operator/concatMapTo.js', 'node_modules/rxjs/add/operator/count.js', 'node_modules/rxjs/add/operator/dematerialize.js', 'node_modules/rxjs/add/operator/debounce.js', 'node_modules/rxjs/add/operator/debounceTime.js', 'node_modules/rxjs/add/operator/defaultIfEmpty.js', 'node_modules/rxjs/add/operator/delay.js', 'node_modules/rxjs/add/operator/delayWhen.js', 'node_modules/rxjs/add/operator/distinct.js', 'node_modules/rxjs/add/operator/distinctKey.js', 'node_modules/rxjs/add/operator/distinctUntilChanged.js', 'node_modules/rxjs/add/operator/distinctUntilKeyChanged.js', 'node_modules/rxjs/add/operator/do.js', 'node_modules/rxjs/add/operator/exhaust.js', 'node_modules/rxjs/add/operator/exhaustMap.js', 'node_modules/rxjs/add/operator/expand.js', 'node_modules/rxjs/add/operator/elementAt.js', 'node_modules/rxjs/add/operator/filter.js', 'node_modules/rxjs/add/operator/finally.js', 'node_modules/rxjs/add/operator/find.js', 'node_modules/rxjs/add/operator/findIndex.js', 'node_modules/rxjs/add/operator/first.js', 'node_modules/rxjs/add/operator/groupBy.js', 'node_modules/rxjs/add/operator/ignoreElements.js', 'node_modules/rxjs/add/operator/isEmpty.js', 'node_modules/rxjs/add/operator/audit.js', 'node_modules/rxjs/add/operator/auditTime.js', 'node_modules/rxjs/add/operator/last.js', 'node_modules/rxjs/add/operator/let.js', 'node_modules/rxjs/add/operator/every.js', 'node_modules/rxjs/add/operator/map.js', 'node_modules/rxjs/add/operator/mapTo.js', 'node_modules/rxjs/add/operator/materialize.js', 'node_modules/rxjs/add/operator/max.js', 'node_modules/rxjs/add/operator/merge.js', 'node_modules/rxjs/add/operator/mergeAll.js', 'node_modules/rxjs/add/operator/mergeMap.js', 'node_modules/rxjs/add/operator/mergeMapTo.js', 'node_modules/rxjs/add/operator/mergeScan.js', 'node_modules/rxjs/add/operator/min.js', 'node_modules/rxjs/add/operator/multicast.js', 'node_modules/rxjs/add/operator/observeOn.js', 'node_modules/rxjs/add/operator/onErrorResumeNext.js', 'node_modules/rxjs/add/operator/pairwise.js', 'node_modules/rxjs/add/operator/partition.js', 'node_modules/rxjs/add/operator/pluck.js', 'node_modules/rxjs/add/operator/publish.js', 'node_modules/rxjs/add/operator/publishBehavior.js', 'node_modules/rxjs/add/operator/publishReplay.js', 'node_modules/rxjs/add/operator/publishLast.js', 'node_modules/rxjs/add/operator/race.js', 'node_modules/rxjs/add/operator/reduce.js', 'node_modules/rxjs/add/operator/repeat.js', 'node_modules/rxjs/add/operator/repeatWhen.js', 'node_modules/rxjs/add/operator/retry.js', 'node_modules/rxjs/add/operator/retryWhen.js', 'node_modules/rxjs/add/operator/sample.js', 'node_modules/rxjs/add/operator/sampleTime.js', 'node_modules/rxjs/add/operator/scan.js', 'node_modules/rxjs/add/operator/sequenceEqual.js', 'node_modules/rxjs/add/operator/share.js', 'node_modules/rxjs/add/operator/single.js', 'node_modules/rxjs/add/operator/skip.js', 'node_modules/rxjs/add/operator/skipUntil.js', 'node_modules/rxjs/add/operator/skipWhile.js', 'node_modules/rxjs/add/operator/startWith.js', 'node_modules/rxjs/add/operator/subscribeOn.js', 'node_modules/rxjs/add/operator/switch.js', 'node_modules/rxjs/add/operator/switchMap.js', 'node_modules/rxjs/add/operator/switchMapTo.js', 'node_modules/rxjs/add/operator/take.js', 'node_modules/rxjs/add/operator/takeLast.js', 'node_modules/rxjs/add/operator/takeUntil.js', 'node_modules/rxjs/add/operator/takeWhile.js', 'node_modules/rxjs/add/operator/throttle.js', 'node_modules/rxjs/add/operator/throttleTime.js', 'node_modules/rxjs/add/operator/timeInterval.js', 'node_modules/rxjs/add/operator/timeout.js', 'node_modules/rxjs/add/operator/timeoutWith.js', 'node_modules/rxjs/add/operator/timestamp.js', 'node_modules/rxjs/add/operator/toArray.js', 'node_modules/rxjs/add/operator/toPromise.js', 'node_modules/rxjs/add/operator/window.js', 'node_modules/rxjs/add/operator/windowCount.js', 'node_modules/rxjs/add/operator/windowTime.js', 'node_modules/rxjs/add/operator/windowToggle.js', 'node_modules/rxjs/add/operator/windowWhen.js', 'node_modules/rxjs/add/operator/withLatestFrom.js', 'node_modules/rxjs/add/operator/zip.js', 'node_modules/rxjs/add/operator/zipAll.js', 'node_modules/rxjs/Subscription.js', 'node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/AsyncSubject.js', 'node_modules/rxjs/ReplaySubject.js', 'node_modules/rxjs/BehaviorSubject.js', 'node_modules/rxjs/observable/MulticastObservable.js', 'node_modules/rxjs/observable/ConnectableObservable.js', 'node_modules/rxjs/Notification.js', 'node_modules/rxjs/util/EmptyError.js', 'node_modules/rxjs/util/ArgumentOutOfRangeError.js', 'node_modules/rxjs/util/ObjectUnsubscribedError.js', 'node_modules/rxjs/util/UnsubscriptionError.js', 'node_modules/rxjs/operator/timeInterval.js', 'node_modules/rxjs/operator/timestamp.js', 'node_modules/rxjs/testing/TestScheduler.js', 'node_modules/rxjs/scheduler/VirtualTimeScheduler.js', 'node_modules/rxjs/observable/dom/AjaxObservable.js', 'node_modules/rxjs/scheduler/asap.js', 'node_modules/rxjs/scheduler/async.js', 'node_modules/rxjs/scheduler/queue.js', 'node_modules/rxjs/scheduler/animationFrame.js', 'node_modules/rxjs/symbol/rxSubscriber.js', 'node_modules/rxjs/symbol/iterator.js', 'node_modules/rxjs/symbol/observable.js'], true, function ($__require, exports, module) {
  "use strict";
  /* tslint:disable:no-unused-variable */
  // Subject imported before Observable to bypass circular dependency issue since
  // Subject extends Observable and Observable references Subject in it's
  // definition

  var define,
      global = this || self,
      GLOBAL = global;
  var Subject_1 = $__require('node_modules/rxjs/Subject.js');
  exports.Subject = Subject_1.Subject;
  /* tslint:enable:no-unused-variable */
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  exports.Observable = Observable_1.Observable;
  // statics
  /* tslint:disable:no-use-before-declare */
  $__require('node_modules/rxjs/add/observable/bindCallback.js');
  $__require('node_modules/rxjs/add/observable/bindNodeCallback.js');
  $__require('node_modules/rxjs/add/observable/combineLatest.js');
  $__require('node_modules/rxjs/add/observable/concat.js');
  $__require('node_modules/rxjs/add/observable/defer.js');
  $__require('node_modules/rxjs/add/observable/empty.js');
  $__require('node_modules/rxjs/add/observable/forkJoin.js');
  $__require('node_modules/rxjs/add/observable/from.js');
  $__require('node_modules/rxjs/add/observable/fromEvent.js');
  $__require('node_modules/rxjs/add/observable/fromEventPattern.js');
  $__require('node_modules/rxjs/add/observable/fromPromise.js');
  $__require('node_modules/rxjs/add/observable/generate.js');
  $__require('node_modules/rxjs/add/observable/if.js');
  $__require('node_modules/rxjs/add/observable/interval.js');
  $__require('node_modules/rxjs/add/observable/merge.js');
  $__require('node_modules/rxjs/add/observable/race.js');
  $__require('node_modules/rxjs/add/observable/never.js');
  $__require('node_modules/rxjs/add/observable/of.js');
  $__require('node_modules/rxjs/add/observable/onErrorResumeNext.js');
  $__require('node_modules/rxjs/add/observable/pairs.js');
  $__require('node_modules/rxjs/add/observable/range.js');
  $__require('node_modules/rxjs/add/observable/using.js');
  $__require('node_modules/rxjs/add/observable/throw.js');
  $__require('node_modules/rxjs/add/observable/timer.js');
  $__require('node_modules/rxjs/add/observable/zip.js');
  //dom
  $__require('node_modules/rxjs/add/observable/dom/ajax.js');
  $__require('node_modules/rxjs/add/observable/dom/webSocket.js');
  //operators
  $__require('node_modules/rxjs/add/operator/buffer.js');
  $__require('node_modules/rxjs/add/operator/bufferCount.js');
  $__require('node_modules/rxjs/add/operator/bufferTime.js');
  $__require('node_modules/rxjs/add/operator/bufferToggle.js');
  $__require('node_modules/rxjs/add/operator/bufferWhen.js');
  $__require('node_modules/rxjs/add/operator/cache.js');
  $__require('node_modules/rxjs/add/operator/catch.js');
  $__require('node_modules/rxjs/add/operator/combineAll.js');
  $__require('node_modules/rxjs/add/operator/combineLatest.js');
  $__require('node_modules/rxjs/add/operator/concat.js');
  $__require('node_modules/rxjs/add/operator/concatAll.js');
  $__require('node_modules/rxjs/add/operator/concatMap.js');
  $__require('node_modules/rxjs/add/operator/concatMapTo.js');
  $__require('node_modules/rxjs/add/operator/count.js');
  $__require('node_modules/rxjs/add/operator/dematerialize.js');
  $__require('node_modules/rxjs/add/operator/debounce.js');
  $__require('node_modules/rxjs/add/operator/debounceTime.js');
  $__require('node_modules/rxjs/add/operator/defaultIfEmpty.js');
  $__require('node_modules/rxjs/add/operator/delay.js');
  $__require('node_modules/rxjs/add/operator/delayWhen.js');
  $__require('node_modules/rxjs/add/operator/distinct.js');
  $__require('node_modules/rxjs/add/operator/distinctKey.js');
  $__require('node_modules/rxjs/add/operator/distinctUntilChanged.js');
  $__require('node_modules/rxjs/add/operator/distinctUntilKeyChanged.js');
  $__require('node_modules/rxjs/add/operator/do.js');
  $__require('node_modules/rxjs/add/operator/exhaust.js');
  $__require('node_modules/rxjs/add/operator/exhaustMap.js');
  $__require('node_modules/rxjs/add/operator/expand.js');
  $__require('node_modules/rxjs/add/operator/elementAt.js');
  $__require('node_modules/rxjs/add/operator/filter.js');
  $__require('node_modules/rxjs/add/operator/finally.js');
  $__require('node_modules/rxjs/add/operator/find.js');
  $__require('node_modules/rxjs/add/operator/findIndex.js');
  $__require('node_modules/rxjs/add/operator/first.js');
  $__require('node_modules/rxjs/add/operator/groupBy.js');
  $__require('node_modules/rxjs/add/operator/ignoreElements.js');
  $__require('node_modules/rxjs/add/operator/isEmpty.js');
  $__require('node_modules/rxjs/add/operator/audit.js');
  $__require('node_modules/rxjs/add/operator/auditTime.js');
  $__require('node_modules/rxjs/add/operator/last.js');
  $__require('node_modules/rxjs/add/operator/let.js');
  $__require('node_modules/rxjs/add/operator/every.js');
  $__require('node_modules/rxjs/add/operator/map.js');
  $__require('node_modules/rxjs/add/operator/mapTo.js');
  $__require('node_modules/rxjs/add/operator/materialize.js');
  $__require('node_modules/rxjs/add/operator/max.js');
  $__require('node_modules/rxjs/add/operator/merge.js');
  $__require('node_modules/rxjs/add/operator/mergeAll.js');
  $__require('node_modules/rxjs/add/operator/mergeMap.js');
  $__require('node_modules/rxjs/add/operator/mergeMapTo.js');
  $__require('node_modules/rxjs/add/operator/mergeScan.js');
  $__require('node_modules/rxjs/add/operator/min.js');
  $__require('node_modules/rxjs/add/operator/multicast.js');
  $__require('node_modules/rxjs/add/operator/observeOn.js');
  $__require('node_modules/rxjs/add/operator/onErrorResumeNext.js');
  $__require('node_modules/rxjs/add/operator/pairwise.js');
  $__require('node_modules/rxjs/add/operator/partition.js');
  $__require('node_modules/rxjs/add/operator/pluck.js');
  $__require('node_modules/rxjs/add/operator/publish.js');
  $__require('node_modules/rxjs/add/operator/publishBehavior.js');
  $__require('node_modules/rxjs/add/operator/publishReplay.js');
  $__require('node_modules/rxjs/add/operator/publishLast.js');
  $__require('node_modules/rxjs/add/operator/race.js');
  $__require('node_modules/rxjs/add/operator/reduce.js');
  $__require('node_modules/rxjs/add/operator/repeat.js');
  $__require('node_modules/rxjs/add/operator/repeatWhen.js');
  $__require('node_modules/rxjs/add/operator/retry.js');
  $__require('node_modules/rxjs/add/operator/retryWhen.js');
  $__require('node_modules/rxjs/add/operator/sample.js');
  $__require('node_modules/rxjs/add/operator/sampleTime.js');
  $__require('node_modules/rxjs/add/operator/scan.js');
  $__require('node_modules/rxjs/add/operator/sequenceEqual.js');
  $__require('node_modules/rxjs/add/operator/share.js');
  $__require('node_modules/rxjs/add/operator/single.js');
  $__require('node_modules/rxjs/add/operator/skip.js');
  $__require('node_modules/rxjs/add/operator/skipUntil.js');
  $__require('node_modules/rxjs/add/operator/skipWhile.js');
  $__require('node_modules/rxjs/add/operator/startWith.js');
  $__require('node_modules/rxjs/add/operator/subscribeOn.js');
  $__require('node_modules/rxjs/add/operator/switch.js');
  $__require('node_modules/rxjs/add/operator/switchMap.js');
  $__require('node_modules/rxjs/add/operator/switchMapTo.js');
  $__require('node_modules/rxjs/add/operator/take.js');
  $__require('node_modules/rxjs/add/operator/takeLast.js');
  $__require('node_modules/rxjs/add/operator/takeUntil.js');
  $__require('node_modules/rxjs/add/operator/takeWhile.js');
  $__require('node_modules/rxjs/add/operator/throttle.js');
  $__require('node_modules/rxjs/add/operator/throttleTime.js');
  $__require('node_modules/rxjs/add/operator/timeInterval.js');
  $__require('node_modules/rxjs/add/operator/timeout.js');
  $__require('node_modules/rxjs/add/operator/timeoutWith.js');
  $__require('node_modules/rxjs/add/operator/timestamp.js');
  $__require('node_modules/rxjs/add/operator/toArray.js');
  $__require('node_modules/rxjs/add/operator/toPromise.js');
  $__require('node_modules/rxjs/add/operator/window.js');
  $__require('node_modules/rxjs/add/operator/windowCount.js');
  $__require('node_modules/rxjs/add/operator/windowTime.js');
  $__require('node_modules/rxjs/add/operator/windowToggle.js');
  $__require('node_modules/rxjs/add/operator/windowWhen.js');
  $__require('node_modules/rxjs/add/operator/withLatestFrom.js');
  $__require('node_modules/rxjs/add/operator/zip.js');
  $__require('node_modules/rxjs/add/operator/zipAll.js');
  /* tslint:disable:no-unused-variable */
  var Subscription_1 = $__require('node_modules/rxjs/Subscription.js');
  exports.Subscription = Subscription_1.Subscription;
  var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
  exports.Subscriber = Subscriber_1.Subscriber;
  var AsyncSubject_1 = $__require('node_modules/rxjs/AsyncSubject.js');
  exports.AsyncSubject = AsyncSubject_1.AsyncSubject;
  var ReplaySubject_1 = $__require('node_modules/rxjs/ReplaySubject.js');
  exports.ReplaySubject = ReplaySubject_1.ReplaySubject;
  var BehaviorSubject_1 = $__require('node_modules/rxjs/BehaviorSubject.js');
  exports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;
  var MulticastObservable_1 = $__require('node_modules/rxjs/observable/MulticastObservable.js');
  exports.MulticastObservable = MulticastObservable_1.MulticastObservable;
  var ConnectableObservable_1 = $__require('node_modules/rxjs/observable/ConnectableObservable.js');
  exports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;
  var Notification_1 = $__require('node_modules/rxjs/Notification.js');
  exports.Notification = Notification_1.Notification;
  var EmptyError_1 = $__require('node_modules/rxjs/util/EmptyError.js');
  exports.EmptyError = EmptyError_1.EmptyError;
  var ArgumentOutOfRangeError_1 = $__require('node_modules/rxjs/util/ArgumentOutOfRangeError.js');
  exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
  var ObjectUnsubscribedError_1 = $__require('node_modules/rxjs/util/ObjectUnsubscribedError.js');
  exports.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;
  var UnsubscriptionError_1 = $__require('node_modules/rxjs/util/UnsubscriptionError.js');
  exports.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;
  var timeInterval_1 = $__require('node_modules/rxjs/operator/timeInterval.js');
  exports.TimeInterval = timeInterval_1.TimeInterval;
  var timestamp_1 = $__require('node_modules/rxjs/operator/timestamp.js');
  exports.Timestamp = timestamp_1.Timestamp;
  var TestScheduler_1 = $__require('node_modules/rxjs/testing/TestScheduler.js');
  exports.TestScheduler = TestScheduler_1.TestScheduler;
  var VirtualTimeScheduler_1 = $__require('node_modules/rxjs/scheduler/VirtualTimeScheduler.js');
  exports.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;
  var AjaxObservable_1 = $__require('node_modules/rxjs/observable/dom/AjaxObservable.js');
  exports.AjaxResponse = AjaxObservable_1.AjaxResponse;
  exports.AjaxError = AjaxObservable_1.AjaxError;
  exports.AjaxTimeoutError = AjaxObservable_1.AjaxTimeoutError;
  var asap_1 = $__require('node_modules/rxjs/scheduler/asap.js');
  var async_1 = $__require('node_modules/rxjs/scheduler/async.js');
  var queue_1 = $__require('node_modules/rxjs/scheduler/queue.js');
  var animationFrame_1 = $__require('node_modules/rxjs/scheduler/animationFrame.js');
  var rxSubscriber_1 = $__require('node_modules/rxjs/symbol/rxSubscriber.js');
  var iterator_1 = $__require('node_modules/rxjs/symbol/iterator.js');
  var observable_1 = $__require('node_modules/rxjs/symbol/observable.js');
  /* tslint:enable:no-unused-variable */
  /**
   * @typedef {Object} Rx.Scheduler
   * @property {Scheduler} queue Schedules on a queue in the current event frame
   * (trampoline scheduler). Use this for iteration operations.
   * @property {Scheduler} asap Schedules on the micro task queue, which uses the
   * fastest transport mechanism available, either Node.js' `process.nextTick()`
   * or Web Worker MessageChannel or setTimeout or others. Use this for
   * asynchronous conversions.
   * @property {Scheduler} async Schedules work with `setInterval`. Use this for
   * time-based operations.
   * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.
   * Use this for synchronizing with the platform's painting
   */
  var Scheduler = {
    asap: asap_1.asap,
    queue: queue_1.queue,
    animationFrame: animationFrame_1.animationFrame,
    async: async_1.async
  };
  exports.Scheduler = Scheduler;
  /**
   * @typedef {Object} Rx.Symbol
   * @property {Symbol|string} rxSubscriber A symbol to use as a property name to
   * retrieve an "Rx safe" Observer from an object. "Rx safety" can be defined as
   * an object that has all of the traits of an Rx Subscriber, including the
   * ability to add and remove subscriptions to the subscription chain and
   * guarantees involving event triggering (can't "next" after unsubscription,
   * etc).
   * @property {Symbol|string} observable A symbol to use as a property name to
   * retrieve an Observable as defined by the [ECMAScript "Observable" spec](https://github.com/zenparsing/es-observable).
   * @property {Symbol|string} iterator The ES6 symbol to use as a property name
   * to retrieve an iterator from an object.
   */
  var Symbol = {
    rxSubscriber: rxSubscriber_1.$$rxSubscriber,
    observable: observable_1.$$observable,
    iterator: iterator_1.$$iterator
  };
  exports.Symbol = Symbol;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/ui-router-ng2/_bundles/ui-router-ng2.js', ['node_modules/@angular/core/bundles/core.umd.js', 'node_modules/rxjs/Rx.js', 'node_modules/@angular/common/bundles/common.umd.js'], true, function ($__require, exports, module) {
	var define,
	    global = this || self,
	    GLOBAL = global;
	/*!
  * State-based routing for Angular 2
  * @version v1.0.0-beta.3
  * @link https://ui-router.github.io
  * @license MIT License, http://www.opensource.org/licenses/MIT
  */
	(function webpackUniversalModuleDefinition(root, factory) {
		if (typeof exports === 'object' && typeof module === 'object') module.exports = factory($__require('node_modules/@angular/core/bundles/core.umd.js'), $__require('node_modules/rxjs/Rx.js'), $__require('node_modules/@angular/common/bundles/common.umd.js'));else if (typeof define === 'function' && define.amd) define("ui-router-ng2", ["@angular/core", "rxjs/Rx", "@angular/common"], factory);else if (typeof exports === 'object') exports["ui-router-ng2"] = factory($__require('node_modules/@angular/core/bundles/core.umd.js'), $__require('node_modules/rxjs/Rx.js'), $__require('node_modules/@angular/common/bundles/common.umd.js'));else root["ui-router-ng2"] = factory(root["@angular/core"], root["rxjs/Rx"], root["@angular/common"]);
	})(this, function (__WEBPACK_EXTERNAL_MODULE_55__, __WEBPACK_EXTERNAL_MODULE_64__, __WEBPACK_EXTERNAL_MODULE_67__) {
		return (/******/function (modules) {
				// webpackBootstrap
				/******/ // The module cache
				/******/var installedModules = {};
				/******/
				/******/ // The require function
				/******/function __webpack_require__(moduleId) {
					/******/
					/******/ // Check if module is in cache
					/******/if (installedModules[moduleId])
						/******/return installedModules[moduleId].exports;
					/******/
					/******/ // Create a new module (and put it into the cache)
					/******/var module = installedModules[moduleId] = {
						/******/exports: {},
						/******/id: moduleId,
						/******/loaded: false
						/******/ };
					/******/
					/******/ // Execute the module function
					/******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
					/******/
					/******/ // Flag the module as loaded
					/******/module.loaded = true;
					/******/
					/******/ // Return the exports of the module
					/******/return module.exports;
					/******/
				}
				/******/
				/******/
				/******/ // expose the modules object (__webpack_modules__)
				/******/__webpack_require__.m = modules;
				/******/
				/******/ // expose the module cache
				/******/__webpack_require__.c = installedModules;
				/******/
				/******/ // __webpack_public_path__
				/******/__webpack_require__.p = "";
				/******/
				/******/ // Load entry module and return exports
				/******/return __webpack_require__(0);
				/******/
			}(
			/************************************************************************/
			/******/[
			/* 0 */
			/***/function (module, exports, __webpack_require__) {

				/**
     * Main entry point for angular 2.x build
     * @module ng2
     */
				/** for typedoc */
				"use strict";

				function __export(m) {
					for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
				}
				__export(__webpack_require__(1));
				__webpack_require__(53);
				__export(__webpack_require__(54));
				__export(__webpack_require__(56));
				__export(__webpack_require__(71));
				__export(__webpack_require__(68));
				__export(__webpack_require__(70));
				__export(__webpack_require__(58));
				__export(__webpack_require__(62));
				__export(__webpack_require__(57));
				__export(__webpack_require__(69));

				/***/
			},
			/* 1 */
			/***/function (module, exports, __webpack_require__) {

				/** @module common */ /** */
				"use strict";

				function __export(m) {
					for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
				}
				__export(__webpack_require__(2));
				__export(__webpack_require__(46));
				__export(__webpack_require__(47));
				__export(__webpack_require__(48));
				__export(__webpack_require__(49));
				__export(__webpack_require__(50));
				__export(__webpack_require__(51));
				__export(__webpack_require__(52));
				__export(__webpack_require__(44));
				var router_1 = __webpack_require__(25);
				exports.UIRouter = router_1.UIRouter;

				/***/
			},
			/* 2 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				function __export(m) {
					for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
				}
				/** @module common */ /** for typedoc */
				__export(__webpack_require__(3));
				__export(__webpack_require__(6));
				__export(__webpack_require__(7));
				__export(__webpack_require__(5));
				__export(__webpack_require__(4));
				__export(__webpack_require__(8));
				__export(__webpack_require__(9));
				__export(__webpack_require__(12));

				/***/
			},
			/* 3 */
			/***/function (module, exports, __webpack_require__) {

				/**
     * Random utility functions used in the UI-Router code
     *
     * @preferred @module common
     */ /** for typedoc */
				"use strict";

				var predicates_1 = __webpack_require__(4);
				var hof_1 = __webpack_require__(5);
				var coreservices_1 = __webpack_require__(6);
				var w = typeof window === 'undefined' ? {} : window;
				var angular = w.angular || {};
				exports.fromJson = angular.fromJson || JSON.parse.bind(JSON);
				exports.toJson = angular.toJson || JSON.stringify.bind(JSON);
				exports.copy = angular.copy || _copy;
				exports.forEach = angular.forEach || _forEach;
				exports.extend = angular.extend || _extend;
				exports.equals = angular.equals || _equals;
				exports.identity = function (x) {
					return x;
				};
				exports.noop = function () {
					return undefined;
				};
				/**
     * Binds and copies functions onto an object
     *
     * Takes functions from the 'from' object, binds those functions to the _this object, and puts the bound functions
     * on the 'to' object.
     *
     * This example creates an new class instance whose functions are prebound to the new'd object.
     * @example
     * ```
     *
     * class Foo {
     *   constructor(data) {
     *     // Binds all functions from Foo.prototype to 'this',
     *     // then copies them to 'this'
     *     bindFunctions(Foo.prototype, this, this);
     *     this.data = data;
     *   }
     *
     *   log() {
     *     console.log(this.data);
     *   }
     * }
     *
     * let myFoo = new Foo([1,2,3]);
     * var logit = myFoo.log;
     * logit(); // logs [1, 2, 3] from the myFoo 'this' instance
     * ```
     *
     * This example creates a bound version of a service function, and copies it to another object
     * @example
     * ```
     *
     * var SomeService = {
     *   this.data = [3, 4, 5];
     *   this.log = function() {
     *     console.log(this.data);
     *   }
     * }
     *
     * // Constructor fn
     * function OtherThing() {
     *   // Binds all functions from SomeService to SomeService,
     *   // then copies them to 'this'
     *   bindFunctions(SomeService, this, SomeService);
     * }
     *
     * let myOtherThing = new OtherThing();
     * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'
     * ```
     *
     * @param from The object which contains the functions to be bound
     * @param to The object which will receive the bound functions
     * @param bindTo The object which the functions will be bound to
     * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)
     */
				function bindFunctions(from, to, bindTo, fnNames) {
					if (fnNames === void 0) {
						fnNames = Object.keys(from);
					}
					return fnNames.filter(function (name) {
						return typeof from[name] === 'function';
					}).forEach(function (name) {
						return to[name] = from[name].bind(bindTo);
					});
				}
				exports.bindFunctions = bindFunctions;
				/**
     * prototypal inheritance helper.
     * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it
     */
				exports.inherit = function (parent, extra) {
					return exports.extend(new (exports.extend(function () {}, { prototype: parent }))(), extra);
				};
				/**
     * Given an arguments object, converts the arguments at index idx and above to an array.
     * This is similar to es6 rest parameters.
     *
     * Optionally, the argument at index idx may itself already be an array.
     *
     * For example,
     * given either:
     *        arguments = [ obj, "foo", "bar" ]
     * or:
     *        arguments = [ obj, ["foo", "bar"] ]
     * then:
     *        restArgs(arguments, 1) == ["foo", "bar"]
     *
     * This allows functions like pick() to be implemented such that it allows either a bunch
     * of string arguments (like es6 rest parameters), or a single array of strings:
     *
     * given:
     *        var obj = { foo: 1, bar: 2, baz: 3 };
     * then:
     *        pick(obj, "foo", "bar");   // returns { foo: 1, bar: 2 }
     *        pick(obj, ["foo", "bar"]); // returns { foo: 1, bar: 2 }
     */
				var restArgs = function (args, idx) {
					if (idx === void 0) {
						idx = 0;
					}
					return Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(args, idx));
				};
				/** Given an array, returns true if the object is found in the array, (using indexOf) */
				exports.inArray = function (array, obj) {
					return array.indexOf(obj) !== -1;
				};
				/** Given an array, and an item, if the item is found in the array, it removes it (in-place).  The same array is returned */
				exports.removeFrom = hof_1.curry(function (array, obj) {
					var idx = array.indexOf(obj);
					if (idx >= 0) array.splice(idx, 1);
					return array;
				});
				/**
     * Applies a set of defaults to an options object.  The options object is filtered
     * to only those properties of the objects in the defaultsList.
     * Earlier objects in the defaultsList take precedence when applying defaults.
     */
				function defaults(opts) {
					if (opts === void 0) {
						opts = {};
					}
					var defaultsList = [];
					for (var _i = 1; _i < arguments.length; _i++) {
						defaultsList[_i - 1] = arguments[_i];
					}
					var defaults = merge.apply(null, [{}].concat(defaultsList));
					return exports.extend({}, defaults, pick(opts || {}, Object.keys(defaults)));
				}
				exports.defaults = defaults;
				/**
     * Merges properties from the list of objects to the destination object.
     * If a property already exists in the destination object, then it is not overwritten.
     */
				function merge(dst) {
					var objs = [];
					for (var _i = 1; _i < arguments.length; _i++) {
						objs[_i - 1] = arguments[_i];
					}
					exports.forEach(objs, function (obj) {
						exports.forEach(obj, function (value, key) {
							if (!dst.hasOwnProperty(key)) dst[key] = value;
						});
					});
					return dst;
				}
				exports.merge = merge;
				/** Reduce function that merges each element of the list into a single object, using extend */
				exports.mergeR = function (memo, item) {
					return exports.extend(memo, item);
				};
				/**
     * Finds the common ancestor path between two states.
     *
     * @param {Object} first The first state.
     * @param {Object} second The second state.
     * @return {Array} Returns an array of state names in descending order, not including the root.
     */
				function ancestors(first, second) {
					var path = [];
					for (var n in first.path) {
						if (first.path[n] !== second.path[n]) break;
						path.push(first.path[n]);
					}
					return path;
				}
				exports.ancestors = ancestors;
				/**
     * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
     *
     * @param {Object} a The first object.
     * @param {Object} b The second object.
     * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
     *                     it defaults to the list of keys in `a`.
     * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
     */
				function equalForKeys(a, b, keys) {
					if (keys === void 0) {
						keys = Object.keys(a);
					}
					for (var i = 0; i < keys.length; i++) {
						var k = keys[i];
						if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized
					}
					return true;
				}
				exports.equalForKeys = equalForKeys;
				function pickOmitImpl(predicate, obj) {
					var keys = [];
					for (var _i = 2; _i < arguments.length; _i++) {
						keys[_i - 2] = arguments[_i];
					}
					var objCopy = {};
					for (var key in obj) {
						if (predicate(keys, key)) objCopy[key] = obj[key];
					}
					return objCopy;
				}
				/** Return a copy of the object only containing the whitelisted properties. */
				function pick(obj) {
					return pickOmitImpl.apply(null, [exports.inArray].concat(restArgs(arguments)));
				}
				exports.pick = pick;
				/** Return a copy of the object omitting the blacklisted properties. */
				function omit(obj) {
					var notInArray = function (array, item) {
						return !exports.inArray(array, item);
					};
					return pickOmitImpl.apply(null, [notInArray].concat(restArgs(arguments)));
				}
				exports.omit = omit;
				/**
     * Maps an array, or object to a property (by name)
     */
				function pluck(collection, propName) {
					return map(collection, hof_1.prop(propName));
				}
				exports.pluck = pluck;
				/** Filters an Array or an Object's properties based on a predicate */
				function filter(collection, callback) {
					var arr = predicates_1.isArray(collection),
					    result = arr ? [] : {};
					var accept = arr ? function (x) {
						return result.push(x);
					} : function (x, key) {
						return result[key] = x;
					};
					exports.forEach(collection, function (item, i) {
						if (callback(item, i)) accept(item, i);
					});
					return result;
				}
				exports.filter = filter;
				/** Finds an object from an array, or a property of an object, that matches a predicate */
				function find(collection, callback) {
					var result;
					exports.forEach(collection, function (item, i) {
						if (result) return;
						if (callback(item, i)) result = item;
					});
					return result;
				}
				exports.find = find;
				/** Given an object, returns a new object, where each property is transformed by the callback function */
				exports.mapObj = map;
				/** Maps an array or object properties using a callback function */
				function map(collection, callback) {
					var result = predicates_1.isArray(collection) ? [] : {};
					exports.forEach(collection, function (item, i) {
						return result[i] = callback(item, i);
					});
					return result;
				}
				exports.map = map;
				/**
     * Given an object, return its enumerable property values
     *
     * @example
     * ```
     *
     * let foo = { a: 1, b: 2, c: 3 }
     * let vals = values(foo); // [ 1, 2, 3 ]
     * ```
     */
				exports.values = function (obj) {
					return Object.keys(obj).map(function (key) {
						return obj[key];
					});
				};
				/**
     * Reduce function that returns true if all of the values are truthy.
     *
     * @example
     * ```
     *
     * let vals = [ 1, true, {}, "hello world"];
     * vals.reduce(allTrueR, true); // true
     *
     * vals.push(0);
     * vals.reduce(allTrueR, true); // false
     * ```
     */
				exports.allTrueR = function (memo, elem) {
					return memo && elem;
				};
				/**
     * Reduce function that returns true if any of the values are truthy.
     *
     *  * @example
     * ```
     *
     * let vals = [ 0, null, undefined ];
     * vals.reduce(anyTrueR, true); // false
     *
     * vals.push("hello world");
     * vals.reduce(anyTrueR, true); // true
     * ```
     */
				exports.anyTrueR = function (memo, elem) {
					return memo || elem;
				};
				/**
     * Reduce function which un-nests a single level of arrays
     * @example
     * ```
     *
     * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];
     * input.reduce(unnestR, []) // [ "a", "b", "c", "d", [ "double, "nested" ] ]
     * ```
     */
				exports.unnestR = function (memo, elem) {
					return memo.concat(elem);
				};
				/**
     * Reduce function which recursively un-nests all arrays
     *
     * @example
     * ```
     *
     * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];
     * input.reduce(unnestR, []) // [ "a", "b", "c", "d", "double, "nested" ]
     * ```
     */
				exports.flattenR = function (memo, elem) {
					return predicates_1.isArray(elem) ? memo.concat(elem.reduce(exports.flattenR, [])) : pushR(memo, elem);
				};
				/**
     * Reduce function that pushes an object to an array, then returns the array.
     * Mostly just for [[flattenR]] and [[uniqR]]
     */
				function pushR(arr, obj) {
					arr.push(obj);
					return arr;
				}
				exports.pushR = pushR;
				/** Reduce function that filters out duplicates */
				exports.uniqR = function (acc, token) {
					return exports.inArray(acc, token) ? acc : pushR(acc, token);
				};
				/**
     * Return a new array with a single level of arrays unnested.
     *
     * @example
     * ```
     *
     * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];
     * unnest(input) // [ "a", "b", "c", "d", [ "double, "nested" ] ]
     * ```
     */
				exports.unnest = function (arr) {
					return arr.reduce(exports.unnestR, []);
				};
				/**
     * Return a completely flattened version of an array.
     *
     * @example
     * ```
     *
     * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];
     * flatten(input) // [ "a", "b", "c", "d", "double, "nested" ]
     * ```
     */
				exports.flatten = function (arr) {
					return arr.reduce(exports.flattenR, []);
				};
				/**
     * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.
     * @example
     * ```
     *
     * let isNumber = (obj) => typeof(obj) === 'number';
     * let allNumbers = [ 1, 2, 3, 4, 5 ];
     * allNumbers.filter(assertPredicate(isNumber)); //OK
     *
     * let oneString = [ 1, 2, 3, 4, "5" ];
     * oneString.filter(assertPredicate(isNumber, "Not all numbers")); // throws Error(""Not all numbers"");
     * ```
     */
				function assertPredicate(predicate, errMsg) {
					if (errMsg === void 0) {
						errMsg = "assert failure";
					}
					return function (obj) {
						if (!predicate(obj)) {
							throw new Error(predicates_1.isFunction(errMsg) ? errMsg(obj) : errMsg);
						}
						return true;
					};
				}
				exports.assertPredicate = assertPredicate;
				/**
     * Like _.pairs: Given an object, returns an array of key/value pairs
     *
     * @example
     * ```
     *
     * pairs({ foo: "FOO", bar: "BAR }) // [ [ "foo", "FOO" ], [ "bar": "BAR" ] ]
     * ```
     */
				exports.pairs = function (obj) {
					return Object.keys(obj).map(function (key) {
						return [key, obj[key]];
					});
				};
				/**
     * Given two or more parallel arrays, returns an array of tuples where
     * each tuple is composed of [ a[i], b[i], ... z[i] ]
     *
     * @example
     * ```
     *
     * let foo = [ 0, 2, 4, 6 ];
     * let bar = [ 1, 3, 5, 7 ];
     * let baz = [ 10, 30, 50, 70 ];
     * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]
     * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]
     * ```
     */
				function arrayTuples() {
					var arrayArgs = [];
					for (var _i = 0; _i < arguments.length; _i++) {
						arrayArgs[_i - 0] = arguments[_i];
					}
					if (arrayArgs.length === 0) return [];
					var length = arrayArgs.reduce(function (min, arr) {
						return Math.min(arr.length, min);
					}, 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER
					return Array.apply(null, Array(length)).map(function (ignored, idx) {
						return arrayArgs.map(function (arr) {
							return arr[idx];
						});
					});
				}
				exports.arrayTuples = arrayTuples;
				/**
     * Reduce function which builds an object from an array of [key, value] pairs.
     *
     * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.
     *
     * Each keyValueTuple should be an array with values [ key: string, value: any ]
     *
     * @example
     * ```
     *
     * var pairs = [ ["fookey", "fooval"], ["barkey", "barval"] ]
     *
     * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})
     * // pairsToObj == { fookey: "fooval", barkey: "barval" }
     *
     * // Or, more simply:
     * var pairsToObj = pairs.reduce(applyPairs, {})
     * // pairsToObj == { fookey: "fooval", barkey: "barval" }
     * ```
     */
				function applyPairs(memo, keyValTuple) {
					var key, value;
					if (predicates_1.isArray(keyValTuple)) key = keyValTuple[0], value = keyValTuple[1];
					if (!predicates_1.isString(key)) throw new Error("invalid parameters to applyPairs");
					memo[key] = value;
					return memo;
				}
				exports.applyPairs = applyPairs;
				/** Get the last element of an array */
				function tail(arr) {
					return arr.length && arr[arr.length - 1] || undefined;
				}
				exports.tail = tail;
				/**
     * shallow copy from src to dest
     *
     * note: This is a shallow copy, while angular.copy is a deep copy.
     * ui-router uses `copy` only to make copies of state parameters.
     */
				function _copy(src, dest) {
					if (dest) Object.keys(dest).forEach(function (key) {
						return delete dest[key];
					});
					if (!dest) dest = {};
					return exports.extend(dest, src);
				}
				/** Naive forEach implementation works with Objects or Arrays */
				function _forEach(obj, cb, _this) {
					if (predicates_1.isArray(obj)) return obj.forEach(cb, _this);
					Object.keys(obj).forEach(function (key) {
						return cb(obj[key], key);
					});
				}
				function _copyProps(to, from) {
					Object.keys(from).forEach(function (key) {
						return to[key] = from[key];
					});
					return to;
				}
				function _extend(toObj) {
					return restArgs(arguments, 1).filter(exports.identity).reduce(_copyProps, toObj);
				}
				function _equals(o1, o2) {
					if (o1 === o2) return true;
					if (o1 === null || o2 === null) return false;
					if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
					var t1 = typeof o1,
					    t2 = typeof o2;
					if (t1 !== t2 || t1 !== 'object') return false;
					var tup = [o1, o2];
					if (hof_1.all(predicates_1.isArray)(tup)) return _arraysEq(o1, o2);
					if (hof_1.all(predicates_1.isDate)(tup)) return o1.getTime() === o2.getTime();
					if (hof_1.all(predicates_1.isRegExp)(tup)) return o1.toString() === o2.toString();
					if (hof_1.all(predicates_1.isFunction)(tup)) return true; // meh
					var predicates = [predicates_1.isFunction, predicates_1.isArray, predicates_1.isDate, predicates_1.isRegExp];
					if (predicates.map(hof_1.any).reduce(function (b, fn) {
						return b || !!fn(tup);
					}, false)) return false;
					var key,
					    keys = {};
					for (key in o1) {
						if (!_equals(o1[key], o2[key])) return false;
						keys[key] = true;
					}
					for (key in o2) {
						if (!keys[key]) return false;
					}
					return true;
				}
				function _arraysEq(a1, a2) {
					if (a1.length !== a2.length) return false;
					return arrayTuples(a1, a2).reduce(function (b, t) {
						return b && _equals(t[0], t[1]);
					}, true);
				}
				// issue #2676
				exports.silenceUncaughtInPromise = function (promise) {
					return promise.catch(function (e) {
						return 0;
					}) && promise;
				};
				exports.silentRejection = function (error) {
					return exports.silenceUncaughtInPromise(coreservices_1.services.$q.reject(error));
				};

				/***/
			},
			/* 4 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** Predicates @module common_predicates */ /** */

				var hof_1 = __webpack_require__(5);
				var toStr = Object.prototype.toString;
				var tis = function (t) {
					return function (x) {
						return typeof x === t;
					};
				};
				exports.isUndefined = tis('undefined');
				exports.isDefined = hof_1.not(exports.isUndefined);
				exports.isNull = function (o) {
					return o === null;
				};
				exports.isFunction = tis('function');
				exports.isNumber = tis('number');
				exports.isString = tis('string');
				exports.isObject = function (x) {
					return x !== null && typeof x === 'object';
				};
				exports.isArray = Array.isArray;
				exports.isDate = function (x) {
					return toStr.call(x) === '[object Date]';
				};
				exports.isRegExp = function (x) {
					return toStr.call(x) === '[object RegExp]';
				};
				/**
     * Predicate which checks if a value is injectable
     *
     * A value is "injectable" if it is a function, or if it is an ng1 array-notation-style array
     * where all the elements in the array are Strings, except the last one, which is a Function
     */
				function isInjectable(val) {
					if (exports.isArray(val) && val.length) {
						var head = val.slice(0, -1),
						    tail = val.slice(-1);
						return !(head.filter(hof_1.not(exports.isString)).length || tail.filter(hof_1.not(exports.isFunction)).length);
					}
					return exports.isFunction(val);
				}
				exports.isInjectable = isInjectable;
				/**
     * Predicate which checks if a value looks like a Promise
     *
     * It is probably a Promise if it's an object, and it has a `then` property which is a Function
     */
				exports.isPromise = hof_1.and(exports.isObject, hof_1.pipe(hof_1.prop('then'), exports.isFunction));

				/***/
			},
			/* 5 */
			/***/function (module, exports) {

				/**
     * Higher order functions
     *
     * @module common_hof
     */ /** */
				"use strict";
				/**
     * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.
     *
     * Given a function with N parameters, returns a new function that supports partial application.
     * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,
     * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to
     * accept more parameters until all N parameters have been supplied.
     *
     *
     * This contrived example uses a partially applied function as an predicate, which returns true
     * if an object is found in both arrays.
     * @example
     * ```
     * // returns true if an object is in both of the two arrays
     * function inBoth(array1, array2, object) {
     *   return array1.indexOf(object) !== -1 &&
     *          array2.indexOf(object) !== 1;
     * }
     * let obj1, obj2, obj3, obj4, obj5, obj6, obj7
     * let foos = [obj1, obj3]
     * let bars = [obj3, obj4, obj5]
     *
     * // A curried "copy" of inBoth
     * let curriedInBoth = curry(inBoth);
     * // Partially apply both the array1 and array2
     * let inFoosAndBars = curriedInBoth(foos, bars);
     *
     * // Supply the final argument; since all arguments are
     * // supplied, the original inBoth function is then called.
     * let obj1InBoth = inFoosAndBars(obj1); // false
     *
     * // Use the inFoosAndBars as a predicate.
     * // Filter, on each iteration, supplies the final argument
     * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];
     * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]
     *
     * ```
     *
     * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function
     *
     * @param fn
     * @returns {*|function(): (*|any)}
     */

				function curry(fn) {
					var initial_args = [].slice.apply(arguments, [1]);
					var func_args_length = fn.length;
					function curried(args) {
						if (args.length >= func_args_length) return fn.apply(null, args);
						return function () {
							return curried(args.concat([].slice.apply(arguments)));
						};
					}
					return curried(initial_args);
				}
				exports.curry = curry;
				/**
     * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left
     * given: f(x), g(x), h(x)
     * let composed = compose(f,g,h)
     * then, composed is: f(g(h(x)))
     */
				function compose() {
					var args = arguments;
					var start = args.length - 1;
					return function () {
						var i = start,
						    result = args[start].apply(this, arguments);
						while (i--) result = args[i].call(this, result);
						return result;
					};
				}
				exports.compose = compose;
				/**
     * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right
     * given: f(x), g(x), h(x)
     * let piped = pipe(f,g,h);
     * then, piped is: h(g(f(x)))
     */
				function pipe() {
					var funcs = [];
					for (var _i = 0; _i < arguments.length; _i++) {
						funcs[_i - 0] = arguments[_i];
					}
					return compose.apply(null, [].slice.call(arguments).reverse());
				}
				exports.pipe = pipe;
				/**
     * Given a property name, returns a function that returns that property from an object
     * let obj = { foo: 1, name: "blarg" };
     * let getName = prop("name");
     * getName(obj) === "blarg"
     */
				exports.prop = function (name) {
					return function (obj) {
						return obj && obj[name];
					};
				};
				/**
     * Given a property name and a value, returns a function that returns a boolean based on whether
     * the passed object has a property that matches the value
     * let obj = { foo: 1, name: "blarg" };
     * let getName = propEq("name", "blarg");
     * getName(obj) === true
     */
				exports.propEq = curry(function (name, val, obj) {
					return obj && obj[name] === val;
				});
				/**
     * Given a dotted property name, returns a function that returns a nested property from an object, or undefined
     * let obj = { id: 1, nestedObj: { foo: 1, name: "blarg" }, };
     * let getName = prop("nestedObj.name");
     * getName(obj) === "blarg"
     * let propNotFound = prop("this.property.doesnt.exist");
     * propNotFound(obj) === undefined
     */
				exports.parse = function (name) {
					return pipe.apply(null, name.split(".").map(exports.prop));
				};
				/**
     * Given a function that returns a truthy or falsey value, returns a
     * function that returns the opposite (falsey or truthy) value given the same inputs
     */
				exports.not = function (fn) {
					return function () {
						var args = [];
						for (var _i = 0; _i < arguments.length; _i++) {
							args[_i - 0] = arguments[_i];
						}
						return !fn.apply(null, args);
					};
				};
				/**
     * Given two functions that return truthy or falsey values, returns a function that returns truthy
     * if both functions return truthy for the given arguments
     */
				function and(fn1, fn2) {
					return function () {
						var args = [];
						for (var _i = 0; _i < arguments.length; _i++) {
							args[_i - 0] = arguments[_i];
						}
						return fn1.apply(null, args) && fn2.apply(null, args);
					};
				}
				exports.and = and;
				/**
     * Given two functions that return truthy or falsey values, returns a function that returns truthy
     * if at least one of the functions returns truthy for the given arguments
     */
				function or(fn1, fn2) {
					return function () {
						var args = [];
						for (var _i = 0; _i < arguments.length; _i++) {
							args[_i - 0] = arguments[_i];
						}
						return fn1.apply(null, args) || fn2.apply(null, args);
					};
				}
				exports.or = or;
				/**
     * Check if all the elements of an array match a predicate function
     *
     * @param fn1 a predicate function `fn1`
     * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array
     */
				exports.all = function (fn1) {
					return function (arr) {
						return arr.reduce(function (b, x) {
							return b && !!fn1(x);
						}, true);
					};
				};
				exports.any = function (fn1) {
					return function (arr) {
						return arr.reduce(function (b, x) {
							return b || !!fn1(x);
						}, false);
					};
				};
				/** Given a class, returns a Predicate function that returns true if the object is of that class */
				exports.is = function (ctor) {
					return function (obj) {
						return obj != null && obj.constructor === ctor || obj instanceof ctor;
					};
				};
				/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */
				exports.eq = function (val) {
					return function (other) {
						return val === other;
					};
				};
				/** Given a value, returns a function which returns the value */
				exports.val = function (v) {
					return function () {
						return v;
					};
				};
				function invoke(fnName, args) {
					return function (obj) {
						return obj[fnName].apply(obj, args);
					};
				}
				exports.invoke = invoke;
				/**
     * Sorta like Pattern Matching (a functional programming conditional construct)
     *
     * See http://c2.com/cgi/wiki?PatternMatching
     *
     * This is a conditional construct which allows a series of predicates and output functions
     * to be checked and then applied.  Each predicate receives the input.  If the predicate
     * returns truthy, then its matching output function (mapping function) is provided with
     * the input and, then the result is returned.
     *
     * Each combination (2-tuple) of predicate + output function should be placed in an array
     * of size 2: [ predicate, mapFn ]
     *
     * These 2-tuples should be put in an outer array.
     *
     * @example
     * ```
     *
     * // Here's a 2-tuple where the first element is the isString predicate
     * // and the second element is a function that returns a description of the input
     * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];
     *
     * // Second tuple: predicate "isNumber", mapfn returns a description
     * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];
     *
     * let third = [ (input) => input === null,  (input) => `Oh, null...` ];
     *
     * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];
     *
     * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);
     *
     * console.log(descriptionOf(undefined)); // 'notdefined'
     * console.log(descriptionOf(55)); // '(55) That's a number!'
     * console.log(descriptionOf("foo")); // 'Here's your string foo'
     * ```
     *
     * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,
     * with a Predicate and a mapping/output function
     * @returns {function(any): *}
     */
				function pattern(struct) {
					return function (x) {
						for (var i = 0; i < struct.length; i++) {
							if (struct[i][0](x)) return struct[i][1](x);
						}
					};
				}
				exports.pattern = pattern;

				/***/
			},
			/* 6 */
			/***/function (module, exports) {

				"use strict";

				var notImplemented = function (fnname) {
					return function () {
						throw new Error(fnname + "(): No coreservices implementation for UI-Router is loaded. You should include one of: ['angular1.js']");
					};
				};
				var services = {
					$q: undefined,
					$injector: undefined,
					location: {},
					locationConfig: {},
					template: {}
				};
				exports.services = services;
				["setUrl", "path", "search", "hash", "onChange"].forEach(function (key) {
					return services.location[key] = notImplemented(key);
				});
				["port", "protocol", "host", "baseHref", "html5Mode", "hashPrefix"].forEach(function (key) {
					return services.locationConfig[key] = notImplemented(key);
				});

				/***/
			},
			/* 7 */
			/***/function (module, exports) {

				"use strict";
				/** @module common */
				/**
     * Matches state names using glob-like pattern strings.
     *
     * Globs can be used in specific APIs including:
     *
     * - [[StateService.is]]
     * - [[StateService.includes]]
     * - [[HookMatchCriteria.to]]
     * - [[HookMatchCriteria.from]]
     * - [[HookMatchCriteria.exiting]]
     * - [[HookMatchCriteria.retained]]
     * - [[HookMatchCriteria.entering]]
     *
     * A `Glob` string is a pattern which matches state names.
     * Nested state names are split into segments (separated by a dot) when processing.
     * The state named `foo.bar.baz` is split into three segments ['foo', 'bar', 'baz']
     *
     * Globs work according to the following rules:
     *
     * ### Exact match:
     *
     * The glob `'A.B'` matches the state named exactly `'A.B'`.
     *
     * | Glob        |Matches states named|Does not match state named|
     * |:------------|:--------------------|:---------------------|
     * | `'A'`       | `'A'`               | `'B'` , `'A.C'`      |
     * | `'A.B'`     | `'A.B'`             | `'A'` , `'A.B.C'`    |
     * | `'foo'`     | `'foo'`             | `'FOO'` , `'foo.bar'`|
     *
     * ### Single star (`*`)
     *
     * A single star (`*`) is a wildcard that matches exactly one segment.
     *
     * | Glob        |Matches states named  |Does not match state named |
     * |:------------|:---------------------|:--------------------------|
     * | `'*'`       | `'A'` , `'Z'`        | `'A.B'` , `'Z.Y.X'`       |
     * | `'A.*'`     | `'A.B'` , `'A.C'`    | `'A'` , `'A.B.C'`         |
     * | `'A.*.*'`   | `'A.B.C'` , `'A.X.Y'`| `'A'`, `'A.B'` , `'Z.Y.X'`|
     *
     * ### Double star (`**`)
     *
     * A double star (`'**'`) is a wildcard that matches *zero or more segments*
     *
     * | Glob        |Matches states named                           |Does not match state named         |
     * |:------------|:----------------------------------------------|:----------------------------------|
     * | `'**'`      | `'A'` , `'A.B'`, `'Z.Y.X'`                    | (matches all states)              |
     * | `'A.**'`    | `'A'` , `'A.B'` , `'A.C.X'`                   | `'Z.Y.X'`                         |
     * | `'**.X'`    | `'X'` , `'A.X'` , `'Z.Y.X'`                   | `'A'` , `'A.login.Z'`             |
     * | `'A.**.X'`  | `'A.X'` , `'A.B.X'` , `'A.B.C.X'`             | `'A'` , `'A.B.C'`                 |
     *
     */

				var Glob = function () {
					function Glob(text) {
						this.text = text;
						this.glob = text.split('.');
						var regexpString = this.text.split('.').map(function (seg) {
							if (seg === '**') return '(?:|(?:\\.[^.]*)*)';
							if (seg === '*') return '\\.[^.]*';
							return '\\.' + seg;
						}).join('');
						this.regexp = new RegExp("^" + regexpString + "$");
					}
					Glob.prototype.matches = function (name) {
						return this.regexp.test('.' + name);
					};
					/** @deprecated whats the point? */
					Glob.is = function (text) {
						return text.indexOf('*') > -1;
					};
					/** @deprecated whats the point? */
					Glob.fromString = function (text) {
						if (!this.is(text)) return null;
						return new Glob(text);
					};
					return Glob;
				}();
				exports.Glob = Glob;

				/***/
			},
			/* 8 */
			/***/function (module, exports) {

				/** @module common */ /** for typedoc */
				"use strict";

				var Queue = function () {
					function Queue(_items, _limit) {
						if (_items === void 0) {
							_items = [];
						}
						if (_limit === void 0) {
							_limit = null;
						}
						this._items = _items;
						this._limit = _limit;
					}
					Queue.prototype.enqueue = function (item) {
						var items = this._items;
						items.push(item);
						if (this._limit && items.length > this._limit) items.shift();
						return item;
					};
					Queue.prototype.dequeue = function () {
						if (this.size()) return this._items.splice(0, 1)[0];
					};
					Queue.prototype.clear = function () {
						var current = this._items;
						this._items = [];
						return current;
					};
					Queue.prototype.size = function () {
						return this._items.length;
					};
					Queue.prototype.remove = function (item) {
						var idx = this._items.indexOf(item);
						return idx > -1 && this._items.splice(idx, 1)[0];
					};
					Queue.prototype.peekTail = function () {
						return this._items[this._items.length - 1];
					};
					Queue.prototype.peekHead = function () {
						if (this.size()) return this._items[0];
					};
					return Queue;
				}();
				exports.Queue = Queue;

				/***/
			},
			/* 9 */
			/***/function (module, exports, __webpack_require__) {

				/** @module common_strings */ /** */
				"use strict";

				var predicates_1 = __webpack_require__(4);
				var rejectFactory_1 = __webpack_require__(10);
				var common_1 = __webpack_require__(3);
				var hof_1 = __webpack_require__(5);
				var transition_1 = __webpack_require__(11);
				var resolvable_1 = __webpack_require__(19);
				/**
     * Returns a string shortened to a maximum length
     *
     * If the string is already less than the `max` length, return the string.
     * Else return the string, shortened to `max - 3` and append three dots ("...").
     *
     * @param max the maximum length of the string to return
     * @param str the input string
     */
				function maxLength(max, str) {
					if (str.length <= max) return str;
					return str.substr(0, max - 3) + "...";
				}
				exports.maxLength = maxLength;
				/**
     * Returns a string, with spaces added to the end, up to a desired str length
     *
     * If the string is already longer than the desired length, return the string.
     * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.
     *
     * @param length the desired length of the string to return
     * @param str the input string
     */
				function padString(length, str) {
					while (str.length < length) str += " ";
					return str;
				}
				exports.padString = padString;
				function kebobString(camelCase) {
					return camelCase.replace(/^([A-Z])/, function ($1) {
						return $1.toLowerCase();
					}) // replace first char
					.replace(/([A-Z])/g, function ($1) {
						return "-" + $1.toLowerCase();
					}); // replace rest
				}
				exports.kebobString = kebobString;
				function _toJson(obj) {
					return JSON.stringify(obj);
				}
				function _fromJson(json) {
					return predicates_1.isString(json) ? JSON.parse(json) : json;
				}
				function promiseToString(p) {
					return "Promise(" + JSON.stringify(p) + ")";
				}
				function functionToString(fn) {
					var fnStr = fnToString(fn);
					var namedFunctionMatch = fnStr.match(/^(function [^ ]+\([^)]*\))/);
					var toStr = namedFunctionMatch ? namedFunctionMatch[1] : fnStr;
					var fnName = fn['name'] || "";
					if (fnName && toStr.match(/function \(/)) {
						return 'function ' + fnName + toStr.substr(9);
					}
					return toStr;
				}
				exports.functionToString = functionToString;
				function fnToString(fn) {
					var _fn = predicates_1.isArray(fn) ? fn.slice(-1)[0] : fn;
					return _fn && _fn.toString() || "undefined";
				}
				exports.fnToString = fnToString;
				var stringifyPatternFn = null;
				var stringifyPattern = function (value) {
					var isTransitionRejectionPromise = rejectFactory_1.Rejection.isTransitionRejectionPromise;
					stringifyPatternFn = stringifyPatternFn || hof_1.pattern([[hof_1.not(predicates_1.isDefined), hof_1.val("undefined")], [predicates_1.isNull, hof_1.val("null")], [predicates_1.isPromise, hof_1.val("[Promise]")], [isTransitionRejectionPromise, function (x) {
						return x._transitionRejection.toString();
					}], [hof_1.is(rejectFactory_1.Rejection), hof_1.invoke("toString")], [hof_1.is(transition_1.Transition), hof_1.invoke("toString")], [hof_1.is(resolvable_1.Resolvable), hof_1.invoke("toString")], [predicates_1.isInjectable, functionToString], [hof_1.val(true), common_1.identity]]);
					return stringifyPatternFn(value);
				};
				function stringify(o) {
					var seen = [];
					function format(val) {
						if (predicates_1.isObject(val)) {
							if (seen.indexOf(val) !== -1) return '[circular ref]';
							seen.push(val);
						}
						return stringifyPattern(val);
					}
					return JSON.stringify(o, function (key, val) {
						return format(val);
					}).replace(/\\"/g, '"');
				}
				exports.stringify = stringify;
				/** Returns a function that splits a string on a character or substring */
				exports.beforeAfterSubstr = function (char) {
					return function (str) {
						if (!str) return ["", ""];
						var idx = str.indexOf(char);
						if (idx === -1) return [str, ""];
						return [str.substr(0, idx), str.substr(idx + 1)];
					};
				};

				/***/
			},
			/* 10 */
			/***/function (module, exports, __webpack_require__) {

				/** @module transition */ /** for typedoc */
				"use strict";

				var common_1 = __webpack_require__(3);
				var strings_1 = __webpack_require__(9);
				(function (RejectType) {
					RejectType[RejectType["SUPERSEDED"] = 2] = "SUPERSEDED";
					RejectType[RejectType["ABORTED"] = 3] = "ABORTED";
					RejectType[RejectType["INVALID"] = 4] = "INVALID";
					RejectType[RejectType["IGNORED"] = 5] = "IGNORED";
					RejectType[RejectType["ERROR"] = 6] = "ERROR";
				})(exports.RejectType || (exports.RejectType = {}));
				var RejectType = exports.RejectType;
				var Rejection = function () {
					function Rejection(type, message, detail) {
						this.type = type;
						this.message = message;
						this.detail = detail;
					}
					Rejection.prototype.toString = function () {
						var detailString = function (d) {
							return d && d.toString !== Object.prototype.toString ? d.toString() : strings_1.stringify(d);
						};
						var type = this.type,
						    message = this.message,
						    detail = detailString(this.detail);
						return "TransitionRejection(type: " + type + ", message: " + message + ", detail: " + detail + ")";
					};
					Rejection.prototype.toPromise = function () {
						return common_1.extend(common_1.silentRejection(this), { _transitionRejection: this });
					};
					/** Returns true if the obj is a rejected promise created from the `asPromise` factory */
					Rejection.isTransitionRejectionPromise = function (obj) {
						return obj && typeof obj.then === 'function' && obj._transitionRejection instanceof Rejection;
					};
					/** Returns a TransitionRejection due to transition superseded */
					Rejection.superseded = function (detail, options) {
						var message = "The transition has been superseded by a different transition";
						var rejection = new Rejection(RejectType.SUPERSEDED, message, detail);
						if (options && options.redirected) {
							rejection.redirected = true;
						}
						return rejection;
					};
					/** Returns a TransitionRejection due to redirected transition */
					Rejection.redirected = function (detail) {
						return Rejection.superseded(detail, { redirected: true });
					};
					/** Returns a TransitionRejection due to invalid transition */
					Rejection.invalid = function (detail) {
						var message = "This transition is invalid";
						return new Rejection(RejectType.INVALID, message, detail);
					};
					/** Returns a TransitionRejection due to ignored transition */
					Rejection.ignored = function (detail) {
						var message = "The transition was ignored";
						return new Rejection(RejectType.IGNORED, message, detail);
					};
					/** Returns a TransitionRejection due to aborted transition */
					Rejection.aborted = function (detail) {
						// TODO think about how to encapsulate an Error() object
						var message = "The transition has been aborted";
						return new Rejection(RejectType.ABORTED, message, detail);
					};
					/** Returns a TransitionRejection due to aborted transition */
					Rejection.errored = function (detail) {
						// TODO think about how to encapsulate an Error() object
						var message = "The transition errored";
						return new Rejection(RejectType.ERROR, message, detail);
					};
					return Rejection;
				}();
				exports.Rejection = Rejection;

				/***/
			},
			/* 11 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module transition */ /** for typedoc */

				var strings_1 = __webpack_require__(9);
				var trace_1 = __webpack_require__(12);
				var coreservices_1 = __webpack_require__(6);
				var common_1 = __webpack_require__(3);
				var predicates_1 = __webpack_require__(4);
				var hof_1 = __webpack_require__(5);
				var transitionHook_1 = __webpack_require__(13);
				var hookRegistry_1 = __webpack_require__(15);
				var hookBuilder_1 = __webpack_require__(16);
				var node_1 = __webpack_require__(21);
				var pathFactory_1 = __webpack_require__(20);
				var targetState_1 = __webpack_require__(14);
				var param_1 = __webpack_require__(22);
				var resolvable_1 = __webpack_require__(19);
				var rejectFactory_1 = __webpack_require__(10);
				var resolveContext_1 = __webpack_require__(17);
				var router_1 = __webpack_require__(25);
				var transitionCount = 0;
				var stateSelf = hof_1.prop("self");
				/**
     * Represents a transition between two states.
     *
     * When navigating to a state, we are transitioning **from** the current state **to** the new state.
     *
     * This object contains all contextual information about the to/from states, parameters, resolves.
     * It has information about all states being entered and exited as a result of the transition.
     */
				var Transition = function () {
					/**
      * Creates a new Transition object.
      *
      * If the target state is not valid, an error is thrown.
      *
      * @param fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`
      *        encapsulates the "from state".
      * @param targetState The target state and parameters being transitioned to (also, the transition options)
      * @param router The [[UIRouter]] instance
      */
					function Transition(fromPath, targetState, router) {
						var _this = this;
						/** @hidden */
						this._deferred = coreservices_1.services.$q.defer();
						/**
       * This promise is resolved or rejected based on the outcome of the Transition.
       *
       * When the transition is successful, the promise is resolved
       * When the transition is unsuccessful, the promise is rejected with the [[TransitionRejection]] or javascript error
       */
						this.promise = this._deferred.promise;
						this.treeChanges = function () {
							return _this._treeChanges;
						};
						this.isActive = function () {
							return _this === _this._options.current();
						};
						this.router = router;
						this._targetState = targetState;
						if (!targetState.valid()) {
							throw new Error(targetState.error());
						}
						// Makes the Transition instance a hook registry (onStart, etc)
						hookRegistry_1.HookRegistry.mixin(new hookRegistry_1.HookRegistry(), this);
						// current() is assumed to come from targetState.options, but provide a naive implementation otherwise.
						this._options = common_1.extend({ current: hof_1.val(this) }, targetState.options());
						this.$id = transitionCount++;
						var toPath = pathFactory_1.PathFactory.buildToPath(fromPath, targetState);
						this._treeChanges = pathFactory_1.PathFactory.treeChanges(fromPath, toPath, this._options.reloadState);
						var enteringStates = this._treeChanges.entering.map(function (node) {
							return node.state;
						});
						pathFactory_1.PathFactory.applyViewConfigs(router.transitionService.$view, this._treeChanges.to, enteringStates);
						var rootResolvables = [new resolvable_1.Resolvable(router_1.UIRouter, function () {
							return router;
						}, [], undefined, router), new resolvable_1.Resolvable(Transition, function () {
							return _this;
						}, [], undefined, this), new resolvable_1.Resolvable('$transition$', function () {
							return _this;
						}, [], undefined, this), new resolvable_1.Resolvable('$stateParams', function () {
							return _this.params();
						}, [], undefined, this.params())];
						var rootNode = this._treeChanges.to[0];
						var context = new resolveContext_1.ResolveContext(this._treeChanges.to);
						context.addResolvables(rootResolvables, rootNode.state);
					}
					/** @inheritdoc */
					Transition.prototype.onBefore = function (matchCriteria, callback, options) {
						throw "";
					};
					;
					/** @inheritdoc */
					Transition.prototype.onStart = function (matchCriteria, callback, options) {
						throw "";
					};
					;
					/** @inheritdoc */
					Transition.prototype.onExit = function (matchCriteria, callback, options) {
						throw "";
					};
					;
					/** @inheritdoc */
					Transition.prototype.onRetain = function (matchCriteria, callback, options) {
						throw "";
					};
					;
					/** @inheritdoc */
					Transition.prototype.onEnter = function (matchCriteria, callback, options) {
						throw "";
					};
					;
					/** @inheritdoc */
					Transition.prototype.onFinish = function (matchCriteria, callback, options) {
						throw "";
					};
					;
					/** @inheritdoc */
					Transition.prototype.onSuccess = function (matchCriteria, callback, options) {
						throw "";
					};
					;
					/** @inheritdoc */
					Transition.prototype.onError = function (matchCriteria, callback, options) {
						throw "";
					};
					;
					Transition.prototype.$from = function () {
						return common_1.tail(this._treeChanges.from).state;
					};
					Transition.prototype.$to = function () {
						return common_1.tail(this._treeChanges.to).state;
					};
					/**
      * Returns the "from state"
      *
      * @returns The state object for the Transition's "from state".
      */
					Transition.prototype.from = function () {
						return this.$from().self;
					};
					/**
      * Returns the "to state"
      *
      * @returns The state object for the Transition's target state ("to state").
      */
					Transition.prototype.to = function () {
						return this.$to().self;
					};
					/**
      * Gets the Target State
      *
      * A transition's [[TargetState]] encapsulates the [[to]] state, the [[params]], and the [[options]].
      *
      * @returns the [[TargetState]] of this Transition
      */
					Transition.prototype.targetState = function () {
						return this._targetState;
					};
					/**
      * Determines whether two transitions are equivalent.
      */
					Transition.prototype.is = function (compare) {
						if (compare instanceof Transition) {
							// TODO: Also compare parameters
							return this.is({ to: compare.$to().name, from: compare.$from().name });
						}
						return !(compare.to && !hookRegistry_1.matchState(this.$to(), compare.to) || compare.from && !hookRegistry_1.matchState(this.$from(), compare.from));
					};
					/**
      * Gets transition parameter values
      *
      * @param pathname Pick which treeChanges path to get parameters for:
      *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)
      * @returns transition parameter values for the desired path.
      */
					Transition.prototype.params = function (pathname) {
						if (pathname === void 0) {
							pathname = "to";
						}
						return this._treeChanges[pathname].map(hof_1.prop("paramValues")).reduce(common_1.mergeR, {});
					};
					/**
      * Creates a [[UIInjector]] Dependency Injector
      *
      * Returns a Dependency Injector for the Transition's target state (to state).
      * The injector provides resolve values which the target state has access to.
      *
      * The `UIInjector` can also provide values from the native root/global injector (ng1/ng2).
      *
      * If a `state` is provided, the injector that is returned will be limited to resolve values that the provided state has access to.
      *
      * @param state Limits the resolves provided to only the resolves the provided state has access to.
      * @returns a [[UIInjector]]
      */
					Transition.prototype.injector = function (state) {
						var path = this.treeChanges().to;
						if (state) path = pathFactory_1.PathFactory.subPath(path, function (node) {
							return node.state === state || node.state.name === state;
						});
						return new resolveContext_1.ResolveContext(path).injector();
					};
					/**
      * Gets all available resolve tokens (keys)
      *
      * This method can be used in conjunction with [[getResolve]] to inspect the resolve values
      * available to the Transition.
      *
      * The returned tokens include those defined on [[StateDeclaration.resolve]] blocks, for the states
      * in the Transition's [[TreeChanges.to]] path.
      *
      * @returns an array of resolve tokens (keys)
      */
					Transition.prototype.getResolveTokens = function () {
						return new resolveContext_1.ResolveContext(this._treeChanges.to).getTokens();
					};
					/**
      * Gets resolved values
      *
      * This method can be used in conjunction with [[getResolveTokens]] to inspect what resolve values
      * are available to the Transition.
      *
      * Given a token, returns the resolved data for that token.
      * Given an array of tokens, returns an array of resolved data for those tokens.
      *
      * If a resolvable hasn't yet been fetched, returns `undefined` for that token
      * If a resolvable doesn't exist for the token, throws an error.
      *
      * @param token the token (or array of tokens)
      *
      * @returns an array of resolve tokens (keys)
      */
					Transition.prototype.getResolveValue = function (token) {
						var resolveContext = new resolveContext_1.ResolveContext(this._treeChanges.to);
						var getData = function (token) {
							var resolvable = resolveContext.getResolvable(token);
							if (resolvable === undefined) {
								throw new Error("Dependency Injection token not found: " + strings_1.stringify(token));
							}
							return resolvable.data;
						};
						if (predicates_1.isArray(token)) {
							return token.map(getData);
						}
						return getData(token);
					};
					/**
      * Gets a [[Resolvable]] primitive
      *
      * This is a lower level API that returns a [[Resolvable]] from the Transition for a given token.
      *
      * @param token the DI token
      *
      * @returns the [[Resolvable]] in the transition's to path, or undefined
      */
					Transition.prototype.getResolvable = function (token) {
						return new resolveContext_1.ResolveContext(this._treeChanges.to).getResolvable(token);
					};
					/**
      * Dynamically adds a new [[Resolvable]] (`resolve`) to this transition.
      *
      * @param resolvable an [[Resolvable]] object
      * @param state the state in the "to path" which should receive the new resolve (otherwise, the root state)
      */
					Transition.prototype.addResolvable = function (resolvable, state) {
						if (state === void 0) {
							state = "";
						}
						var stateName = typeof state === "string" ? state : state.name;
						var topath = this._treeChanges.to;
						var targetNode = common_1.find(topath, function (node) {
							return node.state.name === stateName;
						});
						var resolveContext = new resolveContext_1.ResolveContext(topath);
						resolveContext.addResolvables([resolvable], targetNode.state);
					};
					/**
      * If the current transition is a redirect, returns the transition that was redirected.
      *
      * Gets the transition from which this transition was redirected.
      *
      *
      * @example
      * ```js
      *
      * let transitionA = $state.go('A').transitionA
      * transitionA.onStart({}, () => $state.target('B'));
      * $transitions.onSuccess({ to: 'B' }, (trans) => {
      *   trans.to().name === 'B'; // true
      *   trans.redirectedFrom() === transitionA; // true
      * });
      * ```
      *
      * @returns The previous Transition, or null if this Transition is not the result of a redirection
      */
					Transition.prototype.redirectedFrom = function () {
						return this._options.redirectedFrom || null;
					};
					/**
      * Get the transition options
      *
      * @returns the options for this Transition.
      */
					Transition.prototype.options = function () {
						return this._options;
					};
					/**
      * Gets the states being entered.
      *
      * @returns an array of states that will be entered during this transition.
      */
					Transition.prototype.entering = function () {
						return common_1.map(this._treeChanges.entering, hof_1.prop('state')).map(stateSelf);
					};
					/**
      * Gets the states being exited.
      *
      * @returns an array of states that will be exited during this transition.
      */
					Transition.prototype.exiting = function () {
						return common_1.map(this._treeChanges.exiting, hof_1.prop('state')).map(stateSelf).reverse();
					};
					/**
      * Gets the states being retained.
      *
      * @returns an array of states that are already entered from a previous Transition, that will not be
      *    exited during this Transition
      */
					Transition.prototype.retained = function () {
						return common_1.map(this._treeChanges.retained, hof_1.prop('state')).map(stateSelf);
					};
					/**
      * Get the [[ViewConfig]]s associated with this Transition
      *
      * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.
      * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., "to" or "entering").
      *
      * @param pathname the name of the path to fetch views for:
      *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)
      * @param state If provided, only returns the `ViewConfig`s for a single state in the path
      *
      * @returns a list of ViewConfig objects for the given path.
      */
					Transition.prototype.views = function (pathname, state) {
						if (pathname === void 0) {
							pathname = "entering";
						}
						var path = this._treeChanges[pathname];
						path = !state ? path : path.filter(hof_1.propEq('state', state));
						return path.map(hof_1.prop("views")).filter(common_1.identity).reduce(common_1.unnestR, []);
					};
					/**
      * Creates a new transition that is a redirection of the current one.
      *
      * This transition can be returned from a [[TransitionService]] hook to
      * redirect a transition to a new state and/or set of parameters.
      *
      * @returns Returns a new [[Transition]] instance.
      */
					Transition.prototype.redirect = function (targetState) {
						var newOptions = common_1.extend({}, this.options(), targetState.options(), { redirectedFrom: this, source: "redirect" });
						targetState = new targetState_1.TargetState(targetState.identifier(), targetState.$state(), targetState.params(), newOptions);
						var newTransition = this.router.transitionService.create(this._treeChanges.from, targetState);
						var originalEnteringNodes = this.treeChanges().entering;
						var redirectEnteringNodes = newTransition.treeChanges().entering;
						// --- Re-use resolve data from original transition ---
						// When redirecting from a parent state to a child state where the parent parameter values haven't changed
						// (because of the redirect), the resolves fetched by the original transition are still valid in the
						// redirected transition.
						//
						// This allows you to define a redirect on a parent state which depends on an async resolve value.
						// You can wait for the resolve, then redirect to a child state based on the result.
						// The redirected transition does not have to re-fetch the resolve.
						// ---------------------------------------------------------
						var nodeIsReloading = function (reloadState) {
							return function (node) {
								return reloadState && node.state.includes[reloadState.name];
							};
						};
						// Find any "entering" nodes in the redirect path that match the original path and aren't being reloaded
						var matchingEnteringNodes = node_1.PathNode.matching(redirectEnteringNodes, originalEnteringNodes).filter(hof_1.not(nodeIsReloading(targetState.options().reloadState)));
						// Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.
						matchingEnteringNodes.forEach(function (node, idx) {
							node.resolvables = originalEnteringNodes[idx].resolvables;
						});
						return newTransition;
					};
					/** @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */
					Transition.prototype._changedParams = function () {
						var _a = this._treeChanges,
						    to = _a.to,
						    from = _a.from;
						if (this._options.reload || common_1.tail(to).state !== common_1.tail(from).state) return undefined;
						var nodeSchemas = to.map(function (node) {
							return node.paramSchema;
						});
						var _b = [to, from].map(function (path) {
							return path.map(function (x) {
								return x.paramValues;
							});
						}),
						    toValues = _b[0],
						    fromValues = _b[1];
						var tuples = common_1.arrayTuples(nodeSchemas, toValues, fromValues);
						return tuples.map(function (_a) {
							var schema = _a[0],
							    toVals = _a[1],
							    fromVals = _a[2];
							return param_1.Param.changed(schema, toVals, fromVals);
						}).reduce(common_1.unnestR, []);
					};
					/**
      * Returns true if the transition is dynamic.
      *
      * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.
      *
      * @returns true if the Transition is dynamic
      */
					Transition.prototype.dynamic = function () {
						var changes = this._changedParams();
						return !changes ? false : changes.map(function (x) {
							return x.dynamic;
						}).reduce(common_1.anyTrueR, false);
					};
					/**
      * Returns true if the transition is ignored.
      *
      * A transition is ignored if no states are entered nor exited, and no parameter values have changed.
      *
      * @returns true if the Transition is ignored.
      */
					Transition.prototype.ignored = function () {
						var changes = this._changedParams();
						return !changes ? false : changes.length === 0;
					};
					/**
      * @hidden
      */
					Transition.prototype.hookBuilder = function () {
						return new hookBuilder_1.HookBuilder(this.router.transitionService, this, {
							transition: this,
							current: this._options.current
						});
					};
					/**
      * Runs the transition
      *
      * This method is generally called from the [[StateService.transitionTo]]
      *
      * @returns a promise for a successful transition.
      */
					Transition.prototype.run = function () {
						var _this = this;
						var runSynchronousHooks = transitionHook_1.TransitionHook.runSynchronousHooks;
						var hookBuilder = this.hookBuilder();
						var globals = this.router.globals;
						globals.transitionHistory.enqueue(this);
						var syncResult = runSynchronousHooks(hookBuilder.getOnBeforeHooks());
						if (rejectFactory_1.Rejection.isTransitionRejectionPromise(syncResult)) {
							syncResult.catch(function () {
								return 0;
							}); // issue #2676
							var rejectReason = syncResult._transitionRejection;
							this._deferred.reject(rejectReason);
							return this.promise;
						}
						if (!this.valid()) {
							var error = new Error(this.error());
							this._deferred.reject(error);
							return this.promise;
						}
						if (this.ignored()) {
							trace_1.trace.traceTransitionIgnored(this);
							this._deferred.reject(rejectFactory_1.Rejection.ignored());
							return this.promise;
						}
						// When the chain is complete, then resolve or reject the deferred
						var transitionSuccess = function () {
							trace_1.trace.traceSuccess(_this.$to(), _this);
							_this.success = true;
							_this._deferred.resolve(_this.to());
							runSynchronousHooks(hookBuilder.getOnSuccessHooks(), true);
						};
						var transitionError = function (reason) {
							trace_1.trace.traceError(reason, _this);
							_this.success = false;
							_this._deferred.reject(reason);
							_this._error = reason;
							runSynchronousHooks(hookBuilder.getOnErrorHooks(), true);
						};
						trace_1.trace.traceTransitionStart(this);
						// Chain the next hook off the previous
						var appendHookToChain = function (prev, nextHook) {
							return prev.then(function () {
								return nextHook.invokeHook();
							});
						};
						// Run the hooks, then resolve or reject the overall deferred in the .then() handler
						hookBuilder.asyncHooks().reduce(appendHookToChain, syncResult).then(transitionSuccess, transitionError);
						return this.promise;
					};
					/**
      * Checks if the Transition is valid
      *
      * @returns true if the Transition is valid
      */
					Transition.prototype.valid = function () {
						return !this.error() || this.success !== undefined;
					};
					/**
      * The Transition error reason.
      *
      * If the transition is invalid (and could not be run), returns the reason the transition is invalid.
      * If the transition was valid and ran, but was not successful, returns the reason the transition failed.
      *
      * @returns an error message explaining why the transition is invalid, or the reason the transition failed.
      */
					Transition.prototype.error = function () {
						var state = this.$to();
						var redirects = 0,
						    trans = this;
						while ((trans = trans.redirectedFrom()) != null) {
							if (++redirects > 20) return "Too many Transition redirects (20+)";
						}
						if (state.self.abstract) return "Cannot transition to abstract state '" + state.name + "'";
						if (!param_1.Param.validates(state.parameters(), this.params())) return "Param values not valid for state '" + state.name + "'";
						if (this.success === false) return this._error;
					};
					/**
      * A string representation of the Transition
      *
      * @returns A string representation of the Transition
      */
					Transition.prototype.toString = function () {
						var fromStateOrName = this.from();
						var toStateOrName = this.to();
						var avoidEmptyHash = function (params) {
							return params["#"] !== null && params["#"] !== undefined ? params : common_1.omit(params, "#");
						};
						// (X) means the to state is invalid.
						var id = this.$id,
						    from = predicates_1.isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName,
						    fromParams = common_1.toJson(avoidEmptyHash(this._treeChanges.from.map(hof_1.prop('paramValues')).reduce(common_1.mergeR, {}))),
						    toValid = this.valid() ? "" : "(X) ",
						    to = predicates_1.isObject(toStateOrName) ? toStateOrName.name : toStateOrName,
						    toParams = common_1.toJson(avoidEmptyHash(this.params()));
						return "Transition#" + id + "( '" + from + "'" + fromParams + " -> " + toValid + "'" + to + "'" + toParams + " )";
					};
					Transition.diToken = Transition;
					return Transition;
				}();
				exports.Transition = Transition;

				/***/
			},
			/* 12 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/**
     * UI-Router Transition Tracing
     *
     * Enable transition tracing to print transition information to the console, in order to help debug your application.
     * Tracing logs detailed information about each Transition to your console.
     *
     * To enable tracing, import the [[trace]] singleton and enable one or more categories.
     *
     * ES6
     * ```
     *
     * import {trace} from "ui-router-ng2"; // or "angular-ui-router"
     * trace.enable(1, 5); // TRANSITION and VIEWCONFIG
     * ```
     *
     * CJS
     * ```
     *
     * let trace = require("angular-ui-router").trace; // or "ui-router-ng2"
     * trace.enable("TRANSITION", "VIEWCONFIG");
     * ```
     *
     * Globals
     * ```
     *
     * let trace = window["angular-ui-router"].trace; // or "ui-router-ng2"
     * trace.enable(); // Trace everything (very verbose)
     * ```
     *
     * @module trace
     */ /** for typedoc */

				var hof_1 = __webpack_require__(5);
				var predicates_1 = __webpack_require__(4);
				var strings_1 = __webpack_require__(9);
				/** @hidden */
				function uiViewString(viewData) {
					if (!viewData) return 'ui-view (defunct)';
					return "[ui-view#" + viewData.id + " tag " + ("in template from '" + (viewData.creationContext && viewData.creationContext.name || '(root)') + "' state]: ") + ("fqn: '" + viewData.fqn + "', ") + ("name: '" + viewData.name + "@" + viewData.creationContext + "')");
				}
				/** @hidden */
				var viewConfigString = function (viewConfig) {
					return "[ViewConfig#" + viewConfig.$id + " from '" + (viewConfig.viewDecl.$context.name || '(root)') + "' state]: target ui-view: '" + viewConfig.viewDecl.$uiViewName + "@" + viewConfig.viewDecl.$uiViewContextAnchor + "'";
				};
				/** @hidden */
				function normalizedCat(input) {
					return predicates_1.isNumber(input) ? Category[input] : Category[Category[input]];
				}
				/**
     * Trace categories
     *
     * [[Trace.enable]] or [[Trace.disable]] a category
     *
     * `trace.enable(Category.TRANSITION)`
     *
     * These can also be provided using a matching string, or position ordinal
     *
     * `trace.enable("TRANSITION")`
     *
     * `trace.enable(1)`
     */
				(function (Category) {
					Category[Category["RESOLVE"] = 0] = "RESOLVE";
					Category[Category["TRANSITION"] = 1] = "TRANSITION";
					Category[Category["HOOK"] = 2] = "HOOK";
					Category[Category["UIVIEW"] = 3] = "UIVIEW";
					Category[Category["VIEWCONFIG"] = 4] = "VIEWCONFIG";
				})(exports.Category || (exports.Category = {}));
				var Category = exports.Category;
				/**
     * Prints UI-Router Transition trace information to the console.
     */
				var Trace = function () {
					function Trace() {
						/** @hidden */
						this._enabled = {};
						this.approximateDigests = 0;
					}
					/** @hidden */
					Trace.prototype._set = function (enabled, categories) {
						var _this = this;
						if (!categories.length) {
							categories = Object.keys(Category).map(function (k) {
								return parseInt(k, 10);
							}).filter(function (k) {
								return !isNaN(k);
							}).map(function (key) {
								return Category[key];
							});
						}
						categories.map(normalizedCat).forEach(function (category) {
							return _this._enabled[category] = enabled;
						});
					};
					/**
      * Enables a trace [[Category]]
      *
      * ```
      * trace.enable("TRANSITION");
      * ```
      *
      * @param categories categories to enable. If `categories` is omitted, all categories are enabled.
      *        Also takes strings (category name) or ordinal (category position)
      */
					Trace.prototype.enable = function () {
						var categories = [];
						for (var _i = 0; _i < arguments.length; _i++) {
							categories[_i - 0] = arguments[_i];
						}
						this._set(true, categories);
					};
					/**
      * Disables a trace [[Category]]
      *
      * ```
      * trace.disable("VIEWCONFIG");
      * ```
      *
      * @param categories categories to disable. If `categories` is omitted, all categories are disabled.
      *        Also takes strings (category name) or ordinal (category position)
      */
					Trace.prototype.disable = function () {
						var categories = [];
						for (var _i = 0; _i < arguments.length; _i++) {
							categories[_i - 0] = arguments[_i];
						}
						this._set(false, categories);
					};
					/**
      * Retrieves the enabled stateus of a [[Category]]
      *
      * ```
      * trace.enabled("VIEWCONFIG"); // true or false
      * ```
      *
      * @returns boolean true if the category is enabled
      */
					Trace.prototype.enabled = function (category) {
						return !!this._enabled[normalizedCat(category)];
					};
					/** called by ui-router code */
					Trace.prototype.traceTransitionStart = function (transition) {
						if (!this.enabled(Category.TRANSITION)) return;
						var tid = transition.$id,
						    digest = this.approximateDigests,
						    transitionStr = strings_1.stringify(transition);
						console.log("Transition #" + tid + " Digest #" + digest + ": Started  -> " + transitionStr);
					};
					/** called by ui-router code */
					Trace.prototype.traceTransitionIgnored = function (trans) {
						if (!this.enabled(Category.TRANSITION)) return;
						var tid = trans && trans.$id,
						    digest = this.approximateDigests,
						    transitionStr = strings_1.stringify(trans);
						console.log("Transition #" + tid + " Digest #" + digest + ": Ignored  <> " + transitionStr);
					};
					/** called by ui-router code */
					Trace.prototype.traceHookInvocation = function (step, options) {
						if (!this.enabled(Category.HOOK)) return;
						var tid = hof_1.parse("transition.$id")(options),
						    digest = this.approximateDigests,
						    event = hof_1.parse("traceData.hookType")(options) || "internal",
						    context = hof_1.parse("traceData.context.state.name")(options) || hof_1.parse("traceData.context")(options) || "unknown",
						    name = strings_1.functionToString(step.eventHook.callback);
						console.log("Transition #" + tid + " Digest #" + digest + ":   Hook -> " + event + " context: " + context + ", " + strings_1.maxLength(200, name));
					};
					/** called by ui-router code */
					Trace.prototype.traceHookResult = function (hookResult, transitionOptions) {
						if (!this.enabled(Category.HOOK)) return;
						var tid = hof_1.parse("transition.$id")(transitionOptions),
						    digest = this.approximateDigests,
						    hookResultStr = strings_1.stringify(hookResult);
						console.log("Transition #" + tid + " Digest #" + digest + ":   <- Hook returned: " + strings_1.maxLength(200, hookResultStr));
					};
					/** called by ui-router code */
					Trace.prototype.traceResolvePath = function (path, when, trans) {
						if (!this.enabled(Category.RESOLVE)) return;
						var tid = trans && trans.$id,
						    digest = this.approximateDigests,
						    pathStr = path && path.toString();
						console.log("Transition #" + tid + " Digest #" + digest + ":         Resolving " + pathStr + " (" + when + ")");
					};
					/** called by ui-router code */
					Trace.prototype.traceResolvableResolved = function (resolvable, trans) {
						if (!this.enabled(Category.RESOLVE)) return;
						var tid = trans && trans.$id,
						    digest = this.approximateDigests,
						    resolvableStr = resolvable && resolvable.toString(),
						    result = strings_1.stringify(resolvable.data);
						console.log("Transition #" + tid + " Digest #" + digest + ":               <- Resolved  " + resolvableStr + " to: " + strings_1.maxLength(200, result));
					};
					/** called by ui-router code */
					Trace.prototype.traceError = function (reason, trans) {
						if (!this.enabled(Category.TRANSITION)) return;
						var tid = trans && trans.$id,
						    digest = this.approximateDigests,
						    transitionStr = strings_1.stringify(trans);
						console.log("Transition #" + tid + " Digest #" + digest + ": <- Rejected " + transitionStr + ", reason: " + reason);
					};
					/** called by ui-router code */
					Trace.prototype.traceSuccess = function (finalState, trans) {
						if (!this.enabled(Category.TRANSITION)) return;
						var tid = trans && trans.$id,
						    digest = this.approximateDigests,
						    state = finalState.name,
						    transitionStr = strings_1.stringify(trans);
						console.log("Transition #" + tid + " Digest #" + digest + ": <- Success  " + transitionStr + ", final state: " + state);
					};
					/** called by ui-router code */
					Trace.prototype.traceUIViewEvent = function (event, viewData, extra) {
						if (extra === void 0) {
							extra = "";
						}
						if (!this.enabled(Category.UIVIEW)) return;
						console.log("ui-view: " + strings_1.padString(30, event) + " " + uiViewString(viewData) + extra);
					};
					/** called by ui-router code */
					Trace.prototype.traceUIViewConfigUpdated = function (viewData, context) {
						if (!this.enabled(Category.UIVIEW)) return;
						this.traceUIViewEvent("Updating", viewData, " with ViewConfig from context='" + context + "'");
					};
					/** called by ui-router code */
					Trace.prototype.traceUIViewFill = function (viewData, html) {
						if (!this.enabled(Category.UIVIEW)) return;
						this.traceUIViewEvent("Fill", viewData, " with: " + strings_1.maxLength(200, html));
					};
					/** called by ui-router code */
					Trace.prototype.traceViewServiceEvent = function (event, viewConfig) {
						if (!this.enabled(Category.VIEWCONFIG)) return;
						console.log("VIEWCONFIG: " + event + " " + viewConfigString(viewConfig));
					};
					/** called by ui-router code */
					Trace.prototype.traceViewServiceUIViewEvent = function (event, viewData) {
						if (!this.enabled(Category.VIEWCONFIG)) return;
						console.log("VIEWCONFIG: " + event + " " + uiViewString(viewData));
					};
					return Trace;
				}();
				exports.Trace = Trace;
				/**
     * The [[Trace]] singleton
     *
     * @example
     * ```js
     *
     * import {trace} from "angular-ui-router";
     * trace.enable(1, 5);
     * ```
     */
				var trace = new Trace();
				exports.trace = trace;

				/***/
			},
			/* 13 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				var common_1 = __webpack_require__(3);
				var strings_1 = __webpack_require__(9);
				var predicates_1 = __webpack_require__(4);
				var hof_1 = __webpack_require__(5);
				var trace_1 = __webpack_require__(12);
				var coreservices_1 = __webpack_require__(6);
				var rejectFactory_1 = __webpack_require__(10);
				var targetState_1 = __webpack_require__(14);
				var defaultOptions = {
					async: true,
					rejectIfSuperseded: true,
					current: common_1.noop,
					transition: null,
					traceData: {},
					bind: null
				};
				/** @hidden */
				var TransitionHook = function () {
					function TransitionHook(transition, stateContext, eventHook, options) {
						var _this = this;
						this.transition = transition;
						this.stateContext = stateContext;
						this.eventHook = eventHook;
						this.options = options;
						this.isSuperseded = function () {
							return _this.options.current() !== _this.options.transition;
						};
						this.options = common_1.defaults(options, defaultOptions);
					}
					TransitionHook.prototype.invokeHook = function () {
						var _a = this,
						    options = _a.options,
						    eventHook = _a.eventHook;
						trace_1.trace.traceHookInvocation(this, options);
						if (options.rejectIfSuperseded && this.isSuperseded()) {
							return rejectFactory_1.Rejection.superseded(options.current()).toPromise();
						}
						var synchronousHookResult = !eventHook._deregistered ? eventHook.callback.call(options.bind, this.transition, this.stateContext) : undefined;
						return this.handleHookResult(synchronousHookResult);
					};
					/**
      * This method handles the return value of a Transition Hook.
      *
      * A hook can return false (cancel), a TargetState (redirect),
      * or a promise (which may later resolve to false or a redirect)
      *
      * This also handles "transition superseded" -- when a new transition
      * was started while the hook was still running
      */
					TransitionHook.prototype.handleHookResult = function (result) {
						// This transition is no longer current.
						// Another transition started while this hook was still running.
						if (this.isSuperseded()) {
							// Abort this transition
							return rejectFactory_1.Rejection.superseded(this.options.current()).toPromise();
						}
						// Hook returned a promise
						if (predicates_1.isPromise(result)) {
							// Wait for the promise, then reprocess the resolved value
							return result.then(this.handleHookResult.bind(this));
						}
						trace_1.trace.traceHookResult(result, this.options);
						// Hook returned false
						if (result === false) {
							// Abort this Transition
							return rejectFactory_1.Rejection.aborted("Hook aborted transition").toPromise();
						}
						var isTargetState = hof_1.is(targetState_1.TargetState);
						// hook returned a TargetState
						if (isTargetState(result)) {
							// Halt the current Transition and start a redirected Transition (to the TargetState).
							return rejectFactory_1.Rejection.redirected(result).toPromise();
						}
					};
					TransitionHook.prototype.toString = function () {
						var _a = this,
						    options = _a.options,
						    eventHook = _a.eventHook;
						var event = hof_1.parse("traceData.hookType")(options) || "internal",
						    context = hof_1.parse("traceData.context.state.name")(options) || hof_1.parse("traceData.context")(options) || "unknown",
						    name = strings_1.fnToString(eventHook.callback);
						return event + " context: " + context + ", " + strings_1.maxLength(200, name);
					};
					/**
      * Given an array of TransitionHooks, runs each one synchronously and sequentially.
      *
      * Returns a promise chain composed of any promises returned from each hook.invokeStep() call
      */
					TransitionHook.runSynchronousHooks = function (hooks, swallowExceptions) {
						if (swallowExceptions === void 0) {
							swallowExceptions = false;
						}
						var results = [];
						for (var i = 0; i < hooks.length; i++) {
							var hook = hooks[i];
							try {
								results.push(hook.invokeHook());
							} catch (exception) {
								if (!swallowExceptions) {
									return rejectFactory_1.Rejection.errored(exception).toPromise();
								}
								var errorHandler = hook.transition.router.stateService.defaultErrorHandler();
								errorHandler(exception);
							}
						}
						var rejections = results.filter(rejectFactory_1.Rejection.isTransitionRejectionPromise);
						if (rejections.length) return rejections[0];
						return results.filter(predicates_1.isPromise).reduce(function (chain, promise) {
							return chain.then(hof_1.val(promise));
						}, coreservices_1.services.$q.when());
					};
					return TransitionHook;
				}();
				exports.TransitionHook = TransitionHook;

				/***/
			},
			/* 14 */
			/***/function (module, exports, __webpack_require__) {

				/** @module state */ /** for typedoc */
				"use strict";

				var common_1 = __webpack_require__(3);
				/**
     * @ngdoc object
     * @name ui.router.state.type:TargetState
     *
     * @description
     * Encapsulate the desired target of a transition.
     * Wraps an identifier for a state, a set of parameters, and transition options with the definition of the state.
     *
     * @param {StateOrName} _identifier  An identifier for a state. Either a fully-qualified path, or the object
     *            used to define the state.
     * @param {IState} _definition The `State` object definition.
     * @param {ParamsOrArray} _params Parameters for the target state
     * @param {TransitionOptions} _options Transition options.
     */
				var TargetState = function () {
					function TargetState(_identifier, _definition, _params, _options) {
						if (_params === void 0) {
							_params = {};
						}
						if (_options === void 0) {
							_options = {};
						}
						this._identifier = _identifier;
						this._definition = _definition;
						this._options = _options;
						this._params = _params || {};
					}
					TargetState.prototype.name = function () {
						return this._definition && this._definition.name || this._identifier;
					};
					TargetState.prototype.identifier = function () {
						return this._identifier;
					};
					TargetState.prototype.params = function () {
						return this._params;
					};
					TargetState.prototype.$state = function () {
						return this._definition;
					};
					TargetState.prototype.state = function () {
						return this._definition && this._definition.self;
					};
					TargetState.prototype.options = function () {
						return this._options;
					};
					TargetState.prototype.exists = function () {
						return !!(this._definition && this._definition.self);
					};
					TargetState.prototype.valid = function () {
						return !this.error();
					};
					TargetState.prototype.error = function () {
						var base = this.options().relative;
						if (!this._definition && !!base) {
							var stateName = base.name ? base.name : base;
							return "Could not resolve '" + this.name() + "' from state '" + stateName + "'";
						}
						if (!this._definition) return "No such state '" + this.name() + "'";
						if (!this._definition.self) return "State '" + this.name() + "' has an invalid definition";
					};
					TargetState.prototype.toString = function () {
						return "'" + this.name() + "'" + common_1.toJson(this.params());
					};
					return TargetState;
				}();
				exports.TargetState = TargetState;

				/***/
			},
			/* 15 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module transition */ /** for typedoc */

				var common_1 = __webpack_require__(3);
				var predicates_1 = __webpack_require__(4);
				var glob_1 = __webpack_require__(7);
				/**
     * Determines if the given state matches the matchCriteria
     *
     * @hidden
     *
     * @param state a State Object to test against
     * @param criterion
     * - If a string, matchState uses the string as a glob-matcher against the state name
     * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name
     *   and returns a positive match if any of the globs match.
     * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.
     * @returns {boolean}
     */
				function matchState(state, criterion) {
					var toMatch = predicates_1.isString(criterion) ? [criterion] : criterion;
					function matchGlobs(_state) {
						var globStrings = toMatch;
						for (var i = 0; i < globStrings.length; i++) {
							var glob = glob_1.Glob.fromString(globStrings[i]);
							if (glob && glob.matches(_state.name) || !glob && globStrings[i] === _state.name) {
								return true;
							}
						}
						return false;
					}
					var matchFn = predicates_1.isFunction(toMatch) ? toMatch : matchGlobs;
					return !!matchFn(state);
				}
				exports.matchState = matchState;
				/** @hidden */
				var EventHook = function () {
					function EventHook(matchCriteria, callback, options) {
						if (options === void 0) {
							options = {};
						}
						this.callback = callback;
						this.matchCriteria = common_1.extend({ to: true, from: true, exiting: true, retained: true, entering: true }, matchCriteria);
						this.priority = options.priority || 0;
						this.bind = options.bind || null;
						this._deregistered = false;
					}
					EventHook._matchingNodes = function (nodes, criterion) {
						if (criterion === true) return nodes;
						var matching = nodes.filter(function (node) {
							return matchState(node.state, criterion);
						});
						return matching.length ? matching : null;
					};
					/**
      * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]
      *
      * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values
      * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)
      */
					EventHook.prototype.matches = function (treeChanges) {
						var mc = this.matchCriteria,
						    _matchingNodes = EventHook._matchingNodes;
						var matches = {
							to: _matchingNodes([common_1.tail(treeChanges.to)], mc.to),
							from: _matchingNodes([common_1.tail(treeChanges.from)], mc.from),
							exiting: _matchingNodes(treeChanges.exiting, mc.exiting),
							retained: _matchingNodes(treeChanges.retained, mc.retained),
							entering: _matchingNodes(treeChanges.entering, mc.entering)
						};
						// Check if all the criteria matched the TreeChanges object
						var allMatched = ["to", "from", "exiting", "retained", "entering"].map(function (prop) {
							return matches[prop];
						}).reduce(common_1.allTrueR, true);
						return allMatched ? matches : null;
					};
					return EventHook;
				}();
				exports.EventHook = EventHook;
				/** @hidden Return a registration function of the requested type. */
				function makeHookRegistrationFn(hooks, name) {
					return function (matchObject, callback, options) {
						if (options === void 0) {
							options = {};
						}
						var eventHook = new EventHook(matchObject, callback, options);
						hooks[name].push(eventHook);
						return function deregisterEventHook() {
							eventHook._deregistered = true;
							common_1.removeFrom(hooks[name])(eventHook);
						};
					};
				}
				/**
     * Mixin class acts as a Transition Hook registry.
     *
     * Holds the registered [[HookFn]] objects.
     * Exposes functions to register new hooks.
     *
     * This is a Mixin class which can be applied to other objects.
     *
     * The hook registration functions are [[onBefore]], [[onStart]], [[onEnter]], [[onRetain]], [[onExit]], [[onFinish]], [[onSuccess]], [[onError]].
     *
     * This class is mixed into both the [[TransitionService]] and every [[Transition]] object.
     * Global hooks are added to the [[TransitionService]].
     * Since each [[Transition]] is itself a `HookRegistry`, hooks can also be added to individual Transitions
     * (note: the hook criteria still must match the Transition).
     */
				var HookRegistry = function () {
					function HookRegistry() {
						var _this = this;
						this._transitionEvents = {
							onBefore: [], onStart: [], onEnter: [], onRetain: [], onExit: [], onFinish: [], onSuccess: [], onError: []
						};
						this.getHooks = function (name) {
							return _this._transitionEvents[name];
						};
						/** @inheritdoc */
						this.onBefore = makeHookRegistrationFn(this._transitionEvents, "onBefore");
						/** @inheritdoc */
						this.onStart = makeHookRegistrationFn(this._transitionEvents, "onStart");
						/** @inheritdoc */
						this.onEnter = makeHookRegistrationFn(this._transitionEvents, "onEnter");
						/** @inheritdoc */
						this.onRetain = makeHookRegistrationFn(this._transitionEvents, "onRetain");
						/** @inheritdoc */
						this.onExit = makeHookRegistrationFn(this._transitionEvents, "onExit");
						/** @inheritdoc */
						this.onFinish = makeHookRegistrationFn(this._transitionEvents, "onFinish");
						/** @inheritdoc */
						this.onSuccess = makeHookRegistrationFn(this._transitionEvents, "onSuccess");
						/** @inheritdoc */
						this.onError = makeHookRegistrationFn(this._transitionEvents, "onError");
					}
					HookRegistry.mixin = function (source, target) {
						Object.keys(source._transitionEvents).concat(["getHooks"]).forEach(function (key) {
							return target[key] = source[key];
						});
					};
					return HookRegistry;
				}();
				exports.HookRegistry = HookRegistry;

				/***/
			},
			/* 16 */
			/***/function (module, exports, __webpack_require__) {

				/** @module transition */ /** for typedoc */
				"use strict";

				var common_1 = __webpack_require__(3);
				var predicates_1 = __webpack_require__(4);
				var transitionHook_1 = __webpack_require__(13);
				var resolveContext_1 = __webpack_require__(17);
				/**
     * This class returns applicable TransitionHooks for a specific Transition instance.
     *
     * Hooks (IEventHook) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.
     * myTransition.onEnter(...).  The HookBuilder finds matching IEventHooks (where the match criteria is
     * determined by the type of hook)
     *
     * The HookBuilder also converts IEventHooks objects to TransitionHook objects, which are used to run a Transition.
     *
     * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder
     * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private
     * in the Transition class, so we must also provide the Transition's _treeChanges)
     *
     */
				var HookBuilder = function () {
					function HookBuilder($transitions, transition, baseHookOptions) {
						var _this = this;
						this.$transitions = $transitions;
						this.transition = transition;
						this.baseHookOptions = baseHookOptions;
						this.getOnBeforeHooks = function () {
							return _this._buildNodeHooks("onBefore", "to", tupleSort(), { async: false });
						};
						this.getOnStartHooks = function () {
							return _this._buildNodeHooks("onStart", "to", tupleSort());
						};
						this.getOnExitHooks = function () {
							return _this._buildNodeHooks("onExit", "exiting", tupleSort(true), { stateHook: true });
						};
						this.getOnRetainHooks = function () {
							return _this._buildNodeHooks("onRetain", "retained", tupleSort(false), { stateHook: true });
						};
						this.getOnEnterHooks = function () {
							return _this._buildNodeHooks("onEnter", "entering", tupleSort(false), { stateHook: true });
						};
						this.getOnFinishHooks = function () {
							return _this._buildNodeHooks("onFinish", "to", tupleSort());
						};
						this.getOnSuccessHooks = function () {
							return _this._buildNodeHooks("onSuccess", "to", tupleSort(), { async: false, rejectIfSuperseded: false });
						};
						this.getOnErrorHooks = function () {
							return _this._buildNodeHooks("onError", "to", tupleSort(), { async: false, rejectIfSuperseded: false });
						};
						this.treeChanges = transition.treeChanges();
						this.toState = common_1.tail(this.treeChanges.to).state;
						this.fromState = common_1.tail(this.treeChanges.from).state;
						this.transitionOptions = transition.options();
					}
					HookBuilder.prototype.asyncHooks = function () {
						var onStartHooks = this.getOnStartHooks();
						var onExitHooks = this.getOnExitHooks();
						var onRetainHooks = this.getOnRetainHooks();
						var onEnterHooks = this.getOnEnterHooks();
						var onFinishHooks = this.getOnFinishHooks();
						var asyncHooks = [onStartHooks, onExitHooks, onRetainHooks, onEnterHooks, onFinishHooks];
						return asyncHooks.reduce(common_1.unnestR, []).filter(common_1.identity);
					};
					/**
      * Returns an array of newly built TransitionHook objects.
      *
      * - Finds all IEventHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].
      * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)
      * - For each of the [[PathNode]]s, creates a TransitionHook
      *
      * @param hookType the name of the hook registration function, e.g., 'onEnter', 'onFinish'.
      * @param matchingNodesProp selects which [[PathNode]]s from the [[IMatchingNodes]] object to create hooks for.
      * @param getLocals a function which accepts a [[PathNode]] and returns additional locals to provide to the hook as injectables
      * @param sortHooksFn a function which compares two HookTuple and returns <1, 0, or >1
      * @param options any specific Transition Hook Options
      */
					HookBuilder.prototype._buildNodeHooks = function (hookType, matchingNodesProp, sortHooksFn, options) {
						var _this = this;
						// Find all the matching registered hooks for a given hook type
						var matchingHooks = this._matchingHooks(hookType, this.treeChanges);
						if (!matchingHooks) return [];
						var makeTransitionHooks = function (hook) {
							// Fetch the Nodes that caused this hook to match.
							var matches = hook.matches(_this.treeChanges);
							// Select the PathNode[] that will be used as TransitionHook context objects
							var matchingNodes = matches[matchingNodesProp];
							// When invoking 'exiting' hooks, give them the "from path" for resolve data.
							// Everything else gets the "to path"
							var resolvePath = matchingNodesProp === 'exiting' ? _this.treeChanges.from : _this.treeChanges.to;
							var resolveContext = new resolveContext_1.ResolveContext(resolvePath);
							// Return an array of HookTuples
							return matchingNodes.map(function (node) {
								var _options = common_1.extend({ bind: hook.bind, traceData: { hookType: hookType, context: node } }, _this.baseHookOptions, options);
								var state = _options.stateHook ? node.state : null;
								var transitionHook = new transitionHook_1.TransitionHook(_this.transition, state, hook, _options);
								return { hook: hook, node: node, transitionHook: transitionHook };
							});
						};
						return matchingHooks.map(makeTransitionHooks).reduce(common_1.unnestR, []).sort(sortHooksFn).map(function (tuple) {
							return tuple.transitionHook;
						});
					};
					/**
      * Finds all IEventHooks from:
      * - The Transition object instance hook registry
      * - The TransitionService ($transitions) global hook registry
      *
      * which matched:
      * - the eventType
      * - the matchCriteria (to, from, exiting, retained, entering)
      *
      * @returns an array of matched [[IEventHook]]s
      */
					HookBuilder.prototype._matchingHooks = function (hookName, treeChanges) {
						return [this.transition, this.$transitions] // Instance and Global hook registries
						.map(function (reg) {
							return reg.getHooks(hookName);
						}) // Get named hooks from registries
						.filter(common_1.assertPredicate(predicates_1.isArray, "broken event named: " + hookName)) // Sanity check
						.reduce(common_1.unnestR, []) // Un-nest IEventHook[][] to IEventHook[] array
						.filter(function (hook) {
							return hook.matches(treeChanges);
						}); // Only those satisfying matchCriteria
					};
					return HookBuilder;
				}();
				exports.HookBuilder = HookBuilder;
				/**
     * A factory for a sort function for HookTuples.
     *
     * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares
     * the EventHook priority.
     *
     * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth
     * @returns a tuple sort function
     */
				function tupleSort(reverseDepthSort) {
					if (reverseDepthSort === void 0) {
						reverseDepthSort = false;
					}
					return function nodeDepthThenPriority(l, r) {
						var factor = reverseDepthSort ? -1 : 1;
						var depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;
						return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;
					};
				}

				/***/
			},
			/* 17 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module resolve */ /** for typedoc */

				var common_1 = __webpack_require__(3);
				var hof_1 = __webpack_require__(5);
				var trace_1 = __webpack_require__(12);
				var coreservices_1 = __webpack_require__(6);
				var interface_1 = __webpack_require__(18);
				var resolvable_1 = __webpack_require__(19);
				var pathFactory_1 = __webpack_require__(20);
				var strings_1 = __webpack_require__(9);
				var when = interface_1.resolvePolicies.when;
				var ALL_WHENS = [when.EAGER, when.LAZY];
				var EAGER_WHENS = [when.EAGER];
				exports.NATIVE_INJECTOR_TOKEN = "Native Injector";
				/**
     * Encapsulates Depenency Injection for a path of nodes
     *
     * UI-Router states are organized as a tree.
     * A nested state has a path of ancestors to the root of the tree.
     * When a state is being activated, each element in the path is wrapped as a [[PathNode]].
     * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.
     *
     * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.
     */
				var ResolveContext = function () {
					function ResolveContext(_path) {
						this._path = _path;
					}
					/** Gets all the tokens found in the resolve context, de-duplicated */
					ResolveContext.prototype.getTokens = function () {
						return this._path.reduce(function (acc, node) {
							return acc.concat(node.resolvables.map(function (r) {
								return r.token;
							}));
						}, []).reduce(common_1.uniqR, []);
					};
					/**
      * Gets the Resolvable that matches the token
      *
      * Gets the last Resolvable that matches the token in this context, or undefined.
      * Throws an error if it doesn't exist in the ResolveContext
      */
					ResolveContext.prototype.getResolvable = function (token) {
						var matching = this._path.map(function (node) {
							return node.resolvables;
						}).reduce(common_1.unnestR, []).filter(function (r) {
							return r.token === token;
						});
						return common_1.tail(matching);
					};
					/**
      * Returns a ResolveContext that includes a portion of this one
      *
      * Given a state, this method creates a new ResolveContext from this one.
      * The new context starts at the first node (root) and stops at the node for the `state` parameter.
      *
      * #### Why
      *
      * When a transition is created, the nodes in the "To Path" are injected from a ResolveContext.
      * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.
      * The "To State" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).
      * This method is used to create a narrower context when injecting ancestor nodes.
      *
      * @example
      * `let ABCD = new ResolveContext([A, B, C, D]);`
      *
      * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:
      * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.
      * However, `B` should only be able to access resolvables from `A`, `B`.
      *
      * When resolving for the `B` node, first take the full "To Path" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.
      * `let AB = ABCD.subcontext(a)`
      */
					ResolveContext.prototype.subContext = function (state) {
						return new ResolveContext(pathFactory_1.PathFactory.subPath(this._path, function (node) {
							return node.state === state;
						}));
					};
					/**
      * Adds Resolvables to the node that matches the state
      *
      * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).
      * The resolvable is added to the node matching the `state` parameter.
      *
      * These new resolvables are not automatically fetched.
      * The calling code should either fetch them, fetch something that depends on them,
      * or rely on [[resolvePath]] being called when some state is being entered.
      *
      * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.
      *
      * @param newResolvables the new Resolvables
      * @param state Used to find the node to put the resolvable on
      */
					ResolveContext.prototype.addResolvables = function (newResolvables, state) {
						var node = common_1.find(this._path, hof_1.propEq('state', state));
						var keys = newResolvables.map(function (r) {
							return r.token;
						});
						node.resolvables = node.resolvables.filter(function (r) {
							return keys.indexOf(r.token) === -1;
						}).concat(newResolvables);
					};
					/**
      * Returns a promise for an array of resolved path Element promises
      *
      * @param when
      * @param trans
      * @returns {Promise<any>|any}
      */
					ResolveContext.prototype.resolvePath = function (when, trans) {
						var _this = this;
						if (when === void 0) {
							when = "LAZY";
						}
						// This option determines which 'when' policy Resolvables we are about to fetch.
						var whenOption = common_1.inArray(ALL_WHENS, when) ? when : "LAZY";
						// If the caller specified EAGER, only the EAGER Resolvables are fetched.
						// if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`
						var matchedWhens = whenOption === interface_1.resolvePolicies.when.EAGER ? EAGER_WHENS : ALL_WHENS;
						// get the subpath to the state argument, if provided
						trace_1.trace.traceResolvePath(this._path, when, trans);
						var promises = this._path.reduce(function (acc, node) {
							var matchesRequestedPolicy = function (resolvable) {
								return common_1.inArray(matchedWhens, resolvable.getPolicy(node.state).when);
							};
							var nodeResolvables = node.resolvables.filter(matchesRequestedPolicy);
							var subContext = _this.subContext(node.state);
							// For the matching Resolvables, start their async fetch process.
							var getResult = function (r) {
								return r.get(subContext, trans).then(function (value) {
									return { token: r.token, value: value };
								});
							};
							return acc.concat(nodeResolvables.map(getResult));
						}, []);
						return coreservices_1.services.$q.all(promises);
					};
					ResolveContext.prototype.injector = function () {
						return this._injector || (this._injector = new UIInjectorImpl(this));
					};
					ResolveContext.prototype.findNode = function (resolvable) {
						return common_1.find(this._path, function (node) {
							return common_1.inArray(node.resolvables, resolvable);
						});
					};
					/**
      * Gets the async dependencies of a Resolvable
      *
      * Given a Resolvable, returns its dependencies as a Resolvable[]
      */
					ResolveContext.prototype.getDependencies = function (resolvable) {
						var _this = this;
						var node = this.findNode(resolvable);
						// Find which other resolvables are "visible" to the `resolvable` argument
						// subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)
						var subPath = pathFactory_1.PathFactory.subPath(this._path, function (x) {
							return x === node;
						}) || this._path;
						var availableResolvables = subPath.reduce(function (acc, node) {
							return acc.concat(node.resolvables);
						}, []) //all of subpath's resolvables
						.filter(function (res) {
							return res !== resolvable;
						}); // filter out the `resolvable` argument
						var getDependency = function (token) {
							var matching = availableResolvables.filter(function (r) {
								return r.token === token;
							});
							if (matching.length) return common_1.tail(matching);
							var fromInjector = _this.injector().getNative(token);
							if (!fromInjector) {
								throw new Error("Could not find Dependency Injection token: " + strings_1.stringify(token));
							}
							return new resolvable_1.Resolvable(token, function () {
								return fromInjector;
							}, [], fromInjector);
						};
						return resolvable.deps.map(getDependency);
					};
					return ResolveContext;
				}();
				exports.ResolveContext = ResolveContext;
				var UIInjectorImpl = function () {
					function UIInjectorImpl(context) {
						this.context = context;
						this.native = this.get(exports.NATIVE_INJECTOR_TOKEN) || coreservices_1.services.$injector;
					}
					UIInjectorImpl.prototype.get = function (token) {
						var resolvable = this.context.getResolvable(token);
						if (resolvable) {
							if (!resolvable.resolved) {
								throw new Error("Resolvable async .get() not complete:" + strings_1.stringify(resolvable.token));
							}
							return resolvable.data;
						}
						return this.native && this.native.get(token);
					};
					UIInjectorImpl.prototype.getAsync = function (token) {
						var resolvable = this.context.getResolvable(token);
						if (resolvable) return resolvable.get(this.context);
						return coreservices_1.services.$q.when(this.native.get(token));
					};
					UIInjectorImpl.prototype.getNative = function (token) {
						return this.native.get(token);
					};
					return UIInjectorImpl;
				}();

				/***/
			},
			/* 18 */
			/***/function (module, exports) {

				"use strict";

				exports.resolvePolicies = {
					when: {
						LAZY: "LAZY",
						EAGER: "EAGER"
					},
					async: {
						WAIT: "WAIT",
						NOWAIT: "NOWAIT",
						RXWAIT: "RXWAIT"
					}
				};

				/***/
			},
			/* 19 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module resolve */ /** for typedoc */

				var common_1 = __webpack_require__(3);
				var coreservices_1 = __webpack_require__(6);
				var trace_1 = __webpack_require__(12);
				var strings_1 = __webpack_require__(9);
				var predicates_1 = __webpack_require__(4);
				// TODO: explicitly make this user configurable
				exports.defaultResolvePolicy = {
					when: "LAZY",
					async: "WAIT"
				};
				/**
     * The basic building block for the resolve system.
     *
     * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),
     * and the unwrapped-when-complete (.data) result of the resolveFn.
     *
     * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the
     * resolveFn) and returns the resulting promise.
     *
     * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first
     * parameter to those fns.
     */
				var Resolvable = function () {
					function Resolvable(arg1, resolveFn, deps, policy, data) {
						this.resolved = false;
						this.promise = undefined;
						if (arg1 instanceof Resolvable) {
							common_1.extend(this, arg1);
						} else if (predicates_1.isFunction(resolveFn)) {
							if (arg1 == null || arg1 == undefined) throw new Error("new Resolvable(): token argument is required");
							if (!predicates_1.isFunction(resolveFn)) throw new Error("new Resolvable(): resolveFn argument must be a function");
							this.token = arg1;
							this.policy = policy;
							this.resolveFn = resolveFn;
							this.deps = deps || [];
							this.data = data;
							this.resolved = data !== undefined;
							this.promise = this.resolved ? coreservices_1.services.$q.when(this.data) : undefined;
						} else if (predicates_1.isObject(arg1) && arg1.token && predicates_1.isFunction(arg1.resolveFn)) {
							var literal = arg1;
							return new Resolvable(literal.token, literal.resolveFn, literal.deps, literal.policy, literal.data);
						}
					}
					Resolvable.prototype.getPolicy = function (state) {
						var thisPolicy = this.policy || {};
						var statePolicy = state && state.resolvePolicy || {};
						return {
							when: thisPolicy.when || statePolicy.when || exports.defaultResolvePolicy.when,
							async: thisPolicy.async || statePolicy.async || exports.defaultResolvePolicy.async
						};
					};
					/**
      * Asynchronously resolve this Resolvable's data
      *
      * Given a ResolveContext that this Resolvable is found in:
      * Wait for this Resolvable's dependencies, then invoke this Resolvable's function
      * and update the Resolvable's state
      */
					Resolvable.prototype.resolve = function (resolveContext, trans) {
						var _this = this;
						var $q = coreservices_1.services.$q;
						// Gets all dependencies from ResolveContext and wait for them to be resolved
						var getResolvableDependencies = function () {
							return $q.all(resolveContext.getDependencies(_this).map(function (r) {
								return r.get(resolveContext, trans);
							}));
						};
						// Invokes the resolve function passing the resolved dependencies as arguments
						var invokeResolveFn = function (resolvedDeps) {
							return _this.resolveFn.apply(null, resolvedDeps);
						};
						/**
       * For RXWAIT policy:
       *
       * Given an observable returned from a resolve function:
       * - enables .cache() mode (this allows multicast subscribers)
       * - then calls toPromise() (this triggers subscribe() and thus fetches)
       * - Waits for the promise, then return the cached observable (not the first emitted value).
       */
						var waitForRx = function (observable$) {
							var cached = observable$.cache(1);
							return cached.take(1).toPromise().then(function () {
								return cached;
							});
						};
						// If the resolve policy is RXWAIT, wait for the observable to emit something. otherwise pass through.
						var node = resolveContext.findNode(this);
						var state = node && node.state;
						var maybeWaitForRx = this.getPolicy(state).async === "RXWAIT" ? waitForRx : common_1.identity;
						// After the final value has been resolved, update the state of the Resolvable
						var applyResolvedValue = function (resolvedValue) {
							_this.data = resolvedValue;
							_this.resolved = true;
							trace_1.trace.traceResolvableResolved(_this, trans);
							return _this.data;
						};
						// Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.
						return this.promise = $q.when().then(getResolvableDependencies).then(invokeResolveFn).then(maybeWaitForRx).then(applyResolvedValue);
					};
					/**
      * Gets a promise for this Resolvable's data.
      *
      * Fetches the data and returns a promise.
      * Returns the existing promise if it has already been fetched once.
      */
					Resolvable.prototype.get = function (resolveContext, trans) {
						return this.promise || this.resolve(resolveContext, trans);
					};
					Resolvable.prototype.toString = function () {
						return "Resolvable(token: " + strings_1.stringify(this.token) + ", requires: [" + this.deps.map(strings_1.stringify) + "])";
					};
					Resolvable.prototype.clone = function () {
						return new Resolvable(this);
					};
					Resolvable.fromData = function (token, data) {
						return new Resolvable(token, function () {
							return data;
						}, null, null, data);
					};
					return Resolvable;
				}();
				exports.Resolvable = Resolvable;

				/***/
			},
			/* 20 */
			/***/function (module, exports, __webpack_require__) {

				/** @module path */ /** for typedoc */
				"use strict";

				var common_1 = __webpack_require__(3);
				var hof_1 = __webpack_require__(5);
				var targetState_1 = __webpack_require__(14);
				var node_1 = __webpack_require__(21);
				/**
     * This class contains functions which convert TargetStates, Nodes and paths from one type to another.
     */
				var PathFactory = function () {
					function PathFactory() {}
					/** Given a PathNode[], create an TargetState */
					PathFactory.makeTargetState = function (path) {
						var state = common_1.tail(path).state;
						return new targetState_1.TargetState(state, state, path.map(hof_1.prop("paramValues")).reduce(common_1.mergeR, {}));
					};
					PathFactory.buildPath = function (targetState) {
						var toParams = targetState.params();
						return targetState.$state().path.map(function (state) {
							return new node_1.PathNode(state).applyRawParams(toParams);
						});
					};
					/** Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[] */
					PathFactory.buildToPath = function (fromPath, targetState) {
						var toPath = PathFactory.buildPath(targetState);
						if (targetState.options().inherit) {
							return PathFactory.inheritParams(fromPath, toPath, Object.keys(targetState.params()));
						}
						return toPath;
					};
					/**
      * Creates ViewConfig objects and adds to nodes.
      *
      * On each [[PathNode]], creates ViewConfig objects from the views: property of the node's state
      */
					PathFactory.applyViewConfigs = function ($view, path, states) {
						// Only apply the viewConfigs to the nodes for the given states
						path.filter(function (node) {
							return common_1.inArray(states, node.state);
						}).forEach(function (node) {
							var viewDecls = common_1.values(node.state.views || {});
							var subPath = PathFactory.subPath(path, function (n) {
								return n === node;
							});
							var viewConfigs = viewDecls.map(function (view) {
								return $view.createViewConfig(subPath, view);
							});
							node.views = viewConfigs.reduce(common_1.unnestR, []);
						});
					};
					/**
      * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath
      *
      * For a parameter in a node to be inherited from the from path:
      * - The toPath's node must have a matching node in the fromPath (by state).
      * - The parameter name must not be found in the toKeys parameter array.
      *
      * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some
      * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,
      * it is not inherited from the fromPath.
      */
					PathFactory.inheritParams = function (fromPath, toPath, toKeys) {
						if (toKeys === void 0) {
							toKeys = [];
						}
						function nodeParamVals(path, state) {
							var node = common_1.find(path, hof_1.propEq('state', state));
							return common_1.extend({}, node && node.paramValues);
						}
						/**
       * Given an [[PathNode]] "toNode", return a new [[PathNode]] with param values inherited from the
       * matching node in fromPath.  Only inherit keys that aren't found in "toKeys" from the node in "fromPath""
       */
						function makeInheritedParamsNode(toNode) {
							// All param values for the node (may include default key/vals, when key was not found in toParams)
							var toParamVals = common_1.extend({}, toNode && toNode.paramValues);
							// limited to only those keys found in toParams
							var incomingParamVals = common_1.pick(toParamVals, toKeys);
							toParamVals = common_1.omit(toParamVals, toKeys);
							var fromParamVals = nodeParamVals(fromPath, toNode.state) || {};
							// extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals
							var ownParamVals = common_1.extend(toParamVals, fromParamVals, incomingParamVals);
							return new node_1.PathNode(toNode.state).applyRawParams(ownParamVals);
						}
						// The param keys specified by the incoming toParams
						return toPath.map(makeInheritedParamsNode);
					};
					/**
      * Computes the tree changes (entering, exiting) between a fromPath and toPath.
      */
					PathFactory.treeChanges = function (fromPath, toPath, reloadState) {
						var keep = 0,
						    max = Math.min(fromPath.length, toPath.length);
						var staticParams = function (state) {
							return state.parameters({ inherit: false }).filter(hof_1.not(hof_1.prop('dynamic'))).map(hof_1.prop('id'));
						};
						var nodesMatch = function (node1, node2) {
							return node1.equals(node2, staticParams(node1.state));
						};
						while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {
							keep++;
						}
						/** Given a retained node, return a new node which uses the to node's param values */
						function applyToParams(retainedNode, idx) {
							var cloned = node_1.PathNode.clone(retainedNode);
							cloned.paramValues = toPath[idx].paramValues;
							return cloned;
						}
						var from, retained, exiting, entering, to;
						from = fromPath;
						retained = from.slice(0, keep);
						exiting = from.slice(keep);
						// Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped
						var retainedWithToParams = retained.map(applyToParams);
						entering = toPath.slice(keep);
						to = retainedWithToParams.concat(entering);
						return { from: from, to: to, retained: retained, exiting: exiting, entering: entering };
					};
					/**
      * Return a subpath of a path, which stops at the first matching node
      *
      * Given an array of nodes, returns a subset of the array starting from the first node,
      * stopping when the first node matches the predicate.
      *
      * @param path a path of [[PathNode]]s
      * @param predicate a [[Predicate]] fn that matches [[PathNode]]s
      * @returns a subpath up to the matching node, or undefined if no match is found
      */
					PathFactory.subPath = function (path, predicate) {
						var node = common_1.find(path, predicate);
						var elementIdx = path.indexOf(node);
						return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);
					};
					/** Gets the raw parameter values from a path */
					PathFactory.paramValues = function (path) {
						return path.reduce(function (acc, node) {
							return common_1.extend(acc, node.paramValues);
						}, {});
					};
					return PathFactory;
				}();
				exports.PathFactory = PathFactory;

				/***/
			},
			/* 21 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module path */ /** for typedoc */

				var common_1 = __webpack_require__(3);
				var hof_1 = __webpack_require__(5);
				var param_1 = __webpack_require__(22);
				/**
     * A node in a [[TreeChanges]] path
     *
     * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.
     * Each PathNode corresponds to a state being entered, exited, or retained.
     * The stateful information includes parameter values and resolve data.
     */
				var PathNode = function () {
					function PathNode(stateOrPath) {
						if (stateOrPath instanceof PathNode) {
							var node = stateOrPath;
							this.state = node.state;
							this.paramSchema = node.paramSchema.slice();
							this.paramValues = common_1.extend({}, node.paramValues);
							this.resolvables = node.resolvables.slice();
							this.views = node.views && node.views.slice();
						} else {
							var state = stateOrPath;
							this.state = state;
							this.paramSchema = state.parameters({ inherit: false });
							this.paramValues = {};
							this.resolvables = state.resolvables.map(function (res) {
								return res.clone();
							});
						}
					}
					/** Sets [[paramValues]] for the node, from the values of an object hash */
					PathNode.prototype.applyRawParams = function (params) {
						var getParamVal = function (paramDef) {
							return [paramDef.id, paramDef.value(params[paramDef.id])];
						};
						this.paramValues = this.paramSchema.reduce(function (memo, pDef) {
							return common_1.applyPairs(memo, getParamVal(pDef));
						}, {});
						return this;
					};
					/** Gets a specific [[Param]] metadata that belongs to the node */
					PathNode.prototype.parameter = function (name) {
						return common_1.find(this.paramSchema, hof_1.propEq("id", name));
					};
					/**
      * @returns true if the state and parameter values for another PathNode are
      * equal to the state and param values for this PathNode
      */
					PathNode.prototype.equals = function (node, keys) {
						var _this = this;
						if (keys === void 0) {
							keys = this.paramSchema.map(function (p) {
								return p.id;
							});
						}
						var paramValsEq = function (key) {
							return _this.parameter(key).type.equals(_this.paramValues[key], node.paramValues[key]);
						};
						return this.state === node.state && keys.map(paramValsEq).reduce(common_1.allTrueR, true);
					};
					/** Returns a clone of the PathNode */
					PathNode.clone = function (node) {
						return new PathNode(node);
					};
					/**
      * Returns a new path which is a subpath of the first path which matched the second path.
      *
      * The new path starts from root and contains any nodes that match the nodes in the second path.
      * Nodes are compared using their state property and parameter values.
      *
      * @param pathA the first path
      * @param pathB the second path
      * @param ignoreDynamicParams don't compare dynamic parameter values
      */
					PathNode.matching = function (pathA, pathB, ignoreDynamicParams) {
						if (ignoreDynamicParams === void 0) {
							ignoreDynamicParams = true;
						}
						var matching = [];
						for (var i = 0; i < pathA.length && i < pathB.length; i++) {
							var a = pathA[i],
							    b = pathB[i];
							if (a.state !== b.state) break;
							var changedParams = param_1.Param.changed(a.paramSchema, a.paramValues, b.paramValues).filter(function (param) {
								return !(ignoreDynamicParams && param.dynamic);
							});
							if (changedParams.length) break;
							matching.push(a);
						}
						return matching;
					};
					return PathNode;
				}();
				exports.PathNode = PathNode;

				/***/
			},
			/* 22 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module params */ /** for typedoc */

				var common_1 = __webpack_require__(3);
				var hof_1 = __webpack_require__(5);
				var predicates_1 = __webpack_require__(4);
				var coreservices_1 = __webpack_require__(6);
				var urlMatcherConfig_1 = __webpack_require__(23);
				var type_1 = __webpack_require__(24);
				var hasOwn = Object.prototype.hasOwnProperty;
				var isShorthand = function (cfg) {
					return ["value", "type", "squash", "array", "dynamic"].filter(hasOwn.bind(cfg || {})).length === 0;
				};
				(function (DefType) {
					DefType[DefType["PATH"] = 0] = "PATH";
					DefType[DefType["SEARCH"] = 1] = "SEARCH";
					DefType[DefType["CONFIG"] = 2] = "CONFIG";
				})(exports.DefType || (exports.DefType = {}));
				var DefType = exports.DefType;
				function unwrapShorthand(cfg) {
					cfg = isShorthand(cfg) && { value: cfg } || cfg;
					return common_1.extend(cfg, {
						$$fn: predicates_1.isInjectable(cfg.value) ? cfg.value : function () {
							return cfg.value;
						}
					});
				}
				function getType(cfg, urlType, location, id, paramTypes) {
					if (cfg.type && urlType && urlType.name !== 'string') throw new Error("Param '" + id + "' has two type configurations.");
					if (cfg.type && urlType && urlType.name === 'string' && paramTypes.type(cfg.type)) return paramTypes.type(cfg.type);
					if (urlType) return urlType;
					if (!cfg.type) return location === DefType.CONFIG ? paramTypes.type("any") : paramTypes.type("string");
					return cfg.type instanceof type_1.ParamType ? cfg.type : paramTypes.type(cfg.type);
				}
				/**
     * returns false, true, or the squash value to indicate the "default parameter url squash policy".
     */
				function getSquashPolicy(config, isOptional) {
					var squash = config.squash;
					if (!isOptional || squash === false) return false;
					if (!predicates_1.isDefined(squash) || squash == null) return urlMatcherConfig_1.matcherConfig.defaultSquashPolicy();
					if (squash === true || predicates_1.isString(squash)) return squash;
					throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
				}
				function getReplace(config, arrayMode, isOptional, squash) {
					var replace,
					    configuredKeys,
					    defaultPolicy = [{ from: "", to: isOptional || arrayMode ? undefined : "" }, { from: null, to: isOptional || arrayMode ? undefined : "" }];
					replace = predicates_1.isArray(config.replace) ? config.replace : [];
					if (predicates_1.isString(squash)) replace.push({ from: squash, to: undefined });
					configuredKeys = common_1.map(replace, hof_1.prop("from"));
					return common_1.filter(defaultPolicy, function (item) {
						return configuredKeys.indexOf(item.from) === -1;
					}).concat(replace);
				}
				var Param = function () {
					function Param(id, type, config, location, paramTypes) {
						config = unwrapShorthand(config);
						type = getType(config, type, location, id, paramTypes);
						var arrayMode = getArrayMode();
						type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;
						var isOptional = config.value !== undefined;
						var dynamic = predicates_1.isDefined(config.dynamic) ? !!config.dynamic : !!type.dynamic;
						var squash = getSquashPolicy(config, isOptional);
						var replace = getReplace(config, arrayMode, isOptional, squash);
						// array config: param name (param[]) overrides default settings.  explicit config overrides param name.
						function getArrayMode() {
							var arrayDefaults = { array: location === DefType.SEARCH ? "auto" : false };
							var arrayParamNomenclature = id.match(/\[\]$/) ? { array: true } : {};
							return common_1.extend(arrayDefaults, arrayParamNomenclature, config).array;
						}
						common_1.extend(this, { id: id, type: type, location: location, squash: squash, replace: replace, isOptional: isOptional, dynamic: dynamic, config: config, array: arrayMode });
					}
					Param.prototype.isDefaultValue = function (value) {
						return this.isOptional && this.type.equals(this.value(), value);
					};
					/**
      * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
      * default value, which may be the result of an injectable function.
      */
					Param.prototype.value = function (value) {
						var _this = this;
						/**
       * [Internal] Get the default value of a parameter, which may be an injectable function.
       */
						var $$getDefaultValue = function () {
							if (!coreservices_1.services.$injector) throw new Error("Injectable functions cannot be called at configuration time");
							var defaultValue = coreservices_1.services.$injector.invoke(_this.config.$$fn);
							if (defaultValue !== null && defaultValue !== undefined && !_this.type.is(defaultValue)) throw new Error("Default value (" + defaultValue + ") for parameter '" + _this.id + "' is not an instance of ParamType (" + _this.type.name + ")");
							return defaultValue;
						};
						var $replace = function (val) {
							var replacement = common_1.map(common_1.filter(_this.replace, hof_1.propEq('from', val)), hof_1.prop("to"));
							return replacement.length ? replacement[0] : val;
						};
						value = $replace(value);
						return !predicates_1.isDefined(value) ? $$getDefaultValue() : this.type.$normalize(value);
					};
					Param.prototype.isSearch = function () {
						return this.location === DefType.SEARCH;
					};
					Param.prototype.validates = function (value) {
						// There was no parameter value, but the param is optional
						if ((!predicates_1.isDefined(value) || value === null) && this.isOptional) return true;
						// The value was not of the correct ParamType, and could not be decoded to the correct ParamType
						var normalized = this.type.$normalize(value);
						if (!this.type.is(normalized)) return false;
						// The value was of the correct type, but when encoded, did not match the ParamType's regexp
						var encoded = this.type.encode(normalized);
						return !(predicates_1.isString(encoded) && !this.type.pattern.exec(encoded));
					};
					Param.prototype.toString = function () {
						return "{Param:" + this.id + " " + this.type + " squash: '" + this.squash + "' optional: " + this.isOptional + "}";
					};
					/** Creates a new [[Param]] from a CONFIG block */
					Param.fromConfig = function (id, type, config, paramTypes) {
						return new Param(id, type, config, DefType.CONFIG, paramTypes);
					};
					/** Creates a new [[Param]] from a url PATH */
					Param.fromPath = function (id, type, config, paramTypes) {
						return new Param(id, type, config, DefType.PATH, paramTypes);
					};
					/** Creates a new [[Param]] from a url SEARCH */
					Param.fromSearch = function (id, type, config, paramTypes) {
						return new Param(id, type, config, DefType.SEARCH, paramTypes);
					};
					Param.values = function (params, values) {
						if (values === void 0) {
							values = {};
						}
						return params.map(function (param) {
							return [param.id, param.value(values[param.id])];
						}).reduce(common_1.applyPairs, {});
					};
					/**
      * Finds [[Param]] objects which have different param values
      *
      * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects
      *
      * @param params: The list of Param objects to filter
      * @param values1: The first set of parameter values
      * @param values2: the second set of parameter values
      *
      * @returns any Param objects whose values were different between values1 and values2
      */
					Param.changed = function (params, values1, values2) {
						if (values1 === void 0) {
							values1 = {};
						}
						if (values2 === void 0) {
							values2 = {};
						}
						return params.filter(function (param) {
							return !param.type.equals(values1[param.id], values2[param.id]);
						});
					};
					/**
      * Checks if two param value objects are equal (for a set of [[Param]] objects)
      *
      * @param params The list of [[Param]] objects to check
      * @param values1 The first set of param values
      * @param values2 The second set of param values
      *
      * @returns true if the param values in values1 and values2 are equal
      */
					Param.equals = function (params, values1, values2) {
						if (values1 === void 0) {
							values1 = {};
						}
						if (values2 === void 0) {
							values2 = {};
						}
						return Param.changed(params, values1, values2).length === 0;
					};
					/** Returns true if a the parameter values are valid, according to the Param definitions */
					Param.validates = function (params, values) {
						if (values === void 0) {
							values = {};
						}
						return params.map(function (param) {
							return param.validates(values[param.id]);
						}).reduce(common_1.allTrueR, true);
					};
					return Param;
				}();
				exports.Param = Param;

				/***/
			},
			/* 23 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module url */ /** for typedoc */

				var predicates_1 = __webpack_require__(4);
				var MatcherConfig = function () {
					function MatcherConfig() {
						this._isCaseInsensitive = false;
						this._isStrictMode = true;
						this._defaultSquashPolicy = false;
					}
					MatcherConfig.prototype.caseInsensitive = function (value) {
						return this._isCaseInsensitive = predicates_1.isDefined(value) ? value : this._isCaseInsensitive;
					};
					MatcherConfig.prototype.strictMode = function (value) {
						return this._isStrictMode = predicates_1.isDefined(value) ? value : this._isStrictMode;
					};
					MatcherConfig.prototype.defaultSquashPolicy = function (value) {
						if (predicates_1.isDefined(value) && value !== true && value !== false && !predicates_1.isString(value)) throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
						return this._defaultSquashPolicy = predicates_1.isDefined(value) ? value : this._defaultSquashPolicy;
					};
					return MatcherConfig;
				}();
				exports.MatcherConfig = MatcherConfig;
				// TODO: Do not export global instance; create one in UIRouter() constructor
				exports.matcherConfig = new MatcherConfig();

				/***/
			},
			/* 24 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module params */ /** for typedoc */

				var common_1 = __webpack_require__(3);
				var predicates_1 = __webpack_require__(4);
				/**
     * Wraps up a `ParamType` object to handle array values.
     */
				function ArrayType(type, mode) {
					var _this = this;
					// Wrap non-array value as array
					function arrayWrap(val) {
						return predicates_1.isArray(val) ? val : predicates_1.isDefined(val) ? [val] : [];
					}
					// Unwrap array value for "auto" mode. Return undefined for empty array.
					function arrayUnwrap(val) {
						switch (val.length) {
							case 0:
								return undefined;
							case 1:
								return mode === "auto" ? val[0] : val;
							default:
								return val;
						}
					}
					// Wraps type (.is/.encode/.decode) functions to operate on each value of an array
					function arrayHandler(callback, allTruthyMode) {
						return function handleArray(val) {
							if (predicates_1.isArray(val) && val.length === 0) return val;
							var arr = arrayWrap(val);
							var result = common_1.map(arr, callback);
							return allTruthyMode === true ? common_1.filter(result, function (x) {
								return !x;
							}).length === 0 : arrayUnwrap(result);
						};
					}
					// Wraps type (.equals) functions to operate on each value of an array
					function arrayEqualsHandler(callback) {
						return function handleArray(val1, val2) {
							var left = arrayWrap(val1),
							    right = arrayWrap(val2);
							if (left.length !== right.length) return false;
							for (var i = 0; i < left.length; i++) {
								if (!callback(left[i], right[i])) return false;
							}
							return true;
						};
					}
					['encode', 'decode', 'equals', '$normalize'].forEach(function (name) {
						var paramTypeFn = type[name].bind(type);
						var wrapperFn = name === 'equals' ? arrayEqualsHandler : arrayHandler;
						_this[name] = wrapperFn(paramTypeFn);
					});
					common_1.extend(this, {
						dynamic: type.dynamic,
						name: type.name,
						pattern: type.pattern,
						is: arrayHandler(type.is.bind(type), true),
						$arrayMode: mode
					});
				}
				/**
     * A class that implements Custom Parameter Type functionality.
     *
     * This class has naive implementations for all the [[ParamTypeDefinition]] methods.
     *
     * An instance of this class is created when a custom [[ParamTypeDefinition]] object is registered with the [[UrlMatcherFactory.type]].
     *
     * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.
     *
     * @example
     * ```
     *
     * {
     *   decode: function(val) { return parseInt(val, 10); },
     *   encode: function(val) { return val && val.toString(); },
     *   equals: function(a, b) { return this.is(a) && a === b; },
     *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },
     *   pattern: /\d+/
     * }
     * ```
     */
				var ParamType = function () {
					/**
      * @param def  A configuration object which contains the custom type definition.  The object's
      *        properties will override the default methods and/or pattern in `ParamType`'s public interface.
      * @returns a new ParamType object
      */
					function ParamType(def) {
						this.pattern = /.*/;
						common_1.extend(this, def);
					}
					// consider these four methods to be "abstract methods" that should be overridden
					/** @inheritdoc */
					ParamType.prototype.is = function (val, key) {
						return true;
					};
					/** @inheritdoc */
					ParamType.prototype.encode = function (val, key) {
						return val;
					};
					/** @inheritdoc */
					ParamType.prototype.decode = function (val, key) {
						return val;
					};
					/** @inheritdoc */
					ParamType.prototype.equals = function (a, b) {
						return a == b;
					};
					ParamType.prototype.$subPattern = function () {
						var sub = this.pattern.toString();
						return sub.substr(1, sub.length - 2);
					};
					ParamType.prototype.toString = function () {
						return "{ParamType:" + this.name + "}";
					};
					/** Given an encoded string, or a decoded object, returns a decoded object */
					ParamType.prototype.$normalize = function (val) {
						return this.is(val) ? val : this.decode(val);
					};
					/**
      * Wraps an existing custom ParamType as an array of ParamType, depending on 'mode'.
      * e.g.:
      * - urlmatcher pattern "/path?{queryParam[]:int}"
      * - url: "/path?queryParam=1&queryParam=2
      * - $stateParams.queryParam will be [1, 2]
      * if `mode` is "auto", then
      * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
      * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
      */
					ParamType.prototype.$asArray = function (mode, isSearch) {
						if (!mode) return this;
						if (mode === "auto" && !isSearch) throw new Error("'auto' array mode is for query parameters only");
						return new ArrayType(this, mode);
					};
					return ParamType;
				}();
				exports.ParamType = ParamType;

				/***/
			},
			/* 25 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module core */ /** */

				var urlMatcherFactory_1 = __webpack_require__(26);
				var urlRouter_1 = __webpack_require__(29);
				var urlRouter_2 = __webpack_require__(29);
				var transitionService_1 = __webpack_require__(30);
				var view_1 = __webpack_require__(37);
				var stateRegistry_1 = __webpack_require__(38);
				var stateService_1 = __webpack_require__(43);
				var globals_1 = __webpack_require__(44);
				/**
     * The master class used to instantiate an instance of UI-Router.
     *
     * This class instantiates and wires the global UI-Router services.
     *
     * After instantiating a new instance of the Router class, configure it for your app.  For instance, register
     * your app states with the [[stateRegistry]] (and set url options using ...).  Then, tell UI-Router to monitor
     * the URL by calling `urlRouter.listen()` ([[URLRouter.listen]])
     */
				var UIRouter = function () {
					function UIRouter() {
						this.viewService = new view_1.ViewService();
						this.transitionService = new transitionService_1.TransitionService(this);
						this.globals = new globals_1.Globals(this.transitionService);
						this.urlMatcherFactory = new urlMatcherFactory_1.UrlMatcherFactory();
						this.urlRouterProvider = new urlRouter_1.UrlRouterProvider(this.urlMatcherFactory, this.globals.params);
						this.urlRouter = new urlRouter_2.UrlRouter(this.urlRouterProvider);
						this.stateRegistry = new stateRegistry_1.StateRegistry(this.urlMatcherFactory, this.urlRouterProvider);
						this.stateService = new stateService_1.StateService(this);
						this.viewService.rootContext(this.stateRegistry.root());
						this.globals.$current = this.stateRegistry.root();
						this.globals.current = this.globals.$current.self;
					}
					return UIRouter;
				}();
				exports.UIRouter = UIRouter;

				/***/
			},
			/* 26 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module url */ /** for typedoc */

				var common_1 = __webpack_require__(3);
				var predicates_1 = __webpack_require__(4);
				var urlMatcher_1 = __webpack_require__(27);
				var urlMatcherConfig_1 = __webpack_require__(23);
				var param_1 = __webpack_require__(22);
				var paramTypes_1 = __webpack_require__(28);
				/** @hidden */
				function getDefaultConfig() {
					return {
						strict: urlMatcherConfig_1.matcherConfig.strictMode(),
						caseInsensitive: urlMatcherConfig_1.matcherConfig.caseInsensitive()
					};
				}
				/**
     * Factory for [[UrlMatcher]] instances.
     *
     * The factory is available to ng1 services as
     * `$urlMatcherFactor` or ng1 providers as `$urlMatcherFactoryProvider`.
     */
				var UrlMatcherFactory = function () {
					function UrlMatcherFactory() {
						this.paramTypes = new paramTypes_1.ParamTypes();
						common_1.extend(this, { UrlMatcher: urlMatcher_1.UrlMatcher, Param: param_1.Param });
					}
					/**
      * Defines whether URL matching should be case sensitive (the default behavior), or not.
      *
      * @param value `false` to match URL in a case sensitive manner; otherwise `true`;
      * @returns the current value of caseInsensitive
      */
					UrlMatcherFactory.prototype.caseInsensitive = function (value) {
						return urlMatcherConfig_1.matcherConfig.caseInsensitive(value);
					};
					/**
      * Defines whether URLs should match trailing slashes, or not (the default behavior).
      *
      * @param value `false` to match trailing slashes in URLs, otherwise `true`.
      * @returns the current value of strictMode
      */
					UrlMatcherFactory.prototype.strictMode = function (value) {
						return urlMatcherConfig_1.matcherConfig.strictMode(value);
					};
					/**
      * Sets the default behavior when generating or matching URLs with default parameter values.
      *
      * @param value A string that defines the default parameter URL squashing behavior.
      *    - `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
      *    - `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
      *             parameter is surrounded by slashes, squash (remove) one slash from the URL
      *    - any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
      *             the parameter value from the URL and replace it with this string.
      * @returns the current value of defaultSquashPolicy
      */
					UrlMatcherFactory.prototype.defaultSquashPolicy = function (value) {
						return urlMatcherConfig_1.matcherConfig.defaultSquashPolicy(value);
					};
					/**
      * Creates a [[UrlMatcher]] for the specified pattern.
      *
      * @param pattern  The URL pattern.
      * @param config  The config object hash.
      * @returns The UrlMatcher.
      */
					UrlMatcherFactory.prototype.compile = function (pattern, config) {
						return new urlMatcher_1.UrlMatcher(pattern, this.paramTypes, common_1.extend(getDefaultConfig(), config));
					};
					/**
      * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.
      *
      * @param object  The object to perform the type check against.
      * @returns `true` if the object matches the `UrlMatcher` interface, by
      *          implementing all the same methods.
      */
					UrlMatcherFactory.prototype.isMatcher = function (object) {
						// TODO: typeof?
						if (!predicates_1.isObject(object)) return false;
						var result = true;
						common_1.forEach(urlMatcher_1.UrlMatcher.prototype, function (val, name) {
							if (predicates_1.isFunction(val)) result = result && predicates_1.isDefined(object[name]) && predicates_1.isFunction(object[name]);
						});
						return result;
					};
					;
					/**
      * Creates and registers a custom [[ParamType]] object
      *
      * A [[ParamType]] can be used to generate URLs with typed parameters.
      *
      * @param name  The type name.
      * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.
      * @param definitionFn A function that is injected before the app runtime starts.
      *        The result of this function should be a [[ParamTypeDefinition]].
      *        The result is merged into the existing `definition`.
      *        See [[ParamType]] for information on the values accepted.
      *
      * @returns - if a type was registered: the [[UrlMatcherFactory]]
      *   - if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined
      *
      * Note: Register custom types *before using them* in a state definition.
      *
      * See [[ParamTypeDefinition]] for examples
      */
					UrlMatcherFactory.prototype.type = function (name, definition, definitionFn) {
						var type = this.paramTypes.type(name, definition, definitionFn);
						return !predicates_1.isDefined(definition) ? type : this;
					};
					;
					/** @hidden */
					UrlMatcherFactory.prototype.$get = function () {
						this.paramTypes.enqueue = false;
						this.paramTypes._flushTypeQueue();
						return this;
					};
					;
					return UrlMatcherFactory;
				}();
				exports.UrlMatcherFactory = UrlMatcherFactory;

				/***/
			},
			/* 27 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module url */ /** for typedoc */

				var common_1 = __webpack_require__(3);
				var hof_1 = __webpack_require__(5);
				var predicates_1 = __webpack_require__(4);
				var param_1 = __webpack_require__(22);
				var predicates_2 = __webpack_require__(4);
				var param_2 = __webpack_require__(22);
				var common_2 = __webpack_require__(3);
				var common_3 = __webpack_require__(3);
				/** @hidden */
				function quoteRegExp(string, param) {
					var surroundPattern = ['', ''],
					    result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
					if (!param) return result;
					switch (param.squash) {
						case false:
							surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')];
							break;
						case true:
							result = result.replace(/\/$/, '');
							surroundPattern = ['(?:\/(', ')|\/)?'];
							break;
						default:
							surroundPattern = ["(" + param.squash + "|", ')?'];
							break;
					}
					return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];
				}
				/** @hidden */
				var memoizeTo = function (obj, prop, fn) {
					return obj[prop] = obj[prop] || fn();
				};
				/**
     * Matches URLs against patterns.
     *
     * Matches URLs against patterns and extracts named parameters from the path or the search
     * part of the URL.
     *
     * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)
     * parameters. Multiple search parameter names are separated by '&'. Search parameters
     * do not influence whether or not a URL is matched, but their values are passed through into
     * the matched parameters returned by [[UrlMatcher.exec]].
     *
     * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)
     * or colon placeholders (`/somePath/:param`).
     *
     * - *A parameter RegExp* may be defined for a param after a colon
     * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.
     * The regexp must match for the url to be matched.
     * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
     *
     * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`)
     * in curly brace parameters.  See [[UrlMatcherFactory.type]] for more information.
     *
     * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).  A catch-all
     * parameter value will contain the remainder of the URL.
     *
     * ---
     *
     * Parameter names may contain only word characters (latin letters, digits, and underscore) and
     * must be unique within the pattern (across both path and search parameters).
     * A path parameter matches any number of characters other than '/'. For catch-all
     * placeholders the path parameter matches any number of characters.
     *
     * Examples:
     *
     * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
     *   trailing slashes, and patterns have to match the entire path, not just a prefix.
     * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
     *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
     * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
     * * `'/user/{id:[^/]*}'` - Same as the previous example.
     * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
     *   parameter consists of 1 to 8 hex digits.
     * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
     *   path into the parameter 'path'.
     * * `'/files/*path'` - ditto.
     * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
     *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start
     *
     */
				var UrlMatcher = function () {
					/**
      * @param pattern The pattern to compile into a matcher.
      * @param paramTypes The [[ParamTypes]] registry
      * @param config  A configuration object
      * - `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.
      * - `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.
      */
					function UrlMatcher(pattern, paramTypes, config) {
						var _this = this;
						this.config = config;
						/** @hidden */
						this._cache = { path: [], pattern: null };
						/** @hidden */
						this._children = [];
						/** @hidden */
						this._params = [];
						/** @hidden */
						this._segments = [];
						/** @hidden */
						this._compiled = [];
						this.pattern = pattern;
						this.config = common_1.defaults(this.config, {
							params: {},
							strict: true,
							caseInsensitive: false,
							paramMap: common_1.identity
						});
						// Find all placeholders and create a compiled pattern, using either classic or curly syntax:
						//   '*' name
						//   ':' name
						//   '{' name '}'
						//   '{' name ':' regexp '}'
						// The regular expression is somewhat complicated due to the need to allow curly braces
						// inside the regular expression. The placeholder regexp breaks down as follows:
						//    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
						//    \{([\w\[\]]+)(?:\:\s*( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
						//    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
						//    [^{}\\]+                       - anything other than curly braces or backslash
						//    \\.                            - a backslash escape
						//    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
						var placeholder = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
						    searchPlaceholder = /([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
						    last = 0,
						    m,
						    patterns = [];
						var checkParamErrors = function (id) {
							if (!UrlMatcher.nameValidator.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
							if (common_1.find(_this._params, hof_1.propEq('id', id))) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
						};
						// Split into static segments separated by path parameter placeholders.
						// The number of segments is always 1 more than the number of parameters.
						var matchDetails = function (m, isSearch) {
							// IE[78] returns '' for unmatched groups instead of null
							var id = m[2] || m[3],
							    regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '.*' : null);
							return {
								id: id,
								regexp: regexp,
								cfg: _this.config.params[id],
								segment: pattern.substring(last, m.index),
								type: !regexp ? null : paramTypes.type(regexp || "string") || common_1.inherit(paramTypes.type("string"), {
									pattern: new RegExp(regexp, _this.config.caseInsensitive ? 'i' : undefined)
								})
							};
						};
						var p, segment;
						while (m = placeholder.exec(pattern)) {
							p = matchDetails(m, false);
							if (p.segment.indexOf('?') >= 0) break; // we're into the search part
							checkParamErrors(p.id);
							this._params.push(param_1.Param.fromPath(p.id, p.type, this.config.paramMap(p.cfg, false), paramTypes));
							this._segments.push(p.segment);
							patterns.push([p.segment, common_1.tail(this._params)]);
							last = placeholder.lastIndex;
						}
						segment = pattern.substring(last);
						// Find any search parameter names and remove them from the last segment
						var i = segment.indexOf('?');
						if (i >= 0) {
							var search = segment.substring(i);
							segment = segment.substring(0, i);
							if (search.length > 0) {
								last = 0;
								while (m = searchPlaceholder.exec(search)) {
									p = matchDetails(m, true);
									checkParamErrors(p.id);
									this._params.push(param_1.Param.fromSearch(p.id, p.type, this.config.paramMap(p.cfg, true), paramTypes));
									last = placeholder.lastIndex;
								}
							}
						}
						this._segments.push(segment);
						common_1.extend(this, {
							_compiled: patterns.map(function (pattern) {
								return quoteRegExp.apply(null, pattern);
							}).concat(quoteRegExp(segment)),
							prefix: this._segments[0]
						});
						Object.freeze(this);
					}
					/**
      * Creates a new concatenated UrlMatcher
      *
      * Builds a new UrlMatcher by appending another UrlMatcher to this one.
      *
      * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.
      */
					UrlMatcher.prototype.append = function (url) {
						this._children.push(url);
						common_1.forEach(url._cache, function (val, key) {
							return url._cache[key] = predicates_1.isArray(val) ? [] : null;
						});
						url._cache.path = this._cache.path.concat(this);
						return url;
					};
					/** @hidden */
					UrlMatcher.prototype.isRoot = function () {
						return this._cache.path.length === 0;
					};
					/** Returns the input pattern string */
					UrlMatcher.prototype.toString = function () {
						return this.pattern;
					};
					/**
      * Tests the specified url/path against this matcher.
      *
      * Tests if the given url matches this matcher's pattern, and returns an object containing the captured
      * parameter values.  Returns null if the path does not match.
      *
      * The returned object contains the values
      * of any search parameters that are mentioned in the pattern, but their value may be null if
      * they are not present in `search`. This means that search parameters are always treated
      * as optional.
      *
      * @example
      * ```js
      *
      * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
      *   x: '1', q: 'hello'
      * });
      * // returns { id: 'bob', q: 'hello', r: null }
      * ```
      *
      * @param path    The URL path to match, e.g. `$location.path()`.
      * @param search  URL search parameters, e.g. `$location.search()`.
      * @param hash    URL hash e.g. `$location.hash()`.
      * @param options
      *
      * @returns The captured parameter values.
      */
					UrlMatcher.prototype.exec = function (path, search, hash, options) {
						var _this = this;
						if (search === void 0) {
							search = {};
						}
						if (options === void 0) {
							options = {};
						}
						var match = memoizeTo(this._cache, 'pattern', function () {
							return new RegExp(['^', common_1.unnest(_this._cache.path.concat(_this).map(hof_1.prop('_compiled'))).join(''), _this.config.strict === false ? '\/?' : '', '$'].join(''), _this.config.caseInsensitive ? 'i' : undefined);
						}).exec(path);
						if (!match) return null;
						//options = defaults(options, { isolate: false });
						var allParams = this.parameters(),
						    pathParams = allParams.filter(function (param) {
							return !param.isSearch();
						}),
						    searchParams = allParams.filter(function (param) {
							return param.isSearch();
						}),
						    nPathSegments = this._cache.path.concat(this).map(function (urlm) {
							return urlm._segments.length - 1;
						}).reduce(function (a, x) {
							return a + x;
						}),
						    values = {};
						if (nPathSegments !== match.length - 1) throw new Error("Unbalanced capture group in route '" + this.pattern + "'");
						function decodePathArray(string) {
							var reverseString = function (str) {
								return str.split("").reverse().join("");
							};
							var unquoteDashes = function (str) {
								return str.replace(/\\-/g, "-");
							};
							var split = reverseString(string).split(/-(?!\\)/);
							var allReversed = common_1.map(split, reverseString);
							return common_1.map(allReversed, unquoteDashes).reverse();
						}
						for (var i = 0; i < nPathSegments; i++) {
							var param = pathParams[i];
							var value = match[i + 1];
							// if the param value matches a pre-replace pair, replace the value before decoding.
							for (var j = 0; j < param.replace.length; j++) {
								if (param.replace[j].from === value) value = param.replace[j].to;
							}
							if (value && param.array === true) value = decodePathArray(value);
							if (predicates_2.isDefined(value)) value = param.type.decode(value);
							values[param.id] = param.value(value);
						}
						searchParams.forEach(function (param) {
							var value = search[param.id];
							for (var j = 0; j < param.replace.length; j++) {
								if (param.replace[j].from === value) value = param.replace[j].to;
							}
							if (predicates_2.isDefined(value)) value = param.type.decode(value);
							values[param.id] = param.value(value);
						});
						if (hash) values["#"] = hash;
						return values;
					};
					/**
      * @hidden
      * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.
      *
      * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the
      *    pattern has no parameters, an empty array is returned.
      */
					UrlMatcher.prototype.parameters = function (opts) {
						if (opts === void 0) {
							opts = {};
						}
						if (opts.inherit === false) return this._params;
						return common_1.unnest(this._cache.path.concat(this).map(hof_1.prop('_params')));
					};
					/**
      * @hidden
      * Returns a single parameter from this UrlMatcher by id
      *
      * @param id
      * @param opts
      * @returns {T|Param|any|boolean|UrlMatcher|null}
      */
					UrlMatcher.prototype.parameter = function (id, opts) {
						if (opts === void 0) {
							opts = {};
						}
						var parent = common_1.tail(this._cache.path);
						return common_1.find(this._params, hof_1.propEq('id', id)) || opts.inherit !== false && parent && parent.parameter(id) || null;
					};
					/**
      * Validates the input parameter values against this UrlMatcher
      *
      * Checks an object hash of parameters to validate their correctness according to the parameter
      * types of this `UrlMatcher`.
      *
      * @param params The object hash of parameters to validate.
      * @returns Returns `true` if `params` validates, otherwise `false`.
      */
					UrlMatcher.prototype.validates = function (params) {
						var _this = this;
						var validParamVal = function (param, val) {
							return !param || param.validates(val);
						};
						return common_1.pairs(params || {}).map(function (_a) {
							var key = _a[0],
							    val = _a[1];
							return validParamVal(_this.parameter(key), val);
						}).reduce(common_1.allTrueR, true);
					};
					/**
      * Given a set of parameter values, creates a URL from this UrlMatcher.
      *
      * Creates a URL that matches this pattern by substituting the specified values
      * for the path and search parameters.
      *
      * @example
      * ```js
      *
      * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
      * // returns '/user/bob?q=yes'
      * ```
      *
      * @param values  the values to substitute for the parameters in this pattern.
      * @returns the formatted URL (path and optionally search part).
      */
					UrlMatcher.prototype.format = function (values) {
						if (values === void 0) {
							values = {};
						}
						if (!this.validates(values)) return null;
						// Build the full path of UrlMatchers (including all parent UrlMatchers)
						var urlMatchers = this._cache.path.slice().concat(this);
						// Extract all the static segments and Params into an ordered array
						var pathSegmentsAndParams = urlMatchers.map(UrlMatcher.pathSegmentsAndParams).reduce(common_2.unnestR, []);
						// Extract the query params into a separate array
						var queryParams = urlMatchers.map(UrlMatcher.queryParams).reduce(common_2.unnestR, []);
						/**
       * Given a Param,
       * Applies the parameter value, then returns details about it
       */
						function getDetails(param) {
							// Normalize to typed value
							var value = param.value(values[param.id]);
							var isDefaultValue = param.isDefaultValue(value);
							// Check if we're in squash mode for the parameter
							var squash = isDefaultValue ? param.squash : false;
							// Allow the Parameter's Type to encode the value
							var encoded = param.type.encode(value);
							return { param: param, value: value, isDefaultValue: isDefaultValue, squash: squash, encoded: encoded };
						}
						// Build up the path-portion from the list of static segments and parameters
						var pathString = pathSegmentsAndParams.reduce(function (acc, x) {
							// The element is a static segment (a raw string); just append it
							if (predicates_1.isString(x)) return acc + x;
							// Otherwise, it's a Param.  Fetch details about the parameter value
							var _a = getDetails(x),
							    squash = _a.squash,
							    encoded = _a.encoded,
							    param = _a.param;
							// If squash is === true, try to remove a slash from the path
							if (squash === true) return acc.match(/\/$/) ? acc.slice(0, -1) : acc;
							// If squash is a string, use the string for the param value
							if (predicates_1.isString(squash)) return acc + squash;
							if (squash !== false) return acc; // ?
							if (encoded == null) return acc;
							// If this parameter value is an array, encode the value using encodeDashes
							if (predicates_1.isArray(encoded)) return acc + common_1.map(encoded, UrlMatcher.encodeDashes).join("-");
							// If the parameter type is "raw", then do not encodeURIComponent
							if (param.type.raw) return acc + encoded;
							// Encode the value
							return acc + encodeURIComponent(encoded);
						}, "");
						// Build the query string by applying parameter values (array or regular)
						// then mapping to key=value, then flattening and joining using "&"
						var queryString = queryParams.map(function (param) {
							var _a = getDetails(param),
							    squash = _a.squash,
							    encoded = _a.encoded,
							    isDefaultValue = _a.isDefaultValue;
							if (encoded == null || isDefaultValue && squash !== false) return;
							if (!predicates_1.isArray(encoded)) encoded = [encoded];
							if (encoded.length === 0) return;
							if (!param.type.raw) encoded = common_1.map(encoded, encodeURIComponent);
							return encoded.map(function (val) {
								return param.id + "=" + val;
							});
						}).filter(common_1.identity).reduce(common_2.unnestR, []).join("&");
						// Concat the pathstring with the queryString (if exists) and the hashString (if exists)
						return pathString + (queryString ? "?" + queryString : "") + (values["#"] ? "#" + values["#"] : "");
					};
					/** @hidden */
					UrlMatcher.encodeDashes = function (str) {
						return encodeURIComponent(str).replace(/-/g, function (c) {
							return "%5C%" + c.charCodeAt(0).toString(16).toUpperCase();
						});
					};
					/** @hidden Given a matcher, return an array with the matcher's path segments and path params, in order */
					UrlMatcher.pathSegmentsAndParams = function (matcher) {
						var staticSegments = matcher._segments;
						var pathParams = matcher._params.filter(function (p) {
							return p.location === param_2.DefType.PATH;
						});
						return common_3.arrayTuples(staticSegments, pathParams.concat(undefined)).reduce(common_2.unnestR, []).filter(function (x) {
							return x !== "" && predicates_2.isDefined(x);
						});
					};
					/** @hidden Given a matcher, return an array with the matcher's query params */
					UrlMatcher.queryParams = function (matcher) {
						return matcher._params.filter(function (p) {
							return p.location === param_2.DefType.SEARCH;
						});
					};
					/** @hidden */
					UrlMatcher.nameValidator = /^\w+([-.]+\w+)*(?:\[\])?$/;
					return UrlMatcher;
				}();
				exports.UrlMatcher = UrlMatcher;

				/***/
			},
			/* 28 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module params */ /** for typedoc */

				var common_1 = __webpack_require__(3);
				var predicates_1 = __webpack_require__(4);
				var hof_1 = __webpack_require__(5);
				var coreservices_1 = __webpack_require__(6);
				var type_1 = __webpack_require__(24);
				// Use tildes to pre-encode slashes.
				// If the slashes are simply URLEncoded, the browser can choose to pre-decode them,
				// and bidirectional encoding/decoding fails.
				// Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character
				function valToString(val) {
					return val != null ? val.toString().replace(/(~|\/)/g, function (m) {
						return { '~': '~~', '/': '~2F' }[m];
					}) : val;
				}
				function valFromString(val) {
					return val != null ? val.toString().replace(/(~~|~2F)/g, function (m) {
						return { '~~': '~', '~2F': '/' }[m];
					}) : val;
				}
				var ParamTypes = function () {
					function ParamTypes() {
						this.enqueue = true;
						this.typeQueue = [];
						this.defaultTypes = {
							"hash": {
								encode: valToString,
								decode: valFromString,
								is: hof_1.is(String),
								pattern: /.*/,
								equals: function (a, b) {
									return a == b;
								} // allow coersion for null/undefined/""
							},
							"string": {
								encode: valToString,
								decode: valFromString,
								is: hof_1.is(String),
								pattern: /[^/]*/
							},
							"int": {
								encode: valToString,
								decode: function (val) {
									return parseInt(val, 10);
								},
								is: function (val) {
									return predicates_1.isDefined(val) && this.decode(val.toString()) === val;
								},
								pattern: /-?\d+/
							},
							"bool": {
								encode: function (val) {
									return val && 1 || 0;
								},
								decode: function (val) {
									return parseInt(val, 10) !== 0;
								},
								is: hof_1.is(Boolean),
								pattern: /0|1/
							},
							"date": {
								encode: function (val) {
									return !this.is(val) ? undefined : [val.getFullYear(), ('0' + (val.getMonth() + 1)).slice(-2), ('0' + val.getDate()).slice(-2)].join("-");
								},
								decode: function (val) {
									if (this.is(val)) return val;
									var match = this.capture.exec(val);
									return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
								},
								is: function (val) {
									return val instanceof Date && !isNaN(val.valueOf());
								},
								equals: function (l, r) {
									return ['getFullYear', 'getMonth', 'getDate'].reduce(function (acc, fn) {
										return acc && l[fn]() === r[fn]();
									}, true);
								},
								pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
								capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
							},
							"json": {
								encode: common_1.toJson,
								decode: common_1.fromJson,
								is: hof_1.is(Object),
								equals: common_1.equals,
								pattern: /[^/]*/
							},
							"any": {
								encode: common_1.identity,
								decode: common_1.identity,
								equals: common_1.equals,
								pattern: /.*/
							}
						};
						// Register default types. Store them in the prototype of this.types.
						var makeType = function (definition, name) {
							return new type_1.ParamType(common_1.extend({ name: name }, definition));
						};
						this.types = common_1.inherit(common_1.map(this.defaultTypes, makeType), {});
					}
					ParamTypes.prototype.type = function (name, definition, definitionFn) {
						if (!predicates_1.isDefined(definition)) return this.types[name];
						if (this.types.hasOwnProperty(name)) throw new Error("A type named '" + name + "' has already been defined.");
						this.types[name] = new type_1.ParamType(common_1.extend({ name: name }, definition));
						if (definitionFn) {
							this.typeQueue.push({ name: name, def: definitionFn });
							if (!this.enqueue) this._flushTypeQueue();
						}
						return this;
					};
					ParamTypes.prototype._flushTypeQueue = function () {
						while (this.typeQueue.length) {
							var type = this.typeQueue.shift();
							if (type.pattern) throw new Error("You cannot override a type's .pattern at runtime.");
							common_1.extend(this.types[type.name], coreservices_1.services.$injector.invoke(type.def));
						}
					};
					return ParamTypes;
				}();
				exports.ParamTypes = ParamTypes;

				/***/
			},
			/* 29 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module url */ /** for typedoc */

				var common_1 = __webpack_require__(3);
				var predicates_1 = __webpack_require__(4);
				var coreservices_1 = __webpack_require__(6);
				/** @hidden */
				var $location = coreservices_1.services.location;
				/** @hidden Returns a string that is a prefix of all strings matching the RegExp */
				function regExpPrefix(re) {
					var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
					return prefix != null ? prefix[1].replace(/\\(.)/g, "$1") : '';
				}
				/** @hidden Interpolates matched values into a String.replace()-style pattern */
				function interpolate(pattern, match) {
					return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
						return match[what === '$' ? 0 : Number(what)];
					});
				}
				/** @hidden */
				function handleIfMatch($injector, $stateParams, handler, match) {
					if (!match) return false;
					var result = $injector.invoke(handler, handler, { $match: match, $stateParams: $stateParams });
					return predicates_1.isDefined(result) ? result : true;
				}
				/** @hidden */
				function appendBasePath(url, isHtml5, absolute) {
					var baseHref = coreservices_1.services.locationConfig.baseHref();
					if (baseHref === '/') return url;
					if (isHtml5) return baseHref.slice(0, -1) + url;
					if (absolute) return baseHref.slice(1) + url;
					return url;
				}
				// TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
				/** @hidden */
				function update(rules, otherwiseFn, evt) {
					if (evt && evt.defaultPrevented) return;
					function check(rule) {
						var handled = rule(coreservices_1.services.$injector, $location);
						if (!handled) return false;
						if (predicates_1.isString(handled)) {
							$location.setUrl(handled, true);
						}
						return true;
					}
					var n = rules.length;
					for (var i = 0; i < n; i++) {
						if (check(rules[i])) return;
					}
					// always check otherwise last to allow dynamic updates to the set of rules
					if (otherwiseFn) check(otherwiseFn);
				}
				/**
     * Manages rules for client-side URL
     *
     * This class manages the router rules for what to do when the URL changes.
     */
				var UrlRouterProvider = function () {
					function UrlRouterProvider($urlMatcherFactory, $stateParams) {
						/** @hidden */
						this.rules = [];
						/** @hidden */
						this.interceptDeferred = false;
						this.$urlMatcherFactory = $urlMatcherFactory;
						this.$stateParams = $stateParams;
					}
					/**
      * Registers a url handler function.
      *
      * Registers a low level url handler (a `rule`). A rule detects specific URL patterns and returns
      * a redirect, or performs some action.
      *
      * If a rule returns a string, the URL is replaced with the string, and all rules are fired again.
      *
      * @example
      * ```js
      *
      * var app = angular.module('app', ['ui.router.router']);
      *
      * app.config(function ($urlRouterProvider) {
      *   // Here's an example of how you might allow case insensitive urls
      *   $urlRouterProvider.rule(function ($injector, $location) {
      *     var path = $location.path(),
      *         normalized = path.toLowerCase();
      *
      *     if (path !== normalized) {
      *       return normalized;
      *     }
      *   });
      * });
      * ```
      *
      * @param rule
      * Handler function that takes `$injector` and `$location` services as arguments.
      * You can use them to detect a url and return a different url as a string.
      *
      * @return [[$urlRouterProvider]] (`this`)
      */
					UrlRouterProvider.prototype.rule = function (rule) {
						if (!predicates_1.isFunction(rule)) throw new Error("'rule' must be a function");
						this.rules.push(rule);
						return this;
					};
					;
					/**
      * Remove a rule previously registered
      *
      * @param rule the matcher rule that was previously registered using [[rule]]
      * @return true if the rule was found (and removed)
      */
					UrlRouterProvider.prototype.removeRule = function (rule) {
						return this.rules.length !== common_1.removeFrom(this.rules, rule).length;
					};
					/**
      * Defines the path or behavior to use when no url can be matched.
      *
      * @example
      * ```js
      *
      * var app = angular.module('app', ['ui.router.router']);
      *
      * app.config(function ($urlRouterProvider) {
      *   // if the path doesn't match any of the urls you configured
      *   // otherwise will take care of routing the user to the
      *   // specified url
      *   $urlRouterProvider.otherwise('/index');
      *
      *   // Example of using function rule as param
      *   $urlRouterProvider.otherwise(function ($injector, $location) {
      *     return '/a/valid/url';
      *   });
      * });
      * ```
      *
      * @param rule
      * The url path you want to redirect to or a function rule that returns the url path or performs a `$state.go()`.
      * The function version is passed two params: `$injector` and `$location` services, and should return a url string.
      *
      * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
      */
					UrlRouterProvider.prototype.otherwise = function (rule) {
						if (!predicates_1.isFunction(rule) && !predicates_1.isString(rule)) throw new Error("'rule' must be a string or function");
						this.otherwiseFn = predicates_1.isString(rule) ? function () {
							return rule;
						} : rule;
						return this;
					};
					;
					/**
      * Registers a handler for a given url matching.
      *
      * If the handler is a string, it is
      * treated as a redirect, and is interpolated according to the syntax of match
      * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).
      *
      * If the handler is a function, it is injectable.
      * It gets invoked if `$location` matches.
      * You have the option of inject the match object as `$match`.
      *
      * The handler can return
      *
      * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
      *   will continue trying to find another one that matches.
      * - **string** which is treated as a redirect and passed to `$location.url()`
      * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
      *
      * @example
      * ```js
      *
      * var app = angular.module('app', ['ui.router.router']);
      *
      * app.config(function ($urlRouterProvider) {
      *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
      *     if ($state.$current.navigable !== state ||
      *         !equalForKeys($match, $stateParams) {
      *      $state.transitionTo(state, $match, false);
      *     }
      *   });
      * });
      * ```
      *
      * @param what A pattern string to match, compiled as a [[UrlMatcher]].
      * @param handler The path (or function that returns a path) that you want to redirect your user to.
      * @param ruleCallback [optional] A callback that receives the `rule` registered with [[UrlMatcher.rule]]
      *
      * Note: the handler may also invoke arbitrary code, such as `$state.go()`
      */
					UrlRouterProvider.prototype.when = function (what, handler, ruleCallback) {
						if (ruleCallback === void 0) {
							ruleCallback = function (rule) {};
						}
						var _a = this,
						    $urlMatcherFactory = _a.$urlMatcherFactory,
						    $stateParams = _a.$stateParams;
						var redirect,
						    handlerIsString = predicates_1.isString(handler);
						// @todo Queue this
						if (predicates_1.isString(what)) what = $urlMatcherFactory.compile(what);
						if (!handlerIsString && !predicates_1.isFunction(handler) && !predicates_1.isArray(handler)) throw new Error("invalid 'handler' in when()");
						var strategies = {
							matcher: function (_what, _handler) {
								if (handlerIsString) {
									redirect = $urlMatcherFactory.compile(_handler);
									_handler = ['$match', redirect.format.bind(redirect)];
								}
								return common_1.extend(function () {
									return handleIfMatch(coreservices_1.services.$injector, $stateParams, _handler, _what.exec($location.path(), $location.search(), $location.hash()));
								}, {
									prefix: predicates_1.isString(_what.prefix) ? _what.prefix : ''
								});
							},
							regex: function (_what, _handler) {
								if (_what.global || _what.sticky) throw new Error("when() RegExp must not be global or sticky");
								if (handlerIsString) {
									redirect = _handler;
									_handler = ['$match', function ($match) {
										return interpolate(redirect, $match);
									}];
								}
								return common_1.extend(function () {
									return handleIfMatch(coreservices_1.services.$injector, $stateParams, _handler, _what.exec($location.path()));
								}, {
									prefix: regExpPrefix(_what)
								});
							}
						};
						var check = {
							matcher: $urlMatcherFactory.isMatcher(what),
							regex: what instanceof RegExp
						};
						for (var n in check) {
							if (check[n]) {
								var rule = strategies[n](what, handler);
								ruleCallback(rule);
								return this.rule(rule);
							}
						}
						throw new Error("invalid 'what' in when()");
					};
					;
					/**
      * Disables monitoring of the URL.
      *
      * Call this method before UI-Router has bootstrapped.
      * It will stop UI-Router from performing the initial url sync.
      *
      * This can be useful to perform some asynchronous initialization before the router starts.
      * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.
      *
      * @example
      * ```js
      *
      * var app = angular.module('app', ['ui.router']);
      *
      * app.config(function ($urlRouterProvider) {
      *   // Prevent $urlRouter from automatically intercepting URL changes;
      *   $urlRouterProvider.deferIntercept();
      * })
      *
      * app.run(function (MyService, $urlRouter, $http) {
      *   $http.get("/stuff").then(function(resp) {
      *     MyService.doStuff(resp.data);
      *     $urlRouter.listen();
      *     $urlRouter.sync();
      *   });
      * });
      * ```
      *
      * @param defer Indicates whether to defer location change interception. Passing
      *        no parameter is equivalent to `true`.
      */
					UrlRouterProvider.prototype.deferIntercept = function (defer) {
						if (defer === undefined) defer = true;
						this.interceptDeferred = defer;
					};
					;
					return UrlRouterProvider;
				}();
				exports.UrlRouterProvider = UrlRouterProvider;
				var UrlRouter = function () {
					/** @hidden */
					function UrlRouter(urlRouterProvider) {
						this.urlRouterProvider = urlRouterProvider;
						common_1.bindFunctions(UrlRouter.prototype, this, this);
					}
					/**
      * Checks the current URL for a matching rule
      *
      * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
      * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,
      * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed
      * with the transition by calling `$urlRouter.sync()`.
      *
      * @example
      * ```js
      *
      * angular.module('app', ['ui.router'])
      *   .run(function($rootScope, $urlRouter) {
      *     $rootScope.$on('$locationChangeSuccess', function(evt) {
      *       // Halt state change from even starting
      *       evt.preventDefault();
      *       // Perform custom logic
      *       var meetsRequirement = ...
      *       // Continue with the update and state transition if logic allows
      *       if (meetsRequirement) $urlRouter.sync();
      *     });
      * });
      * ```
      */
					UrlRouter.prototype.sync = function () {
						update(this.urlRouterProvider.rules, this.urlRouterProvider.otherwiseFn);
					};
					/**
      * Starts listening for URL changes
      *
      * Call this sometime after calling [[deferIntercept]] to start monitoring the url.
      * This causes [[UrlRouter]] to start listening for changes to the URL, if it wasn't already listening.
      */
					UrlRouter.prototype.listen = function () {
						var _this = this;
						return this.listener = this.listener || $location.onChange(function (evt) {
							return update(_this.urlRouterProvider.rules, _this.urlRouterProvider.otherwiseFn, evt);
						});
					};
					/**
      * Internal API.
      */
					UrlRouter.prototype.update = function (read) {
						if (read) {
							this.location = $location.path();
							return;
						}
						if ($location.path() === this.location) return;
						$location.setUrl(this.location, true);
					};
					/**
      * Internal API.
      *
      * Pushes a new location to the browser history.
      *
      * @param urlMatcher
      * @param params
      * @param options
      */
					UrlRouter.prototype.push = function (urlMatcher, params, options) {
						var replace = options && !!options.replace;
						$location.setUrl(urlMatcher.format(params || {}), replace);
					};
					/**
      * Builds and returns a URL with interpolated parameters
      *
      * @example
      * ```js
      *
      * $bob = $urlRouter.href(new UrlMatcher("/about/:person"), {
      *   person: "bob"
      * });
      * // $bob == "/about/bob";
      * ```
      *
      * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.
      * @param params An object of parameter values to fill the matcher's required parameters.
      * @param options Options object. The options are:
      *
      * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
      *
      * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`
      */
					UrlRouter.prototype.href = function (urlMatcher, params, options) {
						if (!urlMatcher.validates(params)) return null;
						var url = urlMatcher.format(params);
						options = options || { absolute: false };
						var cfg = coreservices_1.services.locationConfig;
						var isHtml5 = cfg.html5Mode();
						if (!isHtml5 && url !== null) {
							url = "#" + cfg.hashPrefix() + url;
						}
						url = appendBasePath(url, isHtml5, options.absolute);
						if (!options.absolute || !url) {
							return url;
						}
						var slash = !isHtml5 && url ? '/' : '',
						    port = cfg.port();
						port = port === 80 || port === 443 ? '' : ':' + port;
						return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');
					};
					return UrlRouter;
				}();
				exports.UrlRouter = UrlRouter;

				/***/
			},
			/* 30 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				var transition_1 = __webpack_require__(11);
				var hookRegistry_1 = __webpack_require__(15);
				var resolve_1 = __webpack_require__(31);
				var views_1 = __webpack_require__(32);
				var url_1 = __webpack_require__(33);
				var redirectTo_1 = __webpack_require__(34);
				var onEnterExitRetain_1 = __webpack_require__(35);
				var lazyLoadStates_1 = __webpack_require__(36);
				/**
     * The default [[Transition]] options.
     *
     * Include this object when applying custom defaults:
     * let reloadOpts = { reload: true, notify: true }
     * let options = defaults(theirOpts, customDefaults, defaultOptions);
     */
				exports.defaultTransOpts = {
					location: true,
					relative: null,
					inherit: false,
					notify: true,
					reload: false,
					custom: {},
					current: function () {
						return null;
					},
					source: "unknown"
				};
				/**
     * This class provides services related to Transitions.
     *
     * - Most importantly, it allows global Transition Hooks to be registered.
     * - It allows the default transition error handler to be set.
     * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).
     *
     * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.
     */
				var TransitionService = function () {
					function TransitionService(_router) {
						this._router = _router;
						this.$view = _router.viewService;
						hookRegistry_1.HookRegistry.mixin(new hookRegistry_1.HookRegistry(), this);
						this._deregisterHookFns = {};
						this.registerTransitionHooks();
					}
					/** @hidden */
					TransitionService.prototype.registerTransitionHooks = function () {
						var fns = this._deregisterHookFns;
						// Wire up redirectTo hook
						fns.redirectTo = redirectTo_1.registerRedirectToHook(this);
						// Wire up onExit/Retain/Enter state hooks
						fns.onExit = onEnterExitRetain_1.registerOnExitHook(this);
						fns.onRetain = onEnterExitRetain_1.registerOnRetainHook(this);
						fns.onEnter = onEnterExitRetain_1.registerOnEnterHook(this);
						// Wire up Resolve hooks
						fns.eagerResolve = resolve_1.registerEagerResolvePath(this);
						fns.lazyResolve = resolve_1.registerLazyResolveState(this);
						// Wire up the View management hooks
						fns.loadViews = views_1.registerLoadEnteringViews(this);
						fns.activateViews = views_1.registerActivateViews(this);
						// After globals.current is updated at priority: 10000
						fns.updateUrl = url_1.registerUpdateUrl(this);
						// Lazy load state trees
						fns.lazyLoad = lazyLoadStates_1.registerLazyLoadHook(this);
					};
					/** @inheritdoc */
					TransitionService.prototype.onBefore = function (matchCriteria, callback, options) {
						throw "";
					};
					;
					/** @inheritdoc */
					TransitionService.prototype.onStart = function (matchCriteria, callback, options) {
						throw "";
					};
					;
					/** @inheritdoc */
					TransitionService.prototype.onExit = function (matchCriteria, callback, options) {
						throw "";
					};
					;
					/** @inheritdoc */
					TransitionService.prototype.onRetain = function (matchCriteria, callback, options) {
						throw "";
					};
					;
					/** @inheritdoc */
					TransitionService.prototype.onEnter = function (matchCriteria, callback, options) {
						throw "";
					};
					;
					/** @inheritdoc */
					TransitionService.prototype.onFinish = function (matchCriteria, callback, options) {
						throw "";
					};
					;
					/** @inheritdoc */
					TransitionService.prototype.onSuccess = function (matchCriteria, callback, options) {
						throw "";
					};
					;
					/** @inheritdoc */
					TransitionService.prototype.onError = function (matchCriteria, callback, options) {
						throw "";
					};
					;
					/**
      * Creates a new [[Transition]] object
      *
      * This is a factory function for creating new Transition objects.
      * It is used internally by the [[StateService]] and should generally not be called by application code.
      *
      * @param fromPath the path to the current state (the from state)
      * @param targetState the target state (destination)
      * @returns a Transition
      */
					TransitionService.prototype.create = function (fromPath, targetState) {
						return new transition_1.Transition(fromPath, targetState, this._router);
					};
					return TransitionService;
				}();
				exports.TransitionService = TransitionService;

				/***/
			},
			/* 31 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module hooks */ /** for typedoc */

				var common_1 = __webpack_require__(3);
				var resolveContext_1 = __webpack_require__(17);
				var hof_1 = __webpack_require__(5);
				/**
     * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path
     *
     * Registered using `transitionService.onStart({}, eagerResolvePath);`
     *
     * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.
     *
     * See [[StateDeclaration.resolve]]
     */
				var eagerResolvePath = function (trans) {
					return new resolveContext_1.ResolveContext(trans.treeChanges().to).resolvePath("EAGER", trans).then(common_1.noop);
				};
				exports.registerEagerResolvePath = function (transitionService) {
					return transitionService.onStart({}, eagerResolvePath, { priority: 1000 });
				};
				/**
     * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path
     *
     * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState);`
     *
     * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.
     *
     * See [[StateDeclaration.resolve]]
     */
				var lazyResolveState = function (trans, state) {
					return new resolveContext_1.ResolveContext(trans.treeChanges().to).subContext(state).resolvePath("LAZY", trans).then(common_1.noop);
				};
				exports.registerLazyResolveState = function (transitionService) {
					return transitionService.onEnter({ entering: hof_1.val(true) }, lazyResolveState, { priority: 1000 });
				};

				/***/
			},
			/* 32 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module hooks */ /** for typedoc */

				var common_1 = __webpack_require__(3);
				var coreservices_1 = __webpack_require__(6);
				/**
     * A [[TransitionHookFn]] which waits for the views to load
     *
     * Registered using `transitionService.onStart({}, loadEnteringViews);`
     *
     * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.
     * In angular 1, this includes loading the templates.
     */
				var loadEnteringViews = function (transition) {
					var enteringViews = transition.views("entering");
					if (!enteringViews.length) return;
					return coreservices_1.services.$q.all(enteringViews.map(function (view) {
						return view.load();
					})).then(common_1.noop);
				};
				exports.registerLoadEnteringViews = function (transitionService) {
					return transitionService.onStart({}, loadEnteringViews);
				};
				/**
     * A [[TransitionHookFn]] which activates the new views when a transition is successful.
     *
     * Registered using `transitionService.onSuccess({}, activateViews);`
     *
     * After a transition is complete, this hook deactivates the old views from the previous state,
     * and activates the new views from the destination state.
     *
     * See [[ViewService]]
     */
				var activateViews = function (transition) {
					var enteringViews = transition.views("entering");
					var exitingViews = transition.views("exiting");
					if (!enteringViews.length && !exitingViews.length) return;
					var $view = transition.router.viewService;
					exitingViews.forEach(function (vc) {
						return $view.deactivateViewConfig(vc);
					});
					enteringViews.forEach(function (vc) {
						return $view.activateViewConfig(vc);
					});
					$view.sync();
				};
				exports.registerActivateViews = function (transitionService) {
					return transitionService.onSuccess({}, activateViews);
				};

				/***/
			},
			/* 33 */
			/***/function (module, exports) {

				"use strict";
				/**
     * A [[TransitionHookFn]] which updates the URL after a successful transition
     *
     * Registered using `transitionService.onSuccess({}, updateUrl);`
     */

				var updateUrl = function (transition) {
					var options = transition.options();
					var $state = transition.router.stateService;
					var $urlRouter = transition.router.urlRouter;
					// Dont update the url in these situations:
					// The transition was triggered by a URL sync (options.source === 'url')
					// The user doesn't want the url to update (options.location === false)
					// The destination state, and all parents have no navigable url
					if (options.source !== 'url' && options.location && $state.$current.navigable) {
						var urlOptions = { replace: options.location === 'replace' };
						$urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);
					}
					$urlRouter.update(true);
				};
				exports.registerUpdateUrl = function (transitionService) {
					return transitionService.onSuccess({}, updateUrl, { priority: 9999 });
				};

				/***/
			},
			/* 34 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module hooks */ /** */

				var predicates_1 = __webpack_require__(4);
				var coreservices_1 = __webpack_require__(6);
				var targetState_1 = __webpack_require__(14);
				/**
     * A [[TransitionHookFn]] that redirects to a different state or params
     *
     * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`
     *
     * See [[StateDeclaration.redirectTo]]
     */
				var redirectToHook = function (trans) {
					var redirect = trans.to().redirectTo;
					if (!redirect) return;
					function handleResult(result) {
						var $state = trans.router.stateService;
						if (result instanceof targetState_1.TargetState) return result;
						if (predicates_1.isString(result)) return $state.target(result, trans.params(), trans.options());
						if (result['state'] || result['params']) return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());
					}
					if (predicates_1.isFunction(redirect)) {
						return coreservices_1.services.$q.when(redirect(trans)).then(handleResult);
					}
					return handleResult(redirect);
				};
				exports.registerRedirectToHook = function (transitionService) {
					return transitionService.onStart({ to: function (state) {
							return !!state.redirectTo;
						} }, redirectToHook);
				};

				/***/
			},
			/* 35 */
			/***/function (module, exports) {

				"use strict";
				/**
     * A factory which creates an onEnter, onExit or onRetain transition hook function
     *
     * The returned function invokes the (for instance) state.onEnter hook when the
     * state is being entered.
     *
     * @hidden
     */

				function makeEnterExitRetainHook(hookName) {
					return function (transition, state) {
						var hookFn = state[hookName];
						return hookFn(transition, state);
					};
				}
				/**
     * The [[TransitionStateHookFn]] for onExit
     *
     * When the state is being exited, the state's .onExit function is invoked.
     *
     * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`
     *
     * See: [[IHookRegistry.onExit]]
     */
				var onExitHook = makeEnterExitRetainHook('onExit');
				exports.registerOnExitHook = function (transitionService) {
					return transitionService.onExit({ exiting: function (state) {
							return !!state.onExit;
						} }, onExitHook);
				};
				/**
     * The [[TransitionStateHookFn]] for onRetain
     *
     * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.
     *
     * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`
     *
     * See: [[IHookRegistry.onRetain]]
     */
				var onRetainHook = makeEnterExitRetainHook('onRetain');
				exports.registerOnRetainHook = function (transitionService) {
					return transitionService.onRetain({ retained: function (state) {
							return !!state.onRetain;
						} }, onRetainHook);
				};
				/**
     * The [[TransitionStateHookFn]] for onEnter
     *
     * When the state is being entered, the state's .onEnter function is invoked.
     *
     * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`
     *
     * See: [[IHookRegistry.onEnter]]
     */
				var onEnterHook = makeEnterExitRetainHook('onEnter');
				exports.registerOnEnterHook = function (transitionService) {
					return transitionService.onEnter({ entering: function (state) {
							return !!state.onEnter;
						} }, onEnterHook);
				};

				/***/
			},
			/* 36 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				var coreservices_1 = __webpack_require__(6);
				/**
     * A [[TransitionHookFn]] that lazy loads a state tree.
     *
     * When transitioning to a state "abc" which has a `lazyLoad` function defined:
     * - Invoke the `lazyLoad` function
     *   - The function should return a promise for an array of lazy loaded [[StateDeclaration]]s
     * - Wait for the promise to resolve
     * - Deregister the original state "abc"
     *   - The original state definition is a placeholder for the lazy loaded states
     * - Register the new states
     * - Retry the transition
     *
     * See [[StateDeclaration.lazyLoad]]
     */
				var lazyLoadHook = function (transition) {
					var toState = transition.to();
					var registry = transition.router.stateRegistry;
					function retryOriginalTransition() {
						if (transition.options().source === 'url') {
							var loc = coreservices_1.services.location,
							    path_1 = loc.path(),
							    search_1 = loc.search(),
							    hash_1 = loc.hash();
							var matchState = function (state) {
								return [state, state.url && state.url.exec(path_1, search_1, hash_1)];
							};
							var matches = registry.get().map(function (s) {
								return s.$$state();
							}).map(matchState).filter(function (_a) {
								var state = _a[0],
								    params = _a[1];
								return !!params;
							});
							if (matches.length) {
								var _a = matches[0],
								    state = _a[0],
								    params = _a[1];
								return transition.router.stateService.target(state, params, transition.options());
							}
							transition.router.urlRouter.sync();
						}
						// The original transition was not triggered via url sync
						// The lazy state should be loaded now, so re-try the original transition
						var orig = transition.targetState();
						return transition.router.stateService.target(orig.identifier(), orig.params(), orig.options());
					}
					/**
      * Replace the placeholder state with the newly loaded states from the NgModule.
      */
					function updateStateRegistry(result) {
						// deregister placeholder state
						registry.deregister(transition.$to());
						if (result && Array.isArray(result.states)) {
							result.states.forEach(function (state) {
								return registry.register(state);
							});
						}
					}
					var hook = toState.lazyLoad;
					// Store/get the lazy load promise on/from the hookfn so it doesn't get re-invoked
					var promise = hook['_promise'];
					if (!promise) {
						promise = hook['_promise'] = hook(transition).then(updateStateRegistry);
						var cleanup = function () {
							return delete hook['_promise'];
						};
						promise.then(cleanup, cleanup);
					}
					return promise.then(retryOriginalTransition);
				};
				exports.registerLazyLoadHook = function (transitionService) {
					return transitionService.onBefore({ to: function (state) {
							return !!state.lazyLoad;
						} }, lazyLoadHook);
				};

				/***/
			},
			/* 37 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module view */ /** for typedoc */

				var common_1 = __webpack_require__(3);
				var hof_1 = __webpack_require__(5);
				var predicates_1 = __webpack_require__(4);
				var trace_1 = __webpack_require__(12);
				/**
     * The View service
     */
				var ViewService = function () {
					function ViewService() {
						var _this = this;
						this.uiViews = [];
						this.viewConfigs = [];
						this._viewConfigFactories = {};
						this.sync = function () {
							var uiViewsByFqn = _this.uiViews.map(function (uiv) {
								return [uiv.fqn, uiv];
							}).reduce(common_1.applyPairs, {});
							/**
        * Given a ui-view and a ViewConfig, determines if they "match".
        *
        * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in
        * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.
        *
        * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or
        * can be a segmented ui-view path, describing a portion of a ui-view fqn.
        *
        * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type
        *
        * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:
        * - the ui-view's name matches the ViewConfig's target name
        * - the ui-view's context matches the ViewConfig's anchor
        *
        * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:
        * - There exists a parent ui-view where:
        *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name
        *    - the parent ui-view's context matches the ViewConfig's anchor
        * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn
        *
        * Example:
        *
        * DOM:
        * <div ui-view>                        <!-- created in the root context (name: "") -->
        *   <div ui-view="foo">                <!-- created in the context named: "A"      -->
        *     <div ui-view>                    <!-- created in the context named: "A.B"    -->
        *       <div ui-view="bar">            <!-- created in the context named: "A.B.C"  -->
        *       </div>
        *     </div>
        *   </div>
        * </div>
        *
        * uiViews: [
        *  { fqn: "$default",                  creationContext: { name: "" } },
        *  { fqn: "$default.foo",              creationContext: { name: "A" } },
        *  { fqn: "$default.foo.$default",     creationContext: { name: "A.B" } }
        *  { fqn: "$default.foo.$default.bar", creationContext: { name: "A.B.C" } }
        * ]
        *
        * These four view configs all match the ui-view with the fqn: "$default.foo.$default.bar":
        *
        * - ViewConfig1: { uiViewName: "bar",                       uiViewContextAnchor: "A.B.C" }
        * - ViewConfig2: { uiViewName: "$default.bar",              uiViewContextAnchor: "A.B" }
        * - ViewConfig3: { uiViewName: "foo.$default.bar",          uiViewContextAnchor: "A" }
        * - ViewConfig4: { uiViewName: "$default.foo.$default.bar", uiViewContextAnchor: "" }
        *
        * Using ViewConfig3 as an example, it matches the ui-view with fqn "$default.foo.$default.bar" because:
        * - The ViewConfig's segmented target name is: [ "foo", "$default", "bar" ]
        * - There exists a parent ui-view (which has fqn: "$default.foo") where:
        *    - the parent ui-view's name "foo" matches the first segment "foo" of the ViewConfig's target name
        *    - the parent ui-view's context "A" matches the ViewConfig's anchor context "A"
        * - And the remaining segments [ "$default", "bar" ].join("."_ of the ViewConfig's target name match
        *   the tail of the ui-view's fqn "default.bar"
        */
							var matches = function (uiView) {
								return function (viewConfig) {
									// Don't supply an ng1 ui-view with an ng2 ViewConfig, etc
									if (uiView.$type !== viewConfig.viewDecl.$type) return false;
									// Split names apart from both viewConfig and uiView into segments
									var vc = viewConfig.viewDecl;
									var vcSegments = vc.$uiViewName.split(".");
									var uivSegments = uiView.fqn.split(".");
									// Check if the tails of the segment arrays match. ex, these arrays' tails match:
									// vc: ["foo", "bar"], uiv fqn: ["$default", "foo", "bar"]
									if (!common_1.equals(vcSegments, uivSegments.slice(0 - vcSegments.length))) return false;
									// Now check if the fqn ending at the first segment of the viewConfig matches the context:
									// ["$default", "foo"].join(".") == "$default.foo", does the ui-view $default.foo context match?
									var negOffset = 1 - vcSegments.length || undefined;
									var fqnToFirstSegment = uivSegments.slice(0, negOffset).join(".");
									var uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;
									return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);
								};
							};
							// Return the number of dots in the fully qualified name
							function uiViewDepth(uiView) {
								return uiView.fqn.split(".").length;
							}
							// Return the ViewConfig's context's depth in the context tree.
							function viewConfigDepth(config) {
								var context = config.viewDecl.$context,
								    count = 0;
								while (++count && context.parent) context = context.parent;
								return count;
							}
							// Given a depth function, returns a compare function which can return either ascending or descending order
							var depthCompare = hof_1.curry(function (depthFn, posNeg, left, right) {
								return posNeg * (depthFn(left) - depthFn(right));
							});
							var matchingConfigPair = function (uiView) {
								var matchingConfigs = _this.viewConfigs.filter(matches(uiView));
								if (matchingConfigs.length > 1) matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending
								return [uiView, matchingConfigs[0]];
							};
							var configureUIView = function (_a) {
								var uiView = _a[0],
								    viewConfig = _a[1];
								// If a parent ui-view is reconfigured, it could destroy child ui-views.
								// Before configuring a child ui-view, make sure it's still in the active uiViews array.
								if (_this.uiViews.indexOf(uiView) !== -1) uiView.configUpdated(viewConfig);
							};
							_this.uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair).forEach(configureUIView);
						};
					}
					ViewService.prototype.rootContext = function (context) {
						return this._rootContext = context || this._rootContext;
					};
					;
					ViewService.prototype.viewConfigFactory = function (viewType, factory) {
						this._viewConfigFactories[viewType] = factory;
					};
					ViewService.prototype.createViewConfig = function (path, decl) {
						var cfgFactory = this._viewConfigFactories[decl.$type];
						if (!cfgFactory) throw new Error("ViewService: No view config factory registered for type " + decl.$type);
						var cfgs = cfgFactory(path, decl);
						return predicates_1.isArray(cfgs) ? cfgs : [cfgs];
					};
					/**
      * De-registers a ViewConfig.
      *
      * @param viewConfig The ViewConfig view to deregister.
      */
					ViewService.prototype.deactivateViewConfig = function (viewConfig) {
						trace_1.trace.traceViewServiceEvent("<- Removing", viewConfig);
						common_1.removeFrom(this.viewConfigs, viewConfig);
					};
					;
					ViewService.prototype.activateViewConfig = function (viewConfig) {
						trace_1.trace.traceViewServiceEvent("-> Registering", viewConfig);
						this.viewConfigs.push(viewConfig);
					};
					;
					/**
      * Allows a `ui-view` element to register its canonical name with a callback that allows it to
      * be updated with a template, controller, and local variables.
      *
      * @param {String} name The fully-qualified name of the `ui-view` object being registered.
      * @param {Function} configUpdatedCallback A callback that receives updates to the content & configuration
      *                   of the view.
      * @return {Function} Returns a de-registration function used when the view is destroyed.
      */
					ViewService.prototype.registerUIView = function (uiView) {
						trace_1.trace.traceViewServiceUIViewEvent("-> Registering", uiView);
						var uiViews = this.uiViews;
						var fqnMatches = function (uiv) {
							return uiv.fqn === uiView.fqn;
						};
						if (uiViews.filter(fqnMatches).length) trace_1.trace.traceViewServiceUIViewEvent("!!!! duplicate uiView named:", uiView);
						uiViews.push(uiView);
						this.sync();
						return function () {
							var idx = uiViews.indexOf(uiView);
							if (idx === -1) {
								trace_1.trace.traceViewServiceUIViewEvent("Tried removing non-registered uiView", uiView);
								return;
							}
							trace_1.trace.traceViewServiceUIViewEvent("<- Deregistering", uiView);
							common_1.removeFrom(uiViews)(uiView);
						};
					};
					;
					/**
      * Returns the list of views currently available on the page, by fully-qualified name.
      *
      * @return {Array} Returns an array of fully-qualified view names.
      */
					ViewService.prototype.available = function () {
						return this.uiViews.map(hof_1.prop("fqn"));
					};
					/**
      * Returns the list of views on the page containing loaded content.
      *
      * @return {Array} Returns an array of fully-qualified view names.
      */
					ViewService.prototype.active = function () {
						return this.uiViews.filter(hof_1.prop("$config")).map(hof_1.prop("name"));
					};
					/**
      * Normalizes a view's name from a state.views configuration block.
      *
      * @param context the context object (state declaration) that the view belongs to
      * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]
      *
      * @returns the normalized uiViewName and uiViewContextAnchor that the view targets
      */
					ViewService.normalizeUIViewTarget = function (context, rawViewName) {
						if (rawViewName === void 0) {
							rawViewName = "";
						}
						// TODO: Validate incoming view name with a regexp to allow:
						// ex: "view.name@foo.bar" , "^.^.view.name" , "view.name@^.^" , "" ,
						// "@" , "$default@^" , "!$default.$default" , "!foo.bar"
						var viewAtContext = rawViewName.split("@");
						var uiViewName = viewAtContext[0] || "$default"; // default to unnamed view
						var uiViewContextAnchor = predicates_1.isString(viewAtContext[1]) ? viewAtContext[1] : "^"; // default to parent context
						// Handle relative view-name sugar syntax.
						// Matches rawViewName "^.^.^.foo.bar" into array: ["^.^.^.foo.bar", "^.^.^", "foo.bar"],
						var relativeViewNameSugar = /^(\^(?:\.\^)*)\.(.*$)/.exec(uiViewName);
						if (relativeViewNameSugar) {
							// Clobbers existing contextAnchor (rawViewName validation will fix this)
							uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to "^.^.^"
							uiViewName = relativeViewNameSugar[2]; // set view-name to "foo.bar"
						}
						if (uiViewName.charAt(0) === '!') {
							uiViewName = uiViewName.substr(1);
							uiViewContextAnchor = ""; // target absolutely from root
						}
						// handle parent relative targeting "^.^.^"
						var relativeMatch = /^(\^(?:\.\^)*)$/;
						if (relativeMatch.exec(uiViewContextAnchor)) {
							var anchor = uiViewContextAnchor.split(".").reduce(function (anchor, x) {
								return anchor.parent;
							}, context);
							uiViewContextAnchor = anchor.name;
						}
						return { uiViewName: uiViewName, uiViewContextAnchor: uiViewContextAnchor };
					};
					return ViewService;
				}();
				exports.ViewService = ViewService;

				/***/
			},
			/* 38 */
			/***/function (module, exports, __webpack_require__) {

				/** @module state */ /** for typedoc */
				"use strict";

				var stateMatcher_1 = __webpack_require__(39);
				var stateBuilder_1 = __webpack_require__(40);
				var stateQueueManager_1 = __webpack_require__(41);
				var common_1 = __webpack_require__(3);
				var StateRegistry = function () {
					function StateRegistry(urlMatcherFactory, urlRouterProvider) {
						this.urlRouterProvider = urlRouterProvider;
						this.states = {};
						this.listeners = [];
						this.matcher = new stateMatcher_1.StateMatcher(this.states);
						this.builder = new stateBuilder_1.StateBuilder(this.matcher, urlMatcherFactory);
						this.stateQueue = new stateQueueManager_1.StateQueueManager(this.states, this.builder, urlRouterProvider, this.listeners);
						var rootStateDef = {
							name: '',
							url: '^',
							views: null,
							params: {
								'#': { value: null, type: 'hash', dynamic: true }
							},
							abstract: true
						};
						var _root = this._root = this.stateQueue.register(rootStateDef);
						_root.navigable = null;
					}
					/**
      * Listen for a State Registry events
      *
      * Adds a callback that is invoked when states are registered or deregistered with the StateRegistry.
      *
      * @example
      * ```js
      *
      * let allStates = registry.get();
      *
      * // Later, invoke deregisterFn() to remove the listener
      * let deregisterFn = registry.onStatesChanged((event, states) => {
      *   switch(event) {
      *     case: 'registered':
      *       states.forEach(state => allStates.push(state));
      *       break;
      *     case: 'deregistered':
      *       states.forEach(state => {
      *         let idx = allStates.indexOf(state);
      *         if (idx !== -1) allStates.splice(idx, 1);
      *       });
      *       break;
      *   }
      * });
      * ```
      *
      * @param listener a callback function invoked when the registered states changes.
      *        The function receives two parameters, `event` and `state`.
      *        See [[StateRegistryListener]]
      * @return a function that deregisters the listener
      */
					StateRegistry.prototype.onStatesChanged = function (listener) {
						this.listeners.push(listener);
						return function deregisterListener() {
							common_1.removeFrom(this.listeners)(listener);
						}.bind(this);
					};
					/**
      * Gets the implicit root state
      *
      * Gets the root of the state tree.
      * The root state is implicitly created by UI-Router.
      * Note: this returns the internal [[State]] representation, not a [[StateDeclaration]]
      *
      * @return the root [[State]]
      */
					StateRegistry.prototype.root = function () {
						return this._root;
					};
					/**
      * Adds a state to the registry
      *
      * Registers a [[StateDefinition]] or queues it for registration.
      *
      * Note: a state will be queued if the state's parent isn't yet registered.
      * It will also be queued if the queue is not yet in [[StateQueueManager.autoFlush]] mode.
      *
      * @param stateDefinition the definition of the state to register.
      * @returns the internal [[State]] object.
      *          If the state was successfully registered, then the object is fully built (See: [[StateBuilder]]).
      *          If the state was only queued, then the object is not fully built.
      */
					StateRegistry.prototype.register = function (stateDefinition) {
						return this.stateQueue.register(stateDefinition);
					};
					/** @hidden */
					StateRegistry.prototype._deregisterTree = function (state) {
						var _this = this;
						var all = this.get().map(function (s) {
							return s.$$state();
						});
						var getChildren = function (states) {
							var children = all.filter(function (s) {
								return states.indexOf(s.parent) !== -1;
							});
							return children.length === 0 ? children : children.concat(getChildren(children));
						};
						var children = getChildren([state]);
						var deregistered = [state].concat(children).reverse();
						deregistered.forEach(function (state) {
							_this.urlRouterProvider.removeRule(state._urlRule);
							delete _this.states[state.name];
						});
						return deregistered;
					};
					/**
      * Removes a state from the registry
      *
      * This removes a state from the registry.
      * If the state has children, they are are also removed from the registry.
      *
      * @param stateOrName the state's name or object representation
      * @returns {State[]} a list of removed states
      */
					StateRegistry.prototype.deregister = function (stateOrName) {
						var _state = this.get(stateOrName);
						if (!_state) throw new Error("Can't deregister state; not found: " + stateOrName);
						var deregisteredStates = this._deregisterTree(_state.$$state());
						this.listeners.forEach(function (listener) {
							return listener("deregistered", deregisteredStates.map(function (s) {
								return s.self;
							}));
						});
						return deregisteredStates;
					};
					StateRegistry.prototype.get = function (stateOrName, base) {
						var _this = this;
						if (arguments.length === 0) return Object.keys(this.states).map(function (name) {
							return _this.states[name].self;
						});
						var found = this.matcher.find(stateOrName, base);
						return found && found.self || null;
					};
					StateRegistry.prototype.decorator = function (name, func) {
						return this.builder.builder(name, func);
					};
					return StateRegistry;
				}();
				exports.StateRegistry = StateRegistry;

				/***/
			},
			/* 39 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module state */ /** for typedoc */

				var predicates_1 = __webpack_require__(4);
				var glob_1 = __webpack_require__(7);
				var common_1 = __webpack_require__(3);
				var StateMatcher = function () {
					function StateMatcher(_states) {
						this._states = _states;
					}
					StateMatcher.prototype.isRelative = function (stateName) {
						stateName = stateName || "";
						return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
					};
					StateMatcher.prototype.find = function (stateOrName, base) {
						if (!stateOrName && stateOrName !== "") return undefined;
						var isStr = predicates_1.isString(stateOrName);
						var name = isStr ? stateOrName : stateOrName.name;
						if (this.isRelative(name)) name = this.resolvePath(name, base);
						var state = this._states[name];
						if (state && (isStr || !isStr && (state === stateOrName || state.self === stateOrName))) {
							return state;
						} else if (isStr) {
							var matches = common_1.values(this._states).filter(function (state) {
								return new glob_1.Glob(state.name).matches(name);
							});
							if (matches.length > 1) {
								console.log("stateMatcher.find: Found multiple matches for " + name + " using glob: ", matches.map(function (match) {
									return match.name;
								}));
							}
							return matches[0];
						}
						return undefined;
					};
					StateMatcher.prototype.resolvePath = function (name, base) {
						if (!base) throw new Error("No reference point given for path '" + name + "'");
						var baseState = this.find(base);
						var splitName = name.split("."),
						    i = 0,
						    pathLength = splitName.length,
						    current = baseState;
						for (; i < pathLength; i++) {
							if (splitName[i] === "" && i === 0) {
								current = baseState;
								continue;
							}
							if (splitName[i] === "^") {
								if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + baseState.name + "'");
								current = current.parent;
								continue;
							}
							break;
						}
						var relName = splitName.slice(i).join(".");
						return current.name + (current.name && relName ? "." : "") + relName;
					};
					return StateMatcher;
				}();
				exports.StateMatcher = StateMatcher;

				/***/
			},
			/* 40 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module state */ /** for typedoc */

				var common_1 = __webpack_require__(3);
				var predicates_1 = __webpack_require__(4);
				var strings_1 = __webpack_require__(9);
				var hof_1 = __webpack_require__(5);
				var param_1 = __webpack_require__(22);
				var resolvable_1 = __webpack_require__(19);
				var coreservices_1 = __webpack_require__(6);
				var parseUrl = function (url) {
					if (!predicates_1.isString(url)) return false;
					var root = url.charAt(0) === '^';
					return { val: root ? url.substring(1) : url, root: root };
				};
				function nameBuilder(state) {
					if (state.lazyLoad) state.name = state.self.name + ".**";
					return state.name;
				}
				function selfBuilder(state) {
					state.self.$$state = function () {
						return state;
					};
					return state.self;
				}
				function dataBuilder(state) {
					if (state.parent && state.parent.data) {
						state.data = state.self.data = common_1.inherit(state.parent.data, state.data);
					}
					return state.data;
				}
				var getUrlBuilder = function ($urlMatcherFactoryProvider, root) {
					return function urlBuilder(state) {
						var stateDec = state;
						if (stateDec && stateDec.url && stateDec.lazyLoad) {
							stateDec.url += "{remainder:any}"; // match any path (.*)
						}
						var parsed = parseUrl(stateDec.url),
						    parent = state.parent;
						var url = !parsed ? stateDec.url : $urlMatcherFactoryProvider.compile(parsed.val, {
							params: state.params || {},
							paramMap: function (paramConfig, isSearch) {
								if (stateDec.reloadOnSearch === false && isSearch) paramConfig = common_1.extend(paramConfig || {}, { dynamic: true });
								return paramConfig;
							}
						});
						if (!url) return null;
						if (!$urlMatcherFactoryProvider.isMatcher(url)) throw new Error("Invalid url '" + url + "' in state '" + state + "'");
						return parsed && parsed.root ? url : (parent && parent.navigable || root()).url.append(url);
					};
				};
				var getNavigableBuilder = function (isRoot) {
					return function navigableBuilder(state) {
						return !isRoot(state) && state.url ? state : state.parent ? state.parent.navigable : null;
					};
				};
				var getParamsBuilder = function (paramTypes) {
					return function paramsBuilder(state) {
						var makeConfigParam = function (config, id) {
							return param_1.Param.fromConfig(id, null, config, paramTypes);
						};
						var urlParams = state.url && state.url.parameters({ inherit: false }) || [];
						var nonUrlParams = common_1.values(common_1.mapObj(common_1.omit(state.params || {}, urlParams.map(hof_1.prop('id'))), makeConfigParam));
						return urlParams.concat(nonUrlParams).map(function (p) {
							return [p.id, p];
						}).reduce(common_1.applyPairs, {});
					};
				};
				function pathBuilder(state) {
					return state.parent ? state.parent.path.concat(state) : [state];
				}
				function includesBuilder(state) {
					var includes = state.parent ? common_1.extend({}, state.parent.includes) : {};
					includes[state.name] = true;
					return includes;
				}
				/**
     * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].
     *
     * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder
     * validates the `resolve` property and converts it to a [[Resolvable]] array.
     *
     * resolve: input value can be:
     *
     * {
     *   // analyzed but not injected
     *   myFooResolve: function() { return "myFooData"; },
     *
     *   // function.toString() parsed, "DependencyName" dep as string (not min-safe)
     *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },
     *
     *   // Array split; "DependencyName" dep as string
     *   myBazResolve: [ "DependencyName", function(dep) { return dep.fetchSomethingAsPromise() },
     *
     *   // Array split; DependencyType dep as token (compared using ===)
     *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },
     *
     *   // val.$inject used as deps
     *   // where:
     *   //     corgeResolve.$inject = ["DependencyName"];
     *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }
     *   // then "DependencyName" dep as string
     *   myCorgeResolve: corgeResolve,
     *
     *  // inject service by name
     *  // When a string is found, desugar creating a resolve that injects the named service
     *   myGraultResolve: "SomeService"
     * }
     *
     * or:
     *
     * [
     *   new Resolvable("myFooResolve", function() { return "myFooData" }),
     *   new Resolvable("myBarResolve", function(dep) { return dep.fetchSomethingAsPromise() }, [ "DependencyName" ]),
     *   { provide: "myBazResolve", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ "DependencyName" ] }
     * ]
     */
				function resolvablesBuilder(state) {
					/** convert resolve: {} and resolvePolicy: {} objects to an array of tuples */
					var objects2Tuples = function (resolveObj, resolvePolicies) {
						return Object.keys(resolveObj || {}).map(function (token) {
							return { token: token, val: resolveObj[token], deps: undefined, policy: resolvePolicies[token] };
						});
					};
					/** fetch DI annotations from a function or ng1-style array */
					var annotate = function (fn) {
						return fn['$inject'] || coreservices_1.services.$injector.annotate(fn, coreservices_1.services.$injector.strictDi);
					};
					/** true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]] */
					var isResolveLiteral = function (obj) {
						return !!(obj.token && obj.resolveFn);
					};
					/** true if the object looks like a provide literal, or a ng2 Provider */
					var isLikeNg2Provider = function (obj) {
						return !!((obj.provide || obj.token) && (obj.useValue || obj.useFactory || obj.useExisting || obj.useClass));
					};
					/** true if the object looks like a tuple from obj2Tuples */
					var isTupleFromObj = function (obj) {
						return !!(obj && obj.val && (predicates_1.isString(obj.val) || predicates_1.isArray(obj.val) || predicates_1.isFunction(obj.val)));
					};
					/** extracts the token from a Provider or provide literal */
					var token = function (p) {
						return p.provide || p.token;
					};
					/** Given a literal resolve or provider object, returns a Resolvable */
					var literal2Resolvable = hof_1.pattern([[hof_1.prop('resolveFn'), function (p) {
						return new resolvable_1.Resolvable(token(p), p.resolveFn, p.deps, p.policy);
					}], [hof_1.prop('useFactory'), function (p) {
						return new resolvable_1.Resolvable(token(p), p.useFactory, p.deps || p.dependencies, p.policy);
					}], [hof_1.prop('useClass'), function (p) {
						return new resolvable_1.Resolvable(token(p), function () {
							return new p.useClass();
						}, [], p.policy);
					}], [hof_1.prop('useValue'), function (p) {
						return new resolvable_1.Resolvable(token(p), function () {
							return p.useValue;
						}, [], p.policy, p.useValue);
					}], [hof_1.prop('useExisting'), function (p) {
						return new resolvable_1.Resolvable(token(p), common_1.identity, [p.useExisting], p.policy);
					}]]);
					var tuple2Resolvable = hof_1.pattern([[hof_1.pipe(hof_1.prop("val"), predicates_1.isString), function (tuple) {
						return new resolvable_1.Resolvable(tuple.token, common_1.identity, [tuple.val], tuple.policy);
					}], [hof_1.pipe(hof_1.prop("val"), predicates_1.isArray), function (tuple) {
						return new resolvable_1.Resolvable(tuple.token, common_1.tail(tuple.val), tuple.val.slice(0, -1), tuple.policy);
					}], [hof_1.pipe(hof_1.prop("val"), predicates_1.isFunction), function (tuple) {
						return new resolvable_1.Resolvable(tuple.token, tuple.val, annotate(tuple.val), tuple.policy);
					}]]);
					var item2Resolvable = hof_1.pattern([[hof_1.is(resolvable_1.Resolvable), function (r) {
						return r;
					}], [isResolveLiteral, literal2Resolvable], [isLikeNg2Provider, literal2Resolvable], [isTupleFromObj, tuple2Resolvable], [hof_1.val(true), function (obj) {
						throw new Error("Invalid resolve value: " + strings_1.stringify(obj));
					}]]);
					// If resolveBlock is already an array, use it as-is.
					// Otherwise, assume it's an object and convert to an Array of tuples
					var decl = state.resolve;
					var items = predicates_1.isArray(decl) ? decl : objects2Tuples(decl, state.resolvePolicy || {});
					return items.map(item2Resolvable);
				}
				exports.resolvablesBuilder = resolvablesBuilder;
				/**
     * @internalapi A internal global service
     *
     * StateBuilder is a factory for the internal [[State]] objects.
     *
     * When you register a state with the [[StateRegistry]], you register a plain old javascript object which
     * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding
     * [[State]] object, which has an API and is used internally.
     *
     * Custom properties or API may be added to the internal [[State]] object by registering a decorator function
     * using the [[builder]] method.
     */
				var StateBuilder = function () {
					function StateBuilder(matcher, $urlMatcherFactoryProvider) {
						this.matcher = matcher;
						var self = this;
						var root = function () {
							return matcher.find("");
						};
						var isRoot = function (state) {
							return state.name === "";
						};
						function parentBuilder(state) {
							if (isRoot(state)) return null;
							return matcher.find(self.parentName(state)) || root();
						}
						this.builders = {
							name: [nameBuilder],
							self: [selfBuilder],
							parent: [parentBuilder],
							data: [dataBuilder],
							// Build a URLMatcher if necessary, either via a relative or absolute URL
							url: [getUrlBuilder($urlMatcherFactoryProvider, root)],
							// Keep track of the closest ancestor state that has a URL (i.e. is navigable)
							navigable: [getNavigableBuilder(isRoot)],
							params: [getParamsBuilder($urlMatcherFactoryProvider.paramTypes)],
							// Each framework-specific ui-router implementation should define its own `views` builder
							// e.g., src/ng1/statebuilders/views.ts
							views: [],
							// Keep a full path from the root down to this state as this is needed for state activation.
							path: [pathBuilder],
							// Speed up $state.includes() as it's used a lot
							includes: [includesBuilder],
							resolvables: [resolvablesBuilder]
						};
					}
					/**
      * Registers a [[BuilderFunction]] for a specific [[State]] property (e.g., `parent`, `url`, or `path`).
      * More than one BuilderFunction can be registered for a given property.
      *
      * The BuilderFunction(s) will be used to define the property on any subsequently built [[State]] objects.
      *
      * @param name The name of the State property being registered for.
      * @param fn The BuilderFunction which will be used to build the State property
      * @returns a function which deregisters the BuilderFunction
      */
					StateBuilder.prototype.builder = function (name, fn) {
						var builders = this.builders;
						var array = builders[name] || [];
						// Backwards compat: if only one builder exists, return it, else return whole arary.
						if (predicates_1.isString(name) && !predicates_1.isDefined(fn)) return array.length > 1 ? array : array[0];
						if (!predicates_1.isString(name) || !predicates_1.isFunction(fn)) return;
						builders[name] = array;
						builders[name].push(fn);
						return function () {
							return builders[name].splice(builders[name].indexOf(fn, 1)) && null;
						};
					};
					/**
      * Builds all of the properties on an essentially blank State object, returning a State object which has all its
      * properties and API built.
      *
      * @param state an uninitialized State object
      * @returns the built State object
      */
					StateBuilder.prototype.build = function (state) {
						var _a = this,
						    matcher = _a.matcher,
						    builders = _a.builders;
						var parent = this.parentName(state);
						if (parent && !matcher.find(parent)) return null;
						for (var key in builders) {
							if (!builders.hasOwnProperty(key)) continue;
							var chain = builders[key].reduce(function (parentFn, step) {
								return function (_state) {
									return step(_state, parentFn);
								};
							}, common_1.noop);
							state[key] = chain(state);
						}
						return state;
					};
					StateBuilder.prototype.parentName = function (state) {
						var name = state.name || "";
						var segments = name.split('.');
						if (segments.length > 1) {
							if (state.parent) {
								throw new Error("States that specify the 'parent:' property should not have a '.' in their name (" + name + ")");
							}
							var lastSegment = segments.pop();
							if (lastSegment === '**') segments.pop();
							return segments.join(".");
						}
						if (!state.parent) return "";
						return predicates_1.isString(state.parent) ? state.parent : state.parent.name;
					};
					StateBuilder.prototype.name = function (state) {
						var name = state.name;
						if (name.indexOf('.') !== -1 || !state.parent) return name;
						var parentName = predicates_1.isString(state.parent) ? state.parent : state.parent.name;
						return parentName ? parentName + "." + name : name;
					};
					return StateBuilder;
				}();
				exports.StateBuilder = StateBuilder;

				/***/
			},
			/* 41 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module state */ /** for typedoc */

				var common_1 = __webpack_require__(3);
				var predicates_1 = __webpack_require__(4);
				var stateObject_1 = __webpack_require__(42);
				var StateQueueManager = function () {
					function StateQueueManager(states, builder, $urlRouterProvider, listeners) {
						this.states = states;
						this.builder = builder;
						this.$urlRouterProvider = $urlRouterProvider;
						this.listeners = listeners;
						this.queue = [];
					}
					StateQueueManager.prototype.register = function (config) {
						var _a = this,
						    states = _a.states,
						    queue = _a.queue,
						    $state = _a.$state;
						// Wrap a new object around the state so we can store our private details easily.
						// @TODO: state = new State(extend({}, config, { ... }))
						var state = common_1.inherit(new stateObject_1.State(), common_1.extend({}, config, {
							self: config,
							resolve: config.resolve || [],
							toString: function () {
								return config.name;
							}
						}));
						if (!predicates_1.isString(state.name)) throw new Error("State must have a valid name");
						if (states.hasOwnProperty(state.name) || common_1.pluck(queue, 'name').indexOf(state.name) !== -1) throw new Error("State '" + state.name + "' is already defined");
						queue.push(state);
						if (this.$state) {
							this.flush($state);
						}
						return state;
					};
					StateQueueManager.prototype.flush = function ($state) {
						var _a = this,
						    queue = _a.queue,
						    states = _a.states,
						    builder = _a.builder;
						var registered = [],
						    // states that got registered
						orphans = [],
						    // states that dodn't yet have a parent registered
						previousQueueLength = {}; // keep track of how long the queue when an orphan was first encountered
						while (queue.length > 0) {
							var state = queue.shift();
							var result = builder.build(state);
							var orphanIdx = orphans.indexOf(state);
							if (result) {
								if (states.hasOwnProperty(state.name)) throw new Error("State '" + name + "' is already defined");
								states[state.name] = state;
								this.attachRoute($state, state);
								if (orphanIdx >= 0) orphans.splice(orphanIdx, 1);
								registered.push(state);
								continue;
							}
							var prev = previousQueueLength[state.name];
							previousQueueLength[state.name] = queue.length;
							if (orphanIdx >= 0 && prev === queue.length) {
								// Wait until two consecutive iterations where no additional states were dequeued successfully.
								// throw new Error(`Cannot register orphaned state '${state.name}'`);
								queue.push(state);
								return states;
							} else if (orphanIdx < 0) {
								orphans.push(state);
							}
							queue.push(state);
						}
						if (registered.length) {
							this.listeners.forEach(function (listener) {
								return listener("registered", registered.map(function (s) {
									return s.self;
								}));
							});
						}
						return states;
					};
					StateQueueManager.prototype.autoFlush = function ($state) {
						this.$state = $state;
						this.flush($state);
					};
					StateQueueManager.prototype.attachRoute = function ($state, state) {
						var $urlRouterProvider = this.$urlRouterProvider;
						if (state.abstract || !state.url) return;
						$urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {
							if ($state.$current.navigable !== state || !common_1.equalForKeys($match, $stateParams)) {
								$state.transitionTo(state, $match, { inherit: true, source: "url" });
							}
						}], function (rule) {
							return state._urlRule = rule;
						});
					};
					return StateQueueManager;
				}();
				exports.StateQueueManager = StateQueueManager;

				/***/
			},
			/* 42 */
			/***/function (module, exports, __webpack_require__) {

				/** @module state */ /** for typedoc */
				"use strict";

				var common_1 = __webpack_require__(3);
				var hof_1 = __webpack_require__(5);
				/**
     * @ngdoc object
     * @name ui.router.state.type:State
     *
     * @description
     * Definition object for states. Includes methods for manipulating the state heirarchy.
     *
     * @param {Object} config  A configuration object hash that includes the results of user-supplied
     *        values, as well as values from `StateBuilder`.
     *
     * @returns {Object}  Returns a new `State` object.
     */
				var State = function () {
					function State(config) {
						common_1.extend(this, config);
						// Object.freeze(this);
					}
					/**
      * @ngdoc function
      * @name ui.router.state.type:State#is
      * @methodOf ui.router.state.type:State
      *
      * @description
      * Compares the identity of the state against the passed value, which is either an object
      * reference to the actual `State` instance, the original definition object passed to
      * `$stateProvider.state()`, or the fully-qualified name.
      *
      * @param {Object} ref Can be one of (a) a `State` instance, (b) an object that was passed
      *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.
      * @returns {boolean} Returns `true` if `ref` matches the current `State` instance.
      */
					State.prototype.is = function (ref) {
						return this === ref || this.self === ref || this.fqn() === ref;
					};
					/**
      * @ngdoc function
      * @name ui.router.state.type:State#fqn
      * @methodOf ui.router.state.type:State
      *
      * @description
      * Returns the fully-qualified name of the state, based on its current position in the tree.
      *
      * @returns {string} Returns a dot-separated name of the state.
      */
					State.prototype.fqn = function () {
						if (!this.parent || !(this.parent instanceof this.constructor)) return this.name;
						var name = this.parent.fqn();
						return name ? name + "." + this.name : this.name;
					};
					/**
      * @ngdoc function
      * @name ui.router.state.type:State#root
      * @methodOf ui.router.state.type:State
      *
      * @description
      * Returns the root node of this state's tree.
      *
      * @returns {State} The root of this state's tree.
      */
					State.prototype.root = function () {
						return this.parent && this.parent.root() || this;
					};
					State.prototype.parameters = function (opts) {
						opts = common_1.defaults(opts, { inherit: true });
						var inherited = opts.inherit && this.parent && this.parent.parameters() || [];
						return inherited.concat(common_1.values(this.params));
					};
					State.prototype.parameter = function (id, opts) {
						if (opts === void 0) {
							opts = {};
						}
						return this.url && this.url.parameter(id, opts) || common_1.find(common_1.values(this.params), hof_1.propEq('id', id)) || opts.inherit && this.parent && this.parent.parameter(id);
					};
					State.prototype.toString = function () {
						return this.fqn();
					};
					return State;
				}();
				exports.State = State;

				/***/
			},
			/* 43 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module state */ /** */

				var common_1 = __webpack_require__(3);
				var predicates_1 = __webpack_require__(4);
				var queue_1 = __webpack_require__(8);
				var coreservices_1 = __webpack_require__(6);
				var pathFactory_1 = __webpack_require__(20);
				var node_1 = __webpack_require__(21);
				var transitionService_1 = __webpack_require__(30);
				var rejectFactory_1 = __webpack_require__(10);
				var targetState_1 = __webpack_require__(14);
				var param_1 = __webpack_require__(22);
				var glob_1 = __webpack_require__(7);
				var common_2 = __webpack_require__(3);
				var common_3 = __webpack_require__(3);
				var resolveContext_1 = __webpack_require__(17);
				var StateService = function () {
					/** @hidden */
					function StateService(router) {
						this.router = router;
						this.invalidCallbacks = [];
						/** @hidden */
						this._defaultErrorHandler = function $defaultErrorHandler($error$) {
							if ($error$ instanceof Error && $error$.stack) {
								console.error($error$);
								console.error($error$.stack);
							} else if ($error$ instanceof rejectFactory_1.Rejection) {
								console.error($error$.toString());
								if ($error$.detail && $error$.detail.stack) console.error($error$.detail.stack);
							} else {
								console.error($error$);
							}
						};
						var getters = ['current', '$current', 'params', 'transition'];
						var boundFns = Object.keys(StateService.prototype).filter(function (key) {
							return getters.indexOf(key) === -1;
						});
						common_3.bindFunctions(StateService.prototype, this, this, boundFns);
					}
					Object.defineProperty(StateService.prototype, "transition", {
						get: function () {
							return this.router.globals.transition;
						},
						enumerable: true,
						configurable: true
					});
					Object.defineProperty(StateService.prototype, "params", {
						get: function () {
							return this.router.globals.params;
						},
						enumerable: true,
						configurable: true
					});
					Object.defineProperty(StateService.prototype, "current", {
						get: function () {
							return this.router.globals.current;
						},
						enumerable: true,
						configurable: true
					});
					Object.defineProperty(StateService.prototype, "$current", {
						get: function () {
							return this.router.globals.$current;
						},
						enumerable: true,
						configurable: true
					});
					/**
      * Handler for when [[transitionTo]] is called with an invalid state.
      *
      * Invokes the [[onInvalid]] callbacks, in natural order.
      * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.
      * The results of the callbacks are wrapped in $q.when(), so the callbacks may return promises.
      *
      * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.
      */
					StateService.prototype._handleInvalidTargetState = function (fromPath, toState) {
						var _this = this;
						var fromState = pathFactory_1.PathFactory.makeTargetState(fromPath);
						var globals = this.router.globals;
						var latestThing = function () {
							return globals.transitionHistory.peekTail();
						};
						var latest = latestThing();
						var callbackQueue = new queue_1.Queue(this.invalidCallbacks.slice());
						var injector = new resolveContext_1.ResolveContext(fromPath).injector();
						var checkForRedirect = function (result) {
							if (!(result instanceof targetState_1.TargetState)) {
								return;
							}
							var target = result;
							// Recreate the TargetState, in case the state is now defined.
							target = _this.target(target.identifier(), target.params(), target.options());
							if (!target.valid()) return rejectFactory_1.Rejection.invalid(target.error()).toPromise();
							if (latestThing() !== latest) return rejectFactory_1.Rejection.superseded().toPromise();
							return _this.transitionTo(target.identifier(), target.params(), target.options());
						};
						function invokeNextCallback() {
							var nextCallback = callbackQueue.dequeue();
							if (nextCallback === undefined) return rejectFactory_1.Rejection.invalid(toState.error()).toPromise();
							var callbackResult = coreservices_1.services.$q.when(nextCallback(toState, fromState, injector));
							return callbackResult.then(checkForRedirect).then(function (result) {
								return result || invokeNextCallback();
							});
						}
						return invokeNextCallback();
					};
					/**
      * Registers an Invalid State handler
      *
      * Registers a [[OnInvalidCallback]] function to be invoked when [[StateService.transitionTo]]
      * has been called with an invalid state reference parameter
      *
      * Example:
      * ```js
      * stateService.onInvalid(function(to, from, injector) {
      *   if (to.name() === 'foo') {
      *     let lazyLoader = injector.get('LazyLoadService');
      *     return lazyLoader.load('foo')
      *         .then(() => stateService.target('foo'));
      *   }
      * });
      * ```
      *
      * @param {function} callback invoked when the toState is invalid
      *   This function receives the (invalid) toState, the fromState, and an injector.
      *   The function may optionally return a [[TargetState]] or a Promise for a TargetState.
      *   If one is returned, it is treated as a redirect.
      *
      * @returns a function which deregisters the callback
      */
					StateService.prototype.onInvalid = function (callback) {
						this.invalidCallbacks.push(callback);
						return function deregisterListener() {
							common_1.removeFrom(this.invalidCallbacks)(callback);
						}.bind(this);
					};
					/**
      * @ngdoc function
      * @name ui.router.state.$state#reload
      * @methodOf ui.router.state.$state
      *
      * @description
      * A method that force reloads the current state, or a partial state hierarchy. All resolves are re-resolved,
      * controllers reinstantiated, and events re-fired.
      *
      * @example
      * <pre>
      * let app angular.module('app', ['ui.router']);
      *
      * app.controller('ctrl', function ($scope, $state) {
      *   $scope.reload = function(){
      *     $state.reload();
      *   }
      * });
      * </pre>
      *
      * `reload()` is just an alias for:
      * <pre>
      * $state.transitionTo($state.current, $stateParams, {
      *   reload: true, inherit: false, notify: true
      * });
      * </pre>
      *
      * @param {string=|object=} reloadState - A state name or a state object, which is the root of the resolves to be re-resolved.
      * @example
      * <pre>
      * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'
      * //and current state is 'contacts.detail.item'
      * let app angular.module('app', ['ui.router']);
      *
      * app.controller('ctrl', function ($scope, $state) {
      *   $scope.reload = function(){
      *     //will reload 'contact.detail' and nested 'contact.detail.item' states
      *     $state.reload('contact.detail');
      *   }
      * });
      * </pre>
      *
      * @returns {promise} A promise representing the state of the new transition. See
      * {@link ui.router.state.$state#methods_go $state.go}.
      */
					StateService.prototype.reload = function (reloadState) {
						return this.transitionTo(this.current, this.params, {
							reload: predicates_1.isDefined(reloadState) ? reloadState : true,
							inherit: false,
							notify: false
						});
					};
					;
					/**
      * @ngdoc function
      * @name ui.router.state.$state#go
      * @methodOf ui.router.state.$state
      *
      * @description
      * Convenience method for transitioning to a new state. `$state.go` calls
      * `$state.transitionTo` internally but automatically sets options to
      * `{ location: true, inherit: true, relative: $state.$current, notify: true }`.
      * This allows you to easily use an absolute or relative to path and specify
      * only the parameters you'd like to update (while letting unspecified parameters
      * inherit from the currently active ancestor states).
      *
      * @example
      * <pre>
      * let app = angular.module('app', ['ui.router']);
      *
      * app.controller('ctrl', function ($scope, $state) {
      *   $scope.changeState = function () {
      *     $state.go('contact.detail');
      *   };
      * });
      * </pre>
      * <img src='../ngdoc_assets/StateGoExamples.png'/>
      *
      * @param {string|object} to Absolute state name, state object, or relative state path. Some examples:
      *
      * - `$state.go('contact.detail')` - will go to the `contact.detail` state
      * - `$state.go('^')` - will go to a parent state
      * - `$state.go('^.sibling')` - will go to a sibling state
      * - `$state.go('.child.grandchild')` - will go to grandchild state
      *
      * @param {object=} params A map of the parameters that will be sent to the state,
      * will populate $stateParams. Any parameters that are not specified will be inherited from currently
      * defined parameters. This allows, for example, going to a sibling state that shares parameters
      * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
      * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
      * will get you all current parameters, etc.
      * @param {object=} options Options object. The options are:
      *
      * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
      *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
      * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
      * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),
      *    defines which state to be relative from.
      * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
      * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params
      *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
      *    use this when you want to force a reload when *everything* is the same, including search params.
      *
      * @returns {promise} A promise representing the state of the new transition.
      *
      * Possible success values:
      *
      * - $state.current
      *
      * <br/>Possible rejection values:
      *
      * - 'transition superseded' - when a newer transition has been started after this one
      * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
      * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
      *   when a `$stateNotFound` `event.retry` promise errors.
      * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
      * - *resolve error* - when an error has occurred with a `resolve`
      *
      */
					StateService.prototype.go = function (to, params, options) {
						var defautGoOpts = { relative: this.$current, inherit: true };
						var transOpts = common_1.defaults(options, defautGoOpts, transitionService_1.defaultTransOpts);
						return this.transitionTo(to, params, transOpts);
					};
					;
					/** Factory method for creating a TargetState */
					StateService.prototype.target = function (identifier, params, options) {
						if (options === void 0) {
							options = {};
						}
						// If we're reloading, find the state object to reload from
						if (predicates_1.isObject(options.reload) && !options.reload.name) throw new Error('Invalid reload state object');
						var reg = this.router.stateRegistry;
						options.reloadState = options.reload === true ? reg.root() : reg.matcher.find(options.reload, options.relative);
						if (options.reload && !options.reloadState) throw new Error("No such reload state '" + (predicates_1.isString(options.reload) ? options.reload : options.reload.name) + "'");
						var stateDefinition = reg.matcher.find(identifier, options.relative);
						return new targetState_1.TargetState(identifier, stateDefinition, params, options);
					};
					;
					/**
      * @ngdoc function
      * @name ui.router.state.$state#transitionTo
      * @methodOf ui.router.state.$state
      *
      * @description
      * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
      * uses `transitionTo` internally. `$state.go` is recommended in most situations.
      *
      * @example
      * <pre>
      * let app = angular.module('app', ['ui.router']);
      *
      * app.controller('ctrl', function ($scope, $state) {
      *   $scope.changeState = function () {
      *     $state.transitionTo('contact.detail');
      *   };
      * });
      * </pre>
      *
      * @param {string|object} to State name or state object.
      * @param {object=} toParams A map of the parameters that will be sent to the state,
      * will populate $stateParams.
      * @param {object=} options Options object. The options are:
      *
      * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
      *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
      * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
      * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'),
      *    defines which state to be relative from.
      * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
      * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params
      *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
      *    use this when you want to force a reload when *everything* is the same, including search params.
      *
      * @returns {promise} A promise representing the state of the new transition. See
      * {@link ui.router.state.$state#methods_go $state.go}.
      */
					StateService.prototype.transitionTo = function (to, toParams, options) {
						var _this = this;
						if (toParams === void 0) {
							toParams = {};
						}
						if (options === void 0) {
							options = {};
						}
						var router = this.router;
						var globals = router.globals;
						var transHistory = globals.transitionHistory;
						options = common_1.defaults(options, transitionService_1.defaultTransOpts);
						options = common_1.extend(options, { current: transHistory.peekTail.bind(transHistory) });
						var ref = this.target(to, toParams, options);
						var latestSuccess = globals.successfulTransitions.peekTail();
						var rootPath = function () {
							return [new node_1.PathNode(_this.router.stateRegistry.root())];
						};
						var currentPath = latestSuccess ? latestSuccess.treeChanges().to : rootPath();
						if (!ref.exists()) return this._handleInvalidTargetState(currentPath, ref);
						if (!ref.valid()) return common_1.silentRejection(ref.error());
						/**
       * Special handling for Ignored, Aborted, and Redirected transitions
       *
       * The semantics for the transition.run() promise and the StateService.transitionTo()
       * promise differ. For instance, the run() promise may be rejected because it was
       * IGNORED, but the transitionTo() promise is resolved because from the user perspective
       * no error occurred.  Likewise, the transition.run() promise may be rejected because of
       * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.
       */
						var rejectedTransitionHandler = function (transition) {
							return function (error) {
								if (error instanceof rejectFactory_1.Rejection) {
									if (error.type === rejectFactory_1.RejectType.IGNORED) {
										// Consider ignored `Transition.run()` as a successful `transitionTo`
										router.urlRouter.update();
										return coreservices_1.services.$q.when(globals.current);
									}
									var detail = error.detail;
									if (error.type === rejectFactory_1.RejectType.SUPERSEDED && error.redirected && detail instanceof targetState_1.TargetState) {
										// If `Transition.run()` was redirected, allow the `transitionTo()` promise to resolve successfully
										// by returning the promise for the new (redirect) `Transition.run()`.
										var redirect = transition.redirect(detail);
										return redirect.run().catch(rejectedTransitionHandler(redirect));
									}
									if (error.type === rejectFactory_1.RejectType.ABORTED) {
										router.urlRouter.update();
									}
								}
								var errorHandler = _this.defaultErrorHandler();
								errorHandler(error);
								return coreservices_1.services.$q.reject(error);
							};
						};
						var transition = this.router.transitionService.create(currentPath, ref);
						var transitionToPromise = transition.run().catch(rejectedTransitionHandler(transition));
						common_1.silenceUncaughtInPromise(transitionToPromise); // issue #2676
						// Return a promise for the transition, which also has the transition object on it.
						return common_1.extend(transitionToPromise, { transition: transition });
					};
					;
					/**
      * @ngdoc function
      * @name ui.router.state.$state#is
      * @methodOf ui.router.state.$state
      *
      * @description
      * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
      * but only checks for the full state name. If params is supplied then it will be
      * tested for strict equality against the current active params object, so all params
      * must match with none missing and no extras.
      *
      * @example
      * <pre>
      * $state.$current.name = 'contacts.details.item';
      *
      * // absolute name
      * $state.is('contact.details.item'); // returns true
      * $state.is(contactDetailItemStateObject); // returns true
      *
      * // relative name (. and ^), typically from a template
      * // E.g. from the 'contacts.details' template
      * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
      * </pre>
      *
      * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.
      * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
      * to test against the current active state.
      * @param {object=} options An options object.  The options are:
      *
      * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will
      * test relative to `options.relative` state (or name).
      *
      * @returns {boolean} Returns true if it is the state.
      */
					StateService.prototype.is = function (stateOrName, params, options) {
						options = common_1.defaults(options, { relative: this.$current });
						var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);
						if (!predicates_1.isDefined(state)) return undefined;
						if (this.$current !== state) return false;
						return predicates_1.isDefined(params) && params !== null ? param_1.Param.equals(state.parameters(), this.params, params) : true;
					};
					;
					/**
      * @ngdoc function
      * @name ui.router.state.$state#includes
      * @methodOf ui.router.state.$state
      *
      * @description
      * A method to determine if the current active state is equal to or is the child of the
      * state stateName. If any params are passed then they will be tested for a match as well.
      * Not all the parameters need to be passed, just the ones you'd like to test for equality.
      *
      * @example
      * Partial and relative names
      * <pre>
      * $state.$current.name = 'contacts.details.item';
      *
      * // Using partial names
      * $state.includes("contacts"); // returns true
      * $state.includes("contacts.details"); // returns true
      * $state.includes("contacts.details.item"); // returns true
      * $state.includes("contacts.list"); // returns false
      * $state.includes("about"); // returns false
      *
      * // Using relative names (. and ^), typically from a template
      * // E.g. from the 'contacts.details' template
      * <div ng-class="{highlighted: $state.includes('.item')}">Item</div>
      * </pre>
      *
      * Basic globbing patterns
      * <pre>
      * $state.$current.name = 'contacts.details.item.url';
      *
      * $state.includes("*.details.*.*"); // returns true
      * $state.includes("*.details.**"); // returns true
      * $state.includes("**.item.**"); // returns true
      * $state.includes("*.details.item.url"); // returns true
      * $state.includes("*.details.*.url"); // returns true
      * $state.includes("*.details.*"); // returns false
      * $state.includes("item.**"); // returns false
      * </pre>
      *
      * @param {string|object} stateOrName A partial name, relative name, glob pattern,
      * or state object to be searched for within the current state name.
      * @param {object=} params A param object, e.g. `{sectionId: section.id}`,
      * that you'd like to test against the current active state.
      * @param {object=} options An options object.  The options are:
      *
      * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,
      * .includes will test relative to `options.relative` state (or name).
      *
      * @returns {boolean} Returns true if it does include the state
      */
					StateService.prototype.includes = function (stateOrName, params, options) {
						options = common_1.defaults(options, { relative: this.$current });
						var glob = predicates_1.isString(stateOrName) && glob_1.Glob.fromString(stateOrName);
						if (glob) {
							if (!glob.matches(this.$current.name)) return false;
							stateOrName = this.$current.name;
						}
						var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative),
						    include = this.$current.includes;
						if (!predicates_1.isDefined(state)) return undefined;
						if (!predicates_1.isDefined(include[state.name])) return false;
						// @TODO Replace with Param.equals() ?
						return params ? common_2.equalForKeys(param_1.Param.values(state.parameters(), params), this.params, Object.keys(params)) : true;
					};
					;
					/**
      * @ngdoc function
      * @name ui.router.state.$state#href
      * @methodOf ui.router.state.$state
      *
      * @description
      * A url generation method that returns the compiled url for the given state populated with the given params.
      *
      * @example
      * <pre>
      * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
      * </pre>
      *
      * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
      * @param {object=} params An object of parameter values to fill the state's required parameters.
      * @param {object=} options Options object. The options are:
      *
      * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
      *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
      *    ancestor with a valid url).
      * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
      * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),
      *    defines which state to be relative from.
      * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
      *
      * @returns {string} compiled state url
      */
					StateService.prototype.href = function (stateOrName, params, options) {
						var defaultHrefOpts = {
							lossy: true,
							inherit: true,
							absolute: false,
							relative: this.$current
						};
						options = common_1.defaults(options, defaultHrefOpts);
						params = params || {};
						var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);
						if (!predicates_1.isDefined(state)) return null;
						if (options.inherit) params = this.params.$inherit(params, this.$current, state);
						var nav = state && options.lossy ? state.navigable : state;
						if (!nav || nav.url === undefined || nav.url === null) {
							return null;
						}
						return this.router.urlRouter.href(nav.url, param_1.Param.values(state.parameters(), params), {
							absolute: options.absolute
						});
					};
					;
					/**
      * Sets or gets the default [[transitionTo]] error handler.
      *
      * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.
      * This includes errors caused by resolves and transition hooks.
      *
      * Note:
      * This handler does not receive certain Transition rejections.
      * Redirected and Ignored Transitions are not considered to be errors by [[StateService.transitionTo]].
      *
      * The built-in default error handler logs the error to the console.
      *
      * You can provide your own custom handler.
      *
      * @example
      * ```js
      *
      * stateService.defaultErrorHandler(function() {
      *   // Do not log transitionTo errors
      * });
      * ```
      *
      * @param handler a global error handler function
      * @returns the current global error handler
      */
					StateService.prototype.defaultErrorHandler = function (handler) {
						return this._defaultErrorHandler = handler || this._defaultErrorHandler;
					};
					StateService.prototype.get = function (stateOrName, base) {
						var reg = this.router.stateRegistry;
						if (arguments.length === 0) return reg.get();
						return reg.get(stateOrName, base || this.$current);
					};
					return StateService;
				}();
				exports.StateService = StateService;

				/***/
			},
			/* 44 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module core */ /** */

				var stateParams_1 = __webpack_require__(45);
				var queue_1 = __webpack_require__(8);
				var common_1 = __webpack_require__(3);
				/**
     * Global mutable state
     */
				var Globals = function () {
					function Globals(transitionService) {
						var _this = this;
						this.params = new stateParams_1.StateParams();
						this.transitionHistory = new queue_1.Queue([], 1);
						this.successfulTransitions = new queue_1.Queue([], 1);
						var beforeNewTransition = function ($transition$) {
							_this.transition = $transition$;
							_this.transitionHistory.enqueue($transition$);
							var updateGlobalState = function () {
								_this.successfulTransitions.enqueue($transition$);
								_this.$current = $transition$.$to();
								_this.current = _this.$current.self;
								common_1.copy($transition$.params(), _this.params);
							};
							$transition$.onSuccess({}, updateGlobalState, { priority: 10000 });
							var clearCurrentTransition = function () {
								if (_this.transition === $transition$) _this.transition = null;
							};
							$transition$.promise.then(clearCurrentTransition, clearCurrentTransition);
						};
						transitionService.onBefore({}, beforeNewTransition);
					}
					return Globals;
				}();
				exports.Globals = Globals;

				/***/
			},
			/* 45 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module params */ /** for typedoc */

				var common_1 = __webpack_require__(3);
				var StateParams = function () {
					function StateParams(params) {
						if (params === void 0) {
							params = {};
						}
						common_1.extend(this, params);
					}
					/**
      * Merges a set of parameters with all parameters inherited between the common parents of the
      * current state and a given destination state.
      *
      * @param {Object} newParams The set of parameters which will be composited with inherited params.
      * @param {Object} $current Internal definition of object representing the current state.
      * @param {Object} $to Internal definition of object representing state to transition to.
      */
					StateParams.prototype.$inherit = function (newParams, $current, $to) {
						var parents = common_1.ancestors($current, $to),
						    parentParams,
						    inherited = {},
						    inheritList = [];
						for (var i in parents) {
							if (!parents[i] || !parents[i].params) continue;
							parentParams = Object.keys(parents[i].params);
							if (!parentParams.length) continue;
							for (var j in parentParams) {
								if (inheritList.indexOf(parentParams[j]) >= 0) continue;
								inheritList.push(parentParams[j]);
								inherited[parentParams[j]] = this[parentParams[j]];
							}
						}
						return common_1.extend({}, inherited, newParams);
					};
					;
					return StateParams;
				}();
				exports.StateParams = StateParams;

				/***/
			},
			/* 46 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				function __export(m) {
					for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
				}
				/**
     * This module contains code for State Parameters.
     *
     * See [[ParamDeclaration]]
     * @module params
     * @preferred doc
     */
				/** for typedoc */
				__export(__webpack_require__(22));
				__export(__webpack_require__(28));
				__export(__webpack_require__(45));
				__export(__webpack_require__(24));

				/***/
			},
			/* 47 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				function __export(m) {
					for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
				}
				/** @module path */ /** for typedoc */
				__export(__webpack_require__(21));
				__export(__webpack_require__(20));

				/***/
			},
			/* 48 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				function __export(m) {
					for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
				}
				/** @module resolve */ /** for typedoc */
				__export(__webpack_require__(18));
				__export(__webpack_require__(19));
				__export(__webpack_require__(17));

				/***/
			},
			/* 49 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				function __export(m) {
					for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
				}
				/** @module state */ /** for typedoc */
				__export(__webpack_require__(40));
				__export(__webpack_require__(42));
				__export(__webpack_require__(39));
				__export(__webpack_require__(41));
				__export(__webpack_require__(38));
				__export(__webpack_require__(43));
				__export(__webpack_require__(14));

				/***/
			},
			/* 50 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				function __export(m) {
					for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
				}
				/**
     * This module contains APIs related to a Transition.
     *
     * See [[Transition]], [[$transitions]]
     *
     * @module transition
     * @preferred
     */
				/** for typedoc */
				__export(__webpack_require__(16));
				__export(__webpack_require__(15));
				__export(__webpack_require__(10));
				__export(__webpack_require__(11));
				__export(__webpack_require__(13));
				__export(__webpack_require__(30));

				/***/
			},
			/* 51 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				function __export(m) {
					for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
				}
				/** @module url */ /** for typedoc */
				__export(__webpack_require__(27));
				__export(__webpack_require__(23));
				__export(__webpack_require__(26));
				__export(__webpack_require__(29));

				/***/
			},
			/* 52 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				function __export(m) {
					for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
				}
				/** @module view */ /** for typedoc */
				__export(__webpack_require__(37));

				/***/
			},
			/* 53 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				function __export(m) {
					for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
				}
				/**
     * Naive, pure JS implementation of core ui-router services
     *
     * @module justjs
     */ /** */
				__export(__webpack_require__(1));
				var coreservices_1 = __webpack_require__(6);
				var strings_1 = __webpack_require__(9);
				var predicates_1 = __webpack_require__(4);
				var common_1 = __webpack_require__(3);
				/** $q-like promise api */
				coreservices_1.services.$q = function (executor) {
					return new Promise(executor);
				};
				coreservices_1.services.$q.when = function (val) {
					return Promise.resolve(val);
				};
				coreservices_1.services.$q.reject = function (val) {
					return Promise.reject(val);
				};
				coreservices_1.services.$q.defer = function () {
					var deferred = {};
					deferred.promise = new Promise(function (resolve, reject) {
						deferred.resolve = resolve;
						deferred.reject = reject;
					});
					return deferred;
				};
				coreservices_1.services.$q.all = function (promises) {
					if (predicates_1.isArray(promises)) {
						return Promise.all(promises);
					}
					if (predicates_1.isObject(promises)) {
						var p = promises;
						// Convert promises map to promises array.
						// When each promise resolves, map it to a tuple { key: key, val: val }
						var objectToTuples = Object.keys(promises).map(function (key) {
							return p[key].then(function (val) {
								return { key: key, val: val };
							});
						});
						var tuplesToObject = function (values) {
							return values.reduce(function (acc, tuple) {
								acc[tuple.key] = tuple.val;return acc;
							}, {});
						};
						// Then wait for all promises to resolve, and convert them back to an object
						return coreservices_1.services.$q.all(objectToTuples).then(tuplesToObject);
					}
				};
				// angular1-like injector api
				// globally available injectables
				var globals = {};
				coreservices_1.services.$injector = {
					get: function (name) {
						return globals[name];
					},
					has: function (name) {
						return coreservices_1.services.$injector.get(name) != null;
					},
					invoke: function (fn, context, locals) {
						var all = common_1.extend({}, globals, locals || {});
						var params = coreservices_1.services.$injector.annotate(fn);
						var ensureExist = common_1.assertPredicate(function (key) {
							return all.hasOwnProperty(key);
						}, function (key) {
							return "Could not find Dependency Injection token: " + strings_1.stringify(key);
						});
						var args = params.filter(ensureExist).map(function (x) {
							return all[x];
						});
						if (predicates_1.isFunction(fn)) return fn.apply(context, args);
						return fn.slice(-1)[0].apply(context, args);
					},
					// http://stackoverflow.com/questions/1007981
					annotate: function (fn) {
						var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
						var ARGUMENT_NAMES = /([^\s,]+)/g;
						if (!predicates_1.isInjectable(fn)) throw new Error("Not an injectable function: " + fn);
						if (fn && fn['$inject']) return fn['$inject'];
						if (predicates_1.isArray(fn)) return fn.slice(0, -1);
						var fnStr = fn.toString().replace(STRIP_COMMENTS, '');
						var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);
						return result || [];
					}
				};
				var loc = coreservices_1.services.location;
				loc.hash = function () {
					return "";
				};
				loc.path = function () {
					return location.hash.replace(/^#/, "");
				};
				loc.search = function () {
					return location.search;
				};
				loc.setUrl = function (url, replace) {
					if (replace === void 0) {
						replace = true;
					}
					if (url) location.hash = url;
				};
				loc.onChange = function (cb) {
					window.addEventListener("hashchange", cb, false);
				};
				var locCfg = coreservices_1.services.locationConfig;
				locCfg.port = function () {
					return location.port;
				};
				locCfg.protocol = function () {
					return location.protocol;
				};
				locCfg.host = function () {
					return location.host;
				};
				locCfg.baseHref = function () {
					return "";
				};
				locCfg.html5Mode = function () {
					return false;
				};
				locCfg.hashPrefix = function () {
					return "";
				};

				/***/
			},
			/* 54 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				var core_1 = __webpack_require__(55);
				exports.NG2_INJECTOR_TOKEN = new core_1.OpaqueToken("NgModule Injector");

				/***/
			},
			/* 55 */
			/***/function (module, exports) {

				module.exports = __WEBPACK_EXTERNAL_MODULE_55__;

				/***/
			},
			/* 56 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module ng2 */ /** */

				var core_1 = __webpack_require__(55);
				var uiRouterNgModule_1 = __webpack_require__(57);
				var uiRouterConfig_1 = __webpack_require__(69);
				var router_1 = __webpack_require__(25);
				var resolvable_1 = __webpack_require__(19);
				var resolveContext_1 = __webpack_require__(17);
				/**
     * Returns a function which lazy loads a nested module
     *
     * Use this function as a [[StateDeclaration.lazyLoad]] property to lazy load a state tree (an NgModule).
     *
     * @param path the path to the module source code.
     * @returns A function which takes a transition, then:
     *
     * - Gets the Injector (scoped properly for the destination state)
     * - Loads and creates the NgModule
     * - Finds the "replacement state" for the target state, and adds the new NgModule Injector to it (as a resolve)
     *
     * returns the new states array
     */
				function loadNgModule(path) {
					/** Get the parent NgModule Injector (from resolves) */
					var getNg2Injector = function (transition) {
						return transition.injector().getAsync(resolveContext_1.NATIVE_INJECTOR_TOKEN);
					};
					/**
      * Lazy loads the NgModule using the NgModuleFactoryLoader
      *
      * Use the parent NgModule's Injector to:
      * - Find the correct NgModuleFactoryLoader
      * - Load the new NgModuleFactory from the path string (async)
      * - Create the new NgModule
      */
					var createNg2Module = function (path, ng2Injector) {
						return ng2Injector.get(core_1.NgModuleFactoryLoader).load(path).then(function (factory) {
							return factory.create(ng2Injector);
						});
					};
					/**
      * Apply the UI-Router Modules found in the lazy loaded module.
      *
      * Apply the Lazy Loaded NgModule's newly created Injector to the right state in the state tree.
      *
      * Lazy loading uses a placeholder state which is removed (and replaced) after the module is loaded.
      * The NgModule should include a state with the same name as the placeholder.
      *
      * Find the *newly loaded state* with the same name as the *placeholder state*.
      * The NgModule's Injector (and ComponentFactoryResolver) will be added to that state.
      * The Injector/Factory are used when creating Components for the `replacement` state and all its children.
      */
					function loadUIRouterModules(transition, ng2Module) {
						var injector = ng2Module.injector;
						var parentInjector = ng2Module.injector['parent'];
						var uiRouter = injector.get(router_1.UIRouter);
						var originalName = transition.to().name;
						var originalState = uiRouter.stateRegistry.get(originalName);
						var rootModules = injector.get(uiRouterNgModule_1.UIROUTER_ROOT_MODULE);
						var parentRootModules = parentInjector.get(uiRouterNgModule_1.UIROUTER_ROOT_MODULE);
						var newRootModules = rootModules.filter(function (module) {
							return parentRootModules.indexOf(module) === -1;
						});
						if (newRootModules.length) {
							console.log(rootModules);
							throw new Error('Lazy loaded modules should not contain a UIRouterModule.forRoot() module');
						}
						var modules = injector.get(uiRouterNgModule_1.UIROUTER_MODULE_TOKEN);
						modules.forEach(function (module) {
							return uiRouterConfig_1.applyModuleConfig(uiRouter, injector, module);
						});
						var replacementState = uiRouter.stateRegistry.get(originalName);
						if (replacementState === originalState) {
							throw new Error("The module that was loaded from " + path + " should have a ui-router state named '" + originalName + "'");
						}
						// Supply the newly loaded states with the Injector from the lazy loaded NgModule
						replacementState.$$state().resolvables.push(resolvable_1.Resolvable.fromData(resolveContext_1.NATIVE_INJECTOR_TOKEN, injector));
						return {};
					}
					return function (transition) {
						return getNg2Injector(transition).then(function (injector) {
							return createNg2Module(path, injector);
						}).then(function (moduleRef) {
							return loadUIRouterModules(transition, moduleRef);
						});
					};
				}
				exports.loadNgModule = loadNgModule;

				/***/
			},
			/* 57 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
					var c = arguments.length,
					    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
					    d;
					if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
					return c > 3 && r && Object.defineProperty(target, key, r), r;
				};
				var __metadata = this && this.__metadata || function (k, v) {
					if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
				};
				var core_1 = __webpack_require__(55);
				var directives_1 = __webpack_require__(58);
				var uiView_1 = __webpack_require__(60);
				var common_1 = __webpack_require__(3);
				var common_2 = __webpack_require__(67);
				var providers_1 = __webpack_require__(68);
				/**
     * Creates UI-Router Modules
     *
     * This class has two static factory methods which create UIRouter Modules.
     * A UI-Router Module is an [Angular 2 NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)
     * with support for UI-Router.
     *
     * ### UIRouter Directives
     *
     * When a UI-Router Module is imported into a `NgModule`, that module's components
     * can use the UIRouter Directives such as [[UIView]], [[UISref]], [[UISrefActive]].
     *
     * ### State Definitions
     *
     * State definitions found in the `states:` property are provided to the Dependency Injector.
     * This enables UI-Router to automatically register the states with the [[StateRegistry]] at bootstrap (and during lazy load).
     *
     * ### Entry Components
     *
     * Any routed components are added as `entryComponents:` so they will get compiled.
     */
				var UIRouterModule = function () {
					function UIRouterModule() {}
					/**
      * Creates a UI-Router Module for the root (bootstrapped) application module to import
      *
      * This factory function creates an [Angular 2 NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)
      * with UI-Router support.
      *
      * The `forRoot` module should be added to the `imports:` of the `NgModule` being bootstrapped.
      * An application should only create and import a single `NgModule` using `forRoot()`.
      * All other modules should be created using [[UIRouterModule.forChild]].
      *
      * Unlike `forChild`, an `NgModule` returned by this factory provides the [[UIRouter]] singleton object.
      * This factory also accepts root-level router configuration.
      * These are the only differences between `forRoot` and `forChild`.
      *
      * Example:
      * ```js
      * let routerConfig = {
      *   otherwise: '/home',
      *   states: [homeState, aboutState]
      * };
      *
      * @ NgModule({
      *   imports: [
      *     BrowserModule,
      *     UIRouterModule.forRoot(routerConfig),
      *     FeatureModule1
      *   ]
      * })
      * class MyRootAppModule {}
      *
      * browserPlatformDynamic.bootstrapModule(MyRootAppModule);
      * ```
      *
      * @param config declarative UI-Router configuration
      * @returns an `NgModule` which provides the [[UIRouter]] singleton instance
      */
					UIRouterModule.forRoot = function (config) {
						if (config === void 0) {
							config = {};
						}
						var locationStrategy = config.useHash ? common_2.HashLocationStrategy : common_2.PathLocationStrategy;
						return {
							ngModule: UIRouterModule,
							providers: [providers_1._UIROUTER_INSTANCE_PROVIDERS, providers_1._UIROUTER_SERVICE_PROVIDERS, { provide: common_2.LocationStrategy, useClass: locationStrategy }].concat(makeProviders(config, true))
						};
					};
					/**
      * Creates an `NgModule` for an UIRouter module
      *
      * This function creates an [Angular 2 NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)
      * with UI-Router support.
      *
      * @example
      * ```js
      *
      * var homeState = { name: 'home', url: '/home', component: Home };
      * var aboutState = { name: 'about', url: '/about', component: About };
      *
      * @ NgModule({
      *   imports: [
      *     UIRouterModule.forChild({ states: [ homeState, aboutState ] }),
      *     SharedModule,
      *   ],
      *   declarations: [ Home, About ],
      * })
      * export class AppModule {};
      * ```
      *
      * @param module UI-Router module options
      * @returns an `NgModule`
      */
					UIRouterModule.forChild = function (module) {
						if (module === void 0) {
							module = {};
						}
						return {
							ngModule: UIRouterModule,
							providers: makeProviders(module, false)
						};
					};
					UIRouterModule = __decorate([core_1.NgModule({
						declarations: [directives_1._UIROUTER_DIRECTIVES],
						exports: [directives_1._UIROUTER_DIRECTIVES],
						entryComponents: [uiView_1.UIView]
					}), __metadata('design:paramtypes', [])], UIRouterModule);
					return UIRouterModule;
				}();
				exports.UIRouterModule = UIRouterModule;
				function makeProviders(module, forRoot) {
					var providers = [module.configClass].filter(common_1.identity).map(function (configClass) {
						return { provide: configClass, useClass: configClass };
					});
					if (forRoot) providers.push({ provide: exports.UIROUTER_ROOT_MODULE, useValue: module, multi: true });
					providers.push({ provide: exports.UIROUTER_MODULE_TOKEN, useValue: module, multi: true });
					providers.push({ provide: core_1.ANALYZE_FOR_ENTRY_COMPONENTS, useValue: module.states || [], multi: true });
					return providers;
				}
				exports.makeProviders = makeProviders;
				exports.UIROUTER_ROOT_MODULE = new core_1.OpaqueToken("UIRouter Root Module");
				exports.UIROUTER_MODULE_TOKEN = new core_1.OpaqueToken("UIRouter Module");

				/***/
			},
			/* 58 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				function __export(m) {
					for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
				}
				/**
     * The UI-Router Angular 2 directives:
     *
     * - [[UIView]]: A viewport for routed components
     * - [[UISref]]: A state ref to a target state; navigates when clicked
     * - [[UISrefActive]]: (and `UISrefActiveEq`) Adds a css class when a UISref's target state (or a child state) is active
     *
     * @preferred @module ng2_directives
     */ /** */
				var uiSref_1 = __webpack_require__(59);
				var uiSrefActive_1 = __webpack_require__(65);
				var uiView_1 = __webpack_require__(60);
				var uiSrefStatus_1 = __webpack_require__(66);
				__export(__webpack_require__(60));
				__export(__webpack_require__(59));
				__export(__webpack_require__(66));
				__export(__webpack_require__(65));
				exports._UIROUTER_DIRECTIVES = [uiSref_1.UISref, uiSref_1.AnchorUISref, uiView_1.UIView, uiSrefActive_1.UISrefActive, uiSrefStatus_1.UISrefStatus];
				/**
     * References to the UI-Router directive classes, for use within a @Component's `directives:` property
     * @deprecated use [[UIRouterModule]]
     */
				exports.UIROUTER_DIRECTIVES = exports._UIROUTER_DIRECTIVES;

				/***/
			},
			/* 59 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
					var c = arguments.length,
					    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
					    d;
					if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
					return c > 3 && r && Object.defineProperty(target, key, r), r;
				};
				var __metadata = this && this.__metadata || function (k, v) {
					if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
				};
				var __param = this && this.__param || function (paramIndex, decorator) {
					return function (target, key) {
						decorator(target, key, paramIndex);
					};
				};
				/** @module ng2_directives */ /** */
				var router_1 = __webpack_require__(25);
				var core_1 = __webpack_require__(55);
				var core_2 = __webpack_require__(55);
				var core_3 = __webpack_require__(55);
				var core_4 = __webpack_require__(55);
				var uiView_1 = __webpack_require__(60);
				var common_1 = __webpack_require__(3);
				var globals_1 = __webpack_require__(44);
				var Rx_1 = __webpack_require__(64);
				/** @hidden */
				var AnchorUISref = function () {
					function AnchorUISref(_el, _renderer) {
						this._el = _el;
						this._renderer = _renderer;
					}
					AnchorUISref.prototype.update = function (href) {
						this._renderer.setElementProperty(this._el.nativeElement, 'href', href);
					};
					AnchorUISref = __decorate([core_1.Directive({ selector: 'a[uiSref]' }), __metadata('design:paramtypes', [core_3.ElementRef, core_4.Renderer])], AnchorUISref);
					return AnchorUISref;
				}();
				exports.AnchorUISref = AnchorUISref;
				/**
     * A directive when clicked, initiates a [[Transition]] to a [[TargetState]].
     *
     * ### Purpose
     *
     * This directive is applied to anchor tags (`<a>`) or any other clickable element.  It is a state reference (or sref --
     * similar to an href).  When clicked, the directive will transition to that state by calling [[StateService.go]],
     * and optionally supply state parameter values and transition options.
     *
     * When this directive is on an anchor tag, it will also add an `href` attribute to the anchor.
     *
     * ### Selector
     *
     * - `[uiSref]`: The directive is created as an attribute on an element, e.g., `<a uiSref></a>`
     *
     * ### Inputs
     *
     * - `uiSref`: the target state's name, e.g., `uiSref="foostate"`.  If a component template uses a relative `uiSref`,
     * e.g., `uiSref=".child"`, the reference is relative to that component's state.
     *
     * - `uiParams`: any target state parameter values, as an object, e.g., `[uiParams]="{ fooId: bar.fooId }"`
     *
     * - `uiOptions`: [[TransitionOptions]], e.g., `[uiOptions]="{ inherit: false }"`
     *
     * @example
     * ```html
     *
     * <!-- Targets bar state' -->
     * <a uiSref="bar">Bar</a>
     *
     * <!-- Assume this component's state is "foo".
     *      Relatively targets "foo.child" -->
     * <a uiSref=".child">Foo Child</a>
     *
     * <!-- Targets "bar" state and supplies parameter value -->
     * <a uiSref="bar" [uiParams]="{ barId: foo.barId }">Bar {{foo.barId}}</a>
     *
     * <!-- Targets "bar" state and parameter, doesn't inherit existing parameters-->
     * <a uiSref="bar" [uiParams]="{ barId: foo.barId }" [uiOptions]="{ inherit: false }">Bar {{foo.barId}}</a>
     * ```
     */
				var UISref = function () {
					function UISref(_router, parent, _anchorUISref, _globals) {
						var _this = this;
						this._router = _router;
						this.parent = parent;
						this._anchorUISref = _anchorUISref;
						this.targetState$ = new Rx_1.ReplaySubject(1);
						this._emit = false;
						this._statesSub = _globals.states$.subscribe(function () {
							return _this.update();
						});
					}
					Object.defineProperty(UISref.prototype, "uiSref", {
						set: function (val) {
							this.state = val;this.update();
						},
						enumerable: true,
						configurable: true
					});
					Object.defineProperty(UISref.prototype, "uiParams", {
						set: function (val) {
							this.params = val;this.update();
						},
						enumerable: true,
						configurable: true
					});
					Object.defineProperty(UISref.prototype, "uiOptions", {
						set: function (val) {
							this.options = val;this.update();
						},
						enumerable: true,
						configurable: true
					});
					UISref.prototype.ngOnInit = function () {
						this._emit = true;
						this.update();
					};
					UISref.prototype.ngOnDestroy = function () {
						this._statesSub.unsubscribe();
						this.targetState$.unsubscribe();
					};
					UISref.prototype.update = function () {
						var $state = this._router.stateService;
						if (this._emit) {
							var newTarget = $state.target(this.state, this.params, this.getOptions());
							this.targetState$.next(newTarget);
						}
						if (this._anchorUISref) {
							var href = $state.href(this.state, this.params, this.getOptions());
							this._anchorUISref.update(href);
						}
					};
					UISref.prototype.getOptions = function () {
						var defaultOpts = {
							relative: this.parent && this.parent.context && this.parent.context.name,
							inherit: true,
							source: "sref"
						};
						return common_1.extend(defaultOpts, this.options || {});
					};
					UISref.prototype.go = function () {
						this._router.stateService.go(this.state, this.params, this.getOptions());
						return false;
					};
					__decorate([core_1.Input('uiSref'), __metadata('design:type', String)], UISref.prototype, "state", void 0);
					__decorate([core_1.Input('uiParams'), __metadata('design:type', Object)], UISref.prototype, "params", void 0);
					__decorate([core_1.Input('uiOptions'), __metadata('design:type', Object)], UISref.prototype, "options", void 0);
					UISref = __decorate([core_1.Directive({
						selector: '[uiSref]',
						host: { '(click)': 'go()' }
					}), __param(1, core_1.Inject(uiView_1.UIView.PARENT_INJECT)), __param(2, core_2.Optional()), __param(3, core_1.Inject(globals_1.Globals)), __metadata('design:paramtypes', [router_1.UIRouter, Object, AnchorUISref, Object])], UISref);
					return UISref;
				}();
				exports.UISref = UISref;

				/***/
			},
			/* 60 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
					var c = arguments.length,
					    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
					    d;
					if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
					return c > 3 && r && Object.defineProperty(target, key, r), r;
				};
				var __metadata = this && this.__metadata || function (k, v) {
					if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
				};
				var __param = this && this.__param || function (paramIndex, decorator) {
					return function (target, key) {
						decorator(target, key, paramIndex);
					};
				};
				/** @module ng2_directives */ /** */
				var core_1 = __webpack_require__(55);
				var private_import_core_1 = __webpack_require__(61);
				var router_1 = __webpack_require__(25);
				var trace_1 = __webpack_require__(12);
				var views_1 = __webpack_require__(62);
				var resolveContext_1 = __webpack_require__(17);
				var common_1 = __webpack_require__(3);
				var mergeInjector_1 = __webpack_require__(63);
				/** @hidden */
				var id = 0;
				/** @hidden */
				var ng2ComponentInputs = function (ng2CompClass) {
					/** Get "@Input('foo') _foo" inputs */
					var props = private_import_core_1.reflector.propMetadata(ng2CompClass);
					var _props = Object.keys(props || {}).map(function (key) {
						return { key: key, annoArr: props[key] };
					}).reduce(function (acc, tuple) {
						return acc.concat(tuple.annoArr.map(function (anno) {
							return { key: tuple.key, anno: anno };
						}));
					}, []).filter(function (tuple) {
						return tuple.anno instanceof core_1.Input;
					}).map(function (tuple) {
						return { token: tuple.anno.bindingPropertyName || tuple.key, prop: tuple.key };
					});
					/** Get "inputs: ['foo']" inputs */
					var inputs = private_import_core_1.reflector.annotations(ng2CompClass).filter(function (x) {
						return x instanceof core_1.Component && !!x.inputs;
					}).map(function (x) {
						return x.inputs;
					}).reduce(common_1.flattenR, []).map(function (input) {
						return { token: input, prop: input };
					});
					return _props.concat(inputs);
				};
				/**
     * A UI-Router viewport directive, which is filled in by a view (component) on a state.
     *
     * ### Selector
     *
     * A `ui-view` directive can be created as an element: `<ui-view></ui-view>` or as an attribute: `<div ui-view></div>`.
     *
     * ### Purpose
     *
     * This directive is used in a Component template (or as the root component) to create a viewport.  The viewport
     * is filled in by a view (as defined by a [[Ng2ViewDeclaration]] inside a [[Ng2StateDeclaration]]) when the view's
     * state has been activated.
     *
     * @example
     * ```js
     *
     * // This app has two states, 'foo' and 'bar'
     * stateRegistry.register({ name: 'foo', url: '/foo', component: FooComponent });
     * stateRegistry.register({ name: 'bar', url: '/bar', component: BarComponent });
     * ```
     * ```html
     * <!-- This ui-view will be filled in by the foo state's component or
     *      the bar state's component when the foo or bar state is activated -->
     * <ui-view></ui-view>
     * ```
     *
     * ### Named ui-views
     *
     * A `ui-view` may optionally be given a name via the attribute value: `<div ui-view='header'></div>`.  *Note:
     * an unnamed `ui-view` is internally named `$default`*.   When a `ui-view` has a name, it will be filled in
     * by a matching named view.
     *
     * @example
     * ```js
     *
     * stateRegistry.register({
     *   name: 'foo',
     *   url: '/foo',
     *   views: { header: HeaderComponent, $default: FooComponent });
     * ```
     * ```html
     * <!-- When 'foo' state is active, filled by HeaderComponent -->
     * <div ui-view="header"></div>
     *
     * <!-- When 'foo' state is active, filled by FooComponent -->
     * <ui-view></ui-view>
     * ```
     */
				var UIView = function () {
					function UIView(router, parent, viewContainerRef) {
						this.router = router;
						this.viewContainerRef = viewContainerRef;
						this.uiViewData = {};
						this.parent = parent;
					}
					Object.defineProperty(UIView.prototype, "_name", {
						set: function (val) {
							this.name = val;
						},
						enumerable: true,
						configurable: true
					});
					UIView.prototype.ngOnInit = function () {
						var parentFqn = this.parent.fqn;
						var name = this.name || '$default';
						this.uiViewData = {
							$type: 'ng2',
							id: id++,
							name: name,
							fqn: parentFqn ? parentFqn + "." + name : name,
							creationContext: this.parent.context,
							configUpdated: this.viewConfigUpdated.bind(this),
							config: undefined
						};
						this.deregister = this.router.viewService.registerUIView(this.uiViewData);
					};
					UIView.prototype.disposeLast = function () {
						if (this.componentRef) this.componentRef.destroy();
						this.componentRef = null;
					};
					UIView.prototype.ngOnDestroy = function () {
						if (this.deregister) this.deregister();
						this.disposeLast();
					};
					/**
      * The view service is informing us of an updated ViewConfig
      * (usually because a transition activated some state and its views)
      */
					UIView.prototype.viewConfigUpdated = function (config) {
						// The config may be undefined if there is nothing currently targeting this UIView.
						// Dispose the current component, if there is one
						if (!config) return this.disposeLast();
						// Only care about Ng2 configs
						if (!(config instanceof views_1.Ng2ViewConfig)) return;
						// The "new" viewconfig is already applied, so exit early
						if (this.uiViewData.config === config) return;
						// This is a new ViewConfig.  Dispose the previous component
						this.disposeLast();
						trace_1.trace.traceUIViewConfigUpdated(this.uiViewData, config && config.viewDecl.$context);
						this.applyUpdatedConfig(config);
					};
					UIView.prototype.applyUpdatedConfig = function (config) {
						this.uiViewData.config = config;
						// Create the Injector for the routed component
						var context = new resolveContext_1.ResolveContext(config.path);
						var componentInjector = this.getComponentInjector(context);
						// Get the component class from the view declaration. TODO: allow promises?
						var componentClass = config.viewDecl.component;
						// Create the component
						var compFactoryResolver = componentInjector.get(core_1.ComponentFactoryResolver);
						var compFactory = compFactoryResolver.resolveComponentFactory(componentClass);
						this.componentRef = this.componentTarget.createComponent(compFactory, undefined, componentInjector);
						// Wire resolves to @Input()s
						this.applyInputBindings(this.componentRef, context, componentClass);
						// TODO: wire uiCanExit and uiOnParamsChanged callbacks
					};
					/**
      * Creates a new Injector for a routed component.
      *
      * Adds resolve values to the Injector
      * Adds providers from the NgModule for the state
      * Adds providers from the parent Component in the component tree
      * Adds a PARENT_INJECT view context object
      *
      * @returns an Injector
      */
					UIView.prototype.getComponentInjector = function (context) {
						// Map resolves to "useValue: providers"
						var resolvables = context.getTokens().map(function (token) {
							return context.getResolvable(token);
						}).filter(function (r) {
							return r.resolved;
						});
						var newProviders = resolvables.map(function (r) {
							return { provide: r.token, useValue: r.data };
						});
						var parentInject = { context: this.uiViewData.config.viewDecl.$context, fqn: this.uiViewData.fqn };
						newProviders.push({ provide: UIView.PARENT_INJECT, useValue: parentInject });
						var parentComponentInjector = this.viewContainerRef.injector;
						var moduleInjector = context.getResolvable(resolveContext_1.NATIVE_INJECTOR_TOKEN).data;
						var mergedParentInjector = new mergeInjector_1.MergeInjector(moduleInjector, parentComponentInjector);
						return core_1.ReflectiveInjector.resolveAndCreate(newProviders, mergedParentInjector);
					};
					/**
      * Supplies component inputs with resolve data
      *
      * Finds component inputs which match resolves (by name) and sets the input value
      * to the resolve data.
      */
					UIView.prototype.applyInputBindings = function (ref, context, componentClass) {
						var bindings = this.uiViewData.config.viewDecl['bindings'] || {};
						var addResolvable = function (tuple) {
							return {
								prop: tuple.prop,
								resolvable: context.getResolvable(bindings[tuple.prop] || tuple.token)
							};
						};
						// Supply resolve data to matching @Input('prop') or inputs: ['prop']
						var inputTuples = ng2ComponentInputs(componentClass);
						inputTuples.map(addResolvable).filter(function (tuple) {
							return tuple.resolvable && tuple.resolvable.resolved;
						}).forEach(function (tuple) {
							ref.instance[tuple.prop] = tuple.resolvable.data;
						});
						// Initiate change detection for the newly created component
						ref.changeDetectorRef.detectChanges();
					};
					UIView.PARENT_INJECT = "UIView.PARENT_INJECT";
					__decorate([core_1.ViewChild('componentTarget', { read: core_1.ViewContainerRef }), __metadata('design:type', core_1.ViewContainerRef)], UIView.prototype, "componentTarget", void 0);
					__decorate([core_1.Input('name'), __metadata('design:type', String)], UIView.prototype, "name", void 0);
					__decorate([core_1.Input('ui-view'), __metadata('design:type', String), __metadata('design:paramtypes', [String])], UIView.prototype, "_name", null);
					UIView = __decorate([core_1.Component({
						selector: 'ui-view, [ui-view]',
						template: "<template #componentTarget></template>"
					}), __param(1, core_1.Inject(UIView.PARENT_INJECT)), __metadata('design:paramtypes', [router_1.UIRouter, Object, core_1.ViewContainerRef])], UIView);
					return UIView;
				}();
				exports.UIView = UIView;

				/***/
			},
			/* 61 */
			/***/function (module, exports, __webpack_require__) {

				/**
     * @Kamshak It's imported like this in @angular/compiler as well.
     * Was going to mark it injectable as in
     * https://github.com/angular/angular/blob/42a287fabf6b035d51e00cf3006c27fec00f054a/modules/%40angular/compiler/src/ng_module_resolver.ts
     * but unfortunately not all platforms (namely browser-dynamic) provide it.
     */
				"use strict";

				var core_1 = __webpack_require__(55);
				exports.reflector = core_1.__core_private__.reflector;

				/***/
			},
			/* 62 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				var common_1 = __webpack_require__(3);
				var coreservices_1 = __webpack_require__(6);
				var view_1 = __webpack_require__(37);
				/**
     * This is a [[StateBuilder.builder]] function for angular2 `views`.
     *
     * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder
     * handles the `views` property with logic specific to ui-router-ng2.
     *
     * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object and
     * applies the state-level configuration to a view named `$default`.
     */
				function ng2ViewsBuilder(state) {
					var views = {},
					    viewsObject = state.views || { "$default": common_1.pick(state, "component") };
					common_1.forEach(viewsObject, function (config, name) {
						name = name || "$default"; // Account for views: { "": { template... } }
						if (Object.keys(config).length == 0) return;
						config.$type = "ng2";
						config.$context = state;
						config.$name = name;
						var normalized = view_1.ViewService.normalizeUIViewTarget(config.$context, config.$name);
						config.$uiViewName = normalized.uiViewName;
						config.$uiViewContextAnchor = normalized.uiViewContextAnchor;
						views[name] = config;
					});
					return views;
				}
				exports.ng2ViewsBuilder = ng2ViewsBuilder;
				var id = 0;
				var Ng2ViewConfig = function () {
					function Ng2ViewConfig(path, viewDecl) {
						this.path = path;
						this.viewDecl = viewDecl;
						this.$id = id++;
						this.loaded = true;
					}
					Ng2ViewConfig.prototype.load = function () {
						return coreservices_1.services.$q.when(this);
					};
					return Ng2ViewConfig;
				}();
				exports.Ng2ViewConfig = Ng2ViewConfig;

				/***/
			},
			/* 63 */
			/***/function (module, exports) {

				"use strict";
				/**
     * Merge two injectors
     *
     * This class implements the Injector ng2 interface but delegates
     * to the Injectors provided in the constructor.
     */

				var MergeInjector = function () {
					function MergeInjector() {
						var injectors = [];
						for (var _i = 0; _i < arguments.length; _i++) {
							injectors[_i - 0] = arguments[_i];
						}
						if (injectors.length < 2) throw new Error("pass at least two injectors");
						this.injectors = injectors;
					}
					/**
      * Get the token from the first injector which contains it.
      *
      * Delegates to the first Injector.get().
      * If not found, then delegates to the second Injector (and so forth).
      * If no Injector contains the token, return the `notFoundValue`, or throw.
      *
      * @param token the DI token
      * @param notFoundValue the value to return if none of the Injectors contains the token.
      * @returns {any} the DI value
      */
					MergeInjector.prototype.get = function (token, notFoundValue) {
						for (var i = 0; i < this.injectors.length; i++) {
							var val = this.injectors[i].get(token, MergeInjector.NOT_FOUND);
							if (val !== MergeInjector.NOT_FOUND) return val;
						}
						if (arguments.length >= 2) return notFoundValue;
						// This will throw the DI Injector error
						this.injectors[0].get(token);
					};
					MergeInjector.NOT_FOUND = {};
					return MergeInjector;
				}();
				exports.MergeInjector = MergeInjector;

				/***/
			},
			/* 64 */
			/***/function (module, exports) {

				module.exports = __WEBPACK_EXTERNAL_MODULE_64__;

				/***/
			},
			/* 65 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
					var c = arguments.length,
					    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
					    d;
					if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
					return c > 3 && r && Object.defineProperty(target, key, r), r;
				};
				var __metadata = this && this.__metadata || function (k, v) {
					if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
				};
				var __param = this && this.__param || function (paramIndex, decorator) {
					return function (target, key) {
						decorator(target, key, paramIndex);
					};
				};
				/** @module ng2_directives */ /** */
				var core_1 = __webpack_require__(55);
				var uiSrefStatus_1 = __webpack_require__(66);
				/**
     * A directive that adds a CSS class when a `uiSref` is active.
     *
     * ### Purpose
     *
     * This directive should be paired with a [[UISref]], and is used to apply a CSS class to the element when
     * the state that the `uiSref` targets is active.
     *
     * ### Selectors
     *
     * - `[uiSrefActive]`: When this selector is used, the class is added when the target state or any
     * child of the target state is active
     * - `[uiSrefActiveEq]`: When this selector is used, the class is added when the target state is directly active
     *
     * ### Inputs
     *
     * - `uiSrefActive`/`uiSrefActiveEq`: one or more CSS classes to add to the element, when active
     *
     * @example
     * ```html
     *
     * <a uiSref="foo" uiSrefActive="active">Foo</a>
     * <a uiSref="foo.bar" [uiParams]="{ id: bar.id }" uiSrefActive="active">Foo Bar #{{bar.id}}</a>
     * ```
     */
				var UISrefActive = function () {
					function UISrefActive(uiSrefStatus, rnd, host) {
						var _this = this;
						this._classes = [];
						this._classesEq = [];
						this._subscription = uiSrefStatus.uiSrefStatus.subscribe(function (next) {
							_this._classes.forEach(function (cls) {
								return rnd.setElementClass(host.nativeElement, cls, next.active);
							});
							_this._classesEq.forEach(function (cls) {
								return rnd.setElementClass(host.nativeElement, cls, next.exact);
							});
						});
					}
					Object.defineProperty(UISrefActive.prototype, "active", {
						set: function (val) {
							this._classes = val.split("\s+");
						},
						enumerable: true,
						configurable: true
					});
					;
					Object.defineProperty(UISrefActive.prototype, "activeEq", {
						set: function (val) {
							this._classesEq = val.split("\s+");
						},
						enumerable: true,
						configurable: true
					});
					;
					UISrefActive.prototype.ngOnDestroy = function () {
						this._subscription.unsubscribe();
					};
					__decorate([core_1.Input('uiSrefActive'), __metadata('design:type', String), __metadata('design:paramtypes', [String])], UISrefActive.prototype, "active", null);
					__decorate([core_1.Input('uiSrefActiveEq'), __metadata('design:type', String), __metadata('design:paramtypes', [String])], UISrefActive.prototype, "activeEq", null);
					UISrefActive = __decorate([core_1.Directive({
						selector: '[uiSrefActive],[uiSrefActiveEq]'
					}), __param(2, core_1.Host()), __metadata('design:paramtypes', [uiSrefStatus_1.UISrefStatus, core_1.Renderer, core_1.ElementRef])], UISrefActive);
					return UISrefActive;
				}();
				exports.UISrefActive = UISrefActive;

				/***/
			},
			/* 66 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
					var c = arguments.length,
					    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
					    d;
					if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
					return c > 3 && r && Object.defineProperty(target, key, r), r;
				};
				var __metadata = this && this.__metadata || function (k, v) {
					if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
				};
				var __param = this && this.__param || function (paramIndex, decorator) {
					return function (target, key) {
						decorator(target, key, paramIndex);
					};
				};
				/** @module ng2_directives */ /** */
				var core_1 = __webpack_require__(55);
				var uiSref_1 = __webpack_require__(59);
				var common_1 = __webpack_require__(3);
				var globals_1 = __webpack_require__(44);
				var param_1 = __webpack_require__(22);
				var pathFactory_1 = __webpack_require__(20);
				var Rx_1 = __webpack_require__(64);
				var inactiveStatus = {
					active: false,
					exact: false,
					entering: false,
					exiting: false
				};
				/**
     * Returns a Predicate<PathNode[]>
     *
     * The predicate returns true when the target state (and param values)
     * match the (tail of) the path, and the path's param values
     */
				var pathMatches = function (target) {
					if (!target.exists()) return function () {
						return false;
					};
					var state = target.$state();
					var targetParamVals = target.params();
					var targetPath = pathFactory_1.PathFactory.buildPath(target);
					var paramSchema = targetPath.map(function (node) {
						return node.paramSchema;
					}).reduce(common_1.unnestR, []).filter(function (param) {
						return targetParamVals.hasOwnProperty(param.id);
					});
					return function (path) {
						var tailNode = common_1.tail(path);
						if (!tailNode || tailNode.state !== state) return false;
						var paramValues = pathFactory_1.PathFactory.paramValues(path);
						return param_1.Param.equals(paramSchema, paramValues, targetParamVals);
					};
				};
				/**
     * Given basePath: [a, b], appendPath: [c, d]),
     * Expands the path to [c], [c, d]
     * Then appends each to [a,b,] and returns: [a, b, c], [a, b, c, d]
     */
				function spreadToSubPaths(basePath, appendPath) {
					return appendPath.map(function (node) {
						return basePath.concat(pathFactory_1.PathFactory.subPath(appendPath, function (n) {
							return n.state === node.state;
						}));
					});
				}
				/**
     * Given a TransEvt (Transition event: started, success, error)
     * and a UISref Target State, return a SrefStatus object
     * which represents the current status of that Sref:
     * active, activeEq (exact match), entering, exiting
     */
				function getSrefStatus(event, srefTarget) {
					var pathMatchesTarget = pathMatches(srefTarget);
					var tc = event.trans.treeChanges();
					var isStartEvent = event.evt === 'start';
					var isSuccessEvent = event.evt === 'success';
					var activePath = isSuccessEvent ? tc.to : tc.from;
					var isActive = function () {
						return spreadToSubPaths([], activePath).map(pathMatchesTarget).reduce(common_1.anyTrueR, false);
					};
					var isExact = function () {
						return pathMatchesTarget(activePath);
					};
					var isEntering = function () {
						return spreadToSubPaths(tc.retained, tc.entering).map(pathMatchesTarget).reduce(common_1.anyTrueR, false);
					};
					var isExiting = function () {
						return spreadToSubPaths(tc.retained, tc.exiting).map(pathMatchesTarget).reduce(common_1.anyTrueR, false);
					};
					return {
						active: isActive(),
						exact: isExact(),
						entering: isStartEvent ? isEntering() : false,
						exiting: isStartEvent ? isExiting() : false
					};
				}
				/**
     * A directive (which pairs with a [[UISref]]) and emits events when the UISref status changes.
     *
     * This directive is used by the [[UISrefActive]] directive.
     *
     * The event emitted is of type [[SrefStatus]], and has boolean values for `active`, `exact`, `entering`, and `exiting`
     *
     * The values from this event can be captured and stored on a component, then applied (perhaps using ngClass).
     *
     * This API is subject to change.
     */
				var UISrefStatus = function () {
					function UISrefStatus(_globals) {
						this._globals = _globals;
						/** current statuses of the state/params the uiSref directive is linking to */
						this.uiSrefStatus = new core_1.EventEmitter(false);
						this.status = Object.assign({}, inactiveStatus);
					}
					UISrefStatus.prototype.ngAfterContentInit = function () {
						// Map each transition start event to a stream of:
						// start -> (success|error)
						var transEvents$ = this._globals.start$.switchMap(function (trans) {
							var event = function (evt) {
								return { evt: evt, trans: trans };
							};
							var transStart$ = Rx_1.Observable.of(event("start"));
							var transResult = trans.promise.then(function () {
								return event("success");
							}, function () {
								return event("error");
							});
							var transFinish$ = Rx_1.Observable.fromPromise(transResult);
							return transStart$.concat(transFinish$);
						});
						// Watch the children UISref components and get their target states
						var srefs$ = Rx_1.Observable.of(this.srefs.toArray()).concat(this.srefs.changes);
						var targetStates$ = srefs$.switchMap(function (srefs) {
							return Rx_1.Observable.combineLatest(srefs.map(function (sref) {
								return sref.targetState$;
							}));
						});
						// Calculate the status of each UISref based on the transition event.
						// Reduce the statuses (if multiple) by or-ing each flag.
						this._subscription = transEvents$.mergeMap(function (evt) {
							return targetStates$.map(function (targets) {
								var statuses = targets.map(function (target) {
									return getSrefStatus(evt, target);
								});
								return statuses.reduce(function (acc, val) {
									return {
										active: acc.active || val.active,
										exact: acc.active || val.active,
										entering: acc.active || val.active,
										exiting: acc.active || val.active
									};
								});
							});
						}).subscribe(this._setStatus.bind(this));
					};
					UISrefStatus.prototype.ngOnDestroy = function () {
						if (this._subscription) this._subscription.unsubscribe();
					};
					UISrefStatus.prototype._setStatus = function (status) {
						this.status = status;
						this.uiSrefStatus.emit(status);
					};
					__decorate([core_1.Output("uiSrefStatus"), __metadata('design:type', Object)], UISrefStatus.prototype, "uiSrefStatus", void 0);
					__decorate([core_1.ContentChildren(uiSref_1.UISref, { descendants: true }), __metadata('design:type', core_1.QueryList)], UISrefStatus.prototype, "srefs", void 0);
					UISrefStatus = __decorate([core_1.Directive({ selector: '[uiSrefStatus],[uiSrefActive],[uiSrefActiveEq]' }), __param(0, core_1.Inject(globals_1.Globals)), __metadata('design:paramtypes', [Object])], UISrefStatus);
					return UISrefStatus;
				}();
				exports.UISrefStatus = UISrefStatus;

				/***/
			},
			/* 67 */
			/***/function (module, exports) {

				module.exports = __WEBPACK_EXTERNAL_MODULE_67__;

				/***/
			},
			/* 68 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/**
     * # UI-Router for Angular 2
     *
     * - [ui-router-ng2 home page](https://ui-router.github.io/ng2)
     * - [tutorials](https://ui-router.github.io/tutorial/ng2/helloworld)
     * - [quick start repository](http://github.com/ui-router/quickstart-ng2)
     *
     * Getting started:
     *
     * - Use npm. Add a dependency on latest `ui-router-ng2`
     * - Import UI-Router classes directly from `"ui-router-ng2"`
     *
     * ```js
     * import {StateRegistry} from "ui-router-ng2";
     * ```
     *
     * - Create application states (as defined by [[Ng2StateDeclaration]]).
     *
     * ```js
     * export let state1: Ng2StateDeclaration = {
     *   name: 'state1',
     *   component: State1Component,
     *   url: '/one'
     * }
     *
     * export let state2: Ng2StateDeclaration = {
     *   name: 'state2',
     *   component: State2Component,
     *   url: '/two'
     * }
     * ```
     *
     * - Import a [[UIRouterModule.forChild]] module into your feature `NgModule`s.
     *
     * ```js
     * @ NgModule({
     *   imports: [
     *     SharedModule,
     *     UIRouterModule.forChild({ states: [state1, state2 ] })
     *   ],
     *   declarations: [
     *     State1Component,
     *     State2Component,
     *   ]
     * })
     * export class MyFeatureModule {}
     * ```
     *
     * - Import a [[UIRouterModule.forRoot]] module into your application root `NgModule`
     * - Either bootstrap a [[UIView]] component, or add a `<ui-view></ui-view>` viewport to your root component.
     *
     * ```js
     * @ NgModule({
     *   imports: [
     *     BrowserModule,
     *     UIRouterModule.forRoot({ states: [ homeState ] }),
     *     MyFeatureModule,
     *   ],
     *   declarations: [
     *     HomeComponent
     *   ]
     *   bootstrap: [ UIView ]
     * })
     * class RootAppModule {}
     *
     * browserPlatformDynamic.bootstrapModule(RootAppModule);
     * ```
     *
     * - Optionally specify a configuration class [[ChildModule.configClass]] for any module
     * to perform any router configuration during bootstrap or lazyload.
     * Pass the class to [[UIRouterModule.forRoot]] or [[UIRouterModule.forChild]].
     *
     * ```js
     * import {UIRouter} from "ui-router-ng2";
     *
     * @ Injectable()
     * export class MyUIRouterConfig {
     *   // Constructor is injectable
     *   constructor(uiRouter: UIRouter) {
     *     uiRouter.urlMatcherFactory.type('datetime', myDateTimeParamType);
     *   }
     * }
     * ```
     *
     * @preferred @module ng2
     */ /** */

				var core_1 = __webpack_require__(55);
				var router_1 = __webpack_require__(25);
				var stateRegistry_1 = __webpack_require__(38);
				var stateService_1 = __webpack_require__(43);
				var transitionService_1 = __webpack_require__(30);
				var urlMatcherFactory_1 = __webpack_require__(26);
				var urlRouter_1 = __webpack_require__(29);
				var view_1 = __webpack_require__(37);
				var uiView_1 = __webpack_require__(60);
				var views_1 = __webpack_require__(62);
				var uiRouterConfig_1 = __webpack_require__(69);
				var globals_1 = __webpack_require__(44);
				var location_1 = __webpack_require__(70);
				var coreservices_1 = __webpack_require__(6);
				var resolvable_1 = __webpack_require__(19);
				var uiRouterNgModule_1 = __webpack_require__(57);
				var rx_1 = __webpack_require__(71);
				var resolveContext_1 = __webpack_require__(17);
				/**
     * This is a factory function for a UIRouter instance
     *
     * Creates a UIRouter instance and configures it for Angular 2, then invokes router bootstrap.
     * This function is used as an Angular 2 `useFactory` Provider.
     */
				var uiRouterFactory = function (location, injector) {
					var rootModules = injector.get(uiRouterNgModule_1.UIROUTER_ROOT_MODULE);
					var modules = injector.get(uiRouterNgModule_1.UIROUTER_MODULE_TOKEN);
					if (rootModules.length !== 1) {
						throw new Error("Exactly one UIRouterModule.forRoot() should be in the bootstrapped app module's imports: []");
					}
					// ----------------- Monkey Patches ----------------
					// Monkey patch the services.$injector to the ng2 Injector
					coreservices_1.services.$injector.get = injector.get.bind(injector);
					// Monkey patch the services.$location with ng2 Location implementation
					location.init();
					// ----------------- Create router -----------------
					// Create a new ng2 UIRouter and configure it for ng2
					var router = new router_1.UIRouter();
					new rx_1.UIRouterRx(router);
					var registry = router.stateRegistry;
					// ----------------- Configure for ng2 -------------
					// Apply ng2 ui-view handling code
					router.viewService.viewConfigFactory("ng2", function (path, config) {
						return new views_1.Ng2ViewConfig(path, config);
					});
					registry.decorator('views', views_1.ng2ViewsBuilder);
					// Apply statebuilder decorator for ng2 NgModule registration
					registry.stateQueue.flush(router.stateService);
					// Prep the tree of NgModule by placing the root NgModule's Injector on the root state.
					var ng2InjectorResolvable = resolvable_1.Resolvable.fromData(resolveContext_1.NATIVE_INJECTOR_TOKEN, injector);
					registry.root().resolvables.push(ng2InjectorResolvable);
					// ----------------- Initialize router -------------
					// Allow states to be registered
					registry.stateQueue.autoFlush(router.stateService);
					setTimeout(function () {
						rootModules.forEach(function (moduleConfig) {
							return uiRouterConfig_1.applyRootModuleConfig(router, injector, moduleConfig);
						});
						modules.forEach(function (moduleConfig) {
							return uiRouterConfig_1.applyModuleConfig(router, injector, moduleConfig);
						});
						// Start monitoring the URL
						if (!router.urlRouterProvider.interceptDeferred) {
							router.urlRouter.listen();
							router.urlRouter.sync();
						}
					});
					return router;
				};
				exports._UIROUTER_INSTANCE_PROVIDERS = [{ provide: router_1.UIRouter, useFactory: uiRouterFactory, deps: [location_1.UIRouterLocation, core_1.Injector] }, { provide: location_1.UIRouterLocation, useClass: location_1.UIRouterLocation }, { provide: uiView_1.UIView.PARENT_INJECT, useFactory: function (r) {
						return { fqn: null, context: r.root() };
					}, deps: [stateRegistry_1.StateRegistry] }];
				exports._UIROUTER_SERVICE_PROVIDERS = [{ provide: stateService_1.StateService, useFactory: function (r) {
						return r.stateService;
					}, deps: [router_1.UIRouter] }, { provide: transitionService_1.TransitionService, useFactory: function (r) {
						return r.transitionService;
					}, deps: [router_1.UIRouter] }, { provide: urlMatcherFactory_1.UrlMatcherFactory, useFactory: function (r) {
						return r.urlMatcherFactory;
					}, deps: [router_1.UIRouter] }, { provide: urlRouter_1.UrlRouter, useFactory: function (r) {
						return r.urlRouter;
					}, deps: [router_1.UIRouter] }, { provide: view_1.ViewService, useFactory: function (r) {
						return r.viewService;
					}, deps: [router_1.UIRouter] }, { provide: stateRegistry_1.StateRegistry, useFactory: function (r) {
						return r.stateRegistry;
					}, deps: [router_1.UIRouter] }, { provide: globals_1.Globals, useFactory: function (r) {
						return r.globals;
					}, deps: [router_1.UIRouter] }];
				/**
     * The UI-Router providers, for use in your application bootstrap
     *
     * @deprecated use [[UIRouterModule.forRoot]]
     */
				exports.UIROUTER_PROVIDERS = exports._UIROUTER_INSTANCE_PROVIDERS.concat(exports._UIROUTER_SERVICE_PROVIDERS);

				/***/
			},
			/* 69 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				var predicates_1 = __webpack_require__(4);
				function applyModuleConfig(uiRouter, injector, options) {
					if (options.configClass) {
						injector.get(options.configClass);
					}
					var states = options.states || [];
					states.forEach(function (state) {
						return uiRouter.stateRegistry.register(state);
					});
				}
				exports.applyModuleConfig = applyModuleConfig;
				function applyRootModuleConfig(uiRouter, injector, config) {
					if (predicates_1.isDefined(config.deferIntercept)) {
						uiRouter.urlRouterProvider.deferIntercept(config.deferIntercept);
					}
					if (predicates_1.isDefined(config.otherwise)) {
						if (predicates_1.isDefined(config.otherwise['state'])) {
							uiRouter.urlRouterProvider.otherwise(function () {
								var _a = config.otherwise,
								    state = _a.state,
								    params = _a.params;
								uiRouter.stateService.go(state, params, { source: "otherwise" });
								return null;
							});
						} else {
							uiRouter.urlRouterProvider.otherwise(config.otherwise);
						}
					}
				}
				exports.applyRootModuleConfig = applyRootModuleConfig;

				/***/
			},
			/* 70 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
					var c = arguments.length,
					    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
					    d;
					if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
					return c > 3 && r && Object.defineProperty(target, key, r), r;
				};
				var __metadata = this && this.__metadata || function (k, v) {
					if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
				};
				/** @module ng2 */ /** */
				var common_1 = __webpack_require__(67);
				var core_1 = __webpack_require__(55);
				var coreservices_1 = __webpack_require__(6);
				var predicates_1 = __webpack_require__(4);
				var common_2 = __webpack_require__(3);
				var strings_1 = __webpack_require__(9);
				var splitOnHash = strings_1.beforeAfterSubstr("#");
				var splitOnEquals = strings_1.beforeAfterSubstr("=");
				var splitOnQuestionMark = strings_1.beforeAfterSubstr("?");
				var UIRouterLocation = function () {
					function UIRouterLocation(locationStrategy, platformLocation) {
						this.locationStrategy = locationStrategy;
						this.platformLocation = platformLocation;
						this.hashPrefix = "";
						this.isHashBang = locationStrategy instanceof common_1.HashLocationStrategy;
					}
					UIRouterLocation.prototype.init = function () {
						var _this = this;
						var loc = coreservices_1.services.location;
						var locSt = this.locationStrategy;
						if (this.isHashBang) {
							loc.path = function () {
								return splitOnHash(splitOnQuestionMark(locSt.path())[0])[0];
							};
							loc.hash = function () {
								return splitOnHash(splitOnHash(_this.platformLocation.hash)[1])[1];
							};
						} else {
							var basepath = locSt.getBaseHref();
							var basepathRegExp_1 = new RegExp("^" + basepath);
							var replace_1 = basepath[basepath.length - 1] === '/' ? "/" : "";
							loc.path = function () {
								return splitOnHash(splitOnQuestionMark(locSt.path())[0])[0].replace(basepathRegExp_1, replace_1);
							};
							loc.hash = function () {
								return splitOnHash(_this.platformLocation.hash)[1];
							};
						}
						loc.search = function () {
							var queryString = splitOnHash(splitOnQuestionMark(locSt.path())[1])[0];
							return queryString.split("&").map(function (kv) {
								return splitOnEquals(kv);
							}).reduce(common_2.applyPairs, {});
						};
						loc.setUrl = function (url, replace) {
							if (replace === void 0) {
								replace = false;
							}
							if (predicates_1.isDefined(url)) {
								var split = splitOnQuestionMark(url);
								if (replace) {
									locSt.replaceState(null, null, split[0], split[1]);
								} else {
									locSt.pushState(null, null, split[0], split[1]);
								}
							}
						};
						loc.onChange = function (cb) {
							return locSt.onPopState(cb);
						};
						var locCfg = coreservices_1.services.locationConfig;
						locCfg.port = function () {
							return null;
						};
						locCfg.protocol = function () {
							return null;
						};
						locCfg.host = function () {
							return null;
						};
						locCfg.baseHref = function () {
							return locSt.getBaseHref();
						};
						locCfg.html5Mode = function () {
							return !_this.isHashBang;
						};
						locCfg.hashPrefix = function (newprefix) {
							if (predicates_1.isDefined(newprefix)) {
								_this.hashPrefix = newprefix;
							}
							return _this.hashPrefix;
						};
					};
					UIRouterLocation = __decorate([core_1.Injectable(), __metadata('design:paramtypes', [common_1.LocationStrategy, common_1.PlatformLocation])], UIRouterLocation);
					return UIRouterLocation;
				}();
				exports.UIRouterLocation = UIRouterLocation;

				/***/
			},
			/* 71 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";
				/** @module ng2 */ /** */

				var Rx_1 = __webpack_require__(64);
				/** Augments UIRouterGlobals with observables for transition starts, successful transitions, and state parameters */
				var UIRouterRx = function () {
					function UIRouterRx(router) {
						this.deregisterFns = [];
						var start$ = new Rx_1.ReplaySubject(1);
						var success$ = start$.mergeMap(function (t) {
							return t.promise.then(function () {
								return t;
							});
						});
						var params$ = success$.map(function (transition) {
							return transition.params();
						});
						var states$ = new Rx_1.ReplaySubject(1);
						function onStatesChangedEvent(event, states) {
							var changeEvent = {
								currentStates: router.stateRegistry.get(),
								registered: [],
								deregistered: []
							};
							if (event) changeEvent[event] = states;
							states$.next(changeEvent);
						}
						this.deregisterFns.push(router.transitionService.onStart({}, function (transition) {
							return start$.next(transition);
						}));
						this.deregisterFns.push(router.stateRegistry.onStatesChanged(onStatesChangedEvent));
						onStatesChangedEvent(null, null);
						Object.assign(router.globals, { start$: start$, success$: success$, params$: params$, states$: states$ });
					}
					UIRouterRx.prototype.dispose = function () {
						this.deregisterFns.forEach(function (deregisterFn) {
							return deregisterFn();
						});
						this.deregisterFns = [];
					};
					return UIRouterRx;
				}();
				exports.UIRouterRx = UIRouterRx;

				/***/
			}
			/******/])
		);
	});
	;
	

	return module.exports;
});
$__System.registerDynamic("app/app.states.js", ["app/app.component.js", "app/shared/app.component.js", "app/01/app.component.js", "app/02/app.component.js", "app/03/app.component.js", "app/04/app.component.js", "app/05/app.component.js", "app/06/app.component.js", "app/07/app.component.js", "app/08/app.component.js", "app/09/app.component.js", "app/10/app.component.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var app_component_1 = $__require("app/app.component.js");
    var app_component_2 = $__require("app/shared/app.component.js");
    var app_component_3 = $__require("app/01/app.component.js");
    var app_component_4 = $__require("app/02/app.component.js");
    var app_component_5 = $__require("app/03/app.component.js");
    var app_component_6 = $__require("app/04/app.component.js");
    var app_component_7 = $__require("app/05/app.component.js");
    var app_component_8 = $__require("app/06/app.component.js");
    var app_component_9 = $__require("app/07/app.component.js");
    var app_component_10 = $__require("app/08/app.component.js");
    var app_component_11 = $__require("app/09/app.component.js");
    var app_component_12 = $__require("app/10/app.component.js");
    var MAIN_STATES = [{
        name: 'app',
        component: app_component_1.AppComponent,
        abstract: true
    }];
    var APP_STATES = [{
        name: 'app.Default',
        url: '',
        views: {
            $default: { component: app_component_3.GettingStartedwithAngular2 },
            sidebar: { component: app_component_2.Sidebar }
        }
    }, {
        name: 'app.GettingStartedwithAngular2',
        url: '/GettingStartedwithAngular2',
        views: {
            $default: { component: app_component_3.GettingStartedwithAngular2 },
            sidebar: { component: app_component_2.Sidebar }
        }
    }, {
        name: 'app.Angular2Jumpstart',
        url: '/Angular2Jumpstart',
        views: {
            $default: { component: app_component_4.Angular2Jumpstart },
            sidebar: { component: app_component_2.Sidebar }
        }
    }, {
        name: 'app.DisplayingDataandHandlingFunctions',
        url: '/DisplayingDataandHandlingFunctions',
        views: {
            $default: { component: app_component_5.DisplayingDataandHandlingFunctions },
            sidebar: { component: app_component_2.Sidebar }
        }
    }, {
        name: 'app.BuildingReusableComponents',
        url: '/BuildingReusableComponents',
        views: {
            $default: { component: app_component_6.BuildingReusableComponents },
            sidebar: { component: app_component_2.Sidebar }
        }
    }, {
        name: 'app.ControllingRenderingofHTML',
        url: '/ControllingRenderingofHTML',
        views: {
            $default: { component: app_component_7.ControllingRenderingofHTML },
            sidebar: { component: app_component_2.Sidebar }
        }
    }, {
        name: 'app.BuildingFormswithBasicValidation',
        url: '/BuildingFormswithBasicValidation',
        views: {
            $default: { component: app_component_8.BuildingFormswithBasicValidation },
            sidebar: { component: app_component_2.Sidebar }
        }
    }, {
        name: 'app.BuildingFormswithComplexValidation',
        url: '/BuildingFormswithComplexValidation',
        views: {
            $default: { component: app_component_9.BuildingFormswithComplexValidation },
            sidebar: { component: app_component_2.Sidebar }
        }
    }, {
        name: 'app.IntroductiontoReactiveExtensions',
        url: '/IntroductiontoReactiveExtensions',
        views: {
            $default: { component: app_component_10.IntroductiontoReactiveExtensions },
            sidebar: { component: app_component_2.Sidebar }
        }
    }, {
        name: 'app.ConnectingtotheServer',
        url: '/ConnectingtotheServer',
        views: {
            $default: { component: app_component_11.ConnectingtotheServer },
            sidebar: { component: app_component_2.Sidebar }
        }
    }, {
        name: 'app.BuildingSinglePageApps',
        url: '/BuildingSinglePageApps',
        views: {
            $default: { component: app_component_12.BuildingSinglePageApps },
            sidebar: { component: app_component_2.Sidebar }
        }
    }];
    // Combine MAIN_STATES, FOO_STATES, and BAR_STATES and export them.
    // This array is imported in bootstrap/router.config.ts, then each state is registered
    exports.INITIAL_STATES = MAIN_STATES.concat(APP_STATES);
    

    return module.exports;
});
$__System.registerDynamic("app/app.component.js", ["node_modules/@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var AppComponent = function () {
        function AppComponent() {}
        return AppComponent;
    }();
    AppComponent = __decorate([core_1.Component({
        selector: 'my-app',
        moduleId: module.id,
        templateUrl: 'app.html',
        styleUrls: ['app.css']
    }), __metadata("design:paramtypes", [])], AppComponent);
    exports.AppComponent = AppComponent;
    

    return module.exports;
});
$__System.registerDynamic("app/shared/app.component.js", ["node_modules/@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var Sidebar = function () {
        function Sidebar() {}
        return Sidebar;
    }();
    Sidebar = __decorate([core_1.Component({
        selector: 'sidebar',
        moduleId: module.id,
        templateUrl: 'app.html',
        styleUrls: ['app.css']
    }), __metadata("design:paramtypes", [])], Sidebar);
    exports.Sidebar = Sidebar;
    

    return module.exports;
});
$__System.registerDynamic("app/01/app.component.js", ["node_modules/@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var GettingStartedwithAngular2 = function () {
        function GettingStartedwithAngular2() {}
        return GettingStartedwithAngular2;
    }();
    GettingStartedwithAngular2 = __decorate([core_1.Component({
        selector: 'component',
        moduleId: module.id,
        templateUrl: 'app.html',
        styleUrls: ['app.css']
    }), __metadata("design:paramtypes", [])], GettingStartedwithAngular2);
    exports.GettingStartedwithAngular2 = GettingStartedwithAngular2;
    

    return module.exports;
});
$__System.registerDynamic("app/01/app.module.js", ["node_modules/@angular/core/bundles/core.umd.js", "node_modules/@angular/platform-browser/bundles/platform-browser.umd.js", "app/01/app.component.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var platform_browser_1 = $__require("node_modules/@angular/platform-browser/bundles/platform-browser.umd.js");
    var app_component_1 = $__require("app/01/app.component.js");
    var AppModule01 = function () {
        function AppModule01() {}
        return AppModule01;
    }();
    AppModule01 = __decorate([core_1.NgModule({
        imports: [platform_browser_1.BrowserModule],
        declarations: [app_component_1.GettingStartedwithAngular2],
        bootstrap: [app_component_1.GettingStartedwithAngular2]
    }), __metadata("design:paramtypes", [])], AppModule01);
    exports.AppModule01 = AppModule01;
    

    return module.exports;
});
$__System.registerDynamic("app/02/app.service.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var AppService = function () {
        function AppService() {}
        AppService.prototype.getNotes = function () {
            return [{
                title: "Modules",
                description: "Angular Modules help organize an application into cohesive blocks of functionality.",
                note: "app.module.ts\n\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  imports:      [ BrowserModule ],\n  declarations: [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n\nmain.ts\n\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app.module';\nplatformBrowserDynamic().bootstrapModule(AppModule);"
            }, {
                title: "Components",
                description: "A component is the combination of an HTML template and a component class that controls a portion of the screen.",
                note: "app.component.ts\n\nimport {Component} from 'angular2/core'\n@Component({\n\tselector:'appcomponent',\n\ttemplate:'<div></div>'\n})\nexport class AppComponent{}\n\npage.component.ts\n\nimport {AppComponent} from './app.component'\n@Component({\n\ttemplate:'<appcomponent></appcomponent>',\n\tdirectives:[AppComponent]\n})"
            }, {
                title: "Directives",
                description: "",
                note: "autogrow.directive.ts\n\nimport {Directive} from 'angular2/core'\n@Directive({\n\t//note that the square brackets make selector into an attribute selector, not an element selector\n\tselector:'[autoGrow]',\n\thost:{'(focus)':'onFocus()'}\n})\nexport class AutoGrowDirective{\n\tconstructor(private _el:ElementRef, private _renderer:Renderer){}\n\tonFocus(){\n\t\tthis._renderer.setElementStyle(this._el.nativeElement, 'width', '200');\n\t}\n}\n\napp.component.ts\n\nimport {AutoGrowDirective} from './autogrow.directive'\n@Component({\n\ttemplate:'<input type=\"text\" autoGrow/>',\n\tdirectives:[AutoGrowDirective]\n})"
            }, {
                title: "Services",
                description: "",
                note: "app.service.ts\n                \nexport class AppService{\n\tgetItems(){\n\t\treturn [\"a\",\"b\",\"c\"];}\n}\n\napp.component.ts\n\nimport {ItemsService} from './app.service'\n@Component({\n    template:'<li *ngFor=\"let item of items\"></li>',\n\tproviders:[AppService]\n})\nexport class AppComponent{\n\titems;\n\tconstructor(itemsService: AppService){\n\t\tthis.items = itemsService.getItems();\n\t}\n}"
            }];
        };
        return AppService;
    }();
    exports.AppService = AppService;
    

    return module.exports;
});
$__System.registerDynamic("app/02/app.component.js", ["node_modules/@angular/core/bundles/core.umd.js", "app/02/app.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var app_service_1 = $__require("app/02/app.service.js");
    var Angular2Jumpstart = function () {
        function Angular2Jumpstart(noteService) {
            this.items = [];
            this.items = noteService.getNotes();
        }
        return Angular2Jumpstart;
    }();
    Angular2Jumpstart = __decorate([core_1.Component({
        selector: 'component',
        moduleId: module.id,
        templateUrl: 'app.html',
        styleUrls: ['app.css'],
        providers: [app_service_1.AppService]
    }), __metadata("design:paramtypes", [app_service_1.AppService])], Angular2Jumpstart);
    exports.Angular2Jumpstart = Angular2Jumpstart;
    

    return module.exports;
});
$__System.registerDynamic("app/02/004Seed/app.component.js", ["node_modules/@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var AppComponent = function () {
        function AppComponent() {}
        return AppComponent;
    }();
    AppComponent = __decorate([core_1.Component({
        selector: 'appcomponent',
        template: "\n    <div class=\"container\">Angular 2 Seed Project</div>\n    "
    }), __metadata("design:paramtypes", [])], AppComponent);
    exports.AppComponent = AppComponent;
    

    return module.exports;
});
$__System.registerDynamic("app/02/012Components/app.component.js", ["node_modules/@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var AppComponent = function () {
        function AppComponent() {}
        return AppComponent;
    }();
    AppComponent = __decorate([core_1.Component({
        selector: 'app-component',
        template: "\n\t\t<h1>My First Angular 2 App</h1>\n\t\t<authors></authors>"
    }), __metadata("design:paramtypes", [])], AppComponent);
    exports.AppComponent = AppComponent;
    

    return module.exports;
});
$__System.registerDynamic("app/02/012Components/author.service.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var AuthorService = function () {
        function AuthorService() {}
        AuthorService.prototype.getAuthors = function () {
            return ["Author1", "Author2", "Author3"];
        };
        return AuthorService;
    }();
    exports.AuthorService = AuthorService;
    

    return module.exports;
});
$__System.registerDynamic("app/02/012Components/authors.component.js", ["node_modules/@angular/core/bundles/core.umd.js", "app/02/012Components/author.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var author_service_1 = $__require("app/02/012Components/author.service.js");
    var AuthorsComponent = function () {
        function AuthorsComponent(authorService) {
            this.title = "Title for the authors page";
            this.authors = authorService.getAuthors();
        }
        return AuthorsComponent;
    }();
    AuthorsComponent = __decorate([core_1.Component({
        selector: 'authors',
        template: "\n\t\t<h2>Authors</h2>\n\t\t{{ title }}\n\t\t<ul>\n\t\t\t<li *ngFor=\"let author of authors\">\n\t\t\t{{ author }}\n\t\t\t</li>\n\t\t</ul>\n\t",
        providers: [author_service_1.AuthorService]
    }), __metadata("design:paramtypes", [author_service_1.AuthorService])], AuthorsComponent);
    exports.AuthorsComponent = AuthorsComponent;
    

    return module.exports;
});
$__System.registerDynamic("app/02/019Directives/app.component.js", ["node_modules/@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var AppComponent = function () {
        function AppComponent() {}
        return AppComponent;
    }();
    AppComponent = __decorate([core_1.Component({
        selector: 'directives',
        template: '<input type="text" autoGrow/>'
    }), __metadata("design:paramtypes", [])], AppComponent);
    exports.AppComponent = AppComponent;
    

    return module.exports;
});
$__System.registerDynamic("app/02/019Directives/app.directive.js", ["node_modules/@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var AutoGrowDirective = function () {
        function AutoGrowDirective(_el, _renderer) {
            this._el = _el;
            this._renderer = _renderer;
        }
        AutoGrowDirective.prototype.onFocus = function () {
            this._renderer.setElementStyle(this._el.nativeElement, 'width', '400');
        };
        AutoGrowDirective.prototype.onBlur = function () {
            this._renderer.setElementStyle(this._el.nativeElement, 'width', '200');
        };
        return AutoGrowDirective;
    }();
    AutoGrowDirective = __decorate([core_1.Directive({
        //note that the square brackets make selector into an attribute selector, not an element selector
        selector: '[autoGrow]',
        host: {
            '(focus)': 'onFocus()',
            '(blur)': 'onBlur()'
        }
    }), __metadata("design:paramtypes", [core_1.ElementRef, core_1.Renderer])], AutoGrowDirective);
    exports.AutoGrowDirective = AutoGrowDirective;
    

    return module.exports;
});
$__System.registerDynamic("app/02/app.module.js", ["node_modules/@angular/core/bundles/core.umd.js", "node_modules/@angular/platform-browser/bundles/platform-browser.umd.js", "app/02/app.component.js", "app/02/004Seed/app.component.js", "app/02/012Components/app.component.js", "app/02/012Components/authors.component.js", "app/02/019Directives/app.component.js", "app/02/019Directives/app.directive.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var platform_browser_1 = $__require("node_modules/@angular/platform-browser/bundles/platform-browser.umd.js");
    var app_component_1 = $__require("app/02/app.component.js");
    var app_component_2 = $__require("app/02/004Seed/app.component.js");
    var app_component_3 = $__require("app/02/012Components/app.component.js");
    var authors_component_1 = $__require("app/02/012Components/authors.component.js");
    //import {AppComponent as Services} from './014Services/app.component';
    //import {AppComponent as DependencyInjection} from './015DependencyInjection/app.component';
    var app_component_4 = $__require("app/02/019Directives/app.component.js");
    var app_directive_1 = $__require("app/02/019Directives/app.directive.js");
    var AppModule02 = function () {
        function AppModule02() {}
        return AppModule02;
    }();
    AppModule02 = __decorate([core_1.NgModule({
        imports: [platform_browser_1.BrowserModule],
        declarations: [app_component_1.Angular2Jumpstart, app_component_3.AppComponent, authors_component_1.AuthorsComponent, app_component_2.AppComponent, app_component_4.AppComponent, app_directive_1.AutoGrowDirective],
        bootstrap: [app_component_1.Angular2Jumpstart]
    }), __metadata("design:paramtypes", [])], AppModule02);
    exports.AppModule02 = AppModule02;
    

    return module.exports;
});
$__System.registerDynamic("app/03/app.service.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var AppService = function () {
        function AppService() {}
        AppService.prototype.getNotes = function () {
            return [{
                title: "Property Binding",
                description: "",
                note: "@Component({<img [src]=\"someVar\"/>})\n<img bind-src=\"someVar\"/>"
            }, {
                title: "Expression Binding",
                description: "slower, possibly leaves binding expression on screen",
                note: "<img src=\"{{ someVar + anotherVar}}\"/>\nexport class AppComponent{someVar = \"www.image.com\";anotherVar = \"/xyz.png\";}"
            }, {
                title: "Class Binding",
                description: "",
                note: "<li [class.someClass]=\"someVar\"/>"
            }, {
                title: "Style Binding",
                description: "",
                note: "<button [style.background]=\"someVar\"/>"
            }, {
                title: "Event Binding",
                description: "",
                note: "<button (click)=\"someFunc($event)\"/>\nexport class AppComponent{someFunc(e){}}"
            }, {
                title: "Two-way Binding",
                description: "",
                note: "//note that ngModel has hardcoded directives for [value] and (input)\n//essentially being <input type=\"text\" [value]=\"someVar\" (input)=\"someVar = $event.target.value\"\n<input type=\"text\" [(ngModel)]=\"someVar\"/>\n<input type=\"text\" bindon-ngModel=\"someVar\"/>"
            }];
        };
        return AppService;
    }();
    exports.AppService = AppService;
    

    return module.exports;
});
$__System.registerDynamic("app/03/app.component.js", ["node_modules/@angular/core/bundles/core.umd.js", "app/03/app.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var app_service_1 = $__require("app/03/app.service.js");
    var DisplayingDataandHandlingFunctions = function () {
        function DisplayingDataandHandlingFunctions(noteService) {
            this.items = [];
            this.items = noteService.getNotes();
        }
        return DisplayingDataandHandlingFunctions;
    }();
    DisplayingDataandHandlingFunctions = __decorate([core_1.Component({
        selector: 'component',
        moduleId: module.id,
        templateUrl: 'app.html',
        styleUrls: ['app.css'],
        providers: [app_service_1.AppService]
    }), __metadata("design:paramtypes", [app_service_1.AppService])], DisplayingDataandHandlingFunctions);
    exports.DisplayingDataandHandlingFunctions = DisplayingDataandHandlingFunctions;
    

    return module.exports;
});
$__System.registerDynamic("app/03/026FavoriteComponent/favorite.component.js", ["node_modules/@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var FavoriteComponent = function () {
        function FavoriteComponent() {
            this.isFavorite = false;
        }
        FavoriteComponent.prototype.onClick = function () {
            this.isFavorite = !this.isFavorite;
        };
        return FavoriteComponent;
    }();
    FavoriteComponent = __decorate([core_1.Component({
        selector: 'favorite',
        template: "\n\t\t<i \n\t\t\tclass = \"glyphicon\"\n\t\t\t[class.glyphicon-star-empty]=\"!isFavorite\"\n\t\t\t[class.glyphicon-star]=\"isFavorite\"\n\t\t\t(click)=\"onClick()\">\n\t\t</i>\n\t"
    }), __metadata("design:paramtypes", [])], FavoriteComponent);
    exports.FavoriteComponent = FavoriteComponent;
    

    return module.exports;
});
$__System.registerDynamic("app/03/app.module.js", ["node_modules/@angular/core/bundles/core.umd.js", "node_modules/@angular/platform-browser/bundles/platform-browser.umd.js", "app/03/app.component.js", "app/03/026FavoriteComponent/favorite.component.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var platform_browser_1 = $__require("node_modules/@angular/platform-browser/bundles/platform-browser.umd.js");
    var app_component_1 = $__require("app/03/app.component.js");
    var favorite_component_1 = $__require("app/03/026FavoriteComponent/favorite.component.js");
    var AppModule03 = function () {
        function AppModule03() {}
        return AppModule03;
    }();
    AppModule03 = __decorate([core_1.NgModule({
        imports: [platform_browser_1.BrowserModule],
        declarations: [app_component_1.DisplayingDataandHandlingFunctions, favorite_component_1.FavoriteComponent],
        bootstrap: [app_component_1.DisplayingDataandHandlingFunctions]
    }), __metadata("design:paramtypes", [])], AppModule03);
    exports.AppModule03 = AppModule03;
    

    return module.exports;
});
$__System.registerDynamic("app/04/app.service.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var AppService = function () {
        function AppService() {}
        AppService.prototype.getNotes = function () {
            return [{
                title: "Input Property",
                description: "some.component.ts",
                note: "import {Input} from 'angular2/core'"
            }, {
                title: "Using Input",
                description: "app.component.ts",
                note: "import {SomeComponent} from 'angular2/core'\n<appcomponent [someAlias]=\"true\"></appcomponent>"
            }];
        };
        return AppService;
    }();
    exports.AppService = AppService;
    

    return module.exports;
});
$__System.registerDynamic("app/04/app.component.js", ["node_modules/@angular/core/bundles/core.umd.js", "app/04/app.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var app_service_1 = $__require("app/04/app.service.js");
    var BuildingReusableComponents = function () {
        function BuildingReusableComponents(noteService) {
            this.items = [];
            this.items = noteService.getNotes();
        }
        return BuildingReusableComponents;
    }();
    BuildingReusableComponents = __decorate([core_1.Component({
        selector: 'component',
        moduleId: module.id,
        templateUrl: 'app.html',
        styleUrls: ['app.css'],
        providers: [app_service_1.AppService]
    }), __metadata("design:paramtypes", [app_service_1.AppService])], BuildingReusableComponents);
    exports.BuildingReusableComponents = BuildingReusableComponents;
    

    return module.exports;
});
$__System.registerDynamic("app/04/036LikeComponent/like.component.js", ["node_modules/@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var LikeComponent = function () {
        function LikeComponent() {
            this.totalLikes = 0;
            this.iLike = false;
        }
        LikeComponent.prototype.onClick = function () {
            this.iLike = !this.iLike;
            this.totalLikes += this.iLike ? 1 : -1;
        };
        return LikeComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", Object)], LikeComponent.prototype, "totalLikes", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Object)], LikeComponent.prototype, "iLike", void 0);
    LikeComponent = __decorate([core_1.Component({
        selector: 'like',
        template: "\n    <i\n       class=\"glyphicon glyphicon-heart\" \n       [class.highlighted]=\"iLike\"\n       (click)=\"onClick()\">\n    </i>\n    <span>{{ totalLikes }}</span>\n    ",
        styles: ["\n        .glyphicon-heart {\n            color: #ccc;\n            cursor: pointer;\n        }\n        \n        .highlighted {\n            color: deeppink;\n        }   \n    "]
    }), __metadata("design:paramtypes", [])], LikeComponent);
    exports.LikeComponent = LikeComponent;
    

    return module.exports;
});
$__System.registerDynamic("app/04/038VoterComponent/voter.component.js", ["node_modules/@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var VoterComponent = function () {
        function VoterComponent() {
            this.voteCount = 0;
            this.myVote = 0;
            this.vote = new core_1.EventEmitter();
        }
        VoterComponent.prototype.upVote = function () {
            if (this.myVote == 1) return;
            this.myVote++;
            this.vote.emit({ myVote: this.myVote });
        };
        VoterComponent.prototype.downVote = function () {
            if (this.myVote == -1) return;
            this.myVote--;
            this.vote.emit({ myVote: this.myVote });
        };
        return VoterComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", Object)], VoterComponent.prototype, "voteCount", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Object)], VoterComponent.prototype, "myVote", void 0);
    __decorate([core_1.Output(), __metadata("design:type", Object)], VoterComponent.prototype, "vote", void 0);
    VoterComponent = __decorate([core_1.Component({
        selector: 'voter',
        template: "\n    <div class=\"voter\">\n        <i \n            class=\"glyphicon glyphicon-menu-up vote-button\"\n            [class.highlighted]=\"myVote == 1\" \n            (click)=\"upVote()\"></i>\n            \n        <span class=\"vote-count\">{{ voteCount + myVote }}</span>\n        \n        <i \n            class=\"glyphicon glyphicon-menu-down vote-button\"\n            [class.highlighted]=\"myVote == -1\" \n            (click)=\"downVote()\"></i>\n    </div>\n    ",
        styles: ["\n        .voter {\n            width: 20px;\n            text-align: center;\n            color: #999;\n        }\n        \n        .vote-count {\n            font-size: 1.2em;\n        }\n        \n        .vote-button {\n            cursor: pointer;\n        }\n        \n        .highlighted {\n            font-weight: bold;\n            color: orange;\n        }\n    "]
    }), __metadata("design:paramtypes", [])], VoterComponent);
    exports.VoterComponent = VoterComponent;
    

    return module.exports;
});
$__System.registerDynamic("app/04/040Twitter/tweet.service.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var TweetService = function () {
        function TweetService() {}
        TweetService.prototype.getTweets = function () {
            return [{
                imageUrl: "http://lorempixel.com/100/100/people?1",
                author: "Windward",
                handle: "@windwardstudios",
                body: "Looking for a better company reporting or docgen app?",
                totalLikes: 0,
                iLike: false
            }, {
                imageUrl: "http://lorempixel.com/100/100/people?2",
                author: "AngularJS News",
                handle: "@angularjs_news",
                body: "Right Relevance : Influencers, Articles and Conversations ",
                totalLikes: 5,
                iLike: true
            }, {
                imageUrl: "http://lorempixel.com/100/100/people?3",
                author: "UX & Bootstrap",
                handle: "@3rdwave",
                body: "10 Reasons Why Web Projects Fail ",
                totalLikes: 1,
                iLike: true
            }];
        };
        return TweetService;
    }();
    exports.TweetService = TweetService;
    

    return module.exports;
});
$__System.registerDynamic("app/04/040Twitter/app.component.js", ["node_modules/@angular/core/bundles/core.umd.js", "app/04/040Twitter/tweet.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var tweet_service_1 = $__require("app/04/040Twitter/tweet.service.js");
    var AppComponent = function () {
        function AppComponent(tweetService) {
            this.tweets = tweetService.getTweets();
        }
        return AppComponent;
    }();
    AppComponent = __decorate([core_1.Component({
        selector: 'twitter',
        template: "\n        <div *ngFor=\"let tweet of tweets\">\n            <tweet [data]=\"tweet\"></tweet>\n        </div>\n    ",
        providers: [tweet_service_1.TweetService]
    }), __metadata("design:paramtypes", [tweet_service_1.TweetService])], AppComponent);
    exports.AppComponent = AppComponent;
    

    return module.exports;
});
$__System.registerDynamic("app/04/040Twitter/like.component.js", ["node_modules/@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var LikeComponent = function () {
        function LikeComponent() {
            this.totalLikes = 0;
            this.iLike = false;
        }
        LikeComponent.prototype.onClick = function () {
            this.iLike = !this.iLike;
            this.totalLikes += this.iLike ? 1 : -1;
        };
        return LikeComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", Object)], LikeComponent.prototype, "totalLikes", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Object)], LikeComponent.prototype, "iLike", void 0);
    LikeComponent = __decorate([core_1.Component({
        selector: 'like',
        template: "\n    <i\n       class=\"glyphicon glyphicon-heart\" \n       [class.highlighted]=\"iLike\"\n       (click)=\"onClick()\">\n    </i>\n    <span>{{ totalLikes }}</span>\n    ",
        styles: ["\n        .glyphicon-heart {\n            color: #ccc;\n            cursor: pointer;\n        }\n        \n        .highlighted {\n            color: deeppink;\n        }   \n    "]
    }), __metadata("design:paramtypes", [])], LikeComponent);
    exports.LikeComponent = LikeComponent;
    

    return module.exports;
});
$__System.registerDynamic("app/04/040Twitter/tweet.component.js", ["node_modules/@angular/core/bundles/core.umd.js", "app/04/040Twitter/like.component.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var like_component_1 = $__require("app/04/040Twitter/like.component.js");
    var TweetComponent = function () {
        function TweetComponent() {
            console.log(this.data);
        }
        return TweetComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", Object)], TweetComponent.prototype, "data", void 0);
    TweetComponent = __decorate([core_1.Component({
        selector: 'tweet',
        template: "\n<div class=\"media\">\n  <div class=\"media-left\">\n    <a href=\"#\">\n      <img class=\"media-object\" src=\"{{ data.imageUrl }}\">\n    </a>\n  </div>\n  <div class=\"media-body\">\n    <h4 class=\"media-heading\">\n        {{ data.author }} <span class=\"handle\">{{ data.handle }}</span>\n    </h4>\n    {{ data.body }}\n    <div>\n        <like [totalLikes]=\"data.totalLikes\" [iLike]=\"data.iLike\"></like>\n    </div>\n  </div>\n</div>    \n    ",
        styles: ["\n        .handle {\n            color: #ccc;\n        }\n        \n        .media {\n            margin-bottom: 20px;\n        }\n        \n        .media-object {\n            border-radius: 10px;\n        }\n    "],
        directives: [like_component_1.LikeComponent]
    }), __metadata("design:paramtypes", [])], TweetComponent);
    exports.TweetComponent = TweetComponent;
    

    return module.exports;
});
$__System.registerDynamic("app/04/app.module.js", ["node_modules/@angular/core/bundles/core.umd.js", "node_modules/@angular/platform-browser/bundles/platform-browser.umd.js", "app/04/app.component.js", "app/04/036LikeComponent/like.component.js", "app/04/038VoterComponent/voter.component.js", "app/04/040Twitter/app.component.js", "app/04/040Twitter/tweet.component.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var platform_browser_1 = $__require("node_modules/@angular/platform-browser/bundles/platform-browser.umd.js");
    var app_component_1 = $__require("app/04/app.component.js");
    var like_component_1 = $__require("app/04/036LikeComponent/like.component.js");
    var voter_component_1 = $__require("app/04/038VoterComponent/voter.component.js");
    var app_component_2 = $__require("app/04/040Twitter/app.component.js");
    var tweet_component_1 = $__require("app/04/040Twitter/tweet.component.js");
    var AppModule04 = function () {
        function AppModule04() {}
        return AppModule04;
    }();
    AppModule04 = __decorate([core_1.NgModule({
        imports: [platform_browser_1.BrowserModule],
        declarations: [app_component_1.BuildingReusableComponents, like_component_1.LikeComponent, voter_component_1.VoterComponent, app_component_2.AppComponent, tweet_component_1.TweetComponent],
        bootstrap: [app_component_1.BuildingReusableComponents]
    }), __metadata("design:paramtypes", [])], AppModule04);
    exports.AppModule04 = AppModule04;
    

    return module.exports;
});
$__System.registerDynamic("app/05/app.service.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var AppService = function () {
        function AppService() {}
        AppService.prototype.getNotes = function () {
            return [{
                title: "ngIf",
                description: "",
                note: "<i class=\"loading\" *ngIf=\"!isActive\"></i>"
            }, {
                title: "ngSwitch",
                description: "",
                note: "<div [ngSwitch]=\"somevar\">\n    <div *ngSwitchWhen=\"'a'\" ngSwitchDefault></div>\n    <div *ngSwitchWhen=\"'b'\"></div>\n</div>"
            }, {
                title: "ngFor",
                description: "",
                note: "<ul><li *ngFor=\"#item of items\"></li>"
            }, {
                title: "Asterisk",
                description: "treat current element as a template",
                note: "<li *ngFor=\"#item of items\"></li>\nexample without asterisk\n<template ngFor=\"#item of items\">\n    <li></li>\n</template>"
            }, {
                title: "Pipes",
                description: "",
                note: "<div>{{someVar | uppercase}}</div>"
            }, {
                title: "Custom Pipes",
                description: "",
                note: "pipe.component.ts\nimport {Pipe, PipeTransform} from 'angular2/core';\n@Pipe({name:'custompipe'})\nexport class SummaryPipe implements PipeTransform{\n    transform(value:string, args: string[]){\n        return \"\";\n    }\n}\napp.component.ts\n\nimport {SummaryPipe} from './app/summarypipe'\n@Component({\n    template:'<div>{{someVar | custompipe}}',\n    pipes:[SummaryPipe]})"
            }, {
                title: "ngClass",
                description: "",
                note: "\t<div\n[ngClass]=\"{\n    'glyphicon-star-empty':!isFavorite,\n    'glyphicon-star':isFavorite\n}></div>"
            }, {
                title: "ngStyle",
                description: "",
                note: "\t<div\n[ngStyle]=\"{\n    'backgroundColor':isFavorite?'red':'blue',\n    'color':isFavorite?'red','blue'\n}></div>"
            }, {
                title: "Elvis Operator",
                description: "null subproperty operator",
                note: "<div>{{task?.assignee?.role?.name}}</div>"
            }, {
                title: "ng-content Element",
                description: "insertion points for external data",
                note: "@Component({\nselector:'appcomponent',\ntemplate:'<div><ng-content></ng-content></div>'})\nexport class AppComponent{}\n--\nimport {AppComponent} from './app/app.component'\n@Component({template:'<appcomponent>Insert This Text</appcomponent>',\ndirectives:[AppComponent]})"
            }];
        };
        return AppService;
    }();
    exports.AppService = AppService;
    

    return module.exports;
});
$__System.registerDynamic("app/05/app.component.js", ["node_modules/@angular/core/bundles/core.umd.js", "app/05/app.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var app_service_1 = $__require("app/05/app.service.js");
    var ControllingRenderingofHTML = function () {
        function ControllingRenderingofHTML(noteService) {
            this.items = [];
            this.items = noteService.getNotes();
        }
        return ControllingRenderingofHTML;
    }();
    ControllingRenderingofHTML = __decorate([core_1.Component({
        selector: 'component',
        moduleId: module.id,
        templateUrl: 'app.html',
        styleUrls: ['app.css'],
        providers: [app_service_1.AppService]
    }), __metadata("design:paramtypes", [app_service_1.AppService])], ControllingRenderingofHTML);
    exports.ControllingRenderingofHTML = ControllingRenderingofHTML;
    

    return module.exports;
});
$__System.registerDynamic("app/05/054ZippyComponent/app.component.js", ["node_modules/@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var AppComponent = function () {
        function AppComponent() {}
        return AppComponent;
    }();
    AppComponent = __decorate([core_1.Component({
        selector: 'my-app',
        template: "\n        <zippy title=\"Who can see my stuff?\">\n            Content of who can see my stuff\n        </zippy>\n        <zippy title=\"Who can contact me?\">\n            Content of who can contact me\n        </zippy>\n    "
    }), __metadata("design:paramtypes", [])], AppComponent);
    exports.AppComponent = AppComponent;
    

    return module.exports;
});
$__System.registerDynamic("app/05/054ZippyComponent/zippy.component.js", ["node_modules/@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var ZippyComponent = function () {
        function ZippyComponent() {
            this.isExpanded = false;
        }
        ZippyComponent.prototype.toggle = function () {
            this.isExpanded = !this.isExpanded;
        };
        return ZippyComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", String)], ZippyComponent.prototype, "title", void 0);
    ZippyComponent = __decorate([core_1.Component({
        selector: 'zippy',
        styles: ["\n        .zippy {\n            border: 1px solid #ccc;\n            border-radius: 2px;\n        }\n        \n        .zippy .zippy-title {\n            padding: 20px;\n            font-weight: bold;\n        }\n        \n        .zippy .zippy-title:hover{\n            background: #f0f0f0;\n            cursor: pointer;\n        }\n        \n        .zippy .zippy-content {\n            padding: 20px;\n        }\n    "],
        template: "\n    <div class=\"zippy\">\n        <div \n            class=\"zippy-title\"\n            (click)=\"toggle()\">\n            {{ title }} \n            <i \n                class=\"pull-right glyphicon\" \n                [ngClass]=\"\n                    { \n                        'glyphicon-chevron-down': !isExpanded, \n                        'glyphicon-chevron-up': isExpanded \n                    }\">\n            </i>\n        </div>\n        <div *ngIf=\"isExpanded\" class=\"zippy-content\">\n            <ng-content></ng-content> \n        </div>\n    </div>    \n    "
    }), __metadata("design:paramtypes", [])], ZippyComponent);
    exports.ZippyComponent = ZippyComponent;
    

    return module.exports;
});
$__System.registerDynamic("app/05/app.module.js", ["node_modules/@angular/core/bundles/core.umd.js", "node_modules/@angular/platform-browser/bundles/platform-browser.umd.js", "app/05/app.component.js", "app/05/054ZippyComponent/app.component.js", "app/05/054ZippyComponent/zippy.component.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var platform_browser_1 = $__require("node_modules/@angular/platform-browser/bundles/platform-browser.umd.js");
    var app_component_1 = $__require("app/05/app.component.js");
    var app_component_2 = $__require("app/05/054ZippyComponent/app.component.js");
    var zippy_component_1 = $__require("app/05/054ZippyComponent/zippy.component.js");
    var AppModule05 = function () {
        function AppModule05() {}
        return AppModule05;
    }();
    AppModule05 = __decorate([core_1.NgModule({
        imports: [platform_browser_1.BrowserModule],
        declarations: [app_component_1.ControllingRenderingofHTML, app_component_2.AppComponent, zippy_component_1.ZippyComponent],
        bootstrap: [app_component_1.ControllingRenderingofHTML]
    }), __metadata("design:paramtypes", [])], AppModule05);
    exports.AppModule05 = AppModule05;
    

    return module.exports;
});
$__System.registerDynamic("app/06/app.service.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var AppService = function () {
        function AppService() {}
        AppService.prototype.getNotes = function () {
            return [{
                title: "Template-driven Form",
                description: "",
                note: ""
            }, {
                title: "Control",
                description: "",
                note: ""
            }, {
                title: "ControlGroup",
                description: "",
                note: ""
            }, {
                title: "ngModel",
                description: "",
                note: ""
            }, {
                title: "Validation Errors",
                description: "",
                note: ""
            }, {
                title: "ngModel",
                description: "",
                note: ""
            }, {
                title: "Disabling Submit Button",
                description: "",
                note: ""
            }];
        };
        return AppService;
    }();
    exports.AppService = AppService;
    

    return module.exports;
});
$__System.registerDynamic("app/06/app.component.js", ["node_modules/@angular/core/bundles/core.umd.js", "app/06/app.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var app_service_1 = $__require("app/06/app.service.js");
    var BuildingFormswithBasicValidation = function () {
        function BuildingFormswithBasicValidation(noteService) {
            this.items = [];
            this.items = noteService.getNotes();
        }
        return BuildingFormswithBasicValidation;
    }();
    BuildingFormswithBasicValidation = __decorate([core_1.Component({
        selector: 'component',
        moduleId: module.id,
        templateUrl: 'app.html',
        styleUrls: ['app.css'],
        providers: [app_service_1.AppService]
    }), __metadata("design:paramtypes", [app_service_1.AppService])], BuildingFormswithBasicValidation);
    exports.BuildingFormswithBasicValidation = BuildingFormswithBasicValidation;
    

    return module.exports;
});
$__System.registerDynamic("app/06/066Template-driven Forms/subscription-form.component.js", ["node_modules/@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var SubscriptionFormComponent = function () {
        function SubscriptionFormComponent() {
            this.frequencies = [{ id: 1, label: 'Daily' }, { id: 2, label: 'Weekly' }, { id: 3, label: 'Monthly' }];
        }
        SubscriptionFormComponent.prototype.onSubscribe = function (arg) {
            console.log('form ', arg.value);
        };
        return SubscriptionFormComponent;
    }();
    SubscriptionFormComponent = __decorate([core_1.Component({
        selector: 'subscription-form',
        //moduleId: module.id,
        //templateUrl:'subscription-form.html',
        template: "",
        styles: [""]
    }), __metadata("design:paramtypes", [])], SubscriptionFormComponent);
    exports.SubscriptionFormComponent = SubscriptionFormComponent;
    

    return module.exports;
});
$__System.registerDynamic("app/06/app.module.js", ["node_modules/@angular/core/bundles/core.umd.js", "node_modules/@angular/forms/bundles/forms.umd.js", "node_modules/@angular/platform-browser/bundles/platform-browser.umd.js", "app/06/app.component.js", "app/06/066Template-driven Forms/subscription-form.component.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var forms_1 = $__require("node_modules/@angular/forms/bundles/forms.umd.js");
    var platform_browser_1 = $__require("node_modules/@angular/platform-browser/bundles/platform-browser.umd.js");
    var app_component_1 = $__require("app/06/app.component.js");
    var subscription_form_component_1 = $__require("app/06/066Template-driven Forms/subscription-form.component.js");
    var AppModule06 = function () {
        function AppModule06() {}
        return AppModule06;
    }();
    AppModule06 = __decorate([core_1.NgModule({
        imports: [platform_browser_1.BrowserModule, forms_1.FormsModule],
        declarations: [app_component_1.BuildingFormswithBasicValidation, subscription_form_component_1.SubscriptionFormComponent],
        bootstrap: [app_component_1.BuildingFormswithBasicValidation]
    }), __metadata("design:paramtypes", [])], AppModule06);
    exports.AppModule06 = AppModule06;
    

    return module.exports;
});
$__System.registerDynamic("app/07/app.service.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var AppService = function () {
        function AppService() {}
        AppService.prototype.getNotes = function () {
            return [{
                title: "Create Control Explicitly: Model-driven form",
                description: "",
                note: "\timport {ControlGroup,Control} from 'angular2/common'\n@Component({\n    template:'<form [ngFormModel]=\"formVar\" ><input ngControl=\"comment\"/></form>\n})\nexport class FormComponent{\n    formVar = new ControlGroup({\n        comment: new Control()\n    });\n}"
            }, {
                title: "FormBuilder",
                description: "more compact, allows injection",
                note: "\timport {FormBuilder} from 'angular2/common'\n\texport class ContactComponent{\n\t\tformVar;\n\t\tconstructor(fb:FormBuilder}{this.formVar = fb.group({comment:[]});}\n\t}"
            }, {
                title: "Validation",
                description: "",
                note: "\timport {Validators} from 'angular2/common'\n\t@Component({\n\t\ttemplate:'\n\t\t\t<form [ngFormModel]=\"formVar\" >\n\t\t\t\t<input ngControl=\"comment\"/>\n\t\t\t</form>'})\n\texport class FormComponent{\n\t\tformVar = new ControlGroup({\n\t\t\tcomment: new Control('defaultValue',Validators.required)\n\t\t});\n\t}"
            }, {
                title: "Valid Errors",
                description: "",
                note: "\t@Component({\n\t\ttemplate:'\n\t\t\t<form [ngFormModel]=\"formVar\" >\n\t\t\t\t<input #=\"nametemp\"/>\n\t\t\t\t<div *ngIf=\"!nametemp.valid\">Username is invalid</div>\n\t\t\t</form>'})\n\texport class FormComponent{\n\t\tformVar = new ControlGroup({\n\t\t\tcomment: new Control('defaultValue',Validators.required)\n\t\t});\n\t}"
            }, {
                title: "Custom Validation",
                description: "",
                note: "\t--validator.component\n\texport class UsernameValidators{\n\t\tstatic isEmpty(someControl:Control){\n\t\t\tif(someControl){\n\t\t\t\treturn{isEmpty:true};\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\t--app.component\n\timport {UsernameValidators} from './validator.component'\n\texport class FormComponent{\n\t\tformVar = new ControlGroup({\n\t\t\tcomment: new Control('',Validators.compose([UsernameValidators.isEmpty]))\n\t\t});"
            }, {
                title: "Async Validation",
                description: "",
                note: "\t--validator.component\n\texport class UsernameValidators{\n\t\tstatic isUnique(someControl:Control){\n\t\t\treturn new Promise((resolve,reject)=>{\n\t\t\t\t//server call with callback function that uses \"resolve\"\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tif(control.value ==\"test\"){\n\t\t\t\t\t\tresolve({isUnique:true});\n\t\t\t\t\telse\n\t\t\t\t\t\tresolve({isUnique:false});\n\t\t\t\t\t}\n\t\t\t\t},1000)\n\t\t\t});\n\t\t}\n\t}\n\t--app.component\n\timport {UsernameValidators} from './validator.component'\n\texport class FormComponent{\n\t\tformVar = new ControlGroup({\n\t\t\t//note that this is the third parameter for async\n\t\t\tcomment: new Control('',,UsernameValidators.isUnique)\n\t\t});"
            }, {
                title: "Loader Image",
                description: "",
                note: "\t<input #somevar=\"ngModel\"/>\n\t<div *ngIf=\"somevar.control.pending\">Checking...</div>"
            }, {
                title: "Validating Upon Form Submit",
                description: "",
                note: "\t<form>\n\t\t<div *ngIf=\"form.errors.invalidForm\" >Invalid form</div>\n\t<form>\n\t\n\texport class FormComponent{\n\t\tonSubmit(){\n\t\t\tvar result = authService.login(this.form.value);\n\t\t\tthis.form.setErrors({invalidForm:true});\n\t\t}"
            }];
        };
        return AppService;
    }();
    exports.AppService = AppService;
    

    return module.exports;
});
$__System.registerDynamic("app/07/app.component.js", ["node_modules/@angular/core/bundles/core.umd.js", "app/07/app.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var app_service_1 = $__require("app/07/app.service.js");
    var BuildingFormswithComplexValidation = function () {
        function BuildingFormswithComplexValidation(noteService) {
            this.items = [];
            this.items = noteService.getNotes();
        }
        return BuildingFormswithComplexValidation;
    }();
    BuildingFormswithComplexValidation = __decorate([core_1.Component({
        selector: 'component',
        moduleId: module.id,
        templateUrl: 'app.html',
        styleUrls: ['app.css'],
        providers: [app_service_1.AppService]
    }), __metadata("design:paramtypes", [app_service_1.AppService])], BuildingFormswithComplexValidation);
    exports.BuildingFormswithComplexValidation = BuildingFormswithComplexValidation;
    

    return module.exports;
});
$__System.registerDynamic("app/07/069SignUpForm/signup-form.component.js", ["node_modules/@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var SignUpFormComponent = function () {
        function SignUpFormComponent() {}
        return SignUpFormComponent;
    }();
    SignUpFormComponent = __decorate([core_1.Component({
        selector: 'signup-form',
        //moduleId: module.id,
        //templateUrl:'signup-form.html',
        template: "",
        styles: [""]
    }), __metadata("design:paramtypes", [])], SignUpFormComponent);
    exports.SignUpFormComponent = SignUpFormComponent;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/observable/PromiseObservable.js', ['node_modules/rxjs/util/root.js', 'node_modules/rxjs/Observable.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var root_1 = $__require('node_modules/rxjs/util/root.js');
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var PromiseObservable = function (_super) {
        __extends(PromiseObservable, _super);
        function PromiseObservable(promise, scheduler) {
            _super.call(this);
            this.promise = promise;
            this.scheduler = scheduler;
        }
        /**
         * Converts a Promise to an Observable.
         *
         * <span class="informal">Returns an Observable that just emits the Promise's
         * resolved value, then completes.</span>
         *
         * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an
         * Observable. If the Promise resolves with a value, the output Observable
         * emits that resolved value as a `next`, and then completes. If the Promise
         * is rejected, then the output Observable emits the corresponding Error.
         *
         * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>
         * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));
         * result.subscribe(x => console.log(x), e => console.error(e));
         *
         * @see {@link bindCallback}
         * @see {@link from}
         *
         * @param {Promise<T>} promise The promise to be converted.
         * @param {Scheduler} [scheduler] An optional Scheduler to use for scheduling
         * the delivery of the resolved value (or the rejection).
         * @return {Observable<T>} An Observable which wraps the Promise.
         * @static true
         * @name fromPromise
         * @owner Observable
         */
        PromiseObservable.create = function (promise, scheduler) {
            return new PromiseObservable(promise, scheduler);
        };
        PromiseObservable.prototype._subscribe = function (subscriber) {
            var _this = this;
            var promise = this.promise;
            var scheduler = this.scheduler;
            if (scheduler == null) {
                if (this._isScalar) {
                    if (!subscriber.closed) {
                        subscriber.next(this.value);
                        subscriber.complete();
                    }
                } else {
                    promise.then(function (value) {
                        _this.value = value;
                        _this._isScalar = true;
                        if (!subscriber.closed) {
                            subscriber.next(value);
                            subscriber.complete();
                        }
                    }, function (err) {
                        if (!subscriber.closed) {
                            subscriber.error(err);
                        }
                    }).then(null, function (err) {
                        // escape the promise trap, throw unhandled errors
                        root_1.root.setTimeout(function () {
                            throw err;
                        });
                    });
                }
            } else {
                if (this._isScalar) {
                    if (!subscriber.closed) {
                        return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });
                    }
                } else {
                    promise.then(function (value) {
                        _this.value = value;
                        _this._isScalar = true;
                        if (!subscriber.closed) {
                            subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
                        }
                    }, function (err) {
                        if (!subscriber.closed) {
                            subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));
                        }
                    }).then(null, function (err) {
                        // escape the promise trap, throw unhandled errors
                        root_1.root.setTimeout(function () {
                            throw err;
                        });
                    });
                }
            }
        };
        return PromiseObservable;
    }(Observable_1.Observable);
    exports.PromiseObservable = PromiseObservable;
    function dispatchNext(arg) {
        var value = arg.value,
            subscriber = arg.subscriber;
        if (!subscriber.closed) {
            subscriber.next(value);
            subscriber.complete();
        }
    }
    function dispatchError(arg) {
        var err = arg.err,
            subscriber = arg.subscriber;
        if (!subscriber.closed) {
            subscriber.error(err);
        }
    }
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/operator/toPromise.js', ['node_modules/rxjs/util/root.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('node_modules/rxjs/util/root.js');
    /**
     * @param PromiseCtor
     * @return {Promise<T>}
     * @method toPromise
     * @owner Observable
     */
    function toPromise(PromiseCtor) {
        var _this = this;
        if (!PromiseCtor) {
            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                PromiseCtor = root_1.root.Rx.config.Promise;
            } else if (root_1.root.Promise) {
                PromiseCtor = root_1.root.Promise;
            }
        }
        if (!PromiseCtor) {
            throw new Error('no Promise impl found');
        }
        return new PromiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) {
                return value = x;
            }, function (err) {
                return reject(err);
            }, function () {
                return resolve(value);
            });
        });
    }
    exports.toPromise = toPromise;
    

    return module.exports;
});
(function() {
var define = $__System.amdDefine;
var __extends = (this && this.__extends) || function(d, b) {
  for (var p in b)
    if (b.hasOwnProperty(p))
      d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/Subject'), require('rxjs/Observable'), require('rxjs/observable/PromiseObservable'), require('rxjs/operator/toPromise')) : typeof define === 'function' && define.amd ? define("node_modules/@angular/forms/bundles/forms.umd.js", ["exports", "node_modules/@angular/core/bundles/core.umd.js", "node_modules/rxjs/Subject.js", "node_modules/rxjs/Observable.js", "node_modules/rxjs/observable/PromiseObservable.js", "node_modules/rxjs/operator/toPromise.js"], factory) : (factory((global.ng = global.ng || {}, global.ng.forms = global.ng.forms || {}), global.ng.core, global.Rx, global.Rx, global.Rx, global.Rx.Observable.prototype));
}(this, function(exports, _angular_core, rxjs_Subject, rxjs_Observable, rxjs_observable_PromiseObservable, rxjs_operator_toPromise) {
  'use strict';
  var NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken('NgValueAccessor');
  var CHECKBOX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return CheckboxControlValueAccessor;
    }),
    multi: true
  };
  var CheckboxControlValueAccessor = (function() {
    function CheckboxControlValueAccessor(_renderer, _elementRef) {
      this._renderer = _renderer;
      this._elementRef = _elementRef;
      this.onChange = function(_) {};
      this.onTouched = function() {};
    }
    CheckboxControlValueAccessor.prototype.writeValue = function(value) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);
    };
    CheckboxControlValueAccessor.prototype.registerOnChange = function(fn) {
      this.onChange = fn;
    };
    CheckboxControlValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    return CheckboxControlValueAccessor;
  }());
  CheckboxControlValueAccessor.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',
      host: {
        '(change)': 'onChange($event.target.checked)',
        '(blur)': 'onTouched()'
      },
      providers: [CHECKBOX_VALUE_ACCESSOR]
    }]
  }];
  CheckboxControlValueAccessor.ctorParameters = [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
  var globalScope;
  if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
      globalScope = self;
    } else {
      globalScope = global;
    }
  } else {
    globalScope = window;
  }
  var global$1 = globalScope;
  global$1.assert = function assert(condition) {};
  function isPresent(obj) {
    return obj !== undefined && obj !== null;
  }
  function isBlank(obj) {
    return obj === undefined || obj === null;
  }
  function isString(obj) {
    return typeof obj === 'string';
  }
  function isFunction(obj) {
    return typeof obj === 'function';
  }
  function isPromise(obj) {
    return isPresent(obj) && isFunction(obj.then);
  }
  function isArray(obj) {
    return Array.isArray(obj);
  }
  var StringWrapper = (function() {
    function StringWrapper() {}
    StringWrapper.fromCharCode = function(code) {
      return String.fromCharCode(code);
    };
    StringWrapper.charCodeAt = function(s, index) {
      return s.charCodeAt(index);
    };
    StringWrapper.split = function(s, regExp) {
      return s.split(regExp);
    };
    StringWrapper.equals = function(s, s2) {
      return s === s2;
    };
    StringWrapper.stripLeft = function(s, charVal) {
      if (s && s.length) {
        var pos = 0;
        for (var i = 0; i < s.length; i++) {
          if (s[i] != charVal)
            break;
          pos++;
        }
        s = s.substring(pos);
      }
      return s;
    };
    StringWrapper.stripRight = function(s, charVal) {
      if (s && s.length) {
        var pos = s.length;
        for (var i = s.length - 1; i >= 0; i--) {
          if (s[i] != charVal)
            break;
          pos--;
        }
        s = s.substring(0, pos);
      }
      return s;
    };
    StringWrapper.replace = function(s, from, replace) {
      return s.replace(from, replace);
    };
    StringWrapper.replaceAll = function(s, from, replace) {
      return s.replace(from, replace);
    };
    StringWrapper.slice = function(s, from, to) {
      if (from === void 0) {
        from = 0;
      }
      if (to === void 0) {
        to = null;
      }
      return s.slice(from, to === null ? undefined : to);
    };
    StringWrapper.replaceAllMapped = function(s, from, cb) {
      return s.replace(from, function() {
        var matches = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          matches[_i - 0] = arguments[_i];
        }
        matches.splice(-2, 2);
        return cb(matches);
      });
    };
    StringWrapper.contains = function(s, substr) {
      return s.indexOf(substr) != -1;
    };
    StringWrapper.compare = function(a, b) {
      if (a < b) {
        return -1;
      } else if (a > b) {
        return 1;
      } else {
        return 0;
      }
    };
    return StringWrapper;
  }());
  var NumberParseError = (function(_super) {
    __extends(NumberParseError, _super);
    function NumberParseError(message) {
      _super.call(this);
      this.message = message;
    }
    NumberParseError.prototype.toString = function() {
      return this.message;
    };
    return NumberParseError;
  }(Error));
  var NumberWrapper = (function() {
    function NumberWrapper() {}
    NumberWrapper.toFixed = function(n, fractionDigits) {
      return n.toFixed(fractionDigits);
    };
    NumberWrapper.equal = function(a, b) {
      return a === b;
    };
    NumberWrapper.parseIntAutoRadix = function(text) {
      var result = parseInt(text);
      if (isNaN(result)) {
        throw new NumberParseError('Invalid integer literal when parsing ' + text);
      }
      return result;
    };
    NumberWrapper.parseInt = function(text, radix) {
      if (radix == 10) {
        if (/^(\-|\+)?[0-9]+$/.test(text)) {
          return parseInt(text, radix);
        }
      } else if (radix == 16) {
        if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
          return parseInt(text, radix);
        }
      } else {
        var result = parseInt(text, radix);
        if (!isNaN(result)) {
          return result;
        }
      }
      throw new NumberParseError('Invalid integer literal when parsing ' + text + ' in base ' + radix);
    };
    NumberWrapper.parseFloat = function(text) {
      return parseFloat(text);
    };
    Object.defineProperty(NumberWrapper, "NaN", {
      get: function() {
        return NaN;
      },
      enumerable: true,
      configurable: true
    });
    NumberWrapper.isNumeric = function(value) {
      return !isNaN(value - parseFloat(value));
    };
    NumberWrapper.isNaN = function(value) {
      return isNaN(value);
    };
    NumberWrapper.isInteger = function(value) {
      return Number.isInteger(value);
    };
    return NumberWrapper;
  }());
  function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
  }
  function normalizeBool(obj) {
    return isBlank(obj) ? false : obj;
  }
  function isJsObject(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
  }
  function isPrimitive(obj) {
    return !isJsObject(obj);
  }
  function hasConstructor(value, type) {
    return value.constructor === type;
  }
  var DEFAULT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return DefaultValueAccessor;
    }),
    multi: true
  };
  var DefaultValueAccessor = (function() {
    function DefaultValueAccessor(_renderer, _elementRef) {
      this._renderer = _renderer;
      this._elementRef = _elementRef;
      this.onChange = function(_) {};
      this.onTouched = function() {};
    }
    DefaultValueAccessor.prototype.writeValue = function(value) {
      var normalizedValue = isBlank(value) ? '' : value;
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
    };
    DefaultValueAccessor.prototype.registerOnChange = function(fn) {
      this.onChange = fn;
    };
    DefaultValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    return DefaultValueAccessor;
  }());
  DefaultValueAccessor.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
      host: {
        '(input)': 'onChange($event.target.value)',
        '(blur)': 'onTouched()'
      },
      providers: [DEFAULT_VALUE_ACCESSOR]
    }]
  }];
  DefaultValueAccessor.ctorParameters = [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
  var Map$1 = global$1.Map;
  var Set = global$1.Set;
  var createMapFromPairs = (function() {
    try {
      if (new Map$1([[1, 2]]).size === 1) {
        return function createMapFromPairs(pairs) {
          return new Map$1(pairs);
        };
      }
    } catch (e) {}
    return function createMapAndPopulateFromPairs(pairs) {
      var map = new Map$1();
      for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i];
        map.set(pair[0], pair[1]);
      }
      return map;
    };
  })();
  var createMapFromMap = (function() {
    try {
      if (new Map$1(new Map$1())) {
        return function createMapFromMap(m) {
          return new Map$1(m);
        };
      }
    } catch (e) {}
    return function createMapAndPopulateFromMap(m) {
      var map = new Map$1();
      m.forEach(function(v, k) {
        map.set(k, v);
      });
      return map;
    };
  })();
  var _clearValues = (function() {
    if ((new Map$1()).keys().next) {
      return function _clearValues(m) {
        var keyIterator = m.keys();
        var k;
        while (!((k = keyIterator.next()).done)) {
          m.set(k.value, null);
        }
      };
    } else {
      return function _clearValuesWithForeEach(m) {
        m.forEach(function(v, k) {
          m.set(k, null);
        });
      };
    }
  })();
  var _arrayFromMap = (function() {
    try {
      if ((new Map$1()).values().next) {
        return function createArrayFromMap(m, getValues) {
          return getValues ? Array.from(m.values()) : Array.from(m.keys());
        };
      }
    } catch (e) {}
    return function createArrayFromMapWithForeach(m, getValues) {
      var res = ListWrapper.createFixedSize(m.size),
          i = 0;
      m.forEach(function(v, k) {
        res[i] = getValues ? v : k;
        i++;
      });
      return res;
    };
  })();
  var MapWrapper = (function() {
    function MapWrapper() {}
    MapWrapper.clone = function(m) {
      return createMapFromMap(m);
    };
    MapWrapper.createFromStringMap = function(stringMap) {
      var result = new Map$1();
      for (var prop in stringMap) {
        result.set(prop, stringMap[prop]);
      }
      return result;
    };
    MapWrapper.toStringMap = function(m) {
      var r = {};
      m.forEach(function(v, k) {
        return r[k] = v;
      });
      return r;
    };
    MapWrapper.createFromPairs = function(pairs) {
      return createMapFromPairs(pairs);
    };
    MapWrapper.clearValues = function(m) {
      _clearValues(m);
    };
    MapWrapper.iterable = function(m) {
      return m;
    };
    MapWrapper.keys = function(m) {
      return _arrayFromMap(m, false);
    };
    MapWrapper.values = function(m) {
      return _arrayFromMap(m, true);
    };
    return MapWrapper;
  }());
  var StringMapWrapper = (function() {
    function StringMapWrapper() {}
    StringMapWrapper.create = function() {
      return {};
    };
    StringMapWrapper.contains = function(map, key) {
      return map.hasOwnProperty(key);
    };
    StringMapWrapper.get = function(map, key) {
      return map.hasOwnProperty(key) ? map[key] : undefined;
    };
    StringMapWrapper.set = function(map, key, value) {
      map[key] = value;
    };
    StringMapWrapper.keys = function(map) {
      return Object.keys(map);
    };
    StringMapWrapper.values = function(map) {
      return Object.keys(map).map(function(k) {
        return map[k];
      });
    };
    StringMapWrapper.isEmpty = function(map) {
      for (var prop in map) {
        return false;
      }
      return true;
    };
    StringMapWrapper.delete = function(map, key) {
      delete map[key];
    };
    StringMapWrapper.forEach = function(map, callback) {
      for (var _i = 0,
          _a = Object.keys(map); _i < _a.length; _i++) {
        var k = _a[_i];
        callback(map[k], k);
      }
    };
    StringMapWrapper.merge = function(m1, m2) {
      var m = {};
      for (var _i = 0,
          _a = Object.keys(m1); _i < _a.length; _i++) {
        var k = _a[_i];
        m[k] = m1[k];
      }
      for (var _b = 0,
          _c = Object.keys(m2); _b < _c.length; _b++) {
        var k = _c[_b];
        m[k] = m2[k];
      }
      return m;
    };
    StringMapWrapper.equals = function(m1, m2) {
      var k1 = Object.keys(m1);
      var k2 = Object.keys(m2);
      if (k1.length != k2.length) {
        return false;
      }
      var key;
      for (var i = 0; i < k1.length; i++) {
        key = k1[i];
        if (m1[key] !== m2[key]) {
          return false;
        }
      }
      return true;
    };
    return StringMapWrapper;
  }());
  var ListWrapper = (function() {
    function ListWrapper() {}
    ListWrapper.createFixedSize = function(size) {
      return new Array(size);
    };
    ListWrapper.createGrowableSize = function(size) {
      return new Array(size);
    };
    ListWrapper.clone = function(array) {
      return array.slice(0);
    };
    ListWrapper.forEachWithIndex = function(array, fn) {
      for (var i = 0; i < array.length; i++) {
        fn(array[i], i);
      }
    };
    ListWrapper.first = function(array) {
      if (!array)
        return null;
      return array[0];
    };
    ListWrapper.last = function(array) {
      if (!array || array.length == 0)
        return null;
      return array[array.length - 1];
    };
    ListWrapper.indexOf = function(array, value, startIndex) {
      if (startIndex === void 0) {
        startIndex = 0;
      }
      return array.indexOf(value, startIndex);
    };
    ListWrapper.contains = function(list, el) {
      return list.indexOf(el) !== -1;
    };
    ListWrapper.reversed = function(array) {
      var a = ListWrapper.clone(array);
      return a.reverse();
    };
    ListWrapper.concat = function(a, b) {
      return a.concat(b);
    };
    ListWrapper.insert = function(list, index, value) {
      list.splice(index, 0, value);
    };
    ListWrapper.removeAt = function(list, index) {
      var res = list[index];
      list.splice(index, 1);
      return res;
    };
    ListWrapper.removeAll = function(list, items) {
      for (var i = 0; i < items.length; ++i) {
        var index = list.indexOf(items[i]);
        list.splice(index, 1);
      }
    };
    ListWrapper.remove = function(list, el) {
      var index = list.indexOf(el);
      if (index > -1) {
        list.splice(index, 1);
        return true;
      }
      return false;
    };
    ListWrapper.clear = function(list) {
      list.length = 0;
    };
    ListWrapper.isEmpty = function(list) {
      return list.length == 0;
    };
    ListWrapper.fill = function(list, value, start, end) {
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = null;
      }
      list.fill(value, start, end === null ? list.length : end);
    };
    ListWrapper.equals = function(a, b) {
      if (a.length != b.length)
        return false;
      for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i])
          return false;
      }
      return true;
    };
    ListWrapper.slice = function(l, from, to) {
      if (from === void 0) {
        from = 0;
      }
      if (to === void 0) {
        to = null;
      }
      return l.slice(from, to === null ? undefined : to);
    };
    ListWrapper.splice = function(l, from, length) {
      return l.splice(from, length);
    };
    ListWrapper.sort = function(l, compareFn) {
      if (isPresent(compareFn)) {
        l.sort(compareFn);
      } else {
        l.sort();
      }
    };
    ListWrapper.toString = function(l) {
      return l.toString();
    };
    ListWrapper.toJSON = function(l) {
      return JSON.stringify(l);
    };
    ListWrapper.maximum = function(list, predicate) {
      if (list.length == 0) {
        return null;
      }
      var solution = null;
      var maxValue = -Infinity;
      for (var index = 0; index < list.length; index++) {
        var candidate = list[index];
        if (isBlank(candidate)) {
          continue;
        }
        var candidateValue = predicate(candidate);
        if (candidateValue > maxValue) {
          solution = candidate;
          maxValue = candidateValue;
        }
      }
      return solution;
    };
    ListWrapper.flatten = function(list) {
      var target = [];
      _flattenArray(list, target);
      return target;
    };
    ListWrapper.addAll = function(list, source) {
      for (var i = 0; i < source.length; i++) {
        list.push(source[i]);
      }
    };
    return ListWrapper;
  }());
  function _flattenArray(source, target) {
    if (isPresent(source)) {
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        if (isArray(item)) {
          _flattenArray(item, target);
        } else {
          target.push(item);
        }
      }
    }
    return target;
  }
  var createSetFromList = (function() {
    var test = new Set([1, 2, 3]);
    if (test.size === 3) {
      return function createSetFromList(lst) {
        return new Set(lst);
      };
    } else {
      return function createSetAndPopulateFromList(lst) {
        var res = new Set(lst);
        if (res.size !== lst.length) {
          for (var i = 0; i < lst.length; i++) {
            res.add(lst[i]);
          }
        }
        return res;
      };
    }
  })();
  var BaseException = (function(_super) {
    __extends(BaseException, _super);
    function BaseException(message) {
      if (message === void 0) {
        message = '--';
      }
      _super.call(this, message);
      this.message = message;
      this.stack = (new Error(message)).stack;
    }
    BaseException.prototype.toString = function() {
      return this.message;
    };
    return BaseException;
  }(Error));
  function unimplemented() {
    throw new BaseException('unimplemented');
  }
  var AbstractControlDirective = (function() {
    function AbstractControlDirective() {}
    Object.defineProperty(AbstractControlDirective.prototype, "control", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "value", {
      get: function() {
        return isPresent(this.control) ? this.control.value : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "valid", {
      get: function() {
        return isPresent(this.control) ? this.control.valid : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "invalid", {
      get: function() {
        return isPresent(this.control) ? this.control.invalid : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "pending", {
      get: function() {
        return isPresent(this.control) ? this.control.pending : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "errors", {
      get: function() {
        return isPresent(this.control) ? this.control.errors : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
      get: function() {
        return isPresent(this.control) ? this.control.pristine : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
      get: function() {
        return isPresent(this.control) ? this.control.dirty : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "touched", {
      get: function() {
        return isPresent(this.control) ? this.control.touched : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
      get: function() {
        return isPresent(this.control) ? this.control.untouched : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "statusChanges", {
      get: function() {
        return isPresent(this.control) ? this.control.statusChanges : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "valueChanges", {
      get: function() {
        return isPresent(this.control) ? this.control.valueChanges : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "path", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    AbstractControlDirective.prototype.reset = function(value) {
      if (value === void 0) {
        value = undefined;
      }
      if (isPresent(this.control))
        this.control.reset(value);
    };
    return AbstractControlDirective;
  }());
  var NgControl = (function(_super) {
    __extends(NgControl, _super);
    function NgControl() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      _super.apply(this, args);
      this.name = null;
      this.valueAccessor = null;
    }
    Object.defineProperty(NgControl.prototype, "validator", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgControl.prototype, "asyncValidator", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    return NgControl;
  }(AbstractControlDirective));
  var NgControlStatus = (function() {
    function NgControlStatus(cd) {
      this._cd = cd;
    }
    Object.defineProperty(NgControlStatus.prototype, "ngClassUntouched", {
      get: function() {
        return isPresent(this._cd.control) ? this._cd.control.untouched : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgControlStatus.prototype, "ngClassTouched", {
      get: function() {
        return isPresent(this._cd.control) ? this._cd.control.touched : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgControlStatus.prototype, "ngClassPristine", {
      get: function() {
        return isPresent(this._cd.control) ? this._cd.control.pristine : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgControlStatus.prototype, "ngClassDirty", {
      get: function() {
        return isPresent(this._cd.control) ? this._cd.control.dirty : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgControlStatus.prototype, "ngClassValid", {
      get: function() {
        return isPresent(this._cd.control) ? this._cd.control.valid : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgControlStatus.prototype, "ngClassInvalid", {
      get: function() {
        return isPresent(this._cd.control) ? !this._cd.control.valid : false;
      },
      enumerable: true,
      configurable: true
    });
    return NgControlStatus;
  }());
  NgControlStatus.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: '[formControlName],[ngModel],[formControl]',
      host: {
        '[class.ng-untouched]': 'ngClassUntouched',
        '[class.ng-touched]': 'ngClassTouched',
        '[class.ng-pristine]': 'ngClassPristine',
        '[class.ng-dirty]': 'ngClassDirty',
        '[class.ng-valid]': 'ngClassValid',
        '[class.ng-invalid]': 'ngClassInvalid'
      }
    }]
  }];
  NgControlStatus.ctorParameters = [{
    type: NgControl,
    decorators: [{type: _angular_core.Self}]
  }];
  var EventEmitter = (function(_super) {
    __extends(EventEmitter, _super);
    function EventEmitter(isAsync) {
      if (isAsync === void 0) {
        isAsync = false;
      }
      _super.call(this);
      this.__isAsync = isAsync;
    }
    EventEmitter.prototype.emit = function(value) {
      _super.prototype.next.call(this, value);
    };
    EventEmitter.prototype.next = function(value) {
      _super.prototype.next.call(this, value);
    };
    EventEmitter.prototype.subscribe = function(generatorOrNext, error, complete) {
      var schedulerFn;
      var errorFn = function(err) {
        return null;
      };
      var completeFn = function() {
        return null;
      };
      if (generatorOrNext && typeof generatorOrNext === 'object') {
        schedulerFn = this.__isAsync ? function(value) {
          setTimeout(function() {
            return generatorOrNext.next(value);
          });
        } : function(value) {
          generatorOrNext.next(value);
        };
        if (generatorOrNext.error) {
          errorFn = this.__isAsync ? function(err) {
            setTimeout(function() {
              return generatorOrNext.error(err);
            });
          } : function(err) {
            generatorOrNext.error(err);
          };
        }
        if (generatorOrNext.complete) {
          completeFn = this.__isAsync ? function() {
            setTimeout(function() {
              return generatorOrNext.complete();
            });
          } : function() {
            generatorOrNext.complete();
          };
        }
      } else {
        schedulerFn = this.__isAsync ? function(value) {
          setTimeout(function() {
            return generatorOrNext(value);
          });
        } : function(value) {
          generatorOrNext(value);
        };
        if (error) {
          errorFn = this.__isAsync ? function(err) {
            setTimeout(function() {
              return error(err);
            });
          } : function(err) {
            error(err);
          };
        }
        if (complete) {
          completeFn = this.__isAsync ? function() {
            setTimeout(function() {
              return complete();
            });
          } : function() {
            complete();
          };
        }
      }
      return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
    };
    return EventEmitter;
  }(rxjs_Subject.Subject));
  var NG_VALIDATORS = new _angular_core.OpaqueToken('NgValidators');
  var NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken('NgAsyncValidators');
  var Validators = (function() {
    function Validators() {}
    Validators.required = function(control) {
      return isBlank(control.value) || (isString(control.value) && control.value == '') ? {'required': true} : null;
    };
    Validators.minLength = function(minLength) {
      return function(control) {
        if (isPresent(Validators.required(control)))
          return null;
        var v = control.value;
        return v.length < minLength ? {'minlength': {
            'requiredLength': minLength,
            'actualLength': v.length
          }} : null;
      };
    };
    Validators.maxLength = function(maxLength) {
      return function(control) {
        if (isPresent(Validators.required(control)))
          return null;
        var v = control.value;
        return v.length > maxLength ? {'maxlength': {
            'requiredLength': maxLength,
            'actualLength': v.length
          }} : null;
      };
    };
    Validators.pattern = function(pattern) {
      return function(control) {
        if (isPresent(Validators.required(control)))
          return null;
        var regex = new RegExp("^" + pattern + "$");
        var v = control.value;
        return regex.test(v) ? null : {'pattern': {
            'requiredPattern': "^" + pattern + "$",
            'actualValue': v
          }};
      };
    };
    Validators.nullValidator = function(c) {
      return null;
    };
    Validators.compose = function(validators) {
      if (isBlank(validators))
        return null;
      var presentValidators = validators.filter(isPresent);
      if (presentValidators.length == 0)
        return null;
      return function(control) {
        return _mergeErrors(_executeValidators(control, presentValidators));
      };
    };
    Validators.composeAsync = function(validators) {
      if (isBlank(validators))
        return null;
      var presentValidators = validators.filter(isPresent);
      if (presentValidators.length == 0)
        return null;
      return function(control) {
        var promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);
        return Promise.all(promises).then(_mergeErrors);
      };
    };
    return Validators;
  }());
  function _convertToPromise(obj) {
    return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj);
  }
  function _executeValidators(control, validators) {
    return validators.map(function(v) {
      return v(control);
    });
  }
  function _executeAsyncValidators(control, validators) {
    return validators.map(function(v) {
      return v(control);
    });
  }
  function _mergeErrors(arrayOfErrors) {
    var res = arrayOfErrors.reduce(function(res, errors) {
      return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;
    }, {});
    return StringMapWrapper.isEmpty(res) ? null : res;
  }
  function normalizeValidator(validator) {
    if (validator.validate !== undefined) {
      return function(c) {
        return validator.validate(c);
      };
    } else {
      return validator;
    }
  }
  function normalizeAsyncValidator(validator) {
    if (validator.validate !== undefined) {
      return function(c) {
        return validator.validate(c);
      };
    } else {
      return validator;
    }
  }
  var NUMBER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return NumberValueAccessor;
    }),
    multi: true
  };
  var NumberValueAccessor = (function() {
    function NumberValueAccessor(_renderer, _elementRef) {
      this._renderer = _renderer;
      this._elementRef = _elementRef;
      this.onChange = function(_) {};
      this.onTouched = function() {};
    }
    NumberValueAccessor.prototype.writeValue = function(value) {
      var normalizedValue = isBlank(value) ? '' : value;
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
    };
    NumberValueAccessor.prototype.registerOnChange = function(fn) {
      this.onChange = function(value) {
        fn(value == '' ? null : NumberWrapper.parseFloat(value));
      };
    };
    NumberValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    return NumberValueAccessor;
  }());
  NumberValueAccessor.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',
      host: {
        '(change)': 'onChange($event.target.value)',
        '(input)': 'onChange($event.target.value)',
        '(blur)': 'onTouched()'
      },
      providers: [NUMBER_VALUE_ACCESSOR]
    }]
  }];
  NumberValueAccessor.ctorParameters = [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
  var RADIO_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return RadioControlValueAccessor;
    }),
    multi: true
  };
  var RadioControlRegistry = (function() {
    function RadioControlRegistry() {
      this._accessors = [];
    }
    RadioControlRegistry.prototype.add = function(control, accessor) {
      this._accessors.push([control, accessor]);
    };
    RadioControlRegistry.prototype.remove = function(accessor) {
      var indexToRemove = -1;
      for (var i = 0; i < this._accessors.length; ++i) {
        if (this._accessors[i][1] === accessor) {
          indexToRemove = i;
        }
      }
      ListWrapper.removeAt(this._accessors, indexToRemove);
    };
    RadioControlRegistry.prototype.select = function(accessor) {
      var _this = this;
      this._accessors.forEach(function(c) {
        if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {
          c[1].fireUncheck(accessor.value);
        }
      });
    };
    RadioControlRegistry.prototype._isSameGroup = function(controlPair, accessor) {
      if (!controlPair[0].control)
        return false;
      return controlPair[0].control.root === accessor._control.control.root && controlPair[1].name === accessor.name;
    };
    return RadioControlRegistry;
  }());
  RadioControlRegistry.decorators = [{type: _angular_core.Injectable}];
  var RadioControlValueAccessor = (function() {
    function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
      this._renderer = _renderer;
      this._elementRef = _elementRef;
      this._registry = _registry;
      this._injector = _injector;
      this.onChange = function() {};
      this.onTouched = function() {};
    }
    RadioControlValueAccessor.prototype.ngOnInit = function() {
      this._control = this._injector.get(NgControl);
      this._checkName();
      this._registry.add(this._control, this);
    };
    RadioControlValueAccessor.prototype.ngOnDestroy = function() {
      this._registry.remove(this);
    };
    RadioControlValueAccessor.prototype.writeValue = function(value) {
      this._state = value === this.value;
      if (isPresent(value)) {
        this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);
      }
    };
    RadioControlValueAccessor.prototype.registerOnChange = function(fn) {
      var _this = this;
      this._fn = fn;
      this.onChange = function() {
        fn(_this.value);
        _this._registry.select(_this);
      };
    };
    RadioControlValueAccessor.prototype.fireUncheck = function(value) {
      this.writeValue(value);
    };
    RadioControlValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    RadioControlValueAccessor.prototype._checkName = function() {
      if (this.name && this.formControlName && this.name !== this.formControlName) {
        this._throwNameError();
      }
      if (!this.name && this.formControlName)
        this.name = this.formControlName;
    };
    RadioControlValueAccessor.prototype._throwNameError = function() {
      throw new BaseException("\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    ");
    };
    return RadioControlValueAccessor;
  }());
  RadioControlValueAccessor.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',
      host: {
        '(change)': 'onChange()',
        '(blur)': 'onTouched()'
      },
      providers: [RADIO_VALUE_ACCESSOR]
    }]
  }];
  RadioControlValueAccessor.ctorParameters = [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}, {type: RadioControlRegistry}, {type: _angular_core.Injector}];
  RadioControlValueAccessor.propDecorators = {
    'name': [{type: _angular_core.Input}],
    'formControlName': [{type: _angular_core.Input}],
    'value': [{type: _angular_core.Input}]
  };
  var SELECT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return SelectControlValueAccessor;
    }),
    multi: true
  };
  function _buildValueString(id, value) {
    if (isBlank(id))
      return "" + value;
    if (!isPrimitive(value))
      value = 'Object';
    return StringWrapper.slice(id + ": " + value, 0, 50);
  }
  function _extractId(valueString) {
    return valueString.split(':')[0];
  }
  var SelectControlValueAccessor = (function() {
    function SelectControlValueAccessor(_renderer, _elementRef) {
      this._renderer = _renderer;
      this._elementRef = _elementRef;
      this._optionMap = new Map();
      this._idCounter = 0;
      this.onChange = function(_) {};
      this.onTouched = function() {};
    }
    SelectControlValueAccessor.prototype.writeValue = function(value) {
      this.value = value;
      var valueString = _buildValueString(this._getOptionId(value), value);
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);
    };
    SelectControlValueAccessor.prototype.registerOnChange = function(fn) {
      var _this = this;
      this.onChange = function(valueString) {
        _this.value = valueString;
        fn(_this._getOptionValue(valueString));
      };
    };
    SelectControlValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    SelectControlValueAccessor.prototype._registerOption = function() {
      return (this._idCounter++).toString();
    };
    SelectControlValueAccessor.prototype._getOptionId = function(value) {
      for (var _i = 0,
          _a = MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {
        var id = _a[_i];
        if (looseIdentical(this._optionMap.get(id), value))
          return id;
      }
      return null;
    };
    SelectControlValueAccessor.prototype._getOptionValue = function(valueString) {
      var value = this._optionMap.get(_extractId(valueString));
      return isPresent(value) ? value : valueString;
    };
    return SelectControlValueAccessor;
  }());
  SelectControlValueAccessor.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',
      host: {
        '(change)': 'onChange($event.target.value)',
        '(blur)': 'onTouched()'
      },
      providers: [SELECT_VALUE_ACCESSOR]
    }]
  }];
  SelectControlValueAccessor.ctorParameters = [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
  var NgSelectOption = (function() {
    function NgSelectOption(_element, _renderer, _select) {
      this._element = _element;
      this._renderer = _renderer;
      this._select = _select;
      if (isPresent(this._select))
        this.id = this._select._registerOption();
    }
    Object.defineProperty(NgSelectOption.prototype, "ngValue", {
      set: function(value) {
        if (this._select == null)
          return;
        this._select._optionMap.set(this.id, value);
        this._setElementValue(_buildValueString(this.id, value));
        this._select.writeValue(this._select.value);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgSelectOption.prototype, "value", {
      set: function(value) {
        this._setElementValue(value);
        if (isPresent(this._select))
          this._select.writeValue(this._select.value);
      },
      enumerable: true,
      configurable: true
    });
    NgSelectOption.prototype._setElementValue = function(value) {
      this._renderer.setElementProperty(this._element.nativeElement, 'value', value);
    };
    NgSelectOption.prototype.ngOnDestroy = function() {
      if (isPresent(this._select)) {
        this._select._optionMap.delete(this.id);
        this._select.writeValue(this._select.value);
      }
    };
    return NgSelectOption;
  }());
  NgSelectOption.decorators = [{
    type: _angular_core.Directive,
    args: [{selector: 'option'}]
  }];
  NgSelectOption.ctorParameters = [{type: _angular_core.ElementRef}, {type: _angular_core.Renderer}, {
    type: SelectControlValueAccessor,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Host}]
  }];
  NgSelectOption.propDecorators = {
    'ngValue': [{
      type: _angular_core.Input,
      args: ['ngValue']
    }],
    'value': [{
      type: _angular_core.Input,
      args: ['value']
    }]
  };
  var SELECT_MULTIPLE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return SelectMultipleControlValueAccessor;
    }),
    multi: true
  };
  function _buildValueString$1(id, value) {
    if (isBlank(id))
      return "" + value;
    if (isString(value))
      value = "'" + value + "'";
    if (!isPrimitive(value))
      value = 'Object';
    return StringWrapper.slice(id + ": " + value, 0, 50);
  }
  function _extractId$1(valueString) {
    return valueString.split(':')[0];
  }
  var SelectMultipleControlValueAccessor = (function() {
    function SelectMultipleControlValueAccessor() {
      this._optionMap = new Map();
      this._idCounter = 0;
      this.onChange = function(_) {};
      this.onTouched = function() {};
    }
    SelectMultipleControlValueAccessor.prototype.writeValue = function(value) {
      var _this = this;
      this.value = value;
      if (value == null)
        return;
      var values = value;
      var ids = values.map(function(v) {
        return _this._getOptionId(v);
      });
      this._optionMap.forEach(function(opt, o) {
        opt._setSelected(ids.indexOf(o.toString()) > -1);
      });
    };
    SelectMultipleControlValueAccessor.prototype.registerOnChange = function(fn) {
      var _this = this;
      this.onChange = function(_) {
        var selected = [];
        if (_.hasOwnProperty('selectedOptions')) {
          var options = _.selectedOptions;
          for (var i = 0; i < options.length; i++) {
            var opt = options.item(i);
            var val = _this._getOptionValue(opt.value);
            selected.push(val);
          }
        } else {
          var options = _.options;
          for (var i = 0; i < options.length; i++) {
            var opt = options.item(i);
            if (opt.selected) {
              var val = _this._getOptionValue(opt.value);
              selected.push(val);
            }
          }
        }
        fn(selected);
      };
    };
    SelectMultipleControlValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    SelectMultipleControlValueAccessor.prototype._registerOption = function(value) {
      var id = (this._idCounter++).toString();
      this._optionMap.set(id, value);
      return id;
    };
    SelectMultipleControlValueAccessor.prototype._getOptionId = function(value) {
      for (var _i = 0,
          _a = MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {
        var id = _a[_i];
        if (looseIdentical(this._optionMap.get(id)._value, value))
          return id;
      }
      return null;
    };
    SelectMultipleControlValueAccessor.prototype._getOptionValue = function(valueString) {
      var opt = this._optionMap.get(_extractId$1(valueString));
      return isPresent(opt) ? opt._value : valueString;
    };
    return SelectMultipleControlValueAccessor;
  }());
  SelectMultipleControlValueAccessor.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',
      host: {
        '(change)': 'onChange($event.target)',
        '(blur)': 'onTouched()'
      },
      providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]
    }]
  }];
  SelectMultipleControlValueAccessor.ctorParameters = [];
  var NgSelectMultipleOption = (function() {
    function NgSelectMultipleOption(_element, _renderer, _select) {
      this._element = _element;
      this._renderer = _renderer;
      this._select = _select;
      if (isPresent(this._select)) {
        this.id = this._select._registerOption(this);
      }
    }
    Object.defineProperty(NgSelectMultipleOption.prototype, "ngValue", {
      set: function(value) {
        if (this._select == null)
          return;
        this._value = value;
        this._setElementValue(_buildValueString$1(this.id, value));
        this._select.writeValue(this._select.value);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgSelectMultipleOption.prototype, "value", {
      set: function(value) {
        if (isPresent(this._select)) {
          this._value = value;
          this._setElementValue(_buildValueString$1(this.id, value));
          this._select.writeValue(this._select.value);
        } else {
          this._setElementValue(value);
        }
      },
      enumerable: true,
      configurable: true
    });
    NgSelectMultipleOption.prototype._setElementValue = function(value) {
      this._renderer.setElementProperty(this._element.nativeElement, 'value', value);
    };
    NgSelectMultipleOption.prototype._setSelected = function(selected) {
      this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);
    };
    NgSelectMultipleOption.prototype.ngOnDestroy = function() {
      if (isPresent(this._select)) {
        this._select._optionMap.delete(this.id);
        this._select.writeValue(this._select.value);
      }
    };
    return NgSelectMultipleOption;
  }());
  NgSelectMultipleOption.decorators = [{
    type: _angular_core.Directive,
    args: [{selector: 'option'}]
  }];
  NgSelectMultipleOption.ctorParameters = [{type: _angular_core.ElementRef}, {type: _angular_core.Renderer}, {
    type: SelectMultipleControlValueAccessor,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Host}]
  }];
  NgSelectMultipleOption.propDecorators = {
    'ngValue': [{
      type: _angular_core.Input,
      args: ['ngValue']
    }],
    'value': [{
      type: _angular_core.Input,
      args: ['value']
    }]
  };
  function controlPath(name, parent) {
    var p = ListWrapper.clone(parent.path);
    p.push(name);
    return p;
  }
  function setUpControl(control, dir) {
    if (isBlank(control))
      _throwError(dir, 'Cannot find control with');
    if (isBlank(dir.valueAccessor))
      _throwError(dir, 'No value accessor for form control with');
    control.validator = Validators.compose([control.validator, dir.validator]);
    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
    dir.valueAccessor.writeValue(control.value);
    dir.valueAccessor.registerOnChange(function(newValue) {
      dir.viewToModelUpdate(newValue);
      control.markAsDirty();
      control.setValue(newValue, {emitModelToViewChange: false});
    });
    control.registerOnChange(function(newValue, emitModelEvent) {
      dir.valueAccessor.writeValue(newValue);
      if (emitModelEvent)
        dir.viewToModelUpdate(newValue);
    });
    dir.valueAccessor.registerOnTouched(function() {
      return control.markAsTouched();
    });
  }
  function setUpFormContainer(control, dir) {
    if (isBlank(control))
      _throwError(dir, 'Cannot find control with');
    control.validator = Validators.compose([control.validator, dir.validator]);
    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
  }
  function _throwError(dir, message) {
    var messageEnd;
    if (dir.path.length > 1) {
      messageEnd = "path: '" + dir.path.join(' -> ') + "'";
    } else if (dir.path[0]) {
      messageEnd = "name: '" + dir.path + "'";
    } else {
      messageEnd = 'unspecified name attribute';
    }
    throw new BaseException(message + " " + messageEnd);
  }
  function composeValidators(validators) {
    return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;
  }
  function composeAsyncValidators(validators) {
    return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) : null;
  }
  function isPropertyUpdated(changes, viewModel) {
    if (!StringMapWrapper.contains(changes, 'model'))
      return false;
    var change = changes['model'];
    if (change.isFirstChange())
      return true;
    return !looseIdentical(viewModel, change.currentValue);
  }
  function selectValueAccessor(dir, valueAccessors) {
    if (isBlank(valueAccessors))
      return null;
    var defaultAccessor;
    var builtinAccessor;
    var customAccessor;
    valueAccessors.forEach(function(v) {
      if (hasConstructor(v, DefaultValueAccessor)) {
        defaultAccessor = v;
      } else if (hasConstructor(v, CheckboxControlValueAccessor) || hasConstructor(v, NumberValueAccessor) || hasConstructor(v, SelectControlValueAccessor) || hasConstructor(v, SelectMultipleControlValueAccessor) || hasConstructor(v, RadioControlValueAccessor)) {
        if (isPresent(builtinAccessor))
          _throwError(dir, 'More than one built-in value accessor matches form control with');
        builtinAccessor = v;
      } else {
        if (isPresent(customAccessor))
          _throwError(dir, 'More than one custom value accessor matches form control with');
        customAccessor = v;
      }
    });
    if (isPresent(customAccessor))
      return customAccessor;
    if (isPresent(builtinAccessor))
      return builtinAccessor;
    if (isPresent(defaultAccessor))
      return defaultAccessor;
    _throwError(dir, 'No valid value accessor for form control with');
    return null;
  }
  var VALID = 'VALID';
  var INVALID = 'INVALID';
  var PENDING = 'PENDING';
  function _find(control, path, delimiter) {
    if (isBlank(path))
      return null;
    if (!(path instanceof Array)) {
      path = path.split(delimiter);
    }
    if (path instanceof Array && ListWrapper.isEmpty(path))
      return null;
    return path.reduce(function(v, name) {
      if (v instanceof FormGroup) {
        return isPresent(v.controls[name]) ? v.controls[name] : null;
      } else if (v instanceof FormArray) {
        var index = name;
        return isPresent(v.at(index)) ? v.at(index) : null;
      } else {
        return null;
      }
    }, control);
  }
  function toObservable(r) {
    return isPromise(r) ? rxjs_observable_PromiseObservable.PromiseObservable.create(r) : r;
  }
  function coerceToValidator(validator) {
    return Array.isArray(validator) ? composeValidators(validator) : validator;
  }
  function coerceToAsyncValidator(asyncValidator) {
    return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;
  }
  var AbstractControl = (function() {
    function AbstractControl(validator, asyncValidator) {
      this.validator = validator;
      this.asyncValidator = asyncValidator;
      this._pristine = true;
      this._touched = false;
    }
    Object.defineProperty(AbstractControl.prototype, "value", {
      get: function() {
        return this._value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "status", {
      get: function() {
        return this._status;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "valid", {
      get: function() {
        return this._status === VALID;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "invalid", {
      get: function() {
        return this._status === INVALID;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "errors", {
      get: function() {
        return this._errors;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "pristine", {
      get: function() {
        return this._pristine;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "dirty", {
      get: function() {
        return !this.pristine;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "touched", {
      get: function() {
        return this._touched;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "untouched", {
      get: function() {
        return !this._touched;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "valueChanges", {
      get: function() {
        return this._valueChanges;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "statusChanges", {
      get: function() {
        return this._statusChanges;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "pending", {
      get: function() {
        return this._status == PENDING;
      },
      enumerable: true,
      configurable: true
    });
    AbstractControl.prototype.setAsyncValidators = function(newValidator) {
      this.asyncValidator = coerceToAsyncValidator(newValidator);
    };
    AbstractControl.prototype.clearAsyncValidators = function() {
      this.asyncValidator = null;
    };
    AbstractControl.prototype.setValidators = function(newValidator) {
      this.validator = coerceToValidator(newValidator);
    };
    AbstractControl.prototype.clearValidators = function() {
      this.validator = null;
    };
    AbstractControl.prototype.markAsTouched = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      onlySelf = normalizeBool(onlySelf);
      this._touched = true;
      if (isPresent(this._parent) && !onlySelf) {
        this._parent.markAsTouched({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype.markAsDirty = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      onlySelf = normalizeBool(onlySelf);
      this._pristine = false;
      if (isPresent(this._parent) && !onlySelf) {
        this._parent.markAsDirty({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype.markAsPristine = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._pristine = true;
      this._forEachChild(function(control) {
        control.markAsPristine({onlySelf: true});
      });
      if (isPresent(this._parent) && !onlySelf) {
        this._parent._updatePristine({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype.markAsUntouched = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._touched = false;
      this._forEachChild(function(control) {
        control.markAsUntouched({onlySelf: true});
      });
      if (isPresent(this._parent) && !onlySelf) {
        this._parent._updateTouched({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype.markAsPending = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      onlySelf = normalizeBool(onlySelf);
      this._status = PENDING;
      if (isPresent(this._parent) && !onlySelf) {
        this._parent.markAsPending({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype.setParent = function(parent) {
      this._parent = parent;
    };
    AbstractControl.prototype.updateValueAndValidity = function(_a) {
      var _b = _a === void 0 ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent;
      onlySelf = normalizeBool(onlySelf);
      emitEvent = isPresent(emitEvent) ? emitEvent : true;
      this._updateValue();
      this._errors = this._runValidator();
      this._status = this._calculateStatus();
      if (this._status == VALID || this._status == PENDING) {
        this._runAsyncValidator(emitEvent);
      }
      if (emitEvent) {
        this._valueChanges.emit(this._value);
        this._statusChanges.emit(this._status);
      }
      if (isPresent(this._parent) && !onlySelf) {
        this._parent.updateValueAndValidity({
          onlySelf: onlySelf,
          emitEvent: emitEvent
        });
      }
    };
    AbstractControl.prototype._runValidator = function() {
      return isPresent(this.validator) ? this.validator(this) : null;
    };
    AbstractControl.prototype._runAsyncValidator = function(emitEvent) {
      var _this = this;
      if (isPresent(this.asyncValidator)) {
        this._status = PENDING;
        this._cancelExistingSubscription();
        var obs = toObservable(this.asyncValidator(this));
        this._asyncValidationSubscription = obs.subscribe({next: function(res) {
            return _this.setErrors(res, {emitEvent: emitEvent});
          }});
      }
    };
    AbstractControl.prototype._cancelExistingSubscription = function() {
      if (isPresent(this._asyncValidationSubscription)) {
        this._asyncValidationSubscription.unsubscribe();
      }
    };
    AbstractControl.prototype.setErrors = function(errors, _a) {
      var emitEvent = (_a === void 0 ? {} : _a).emitEvent;
      emitEvent = isPresent(emitEvent) ? emitEvent : true;
      this._errors = errors;
      this._updateControlsErrors(emitEvent);
    };
    AbstractControl.prototype.find = function(path) {
      return _find(this, path, '/');
    };
    AbstractControl.prototype.get = function(path) {
      return _find(this, path, '.');
    };
    AbstractControl.prototype.getError = function(errorCode, path) {
      if (path === void 0) {
        path = null;
      }
      var control = isPresent(path) && !ListWrapper.isEmpty(path) ? this.find(path) : this;
      if (isPresent(control) && isPresent(control._errors)) {
        return StringMapWrapper.get(control._errors, errorCode);
      } else {
        return null;
      }
    };
    AbstractControl.prototype.hasError = function(errorCode, path) {
      if (path === void 0) {
        path = null;
      }
      return isPresent(this.getError(errorCode, path));
    };
    Object.defineProperty(AbstractControl.prototype, "root", {
      get: function() {
        var x = this;
        while (isPresent(x._parent)) {
          x = x._parent;
        }
        return x;
      },
      enumerable: true,
      configurable: true
    });
    AbstractControl.prototype._updateControlsErrors = function(emitEvent) {
      this._status = this._calculateStatus();
      if (emitEvent) {
        this._statusChanges.emit(this._status);
      }
      if (isPresent(this._parent)) {
        this._parent._updateControlsErrors(emitEvent);
      }
    };
    AbstractControl.prototype._initObservables = function() {
      this._valueChanges = new EventEmitter();
      this._statusChanges = new EventEmitter();
    };
    AbstractControl.prototype._calculateStatus = function() {
      if (isPresent(this._errors))
        return INVALID;
      if (this._anyControlsHaveStatus(PENDING))
        return PENDING;
      if (this._anyControlsHaveStatus(INVALID))
        return INVALID;
      return VALID;
    };
    AbstractControl.prototype._anyControlsHaveStatus = function(status) {
      return this._anyControls(function(control) {
        return control.status == status;
      });
    };
    AbstractControl.prototype._anyControlsDirty = function() {
      return this._anyControls(function(control) {
        return control.dirty;
      });
    };
    AbstractControl.prototype._anyControlsTouched = function() {
      return this._anyControls(function(control) {
        return control.touched;
      });
    };
    AbstractControl.prototype._updatePristine = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._pristine = !this._anyControlsDirty();
      if (isPresent(this._parent) && !onlySelf) {
        this._parent._updatePristine({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype._updateTouched = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._touched = this._anyControlsTouched();
      if (isPresent(this._parent) && !onlySelf) {
        this._parent._updateTouched({onlySelf: onlySelf});
      }
    };
    return AbstractControl;
  }());
  var FormControl = (function(_super) {
    __extends(FormControl, _super);
    function FormControl(value, validator, asyncValidator) {
      if (value === void 0) {
        value = null;
      }
      if (validator === void 0) {
        validator = null;
      }
      if (asyncValidator === void 0) {
        asyncValidator = null;
      }
      _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));
      this._onChange = [];
      this._value = value;
      this.updateValueAndValidity({
        onlySelf: true,
        emitEvent: false
      });
      this._initObservables();
    }
    FormControl.prototype.setValue = function(value, _a) {
      var _this = this;
      var _b = _a === void 0 ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent,
          emitModelToViewChange = _b.emitModelToViewChange,
          emitViewToModelChange = _b.emitViewToModelChange;
      emitModelToViewChange = isPresent(emitModelToViewChange) ? emitModelToViewChange : true;
      emitViewToModelChange = isPresent(emitViewToModelChange) ? emitViewToModelChange : true;
      this._value = value;
      if (this._onChange.length && emitModelToViewChange) {
        this._onChange.forEach(function(changeFn) {
          return changeFn(_this._value, emitViewToModelChange);
        });
      }
      this.updateValueAndValidity({
        onlySelf: onlySelf,
        emitEvent: emitEvent
      });
    };
    FormControl.prototype.patchValue = function(value, options) {
      if (options === void 0) {
        options = {};
      }
      this.setValue(value, options);
    };
    FormControl.prototype.updateValue = function(value, options) {
      if (options === void 0) {
        options = {};
      }
      this.setValue(value, options);
    };
    FormControl.prototype.reset = function(value, _a) {
      if (value === void 0) {
        value = null;
      }
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this.markAsPristine({onlySelf: onlySelf});
      this.markAsUntouched({onlySelf: onlySelf});
      this.setValue(value, {onlySelf: onlySelf});
    };
    FormControl.prototype._updateValue = function() {};
    FormControl.prototype._anyControls = function(condition) {
      return false;
    };
    FormControl.prototype.registerOnChange = function(fn) {
      this._onChange.push(fn);
    };
    FormControl.prototype._forEachChild = function(cb) {};
    return FormControl;
  }(AbstractControl));
  var FormGroup = (function(_super) {
    __extends(FormGroup, _super);
    function FormGroup(controls, optionals, validator, asyncValidator) {
      if (optionals === void 0) {
        optionals = null;
      }
      if (validator === void 0) {
        validator = null;
      }
      if (asyncValidator === void 0) {
        asyncValidator = null;
      }
      _super.call(this, validator, asyncValidator);
      this.controls = controls;
      this._optionals = isPresent(optionals) ? optionals : {};
      this._initObservables();
      this._setParentForControls();
      this.updateValueAndValidity({
        onlySelf: true,
        emitEvent: false
      });
    }
    FormGroup.prototype.registerControl = function(name, control) {
      if (this.controls[name])
        return this.controls[name];
      this.controls[name] = control;
      control.setParent(this);
      return control;
    };
    FormGroup.prototype.addControl = function(name, control) {
      this.registerControl(name, control);
      this.updateValueAndValidity();
    };
    FormGroup.prototype.removeControl = function(name) {
      StringMapWrapper.delete(this.controls, name);
      this.updateValueAndValidity();
    };
    FormGroup.prototype.include = function(controlName) {
      StringMapWrapper.set(this._optionals, controlName, true);
      this.updateValueAndValidity();
    };
    FormGroup.prototype.exclude = function(controlName) {
      StringMapWrapper.set(this._optionals, controlName, false);
      this.updateValueAndValidity();
    };
    FormGroup.prototype.contains = function(controlName) {
      var c = StringMapWrapper.contains(this.controls, controlName);
      return c && this._included(controlName);
    };
    FormGroup.prototype.setValue = function(value, _a) {
      var _this = this;
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._checkAllValuesPresent(value);
      StringMapWrapper.forEach(value, function(newValue, name) {
        _this._throwIfControlMissing(name);
        _this.controls[name].setValue(newValue, {onlySelf: true});
      });
      this.updateValueAndValidity({onlySelf: onlySelf});
    };
    FormGroup.prototype.patchValue = function(value, _a) {
      var _this = this;
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      StringMapWrapper.forEach(value, function(newValue, name) {
        if (_this.controls[name]) {
          _this.controls[name].patchValue(newValue, {onlySelf: true});
        }
      });
      this.updateValueAndValidity({onlySelf: onlySelf});
    };
    FormGroup.prototype.reset = function(value, _a) {
      if (value === void 0) {
        value = {};
      }
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._forEachChild(function(control, name) {
        control.reset(value[name], {onlySelf: true});
      });
      this.updateValueAndValidity({onlySelf: onlySelf});
      this._updatePristine({onlySelf: onlySelf});
      this._updateTouched({onlySelf: onlySelf});
    };
    FormGroup.prototype._throwIfControlMissing = function(name) {
      if (!Object.keys(this.controls).length) {
        throw new BaseException("\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
      }
      if (!this.controls[name]) {
        throw new BaseException("Cannot find form control with name: " + name + ".");
      }
    };
    FormGroup.prototype._forEachChild = function(cb) {
      StringMapWrapper.forEach(this.controls, cb);
    };
    FormGroup.prototype._setParentForControls = function() {
      var _this = this;
      this._forEachChild(function(control, name) {
        control.setParent(_this);
      });
    };
    FormGroup.prototype._updateValue = function() {
      this._value = this._reduceValue();
    };
    FormGroup.prototype._anyControls = function(condition) {
      var _this = this;
      var res = false;
      this._forEachChild(function(control, name) {
        res = res || (_this.contains(name) && condition(control));
      });
      return res;
    };
    FormGroup.prototype._reduceValue = function() {
      return this._reduceChildren({}, function(acc, control, name) {
        acc[name] = control.value;
        return acc;
      });
    };
    FormGroup.prototype._reduceChildren = function(initValue, fn) {
      var _this = this;
      var res = initValue;
      this._forEachChild(function(control, name) {
        if (_this._included(name)) {
          res = fn(res, control, name);
        }
      });
      return res;
    };
    FormGroup.prototype._included = function(controlName) {
      var isOptional = StringMapWrapper.contains(this._optionals, controlName);
      return !isOptional || StringMapWrapper.get(this._optionals, controlName);
    };
    FormGroup.prototype._checkAllValuesPresent = function(value) {
      this._forEachChild(function(control, name) {
        if (value[name] === undefined) {
          throw new BaseException("Must supply a value for form control with name: '" + name + "'.");
        }
      });
    };
    return FormGroup;
  }(AbstractControl));
  var FormArray = (function(_super) {
    __extends(FormArray, _super);
    function FormArray(controls, validator, asyncValidator) {
      if (validator === void 0) {
        validator = null;
      }
      if (asyncValidator === void 0) {
        asyncValidator = null;
      }
      _super.call(this, validator, asyncValidator);
      this.controls = controls;
      this._initObservables();
      this._setParentForControls();
      this.updateValueAndValidity({
        onlySelf: true,
        emitEvent: false
      });
    }
    FormArray.prototype.at = function(index) {
      return this.controls[index];
    };
    FormArray.prototype.push = function(control) {
      this.controls.push(control);
      control.setParent(this);
      this.updateValueAndValidity();
    };
    FormArray.prototype.insert = function(index, control) {
      ListWrapper.insert(this.controls, index, control);
      control.setParent(this);
      this.updateValueAndValidity();
    };
    FormArray.prototype.removeAt = function(index) {
      ListWrapper.removeAt(this.controls, index);
      this.updateValueAndValidity();
    };
    Object.defineProperty(FormArray.prototype, "length", {
      get: function() {
        return this.controls.length;
      },
      enumerable: true,
      configurable: true
    });
    FormArray.prototype.setValue = function(value, _a) {
      var _this = this;
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._checkAllValuesPresent(value);
      value.forEach(function(newValue, index) {
        _this._throwIfControlMissing(index);
        _this.at(index).setValue(newValue, {onlySelf: true});
      });
      this.updateValueAndValidity({onlySelf: onlySelf});
    };
    FormArray.prototype.patchValue = function(value, _a) {
      var _this = this;
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      value.forEach(function(newValue, index) {
        if (_this.at(index)) {
          _this.at(index).patchValue(newValue, {onlySelf: true});
        }
      });
      this.updateValueAndValidity({onlySelf: onlySelf});
    };
    FormArray.prototype.reset = function(value, _a) {
      if (value === void 0) {
        value = [];
      }
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._forEachChild(function(control, index) {
        control.reset(value[index], {onlySelf: true});
      });
      this.updateValueAndValidity({onlySelf: onlySelf});
      this._updatePristine({onlySelf: onlySelf});
      this._updateTouched({onlySelf: onlySelf});
    };
    FormArray.prototype._throwIfControlMissing = function(index) {
      if (!this.controls.length) {
        throw new BaseException("\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
      }
      if (!this.at(index)) {
        throw new BaseException("Cannot find form control at index " + index);
      }
    };
    FormArray.prototype._forEachChild = function(cb) {
      this.controls.forEach(function(control, index) {
        cb(control, index);
      });
    };
    FormArray.prototype._updateValue = function() {
      this._value = this.controls.map(function(control) {
        return control.value;
      });
    };
    FormArray.prototype._anyControls = function(condition) {
      return this.controls.some(function(control) {
        return condition(control);
      });
    };
    FormArray.prototype._setParentForControls = function() {
      var _this = this;
      this._forEachChild(function(control) {
        control.setParent(_this);
      });
    };
    FormArray.prototype._checkAllValuesPresent = function(value) {
      this._forEachChild(function(control, i) {
        if (value[i] === undefined) {
          throw new BaseException("Must supply a value for form control at index: " + i + ".");
        }
      });
    };
    return FormArray;
  }(AbstractControl));
  var ControlContainer = (function(_super) {
    __extends(ControlContainer, _super);
    function ControlContainer() {
      _super.apply(this, arguments);
    }
    Object.defineProperty(ControlContainer.prototype, "formDirective", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ControlContainer.prototype, "path", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    return ControlContainer;
  }(AbstractControlDirective));
  var formDirectiveProvider = {
    provide: ControlContainer,
    useExisting: _angular_core.forwardRef(function() {
      return NgForm;
    })
  };
  var resolvedPromise = Promise.resolve(null);
  var NgForm = (function(_super) {
    __extends(NgForm, _super);
    function NgForm(validators, asyncValidators) {
      _super.call(this);
      this._submitted = false;
      this.ngSubmit = new EventEmitter();
      this.form = new FormGroup({}, null, composeValidators(validators), composeAsyncValidators(asyncValidators));
    }
    Object.defineProperty(NgForm.prototype, "submitted", {
      get: function() {
        return this._submitted;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForm.prototype, "formDirective", {
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForm.prototype, "control", {
      get: function() {
        return this.form;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForm.prototype, "path", {
      get: function() {
        return [];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForm.prototype, "controls", {
      get: function() {
        return this.form.controls;
      },
      enumerable: true,
      configurable: true
    });
    NgForm.prototype.addControl = function(dir) {
      var _this = this;
      resolvedPromise.then(function() {
        var container = _this._findContainer(dir.path);
        dir._control = container.registerControl(dir.name, dir.control);
        setUpControl(dir.control, dir);
        dir.control.updateValueAndValidity({emitEvent: false});
      });
    };
    NgForm.prototype.getControl = function(dir) {
      return this.form.get(dir.path);
    };
    NgForm.prototype.removeControl = function(dir) {
      var _this = this;
      resolvedPromise.then(function() {
        var container = _this._findContainer(dir.path);
        if (isPresent(container)) {
          container.removeControl(dir.name);
        }
      });
    };
    NgForm.prototype.addFormGroup = function(dir) {
      var _this = this;
      resolvedPromise.then(function() {
        var container = _this._findContainer(dir.path);
        var group = new FormGroup({});
        setUpFormContainer(group, dir);
        container.registerControl(dir.name, group);
        group.updateValueAndValidity({emitEvent: false});
      });
    };
    NgForm.prototype.removeFormGroup = function(dir) {
      var _this = this;
      resolvedPromise.then(function() {
        var container = _this._findContainer(dir.path);
        if (isPresent(container)) {
          container.removeControl(dir.name);
        }
      });
    };
    NgForm.prototype.getFormGroup = function(dir) {
      return this.form.get(dir.path);
    };
    NgForm.prototype.updateModel = function(dir, value) {
      var _this = this;
      resolvedPromise.then(function() {
        var ctrl = _this.form.get(dir.path);
        ctrl.setValue(value);
      });
    };
    NgForm.prototype.setValue = function(value) {
      this.control.setValue(value);
    };
    NgForm.prototype.onSubmit = function() {
      this._submitted = true;
      this.ngSubmit.emit(null);
      return false;
    };
    NgForm.prototype.onReset = function() {
      this.form.reset();
    };
    NgForm.prototype._findContainer = function(path) {
      path.pop();
      return ListWrapper.isEmpty(path) ? this.form : this.form.get(path);
    };
    return NgForm;
  }(ControlContainer));
  NgForm.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',
      providers: [formDirectiveProvider],
      host: {
        '(submit)': 'onSubmit()',
        '(reset)': 'onReset()'
      },
      outputs: ['ngSubmit'],
      exportAs: 'ngForm'
    }]
  }];
  NgForm.ctorParameters = [{
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }];
  var AbstractFormGroupDirective = (function(_super) {
    __extends(AbstractFormGroupDirective, _super);
    function AbstractFormGroupDirective() {
      _super.apply(this, arguments);
    }
    AbstractFormGroupDirective.prototype.ngOnInit = function() {
      this._checkParentType();
      this.formDirective.addFormGroup(this);
    };
    AbstractFormGroupDirective.prototype.ngOnDestroy = function() {
      this.formDirective.removeFormGroup(this);
    };
    Object.defineProperty(AbstractFormGroupDirective.prototype, "control", {
      get: function() {
        return this.formDirective.getFormGroup(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractFormGroupDirective.prototype, "path", {
      get: function() {
        return controlPath(this.name, this._parent);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractFormGroupDirective.prototype, "formDirective", {
      get: function() {
        return this._parent.formDirective;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractFormGroupDirective.prototype, "validator", {
      get: function() {
        return composeValidators(this._validators);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractFormGroupDirective.prototype, "asyncValidator", {
      get: function() {
        return composeAsyncValidators(this._asyncValidators);
      },
      enumerable: true,
      configurable: true
    });
    AbstractFormGroupDirective.prototype._checkParentType = function() {};
    return AbstractFormGroupDirective;
  }(ControlContainer));
  var Examples = {
    formControlName: "\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });",
    formGroupName: "\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });",
    formArrayName: "\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; let i=index\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });",
    ngModelGroup: "\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>",
    ngModelWithFormGroup: "\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  "
  };
  var TemplateDrivenErrors = (function() {
    function TemplateDrivenErrors() {}
    TemplateDrivenErrors.modelParentException = function() {
      throw new BaseException("\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      " + Examples.formControlName + "\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      " + Examples.ngModelWithFormGroup);
    };
    TemplateDrivenErrors.formGroupNameException = function() {
      throw new BaseException("\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      " + Examples.formGroupName + "\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      " + Examples.ngModelGroup);
    };
    TemplateDrivenErrors.missingNameException = function() {
      throw new BaseException("If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">");
    };
    TemplateDrivenErrors.modelGroupParentException = function() {
      throw new BaseException("\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      " + Examples.formGroupName + "\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      " + Examples.ngModelGroup);
    };
    return TemplateDrivenErrors;
  }());
  var modelGroupProvider = {
    provide: ControlContainer,
    useExisting: _angular_core.forwardRef(function() {
      return NgModelGroup;
    })
  };
  var NgModelGroup = (function(_super) {
    __extends(NgModelGroup, _super);
    function NgModelGroup(parent, validators, asyncValidators) {
      _super.call(this);
      this._parent = parent;
      this._validators = validators;
      this._asyncValidators = asyncValidators;
    }
    NgModelGroup.prototype._checkParentType = function() {
      if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
        TemplateDrivenErrors.modelGroupParentException();
      }
    };
    return NgModelGroup;
  }(AbstractFormGroupDirective));
  NgModelGroup.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: '[ngModelGroup]',
      providers: [modelGroupProvider],
      exportAs: 'ngModelGroup'
    }]
  }];
  NgModelGroup.ctorParameters = [{
    type: ControlContainer,
    decorators: [{type: _angular_core.Host}, {type: _angular_core.SkipSelf}]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }];
  NgModelGroup.propDecorators = {'name': [{
      type: _angular_core.Input,
      args: ['ngModelGroup']
    }]};
  var formControlBinding = {
    provide: NgControl,
    useExisting: _angular_core.forwardRef(function() {
      return NgModel;
    })
  };
  var resolvedPromise$1 = Promise.resolve(null);
  var NgModel = (function(_super) {
    __extends(NgModel, _super);
    function NgModel(_parent, _validators, _asyncValidators, valueAccessors) {
      _super.call(this);
      this._parent = _parent;
      this._validators = _validators;
      this._asyncValidators = _asyncValidators;
      this._control = new FormControl();
      this._registered = false;
      this.update = new EventEmitter();
      this.valueAccessor = selectValueAccessor(this, valueAccessors);
    }
    NgModel.prototype.ngOnChanges = function(changes) {
      this._checkForErrors();
      if (!this._registered)
        this._setUpControl();
      if (isPropertyUpdated(changes, this.viewModel)) {
        this._updateValue(this.model);
        this.viewModel = this.model;
      }
    };
    NgModel.prototype.ngOnDestroy = function() {
      this.formDirective && this.formDirective.removeControl(this);
    };
    Object.defineProperty(NgModel.prototype, "control", {
      get: function() {
        return this._control;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModel.prototype, "path", {
      get: function() {
        return this._parent ? controlPath(this.name, this._parent) : [this.name];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModel.prototype, "formDirective", {
      get: function() {
        return this._parent ? this._parent.formDirective : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModel.prototype, "validator", {
      get: function() {
        return composeValidators(this._validators);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModel.prototype, "asyncValidator", {
      get: function() {
        return composeAsyncValidators(this._asyncValidators);
      },
      enumerable: true,
      configurable: true
    });
    NgModel.prototype.viewToModelUpdate = function(newValue) {
      this.viewModel = newValue;
      this.update.emit(newValue);
    };
    NgModel.prototype._setUpControl = function() {
      this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);
      this._registered = true;
    };
    NgModel.prototype._isStandalone = function() {
      return !this._parent || (this.options && this.options.standalone);
    };
    NgModel.prototype._setUpStandalone = function() {
      setUpControl(this._control, this);
      this._control.updateValueAndValidity({emitEvent: false});
    };
    NgModel.prototype._checkForErrors = function() {
      if (!this._isStandalone()) {
        this._checkParentType();
      }
      this._checkName();
    };
    NgModel.prototype._checkParentType = function() {
      if (!(this._parent instanceof NgModelGroup) && this._parent instanceof AbstractFormGroupDirective) {
        TemplateDrivenErrors.formGroupNameException();
      } else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
        TemplateDrivenErrors.modelParentException();
      }
    };
    NgModel.prototype._checkName = function() {
      if (this.options && this.options.name)
        this.name = this.options.name;
      if (!this._isStandalone() && !this.name) {
        TemplateDrivenErrors.missingNameException();
      }
    };
    NgModel.prototype._updateValue = function(value) {
      var _this = this;
      resolvedPromise$1.then(function() {
        _this.control.setValue(value, {emitViewToModelChange: false});
      });
    };
    return NgModel;
  }(NgControl));
  NgModel.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: '[ngModel]:not([formControlName]):not([formControl])',
      providers: [formControlBinding],
      exportAs: 'ngModel'
    }]
  }];
  NgModel.ctorParameters = [{
    type: ControlContainer,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Host}]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALUE_ACCESSOR]
    }]
  }];
  NgModel.propDecorators = {
    'model': [{
      type: _angular_core.Input,
      args: ['ngModel']
    }],
    'name': [{type: _angular_core.Input}],
    'options': [{
      type: _angular_core.Input,
      args: ['ngModelOptions']
    }],
    'update': [{
      type: _angular_core.Output,
      args: ['ngModelChange']
    }]
  };
  var formControlBinding$1 = {
    provide: NgControl,
    useExisting: _angular_core.forwardRef(function() {
      return FormControlDirective;
    })
  };
  var FormControlDirective = (function(_super) {
    __extends(FormControlDirective, _super);
    function FormControlDirective(_validators, _asyncValidators, valueAccessors) {
      _super.call(this);
      this._validators = _validators;
      this._asyncValidators = _asyncValidators;
      this.update = new EventEmitter();
      this.valueAccessor = selectValueAccessor(this, valueAccessors);
    }
    FormControlDirective.prototype.ngOnChanges = function(changes) {
      if (this._isControlChanged(changes)) {
        setUpControl(this.form, this);
        this.form.updateValueAndValidity({emitEvent: false});
      }
      if (isPropertyUpdated(changes, this.viewModel)) {
        this.form.setValue(this.model);
        this.viewModel = this.model;
      }
    };
    Object.defineProperty(FormControlDirective.prototype, "path", {
      get: function() {
        return [];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "validator", {
      get: function() {
        return composeValidators(this._validators);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "asyncValidator", {
      get: function() {
        return composeAsyncValidators(this._asyncValidators);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "control", {
      get: function() {
        return this.form;
      },
      enumerable: true,
      configurable: true
    });
    FormControlDirective.prototype.viewToModelUpdate = function(newValue) {
      this.viewModel = newValue;
      this.update.emit(newValue);
    };
    FormControlDirective.prototype._isControlChanged = function(changes) {
      return StringMapWrapper.contains(changes, 'form');
    };
    return FormControlDirective;
  }(NgControl));
  FormControlDirective.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: '[formControl]',
      providers: [formControlBinding$1],
      exportAs: 'ngForm'
    }]
  }];
  FormControlDirective.ctorParameters = [{
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALUE_ACCESSOR]
    }]
  }];
  FormControlDirective.propDecorators = {
    'form': [{
      type: _angular_core.Input,
      args: ['formControl']
    }],
    'model': [{
      type: _angular_core.Input,
      args: ['ngModel']
    }],
    'update': [{
      type: _angular_core.Output,
      args: ['ngModelChange']
    }]
  };
  var ReactiveErrors = (function() {
    function ReactiveErrors() {}
    ReactiveErrors.controlParentException = function() {
      throw new BaseException("formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + Examples.formControlName);
    };
    ReactiveErrors.ngModelGroupException = function() {
      throw new BaseException("formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        " + Examples.formGroupName + "\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        " + Examples.ngModelGroup);
    };
    ReactiveErrors.missingFormException = function() {
      throw new BaseException("formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       " + Examples.formControlName);
    };
    ReactiveErrors.groupParentException = function() {
      throw new BaseException("formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + Examples.formGroupName);
    };
    ReactiveErrors.arrayParentException = function() {
      throw new BaseException("formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        " + Examples.formArrayName);
    };
    return ReactiveErrors;
  }());
  var formDirectiveProvider$1 = {
    provide: ControlContainer,
    useExisting: _angular_core.forwardRef(function() {
      return FormGroupDirective;
    })
  };
  var FormGroupDirective = (function(_super) {
    __extends(FormGroupDirective, _super);
    function FormGroupDirective(_validators, _asyncValidators) {
      _super.call(this);
      this._validators = _validators;
      this._asyncValidators = _asyncValidators;
      this._submitted = false;
      this.directives = [];
      this.form = null;
      this.ngSubmit = new EventEmitter();
    }
    FormGroupDirective.prototype.ngOnChanges = function(changes) {
      this._checkFormPresent();
      if (StringMapWrapper.contains(changes, 'form')) {
        var sync = composeValidators(this._validators);
        this.form.validator = Validators.compose([this.form.validator, sync]);
        var async = composeAsyncValidators(this._asyncValidators);
        this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);
        this.form.updateValueAndValidity({
          onlySelf: true,
          emitEvent: false
        });
      }
      this._updateDomValue();
    };
    Object.defineProperty(FormGroupDirective.prototype, "submitted", {
      get: function() {
        return this._submitted;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormGroupDirective.prototype, "formDirective", {
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormGroupDirective.prototype, "control", {
      get: function() {
        return this.form;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormGroupDirective.prototype, "path", {
      get: function() {
        return [];
      },
      enumerable: true,
      configurable: true
    });
    FormGroupDirective.prototype.addControl = function(dir) {
      var ctrl = this.form.get(dir.path);
      setUpControl(ctrl, dir);
      ctrl.updateValueAndValidity({emitEvent: false});
      this.directives.push(dir);
    };
    FormGroupDirective.prototype.getControl = function(dir) {
      return this.form.get(dir.path);
    };
    FormGroupDirective.prototype.removeControl = function(dir) {
      ListWrapper.remove(this.directives, dir);
    };
    FormGroupDirective.prototype.addFormGroup = function(dir) {
      var ctrl = this.form.get(dir.path);
      setUpFormContainer(ctrl, dir);
      ctrl.updateValueAndValidity({emitEvent: false});
    };
    FormGroupDirective.prototype.removeFormGroup = function(dir) {};
    FormGroupDirective.prototype.getFormGroup = function(dir) {
      return this.form.get(dir.path);
    };
    FormGroupDirective.prototype.addFormArray = function(dir) {
      var ctrl = this.form.get(dir.path);
      setUpFormContainer(ctrl, dir);
      ctrl.updateValueAndValidity({emitEvent: false});
    };
    FormGroupDirective.prototype.removeFormArray = function(dir) {};
    FormGroupDirective.prototype.getFormArray = function(dir) {
      return this.form.get(dir.path);
    };
    FormGroupDirective.prototype.updateModel = function(dir, value) {
      var ctrl = this.form.get(dir.path);
      ctrl.setValue(value);
    };
    FormGroupDirective.prototype.onSubmit = function() {
      this._submitted = true;
      this.ngSubmit.emit(null);
      return false;
    };
    FormGroupDirective.prototype.onReset = function() {
      this.form.reset();
    };
    FormGroupDirective.prototype._updateDomValue = function() {
      var _this = this;
      this.directives.forEach(function(dir) {
        var ctrl = _this.form.get(dir.path);
        dir.valueAccessor.writeValue(ctrl.value);
      });
    };
    FormGroupDirective.prototype._checkFormPresent = function() {
      if (isBlank(this.form)) {
        ReactiveErrors.missingFormException();
      }
    };
    return FormGroupDirective;
  }(ControlContainer));
  FormGroupDirective.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: '[formGroup]',
      providers: [formDirectiveProvider$1],
      host: {
        '(submit)': 'onSubmit()',
        '(reset)': 'onReset()'
      },
      exportAs: 'ngForm'
    }]
  }];
  FormGroupDirective.ctorParameters = [{
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }];
  FormGroupDirective.propDecorators = {
    'form': [{
      type: _angular_core.Input,
      args: ['formGroup']
    }],
    'ngSubmit': [{type: _angular_core.Output}]
  };
  var formGroupNameProvider = {
    provide: ControlContainer,
    useExisting: _angular_core.forwardRef(function() {
      return FormGroupName;
    })
  };
  var FormGroupName = (function(_super) {
    __extends(FormGroupName, _super);
    function FormGroupName(parent, validators, asyncValidators) {
      _super.call(this);
      this._parent = parent;
      this._validators = validators;
      this._asyncValidators = asyncValidators;
    }
    FormGroupName.prototype._checkParentType = function() {
      if (_hasInvalidParent(this._parent)) {
        ReactiveErrors.groupParentException();
      }
    };
    return FormGroupName;
  }(AbstractFormGroupDirective));
  FormGroupName.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: '[formGroupName]',
      providers: [formGroupNameProvider]
    }]
  }];
  FormGroupName.ctorParameters = [{
    type: ControlContainer,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Host}, {type: _angular_core.SkipSelf}]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }];
  FormGroupName.propDecorators = {'name': [{
      type: _angular_core.Input,
      args: ['formGroupName']
    }]};
  var formArrayNameProvider = {
    provide: ControlContainer,
    useExisting: _angular_core.forwardRef(function() {
      return FormArrayName;
    })
  };
  var FormArrayName = (function(_super) {
    __extends(FormArrayName, _super);
    function FormArrayName(parent, validators, asyncValidators) {
      _super.call(this);
      this._parent = parent;
      this._validators = validators;
      this._asyncValidators = asyncValidators;
    }
    FormArrayName.prototype.ngOnInit = function() {
      this._checkParentType();
      this.formDirective.addFormArray(this);
    };
    FormArrayName.prototype.ngOnDestroy = function() {
      this.formDirective.removeFormArray(this);
    };
    Object.defineProperty(FormArrayName.prototype, "control", {
      get: function() {
        return this.formDirective.getFormArray(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormArrayName.prototype, "formDirective", {
      get: function() {
        return this._parent.formDirective;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormArrayName.prototype, "path", {
      get: function() {
        return controlPath(this.name, this._parent);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormArrayName.prototype, "validator", {
      get: function() {
        return composeValidators(this._validators);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormArrayName.prototype, "asyncValidator", {
      get: function() {
        return composeAsyncValidators(this._asyncValidators);
      },
      enumerable: true,
      configurable: true
    });
    FormArrayName.prototype._checkParentType = function() {
      if (_hasInvalidParent(this._parent)) {
        ReactiveErrors.arrayParentException();
      }
    };
    return FormArrayName;
  }(ControlContainer));
  FormArrayName.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: '[formArrayName]',
      providers: [formArrayNameProvider]
    }]
  }];
  FormArrayName.ctorParameters = [{
    type: ControlContainer,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Host}, {type: _angular_core.SkipSelf}]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }];
  FormArrayName.propDecorators = {'name': [{
      type: _angular_core.Input,
      args: ['formArrayName']
    }]};
  function _hasInvalidParent(parent) {
    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) && !(parent instanceof FormArrayName);
  }
  var controlNameBinding = {
    provide: NgControl,
    useExisting: _angular_core.forwardRef(function() {
      return FormControlName;
    })
  };
  var FormControlName = (function(_super) {
    __extends(FormControlName, _super);
    function FormControlName(_parent, _validators, _asyncValidators, valueAccessors) {
      _super.call(this);
      this._parent = _parent;
      this._validators = _validators;
      this._asyncValidators = _asyncValidators;
      this._added = false;
      this.update = new EventEmitter();
      this.valueAccessor = selectValueAccessor(this, valueAccessors);
    }
    FormControlName.prototype.ngOnChanges = function(changes) {
      if (!this._added) {
        this._checkParentType();
        this.formDirective.addControl(this);
        this._added = true;
      }
      if (isPropertyUpdated(changes, this.viewModel)) {
        this.viewModel = this.model;
        this.formDirective.updateModel(this, this.model);
      }
    };
    FormControlName.prototype.ngOnDestroy = function() {
      this.formDirective.removeControl(this);
    };
    FormControlName.prototype.viewToModelUpdate = function(newValue) {
      this.viewModel = newValue;
      this.update.emit(newValue);
    };
    Object.defineProperty(FormControlName.prototype, "path", {
      get: function() {
        return controlPath(this.name, this._parent);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormControlName.prototype, "formDirective", {
      get: function() {
        return this._parent.formDirective;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormControlName.prototype, "validator", {
      get: function() {
        return composeValidators(this._validators);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormControlName.prototype, "asyncValidator", {
      get: function() {
        return composeAsyncValidators(this._asyncValidators);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormControlName.prototype, "control", {
      get: function() {
        return this.formDirective.getControl(this);
      },
      enumerable: true,
      configurable: true
    });
    FormControlName.prototype._checkParentType = function() {
      if (!(this._parent instanceof FormGroupName) && this._parent instanceof AbstractFormGroupDirective) {
        ReactiveErrors.ngModelGroupException();
      } else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) && !(this._parent instanceof FormArrayName)) {
        ReactiveErrors.controlParentException();
      }
    };
    return FormControlName;
  }(NgControl));
  FormControlName.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: '[formControlName]',
      providers: [controlNameBinding]
    }]
  }];
  FormControlName.ctorParameters = [{
    type: ControlContainer,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Host}, {type: _angular_core.SkipSelf}]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALUE_ACCESSOR]
    }]
  }];
  FormControlName.propDecorators = {
    'name': [{
      type: _angular_core.Input,
      args: ['formControlName']
    }],
    'model': [{
      type: _angular_core.Input,
      args: ['ngModel']
    }],
    'update': [{
      type: _angular_core.Output,
      args: ['ngModelChange']
    }]
  };
  var REQUIRED = Validators.required;
  var REQUIRED_VALIDATOR = {
    provide: NG_VALIDATORS,
    useValue: REQUIRED,
    multi: true
  };
  var RequiredValidator = (function() {
    function RequiredValidator() {}
    return RequiredValidator;
  }());
  RequiredValidator.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: '[required][formControlName],[required][formControl],[required][ngModel]',
      providers: [REQUIRED_VALIDATOR]
    }]
  }];
  var MIN_LENGTH_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: _angular_core.forwardRef(function() {
      return MinLengthValidator;
    }),
    multi: true
  };
  var MinLengthValidator = (function() {
    function MinLengthValidator(minLength) {
      this._validator = Validators.minLength(NumberWrapper.parseInt(minLength, 10));
    }
    MinLengthValidator.prototype.validate = function(c) {
      return this._validator(c);
    };
    return MinLengthValidator;
  }());
  MinLengthValidator.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',
      providers: [MIN_LENGTH_VALIDATOR]
    }]
  }];
  MinLengthValidator.ctorParameters = [{
    type: undefined,
    decorators: [{
      type: _angular_core.Attribute,
      args: ['minlength']
    }]
  }];
  var MAX_LENGTH_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: _angular_core.forwardRef(function() {
      return MaxLengthValidator;
    }),
    multi: true
  };
  var MaxLengthValidator = (function() {
    function MaxLengthValidator(maxLength) {
      this._validator = Validators.maxLength(NumberWrapper.parseInt(maxLength, 10));
    }
    MaxLengthValidator.prototype.validate = function(c) {
      return this._validator(c);
    };
    return MaxLengthValidator;
  }());
  MaxLengthValidator.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',
      providers: [MAX_LENGTH_VALIDATOR]
    }]
  }];
  MaxLengthValidator.ctorParameters = [{
    type: undefined,
    decorators: [{
      type: _angular_core.Attribute,
      args: ['maxlength']
    }]
  }];
  var PATTERN_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: _angular_core.forwardRef(function() {
      return PatternValidator;
    }),
    multi: true
  };
  var PatternValidator = (function() {
    function PatternValidator(pattern) {
      this._validator = Validators.pattern(pattern);
    }
    PatternValidator.prototype.validate = function(c) {
      return this._validator(c);
    };
    return PatternValidator;
  }());
  PatternValidator.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',
      providers: [PATTERN_VALIDATOR]
    }]
  }];
  PatternValidator.ctorParameters = [{
    type: undefined,
    decorators: [{
      type: _angular_core.Attribute,
      args: ['pattern']
    }]
  }];
  var SHARED_FORM_DIRECTIVES = [NgSelectOption, NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator];
  var TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];
  var REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];
  var FORM_DIRECTIVES = [TEMPLATE_DRIVEN_DIRECTIVES, SHARED_FORM_DIRECTIVES];
  var REACTIVE_FORM_DIRECTIVES = [REACTIVE_DRIVEN_DIRECTIVES, SHARED_FORM_DIRECTIVES];
  var InternalFormsSharedModule = (function() {
    function InternalFormsSharedModule() {}
    return InternalFormsSharedModule;
  }());
  InternalFormsSharedModule.decorators = [{
    type: _angular_core.NgModule,
    args: [{
      declarations: SHARED_FORM_DIRECTIVES,
      exports: SHARED_FORM_DIRECTIVES
    }]
  }];
  var FormBuilder = (function() {
    function FormBuilder() {}
    FormBuilder.prototype.group = function(controlsConfig, extra) {
      if (extra === void 0) {
        extra = null;
      }
      var controls = this._reduceControls(controlsConfig);
      var optionals = (isPresent(extra) ? StringMapWrapper.get(extra, 'optionals') : null);
      var validator = isPresent(extra) ? StringMapWrapper.get(extra, 'validator') : null;
      var asyncValidator = isPresent(extra) ? StringMapWrapper.get(extra, 'asyncValidator') : null;
      return new FormGroup(controls, optionals, validator, asyncValidator);
    };
    FormBuilder.prototype.control = function(value, validator, asyncValidator) {
      if (validator === void 0) {
        validator = null;
      }
      if (asyncValidator === void 0) {
        asyncValidator = null;
      }
      return new FormControl(value, validator, asyncValidator);
    };
    FormBuilder.prototype.array = function(controlsConfig, validator, asyncValidator) {
      var _this = this;
      if (validator === void 0) {
        validator = null;
      }
      if (asyncValidator === void 0) {
        asyncValidator = null;
      }
      var controls = controlsConfig.map(function(c) {
        return _this._createControl(c);
      });
      return new FormArray(controls, validator, asyncValidator);
    };
    FormBuilder.prototype._reduceControls = function(controlsConfig) {
      var _this = this;
      var controls = {};
      StringMapWrapper.forEach(controlsConfig, function(controlConfig, controlName) {
        controls[controlName] = _this._createControl(controlConfig);
      });
      return controls;
    };
    FormBuilder.prototype._createControl = function(controlConfig) {
      if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup || controlConfig instanceof FormArray) {
        return controlConfig;
      } else if (isArray(controlConfig)) {
        var value = controlConfig[0];
        var validator = controlConfig.length > 1 ? controlConfig[1] : null;
        var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
        return this.control(value, validator, asyncValidator);
      } else {
        return this.control(controlConfig);
      }
    };
    return FormBuilder;
  }());
  FormBuilder.decorators = [{type: _angular_core.Injectable}];
  var FORM_PROVIDERS = [RadioControlRegistry];
  var REACTIVE_FORM_PROVIDERS = [FormBuilder, RadioControlRegistry];
  var FormsModule = (function() {
    function FormsModule() {}
    return FormsModule;
  }());
  FormsModule.decorators = [{
    type: _angular_core.NgModule,
    args: [{
      declarations: TEMPLATE_DRIVEN_DIRECTIVES,
      providers: [FORM_PROVIDERS],
      exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]
    }]
  }];
  var ReactiveFormsModule = (function() {
    function ReactiveFormsModule() {}
    return ReactiveFormsModule;
  }());
  ReactiveFormsModule.decorators = [{
    type: _angular_core.NgModule,
    args: [{
      declarations: [REACTIVE_DRIVEN_DIRECTIVES],
      providers: [REACTIVE_FORM_PROVIDERS],
      exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]
    }]
  }];
  function disableDeprecatedForms() {
    return [];
  }
  function provideForms() {
    return [{
      provide: _angular_core.PLATFORM_DIRECTIVES,
      useValue: FORM_DIRECTIVES,
      multi: true
    }, REACTIVE_FORM_PROVIDERS];
  }
  exports.FORM_DIRECTIVES = FORM_DIRECTIVES;
  exports.REACTIVE_FORM_DIRECTIVES = REACTIVE_FORM_DIRECTIVES;
  exports.AbstractControlDirective = AbstractControlDirective;
  exports.AbstractFormGroupDirective = AbstractFormGroupDirective;
  exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;
  exports.ControlContainer = ControlContainer;
  exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR;
  exports.DefaultValueAccessor = DefaultValueAccessor;
  exports.NgControl = NgControl;
  exports.NgControlStatus = NgControlStatus;
  exports.NgForm = NgForm;
  exports.NgModel = NgModel;
  exports.NgModelGroup = NgModelGroup;
  exports.FormControlDirective = FormControlDirective;
  exports.FormControlName = FormControlName;
  exports.FormGroupDirective = FormGroupDirective;
  exports.FormArrayName = FormArrayName;
  exports.FormGroupName = FormGroupName;
  exports.NgSelectOption = NgSelectOption;
  exports.SelectControlValueAccessor = SelectControlValueAccessor;
  exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;
  exports.MaxLengthValidator = MaxLengthValidator;
  exports.MinLengthValidator = MinLengthValidator;
  exports.PatternValidator = PatternValidator;
  exports.RequiredValidator = RequiredValidator;
  exports.FormBuilder = FormBuilder;
  exports.AbstractControl = AbstractControl;
  exports.FormArray = FormArray;
  exports.FormControl = FormControl;
  exports.FormGroup = FormGroup;
  exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;
  exports.NG_VALIDATORS = NG_VALIDATORS;
  exports.Validators = Validators;
  exports.FORM_PROVIDERS = FORM_PROVIDERS;
  exports.REACTIVE_FORM_PROVIDERS = REACTIVE_FORM_PROVIDERS;
  exports.FormsModule = FormsModule;
  exports.ReactiveFormsModule = ReactiveFormsModule;
  exports.disableDeprecatedForms = disableDeprecatedForms;
  exports.provideForms = provideForms;
}));

})();
$__System.registerDynamic('app/07/077Model-driven Forms/passwordValidators.js', [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var PasswordValidators = function () {
        function PasswordValidators() {}
        PasswordValidators.complexPassword = function (control) {
            var minLength = 3;
            // We bypass this validation rule if the field is empty, assuming
            // it is valid. At this point, the required validator will kick in
            // and asks the user to type a value. With this technique, we'll 
            // display only a single validation message at a time, rather than:
            // 
            // * This field is required.
            // * Password doesn't match complexity rules.
            //
            if (control.value == '') return null;
            if (control.value.length < minLength)
                // Note that I'm returning an object, instead of:
                // 
                // return { complexPassword: true }
                //
                // This will give the client additional data about the 
                // validation and why it failed. 
                return {
                    complexPassword: {
                        minLength: minLength
                    }
                };
            return null;
        };
        PasswordValidators.passwordsShouldMatch = function (group) {
            var newPassword = group.find('newPassword').value;
            var confirmPassword = group.find('confirmPassword').value;
            // If either of these fields is empty, the validation 
            // will be bypassed. We expect the required validator to be 
            // applied first. 
            if (newPassword == '' || confirmPassword == '') return null;
            if (newPassword != confirmPassword) return { passwordsShouldMatch: true };
            return null;
        };
        return PasswordValidators;
    }();
    exports.PasswordValidators = PasswordValidators;
    

    return module.exports;
});
$__System.registerDynamic("app/07/077Model-driven Forms/change-password-form.component.js", ["node_modules/@angular/core/bundles/core.umd.js", "node_modules/@angular/forms/bundles/forms.umd.js", "app/07/077Model-driven Forms/passwordValidators.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var forms_1 = $__require("node_modules/@angular/forms/bundles/forms.umd.js");
    var passwordValidators_1 = $__require("app/07/077Model-driven Forms/passwordValidators.js");
    var ChangePasswordFormComponent = function () {
        function ChangePasswordFormComponent(fb) {
            this.ng2Form = fb.group({
                oldPassword: ['', forms_1.Validators.required],
                newPassword: ['', forms_1.Validators.compose([forms_1.Validators.required, passwordValidators_1.PasswordValidators.complexPassword])],
                // Note that here is no need to apply complexPassword validator
                // to confirm password field. It's sufficient to apply it only to
                // new password field. Next, passwordsShouldMatch validator
                // will compare confirm password with new password and this will
                // implicitly enforce that confirm password should match complexity
                // rules. 
                confirmPassword: ['', forms_1.Validators.required]
            }, { validator: passwordValidators_1.PasswordValidators.passwordsShouldMatch });
        }
        ChangePasswordFormComponent.prototype.changePassword = function (arg) {
            // Validating the oldPassword on submit. In a real-world application
            // here, we'll use a service to call the server. The server would
            // tell us that the old password does not match. 
            var oldPassword = this.ng2Form.find('oldPassword');
            if (oldPassword.value != '1234') oldPassword.setErrors({ validOldPassword: true });
            if (this.ng2Form.valid) alert("Password successfully changed.");
        };
        return ChangePasswordFormComponent;
    }();
    ChangePasswordFormComponent = __decorate([core_1.Component({
        selector: 'change-password-form',
        //moduleId: module.id,
        //templateUrl:'change-password-form.html',
        template: "",
        styles: [""]
    }), __metadata("design:paramtypes", [forms_1.FormBuilder])], ChangePasswordFormComponent);
    exports.ChangePasswordFormComponent = ChangePasswordFormComponent;
    

    return module.exports;
});
$__System.registerDynamic("app/07/app.module.js", ["node_modules/@angular/core/bundles/core.umd.js", "node_modules/@angular/forms/bundles/forms.umd.js", "node_modules/@angular/platform-browser/bundles/platform-browser.umd.js", "app/07/app.component.js", "app/07/069SignUpForm/signup-form.component.js", "app/07/077Model-driven Forms/change-password-form.component.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var forms_1 = $__require("node_modules/@angular/forms/bundles/forms.umd.js");
    var platform_browser_1 = $__require("node_modules/@angular/platform-browser/bundles/platform-browser.umd.js");
    var app_component_1 = $__require("app/07/app.component.js");
    var signup_form_component_1 = $__require("app/07/069SignUpForm/signup-form.component.js");
    var change_password_form_component_1 = $__require("app/07/077Model-driven Forms/change-password-form.component.js");
    var AppModule07 = function () {
        function AppModule07() {}
        return AppModule07;
    }();
    AppModule07 = __decorate([core_1.NgModule({
        imports: [platform_browser_1.BrowserModule, forms_1.FormsModule, forms_1.ReactiveFormsModule],
        declarations: [app_component_1.BuildingFormswithComplexValidation, signup_form_component_1.SignUpFormComponent, change_password_form_component_1.ChangePasswordFormComponent],
        bootstrap: [app_component_1.BuildingFormswithComplexValidation]
    }), __metadata("design:paramtypes", [])], AppModule07);
    exports.AppModule07 = AppModule07;
    

    return module.exports;
});
$__System.registerDynamic("app/08/app.service.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var AppService = function () {
        function AppService() {}
        AppService.prototype.getNotes = function () {
            return [{
                title: "Callback Hell",
                description: "",
                note: "\tnested callbacks\n\tharder to read than flat code that essentially \"awaits\" last line\n\tparallel, series, and combinations not handled. everything is done as a waterfall\n\thave to handle errors in each one"
            }, {
                title: "Creating Observables",
                description: "",
                note: "\tObservable.empty()\n\t\treturns an empty observable that terminates normally\n\tObservable.never()\n\t\treturns an empty observable that never terminates\n\tObservable.throw()\n\t\treturns an empty observable that throws an error\n\tObservable.from\n\tObservable.fromPromise(somePromise)\n\tObservable.fromArray([1, 2, 3])\n\t\treturns an observable with the same number of items as base\n\tObservable.fromEvent(_form, \"keyup\");\n\tObservable.of([1, 2, 3])\n\t\treturns an observable of one item\n\tObservable.range(1, 5)\n\t\treturns an observable with five items\n\tDOM Events\n\tWeb Sockets\n\tAJAX"
            }, {
                title: "Transforming Observables",
                description: "",
                note: "\t.map(x=>x*2)\n\t\ttransform each item\n\t.flatMap(x=>return Observable.fromPromise())\n\t\tif map function uses async function, it will return an observable for each value\n\t\t.map(x=>Observable.timer(100))\n\t\tso you would have to merge all the items following two statements do the same thing\n\t\t.map(x=>Observable.timer(100).mergeAll())\n\t\t.flatmap(x=>Observable.timer(100))"
            }, {
                title: "Filtering Observables",
                description: "",
                note: "\t.debounce(300)\n\t\tthrottle calling for specificed milliseconds\n\t.distinct()\n\t\temits items that have not been emitted before\n\t.distinctUntilChanged()\n\t\temits items that are different from the previous item\n\t.elementAt(3)\n\t\temit only item n emitted by an Observable\n\t.filter(x=>x ==3)\n\t\temit only those items from an Observable that pass a predicate test\n\t.ignoreElements()\n\t\tdon't emit elements, only the completed signal\n\t.last()\n\t\temit only the last item emitted by an Observable\n\t.skip(3)\n\t\tskip n emissions\n\t.take(3)\n\t\ttake n emissions then complete"
            }, {
                title: "Combining Observables",
                description: "",
                note: "\tObservable.forkJoin(\n\t\tthis._gitHubService.getUser(this.username), \n\t\tthis._gitHubService.getFollowers(this.username)\n\t)\n\t.subscribe(\n\t\tres => {\n\t\t\tthis.user = res[0];\n\t\t\tthis.followers = res[1];\n\t\t}, \n\t\tnull, \n\t\t() => { this.isLoading = false; })"
            }, {
                title: "Cancelling Subscriptions",
                description: "",
                note: "\tvar subscription = keyups.subscribe(data=>console.log(data));\n\tsubscription.unsubscribe();"
            }, {
                title: "Error Handling",
                description: "",
                note: ""
            }, {
                title: "Importing Operators",
                description: "",
                note: ""
            }];
        };
        return AppService;
    }();
    exports.AppService = AppService;
    

    return module.exports;
});
$__System.registerDynamic("app/08/app.component.js", ["node_modules/@angular/core/bundles/core.umd.js", "app/08/app.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var app_service_1 = $__require("app/08/app.service.js");
    var IntroductiontoReactiveExtensions = function () {
        function IntroductiontoReactiveExtensions(noteService) {
            this.items = [];
            this.items = noteService.getNotes();
        }
        return IntroductiontoReactiveExtensions;
    }();
    IntroductiontoReactiveExtensions = __decorate([core_1.Component({
        selector: 'component',
        moduleId: module.id,
        templateUrl: 'app.html',
        styleUrls: ['app.css'],
        providers: [app_service_1.AppService]
    }), __metadata("design:paramtypes", [app_service_1.AppService])], IntroductiontoReactiveExtensions);
    exports.IntroductiontoReactiveExtensions = IntroductiontoReactiveExtensions;
    

    return module.exports;
});
$__System.registerDynamic("app/08/081SeedForObservables/app.component.js", ["node_modules/@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var AppComponent = function () {
        function AppComponent() {}
        return AppComponent;
    }();
    AppComponent = __decorate([core_1.Component({
        selector: 'my-app',
        template: "\n        <input id=\"search\" type=\"text\" class=\"form-control\">\n    "
    }), __metadata("design:paramtypes", [])], AppComponent);
    exports.AppComponent = AppComponent;
    

    return module.exports;
});
$__System.registerDynamic("app/08/app.module.js", ["node_modules/@angular/core/bundles/core.umd.js", "node_modules/@angular/platform-browser/bundles/platform-browser.umd.js", "app/08/app.component.js", "app/08/081SeedForObservables/app.component.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var platform_browser_1 = $__require("node_modules/@angular/platform-browser/bundles/platform-browser.umd.js");
    var app_component_1 = $__require("app/08/app.component.js");
    var app_component_2 = $__require("app/08/081SeedForObservables/app.component.js");
    var AppModule08 = function () {
        function AppModule08() {}
        return AppModule08;
    }();
    AppModule08 = __decorate([core_1.NgModule({
        imports: [platform_browser_1.BrowserModule],
        declarations: [app_component_1.IntroductiontoReactiveExtensions, app_component_2.AppComponent],
        bootstrap: [app_component_1.IntroductiontoReactiveExtensions]
    }), __metadata("design:paramtypes", [])], AppModule08);
    exports.AppModule08 = AppModule08;
    

    return module.exports;
});
$__System.registerDynamic("app/09/app.service.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var AppService = function () {
        function AppService() {}
        AppService.prototype.getNotes = function () {
            return [{
                title: "RESTful API",
                description: "",
                note: "\tRepresentational state transfer: GET, PUT, POST, DELETE\n\tstateless server: same call gets same data"
            }, {
                title: "get Data",
                description: "",
                note: "get Data\n\timport {Http} from 'angular2/http';\n    getUser(username){\n\t\treturn this._http.get(this._baseUrl + username)\n\t\t\t.map(res => res.json());\n    }"
            }, {
                title: "send Data",
                description: "",
                note: "\tcreatePost(post){\n\t\treturn this._http.post(this._baseUrl,JSON.stringify(post))\n\t\t\t.map(res => res.json());\n\t}"
            }, {
                title: "Component Lifecycle Hooks",
                description: "",
                note: "\timport {Component, OnInit} from 'angular2/core';\n\texport class GitHubProfileComponent implements OnInit {\n\t\tngOnInit(){\n\t\t\tthis._postService.getPosts().subscribe(x=>console.log(x));\n\t\t}\n\t}\n\tOnDestroy\n\tDoCheck\n\tOnChanges\n\tAfterContentInit\n\tAfterContentChecked\n\tAfterViewInit\n\tAfterViewChecked"
            }, {
                title: "Static Type Checking",
                description: "used for intellisense",
                note: "\texport interface Post{\n\t\tuserId:number;\n\t\tid?:number\n\t}\n\tgetPosts():Observable<Post[]>{\n\t\treturn this._http.get(this._baseUrl + username)\n\t\t\t.map(res => res.json());\n\t}"
            }, {
                title: "Promises",
                description: "",
                note: "\t.map()\n\t.toPromise();"
            }, {
                title: "CORS/JSONP",
                description: "",
                note: "\tJSONP only supports get requests\n\tproviders:[JSONP_PROVIDERS]\n\texport class PostService{\n\t\tconstructor(private _jsonp:Jsonp){}\n\t\tgetPosts(){return this._jsonp.get(\"url\");}\n\t}\n\tCORS has to enable your domain from their server\n\tvar headers = new Headers({\"access-control-request-method\":\"POST\"});\n\tvar optinons = new RequestOptions({headers:headers});\n\tthis._http.get(\"url\", options);"
            }];
        };
        return AppService;
    }();
    exports.AppService = AppService;
    

    return module.exports;
});
$__System.registerDynamic("app/09/app.component.js", ["node_modules/@angular/core/bundles/core.umd.js", "app/09/app.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var app_service_1 = $__require("app/09/app.service.js");
    var ConnectingtotheServer = function () {
        function ConnectingtotheServer(noteService) {
            this.items = [];
            this.items = noteService.getNotes();
        }
        return ConnectingtotheServer;
    }();
    ConnectingtotheServer = __decorate([core_1.Component({
        selector: 'component',
        moduleId: module.id,
        templateUrl: 'app.html',
        styleUrls: ['app.css'],
        providers: [app_service_1.AppService]
    }), __metadata("design:paramtypes", [app_service_1.AppService])], ConnectingtotheServer);
    exports.ConnectingtotheServer = ConnectingtotheServer;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/EmptyObservable.js", ["node_modules/rxjs/Observable.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require("node_modules/rxjs/Observable.js");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var EmptyObservable = function (_super) {
        __extends(EmptyObservable, _super);
        function EmptyObservable(scheduler) {
            _super.call(this);
            this.scheduler = scheduler;
        }
        /**
         * Creates an Observable that emits no items to the Observer and immediately
         * emits a complete notification.
         *
         * <span class="informal">Just emits 'complete', and nothing else.
         * </span>
         *
         * <img src="./img/empty.png" width="100%">
         *
         * This static operator is useful for creating a simple Observable that only
         * emits the complete notification. It can be used for composing with other
         * Observables, such as in a {@link mergeMap}.
         *
         * @example <caption>Emit the number 7, then complete.</caption>
         * var result = Rx.Observable.empty().startWith(7);
         * result.subscribe(x => console.log(x));
         *
         * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
         * var interval = Rx.Observable.interval(1000);
         * var result = interval.mergeMap(x =>
         *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
         * );
         * result.subscribe(x => console.log(x));
         *
         * @see {@link create}
         * @see {@link never}
         * @see {@link of}
         * @see {@link throw}
         *
         * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
         * the emission of the complete notification.
         * @return {Observable} An "empty" Observable: emits only the complete
         * notification.
         * @static true
         * @name empty
         * @owner Observable
         */
        EmptyObservable.create = function (scheduler) {
            return new EmptyObservable(scheduler);
        };
        EmptyObservable.dispatch = function (arg) {
            var subscriber = arg.subscriber;
            subscriber.complete();
        };
        EmptyObservable.prototype._subscribe = function (subscriber) {
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
            } else {
                subscriber.complete();
            }
        };
        return EmptyObservable;
    }(Observable_1.Observable);
    exports.EmptyObservable = EmptyObservable;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/util/isPromise.js', [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isPromise(value) {
        return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
    }
    exports.isPromise = isPromise;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/symbol/iterator.js', ['node_modules/rxjs/util/root.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('node_modules/rxjs/util/root.js');
    var Symbol = root_1.root.Symbol;
    if (typeof Symbol === 'function') {
        if (Symbol.iterator) {
            exports.$$iterator = Symbol.iterator;
        } else if (typeof Symbol.for === 'function') {
            exports.$$iterator = Symbol.for('iterator');
        }
    } else {
        if (root_1.root.Set && typeof new root_1.root.Set()['@@iterator'] === 'function') {
            // Bug for mozilla version
            exports.$$iterator = '@@iterator';
        } else if (root_1.root.Map) {
            // es6-shim specific logic
            var keys = Object.getOwnPropertyNames(root_1.root.Map.prototype);
            for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                if (key !== 'entries' && key !== 'size' && root_1.root.Map.prototype[key] === root_1.root.Map.prototype['entries']) {
                    exports.$$iterator = key;
                    break;
                }
            }
        } else {
            exports.$$iterator = '@@iterator';
        }
    }
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/InnerSubscriber.js", ["node_modules/rxjs/Subscriber.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("node_modules/rxjs/Subscriber.js");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var InnerSubscriber = function (_super) {
        __extends(InnerSubscriber, _super);
        function InnerSubscriber(parent, outerValue, outerIndex) {
            _super.call(this);
            this.parent = parent;
            this.outerValue = outerValue;
            this.outerIndex = outerIndex;
            this.index = 0;
        }
        InnerSubscriber.prototype._next = function (value) {
            this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
        };
        InnerSubscriber.prototype._error = function (error) {
            this.parent.notifyError(error, this);
            this.unsubscribe();
        };
        InnerSubscriber.prototype._complete = function () {
            this.parent.notifyComplete(this);
            this.unsubscribe();
        };
        return InnerSubscriber;
    }(Subscriber_1.Subscriber);
    exports.InnerSubscriber = InnerSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/util/subscribeToResult.js', ['node_modules/rxjs/util/root.js', 'node_modules/rxjs/util/isArray.js', 'node_modules/rxjs/util/isPromise.js', 'node_modules/rxjs/Observable.js', 'node_modules/rxjs/symbol/iterator.js', 'node_modules/rxjs/InnerSubscriber.js', 'node_modules/rxjs/symbol/observable.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('node_modules/rxjs/util/root.js');
    var isArray_1 = $__require('node_modules/rxjs/util/isArray.js');
    var isPromise_1 = $__require('node_modules/rxjs/util/isPromise.js');
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var iterator_1 = $__require('node_modules/rxjs/symbol/iterator.js');
    var InnerSubscriber_1 = $__require('node_modules/rxjs/InnerSubscriber.js');
    var observable_1 = $__require('node_modules/rxjs/symbol/observable.js');
    function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
        var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
        if (destination.closed) {
            return null;
        }
        if (result instanceof Observable_1.Observable) {
            if (result._isScalar) {
                destination.next(result.value);
                destination.complete();
                return null;
            } else {
                return result.subscribe(destination);
            }
        }
        if (isArray_1.isArray(result)) {
            for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
                destination.next(result[i]);
            }
            if (!destination.closed) {
                destination.complete();
            }
        } else if (isPromise_1.isPromise(result)) {
            result.then(function (value) {
                if (!destination.closed) {
                    destination.next(value);
                    destination.complete();
                }
            }, function (err) {
                return destination.error(err);
            }).then(null, function (err) {
                // Escaping the Promise trap: globally throw unhandled errors
                root_1.root.setTimeout(function () {
                    throw err;
                });
            });
            return destination;
        } else if (typeof result[iterator_1.$$iterator] === 'function') {
            var iterator = result[iterator_1.$$iterator]();
            do {
                var item = iterator.next();
                if (item.done) {
                    destination.complete();
                    break;
                }
                destination.next(item.value);
                if (destination.closed) {
                    break;
                }
            } while (true);
        } else if (typeof result[observable_1.$$observable] === 'function') {
            var obs = result[observable_1.$$observable]();
            if (typeof obs.subscribe !== 'function') {
                destination.error(new Error('invalid observable'));
            } else {
                return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
            }
        } else {
            destination.error(new TypeError('unknown type returned'));
        }
        return null;
    }
    exports.subscribeToResult = subscribeToResult;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/OuterSubscriber.js", ["node_modules/rxjs/Subscriber.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("node_modules/rxjs/Subscriber.js");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var OuterSubscriber = function (_super) {
        __extends(OuterSubscriber, _super);
        function OuterSubscriber() {
            _super.apply(this, arguments);
        }
        OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(innerValue);
        };
        OuterSubscriber.prototype.notifyError = function (error, innerSub) {
            this.destination.error(error);
        };
        OuterSubscriber.prototype.notifyComplete = function (innerSub) {
            this.destination.complete();
        };
        return OuterSubscriber;
    }(Subscriber_1.Subscriber);
    exports.OuterSubscriber = OuterSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/observable/ForkJoinObservable.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/EmptyObservable.js', 'node_modules/rxjs/util/isArray.js', 'node_modules/rxjs/util/subscribeToResult.js', 'node_modules/rxjs/OuterSubscriber.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var EmptyObservable_1 = $__require('node_modules/rxjs/observable/EmptyObservable.js');
    var isArray_1 = $__require('node_modules/rxjs/util/isArray.js');
    var subscribeToResult_1 = $__require('node_modules/rxjs/util/subscribeToResult.js');
    var OuterSubscriber_1 = $__require('node_modules/rxjs/OuterSubscriber.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ForkJoinObservable = function (_super) {
        __extends(ForkJoinObservable, _super);
        function ForkJoinObservable(sources, resultSelector) {
            _super.call(this);
            this.sources = sources;
            this.resultSelector = resultSelector;
        }
        /* tslint:enable:max-line-length */
        /**
         * @param sources
         * @return {any}
         * @static true
         * @name forkJoin
         * @owner Observable
         */
        ForkJoinObservable.create = function () {
            var sources = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                sources[_i - 0] = arguments[_i];
            }
            if (sources === null || arguments.length === 0) {
                return new EmptyObservable_1.EmptyObservable();
            }
            var resultSelector = null;
            if (typeof sources[sources.length - 1] === 'function') {
                resultSelector = sources.pop();
            }
            // if the first and only other argument besides the resultSelector is an array
            // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`
            if (sources.length === 1 && isArray_1.isArray(sources[0])) {
                sources = sources[0];
            }
            if (sources.length === 0) {
                return new EmptyObservable_1.EmptyObservable();
            }
            return new ForkJoinObservable(sources, resultSelector);
        };
        ForkJoinObservable.prototype._subscribe = function (subscriber) {
            return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);
        };
        return ForkJoinObservable;
    }(Observable_1.Observable);
    exports.ForkJoinObservable = ForkJoinObservable;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ForkJoinSubscriber = function (_super) {
        __extends(ForkJoinSubscriber, _super);
        function ForkJoinSubscriber(destination, sources, resultSelector) {
            _super.call(this, destination);
            this.sources = sources;
            this.resultSelector = resultSelector;
            this.completed = 0;
            this.haveValues = 0;
            var len = sources.length;
            this.total = len;
            this.values = new Array(len);
            for (var i = 0; i < len; i++) {
                var source = sources[i];
                var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);
                if (innerSubscription) {
                    innerSubscription.outerIndex = i;
                    this.add(innerSubscription);
                }
            }
        }
        ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.values[outerIndex] = innerValue;
            if (!innerSub._hasValue) {
                innerSub._hasValue = true;
                this.haveValues++;
            }
        };
        ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
            var destination = this.destination;
            var _a = this,
                haveValues = _a.haveValues,
                resultSelector = _a.resultSelector,
                values = _a.values;
            var len = values.length;
            if (!innerSub._hasValue) {
                destination.complete();
                return;
            }
            this.completed++;
            if (this.completed !== len) {
                return;
            }
            if (haveValues === len) {
                var value = resultSelector ? resultSelector.apply(this, values) : values;
                destination.next(value);
            }
            destination.complete();
        };
        return ForkJoinSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/observable/forkJoin.js", ["node_modules/rxjs/observable/ForkJoinObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var ForkJoinObservable_1 = $__require("node_modules/rxjs/observable/ForkJoinObservable.js");
  exports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/observable/forkJoin.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/observable/forkJoin.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var forkJoin_1 = $__require('node_modules/rxjs/observable/forkJoin.js');
  Observable_1.Observable.forkJoin = forkJoin_1.forkJoin;
  

  return module.exports;
});
$__System.registerDynamic("app/09/101Connecting to the Server/github-profile.component.js", ["node_modules/@angular/core/bundles/core.umd.js", "node_modules/rxjs/Observable.js", "node_modules/rxjs/add/observable/forkJoin.js", "app/09/101Connecting to the Server/github.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var Observable_1 = $__require("node_modules/rxjs/Observable.js");
    $__require("node_modules/rxjs/add/observable/forkJoin.js");
    var github_service_1 = $__require("app/09/101Connecting to the Server/github.service.js");
    var GitHubProfileComponent = function () {
        function GitHubProfileComponent(_gitHubService) {
            this._gitHubService = _gitHubService;
            this.isLoading = true;
            this.username = "nelsonmayeda";
            this.user = {};
            this.followers = [];
        }
        GitHubProfileComponent.prototype.ngOnInit = function () {
            var _this = this;
            Observable_1.Observable.forkJoin(this._gitHubService.getUser(this.username), this._gitHubService.getFollowers(this.username)).subscribe(function (res) {
                _this.user = res[0];
                _this.followers = res[1];
            }, null, function () {
                _this.isLoading = false;
            });
        };
        return GitHubProfileComponent;
    }();
    GitHubProfileComponent = __decorate([core_1.Component({
        selector: 'github-profile',
        styles: ["\n            .avatar {\n                width: 100;\n                height: 100;\n                border-radius: 100%;\n            }\n        "],
        template: "\n        <i *ngIf=\"isLoading\" class=\"fa fa-spinner fa-spin fa-3x\"></i>\n        <h2>@{{ user.login }}</h2>\n        <img class=\"avatar\" src=\"{{ user.avatar_url }}\">\n        \n        <h3>Followers</h3>\n        <div *ngFor=\"let follower of followers\" class=\"media\">\n            <div class=\"media-left\">\n                <a href=\"#\">\n                <img class=\"media-object avatar\" src=\"{{ follower.avatar_url }}\" alt=\"...\">\n                </a>\n            </div>\n            <div class=\"media-body\">\n                <h4 class=\"media-heading\">{{ follower.login }}</h4>\n            </div>\n        </div>        \n    "
    }), __metadata("design:paramtypes", [github_service_1.GitHubService])], GitHubProfileComponent);
    exports.GitHubProfileComponent = GitHubProfileComponent;
    

    return module.exports;
});
(function() {
var define = $__System.amdDefine;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/Observable'), require('@angular/platform-browser')) : typeof define === 'function' && define.amd ? define("node_modules/@angular/http/bundles/http.umd.js", ["exports", "node_modules/@angular/core/bundles/core.umd.js", "node_modules/rxjs/Observable.js", "node_modules/@angular/platform-browser/bundles/platform-browser.umd.js"], factory) : (factory((global.ng = global.ng || {}, global.ng.http = global.ng.http || {}), global.ng.core, global.Rx, global.ng.platformBrowser));
}(this, function(exports, _angular_core, rxjs_Observable, _angular_platformBrowser) {
  'use strict';
  var BrowserXhr = (function() {
    function BrowserXhr() {}
    BrowserXhr.prototype.build = function() {
      return (new XMLHttpRequest());
    };
    BrowserXhr.decorators = [{type: _angular_core.Injectable}];
    BrowserXhr.ctorParameters = [];
    return BrowserXhr;
  }());
  exports.RequestMethod;
  (function(RequestMethod) {
    RequestMethod[RequestMethod["Get"] = 0] = "Get";
    RequestMethod[RequestMethod["Post"] = 1] = "Post";
    RequestMethod[RequestMethod["Put"] = 2] = "Put";
    RequestMethod[RequestMethod["Delete"] = 3] = "Delete";
    RequestMethod[RequestMethod["Options"] = 4] = "Options";
    RequestMethod[RequestMethod["Head"] = 5] = "Head";
    RequestMethod[RequestMethod["Patch"] = 6] = "Patch";
  })(exports.RequestMethod || (exports.RequestMethod = {}));
  exports.ReadyState;
  (function(ReadyState) {
    ReadyState[ReadyState["Unsent"] = 0] = "Unsent";
    ReadyState[ReadyState["Open"] = 1] = "Open";
    ReadyState[ReadyState["HeadersReceived"] = 2] = "HeadersReceived";
    ReadyState[ReadyState["Loading"] = 3] = "Loading";
    ReadyState[ReadyState["Done"] = 4] = "Done";
    ReadyState[ReadyState["Cancelled"] = 5] = "Cancelled";
  })(exports.ReadyState || (exports.ReadyState = {}));
  exports.ResponseType;
  (function(ResponseType) {
    ResponseType[ResponseType["Basic"] = 0] = "Basic";
    ResponseType[ResponseType["Cors"] = 1] = "Cors";
    ResponseType[ResponseType["Default"] = 2] = "Default";
    ResponseType[ResponseType["Error"] = 3] = "Error";
    ResponseType[ResponseType["Opaque"] = 4] = "Opaque";
  })(exports.ResponseType || (exports.ResponseType = {}));
  var ContentType;
  (function(ContentType) {
    ContentType[ContentType["NONE"] = 0] = "NONE";
    ContentType[ContentType["JSON"] = 1] = "JSON";
    ContentType[ContentType["FORM"] = 2] = "FORM";
    ContentType[ContentType["FORM_DATA"] = 3] = "FORM_DATA";
    ContentType[ContentType["TEXT"] = 4] = "TEXT";
    ContentType[ContentType["BLOB"] = 5] = "BLOB";
    ContentType[ContentType["ARRAY_BUFFER"] = 6] = "ARRAY_BUFFER";
  })(ContentType || (ContentType = {}));
  exports.ResponseContentType;
  (function(ResponseContentType) {
    ResponseContentType[ResponseContentType["Text"] = 0] = "Text";
    ResponseContentType[ResponseContentType["Json"] = 1] = "Json";
    ResponseContentType[ResponseContentType["ArrayBuffer"] = 2] = "ArrayBuffer";
    ResponseContentType[ResponseContentType["Blob"] = 3] = "Blob";
  })(exports.ResponseContentType || (exports.ResponseContentType = {}));
  var Headers = (function() {
    function Headers(headers) {
      var _this = this;
      this._headers = new Map();
      this._normalizedNames = new Map();
      if (!headers) {
        return;
      }
      if (headers instanceof Headers) {
        headers.forEach(function(values, name) {
          values.forEach(function(value) {
            return _this.append(name, value);
          });
        });
        return;
      }
      Object.keys(headers).forEach(function(name) {
        var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];
        _this.delete(name);
        values.forEach(function(value) {
          return _this.append(name, value);
        });
      });
    }
    Headers.fromResponseHeaderString = function(headersString) {
      var headers = new Headers();
      headersString.split('\n').forEach(function(line) {
        var index = line.indexOf(':');
        if (index > 0) {
          var name_1 = line.slice(0, index);
          var value = line.slice(index + 1).trim();
          headers.set(name_1, value);
        }
      });
      return headers;
    };
    Headers.prototype.append = function(name, value) {
      var values = this.getAll(name);
      if (values === null) {
        this.set(name, value);
      } else {
        values.push(value);
      }
    };
    Headers.prototype.delete = function(name) {
      var lcName = name.toLowerCase();
      this._normalizedNames.delete(lcName);
      this._headers.delete(lcName);
    };
    Headers.prototype.forEach = function(fn) {
      var _this = this;
      this._headers.forEach(function(values, lcName) {
        return fn(values, _this._normalizedNames.get(lcName), _this._headers);
      });
    };
    Headers.prototype.get = function(name) {
      var values = this.getAll(name);
      if (values === null) {
        return null;
      }
      return values.length > 0 ? values[0] : null;
    };
    Headers.prototype.has = function(name) {
      return this._headers.has(name.toLowerCase());
    };
    Headers.prototype.keys = function() {
      return Array.from(this._normalizedNames.values());
    };
    Headers.prototype.set = function(name, value) {
      if (Array.isArray(value)) {
        if (value.length) {
          this._headers.set(name.toLowerCase(), [value.join(',')]);
        }
      } else {
        this._headers.set(name.toLowerCase(), [value]);
      }
      this.mayBeSetNormalizedName(name);
    };
    Headers.prototype.values = function() {
      return Array.from(this._headers.values());
    };
    Headers.prototype.toJSON = function() {
      var _this = this;
      var serialized = {};
      this._headers.forEach(function(values, name) {
        var split = [];
        values.forEach(function(v) {
          return split.push.apply(split, v.split(','));
        });
        serialized[_this._normalizedNames.get(name)] = split;
      });
      return serialized;
    };
    Headers.prototype.getAll = function(name) {
      return this.has(name) ? this._headers.get(name.toLowerCase()) : null;
    };
    Headers.prototype.entries = function() {
      throw new Error('"entries" method is not implemented on Headers class');
    };
    Headers.prototype.mayBeSetNormalizedName = function(name) {
      var lcName = name.toLowerCase();
      if (!this._normalizedNames.has(lcName)) {
        this._normalizedNames.set(lcName, name);
      }
    };
    return Headers;
  }());
  var __extends$1 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ResponseOptions = (function() {
    function ResponseOptions(_a) {
      var _b = _a === void 0 ? {} : _a,
          body = _b.body,
          status = _b.status,
          headers = _b.headers,
          statusText = _b.statusText,
          type = _b.type,
          url = _b.url;
      this.body = body != null ? body : null;
      this.status = status != null ? status : null;
      this.headers = headers != null ? headers : null;
      this.statusText = statusText != null ? statusText : null;
      this.type = type != null ? type : null;
      this.url = url != null ? url : null;
    }
    ResponseOptions.prototype.merge = function(options) {
      return new ResponseOptions({
        body: options && options.body != null ? options.body : this.body,
        status: options && options.status != null ? options.status : this.status,
        headers: options && options.headers != null ? options.headers : this.headers,
        statusText: options && options.statusText != null ? options.statusText : this.statusText,
        type: options && options.type != null ? options.type : this.type,
        url: options && options.url != null ? options.url : this.url
      });
    };
    return ResponseOptions;
  }());
  var BaseResponseOptions = (function(_super) {
    __extends$1(BaseResponseOptions, _super);
    function BaseResponseOptions() {
      _super.call(this, {
        status: 200,
        statusText: 'Ok',
        type: exports.ResponseType.Default,
        headers: new Headers()
      });
    }
    BaseResponseOptions.decorators = [{type: _angular_core.Injectable}];
    BaseResponseOptions.ctorParameters = [];
    return BaseResponseOptions;
  }(ResponseOptions));
  var ConnectionBackend = (function() {
    function ConnectionBackend() {}
    return ConnectionBackend;
  }());
  var Connection = (function() {
    function Connection() {}
    return Connection;
  }());
  var XSRFStrategy = (function() {
    function XSRFStrategy() {}
    return XSRFStrategy;
  }());
  function normalizeMethodName(method) {
    if (typeof method !== 'string')
      return method;
    switch (method.toUpperCase()) {
      case 'GET':
        return exports.RequestMethod.Get;
      case 'POST':
        return exports.RequestMethod.Post;
      case 'PUT':
        return exports.RequestMethod.Put;
      case 'DELETE':
        return exports.RequestMethod.Delete;
      case 'OPTIONS':
        return exports.RequestMethod.Options;
      case 'HEAD':
        return exports.RequestMethod.Head;
      case 'PATCH':
        return exports.RequestMethod.Patch;
    }
    throw new Error("Invalid request method. The method \"" + method + "\" is not supported.");
  }
  var isSuccess = function(status) {
    return (status >= 200 && status < 300);
  };
  function getResponseURL(xhr) {
    if ('responseURL' in xhr) {
      return xhr.responseURL;
    }
    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
      return xhr.getResponseHeader('X-Request-URL');
    }
    return;
  }
  function stringToArrayBuffer(input) {
    var view = new Uint16Array(input.length);
    for (var i = 0,
        strLen = input.length; i < strLen; i++) {
      view[i] = input.charCodeAt(i);
    }
    return view.buffer;
  }
  function paramParser(rawParams) {
    if (rawParams === void 0) {
      rawParams = '';
    }
    var map = new Map();
    if (rawParams.length > 0) {
      var params = rawParams.split('&');
      params.forEach(function(param) {
        var eqIdx = param.indexOf('=');
        var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)],
            key = _a[0],
            val = _a[1];
        var list = map.get(key) || [];
        list.push(val);
        map.set(key, list);
      });
    }
    return map;
  }
  var QueryEncoder = (function() {
    function QueryEncoder() {}
    QueryEncoder.prototype.encodeKey = function(k) {
      return standardEncoding(k);
    };
    QueryEncoder.prototype.encodeValue = function(v) {
      return standardEncoding(v);
    };
    return QueryEncoder;
  }());
  function standardEncoding(v) {
    return encodeURIComponent(v).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/gi, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%2B/gi, '+').replace(/%3D/gi, '=').replace(/%3F/gi, '?').replace(/%2F/gi, '/');
  }
  var URLSearchParams = (function() {
    function URLSearchParams(rawParams, queryEncoder) {
      if (rawParams === void 0) {
        rawParams = '';
      }
      if (queryEncoder === void 0) {
        queryEncoder = new QueryEncoder();
      }
      this.rawParams = rawParams;
      this.queryEncoder = queryEncoder;
      this.paramsMap = paramParser(rawParams);
    }
    URLSearchParams.prototype.clone = function() {
      var clone = new URLSearchParams('', this.queryEncoder);
      clone.appendAll(this);
      return clone;
    };
    URLSearchParams.prototype.has = function(param) {
      return this.paramsMap.has(param);
    };
    URLSearchParams.prototype.get = function(param) {
      var storedParam = this.paramsMap.get(param);
      return Array.isArray(storedParam) ? storedParam[0] : null;
    };
    URLSearchParams.prototype.getAll = function(param) {
      return this.paramsMap.get(param) || [];
    };
    URLSearchParams.prototype.set = function(param, val) {
      if (val === void 0 || val === null) {
        this.delete(param);
        return;
      }
      var list = this.paramsMap.get(param) || [];
      list.length = 0;
      list.push(val);
      this.paramsMap.set(param, list);
    };
    URLSearchParams.prototype.setAll = function(searchParams) {
      var _this = this;
      searchParams.paramsMap.forEach(function(value, param) {
        var list = _this.paramsMap.get(param) || [];
        list.length = 0;
        list.push(value[0]);
        _this.paramsMap.set(param, list);
      });
    };
    URLSearchParams.prototype.append = function(param, val) {
      if (val === void 0 || val === null)
        return;
      var list = this.paramsMap.get(param) || [];
      list.push(val);
      this.paramsMap.set(param, list);
    };
    URLSearchParams.prototype.appendAll = function(searchParams) {
      var _this = this;
      searchParams.paramsMap.forEach(function(value, param) {
        var list = _this.paramsMap.get(param) || [];
        for (var i = 0; i < value.length; ++i) {
          list.push(value[i]);
        }
        _this.paramsMap.set(param, list);
      });
    };
    URLSearchParams.prototype.replaceAll = function(searchParams) {
      var _this = this;
      searchParams.paramsMap.forEach(function(value, param) {
        var list = _this.paramsMap.get(param) || [];
        list.length = 0;
        for (var i = 0; i < value.length; ++i) {
          list.push(value[i]);
        }
        _this.paramsMap.set(param, list);
      });
    };
    URLSearchParams.prototype.toString = function() {
      var _this = this;
      var paramsList = [];
      this.paramsMap.forEach(function(values, k) {
        values.forEach(function(v) {
          return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v));
        });
      });
      return paramsList.join('&');
    };
    URLSearchParams.prototype.delete = function(param) {
      this.paramsMap.delete(param);
    };
    return URLSearchParams;
  }());
  var Body = (function() {
    function Body() {}
    Body.prototype.json = function() {
      if (typeof this._body === 'string') {
        return JSON.parse(this._body);
      }
      if (this._body instanceof ArrayBuffer) {
        return JSON.parse(this.text());
      }
      return this._body;
    };
    Body.prototype.text = function() {
      if (this._body instanceof URLSearchParams) {
        return this._body.toString();
      }
      if (this._body instanceof ArrayBuffer) {
        return String.fromCharCode.apply(null, new Uint16Array(this._body));
      }
      if (this._body === null) {
        return '';
      }
      if (typeof this._body === 'object') {
        return JSON.stringify(this._body, null, 2);
      }
      return this._body.toString();
    };
    Body.prototype.arrayBuffer = function() {
      if (this._body instanceof ArrayBuffer) {
        return this._body;
      }
      return stringToArrayBuffer(this.text());
    };
    Body.prototype.blob = function() {
      if (this._body instanceof Blob) {
        return this._body;
      }
      if (this._body instanceof ArrayBuffer) {
        return new Blob([this._body]);
      }
      throw new Error('The request body isn\'t either a blob or an array buffer');
    };
    return Body;
  }());
  var __extends$2 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Response = (function(_super) {
    __extends$2(Response, _super);
    function Response(responseOptions) {
      _super.call(this);
      this._body = responseOptions.body;
      this.status = responseOptions.status;
      this.ok = (this.status >= 200 && this.status <= 299);
      this.statusText = responseOptions.statusText;
      this.headers = responseOptions.headers;
      this.type = responseOptions.type;
      this.url = responseOptions.url;
    }
    Response.prototype.toString = function() {
      return "Response with status: " + this.status + " " + this.statusText + " for URL: " + this.url;
    };
    return Response;
  }(Body));
  var _nextRequestId = 0;
  var JSONP_HOME = '__ng_jsonp__';
  var _jsonpConnections = null;
  function _getJsonpConnections() {
    var w = typeof window == 'object' ? window : {};
    if (_jsonpConnections === null) {
      _jsonpConnections = w[JSONP_HOME] = {};
    }
    return _jsonpConnections;
  }
  var BrowserJsonp = (function() {
    function BrowserJsonp() {}
    BrowserJsonp.prototype.build = function(url) {
      var node = document.createElement('script');
      node.src = url;
      return node;
    };
    BrowserJsonp.prototype.nextRequestID = function() {
      return "__req" + _nextRequestId++;
    };
    BrowserJsonp.prototype.requestCallback = function(id) {
      return JSONP_HOME + "." + id + ".finished";
    };
    BrowserJsonp.prototype.exposeConnection = function(id, connection) {
      var connections = _getJsonpConnections();
      connections[id] = connection;
    };
    BrowserJsonp.prototype.removeConnection = function(id) {
      var connections = _getJsonpConnections();
      connections[id] = null;
    };
    BrowserJsonp.prototype.send = function(node) {
      document.body.appendChild((node));
    };
    BrowserJsonp.prototype.cleanup = function(node) {
      if (node.parentNode) {
        node.parentNode.removeChild((node));
      }
    };
    BrowserJsonp.decorators = [{type: _angular_core.Injectable}];
    BrowserJsonp.ctorParameters = [];
    return BrowserJsonp;
  }());
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';
  var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';
  var JSONPConnection = (function() {
    function JSONPConnection() {}
    return JSONPConnection;
  }());
  var JSONPConnection_ = (function(_super) {
    __extends(JSONPConnection_, _super);
    function JSONPConnection_(req, _dom, baseResponseOptions) {
      var _this = this;
      _super.call(this);
      this._dom = _dom;
      this.baseResponseOptions = baseResponseOptions;
      this._finished = false;
      if (req.method !== exports.RequestMethod.Get) {
        throw new TypeError(JSONP_ERR_WRONG_METHOD);
      }
      this.request = req;
      this.response = new rxjs_Observable.Observable(function(responseObserver) {
        _this.readyState = exports.ReadyState.Loading;
        var id = _this._id = _dom.nextRequestID();
        _dom.exposeConnection(id, _this);
        var callback = _dom.requestCallback(_this._id);
        var url = req.url;
        if (url.indexOf('=JSONP_CALLBACK&') > -1) {
          url = url.replace('=JSONP_CALLBACK&', "=" + callback + "&");
        } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {
          url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + ("=" + callback);
        }
        var script = _this._script = _dom.build(url);
        var onLoad = function(event) {
          if (_this.readyState === exports.ReadyState.Cancelled)
            return;
          _this.readyState = exports.ReadyState.Done;
          _dom.cleanup(script);
          if (!_this._finished) {
            var responseOptions_1 = new ResponseOptions({
              body: JSONP_ERR_NO_CALLBACK,
              type: exports.ResponseType.Error,
              url: url
            });
            if (baseResponseOptions) {
              responseOptions_1 = baseResponseOptions.merge(responseOptions_1);
            }
            responseObserver.error(new Response(responseOptions_1));
            return;
          }
          var responseOptions = new ResponseOptions({
            body: _this._responseData,
            url: url
          });
          if (_this.baseResponseOptions) {
            responseOptions = _this.baseResponseOptions.merge(responseOptions);
          }
          responseObserver.next(new Response(responseOptions));
          responseObserver.complete();
        };
        var onError = function(error) {
          if (_this.readyState === exports.ReadyState.Cancelled)
            return;
          _this.readyState = exports.ReadyState.Done;
          _dom.cleanup(script);
          var responseOptions = new ResponseOptions({
            body: error.message,
            type: exports.ResponseType.Error
          });
          if (baseResponseOptions) {
            responseOptions = baseResponseOptions.merge(responseOptions);
          }
          responseObserver.error(new Response(responseOptions));
        };
        script.addEventListener('load', onLoad);
        script.addEventListener('error', onError);
        _dom.send(script);
        return function() {
          _this.readyState = exports.ReadyState.Cancelled;
          script.removeEventListener('load', onLoad);
          script.removeEventListener('error', onError);
          _this._dom.cleanup(script);
        };
      });
    }
    JSONPConnection_.prototype.finished = function(data) {
      this._finished = true;
      this._dom.removeConnection(this._id);
      if (this.readyState === exports.ReadyState.Cancelled)
        return;
      this._responseData = data;
    };
    return JSONPConnection_;
  }(JSONPConnection));
  var JSONPBackend = (function(_super) {
    __extends(JSONPBackend, _super);
    function JSONPBackend() {
      _super.apply(this, arguments);
    }
    return JSONPBackend;
  }(ConnectionBackend));
  var JSONPBackend_ = (function(_super) {
    __extends(JSONPBackend_, _super);
    function JSONPBackend_(_browserJSONP, _baseResponseOptions) {
      _super.call(this);
      this._browserJSONP = _browserJSONP;
      this._baseResponseOptions = _baseResponseOptions;
    }
    JSONPBackend_.prototype.createConnection = function(request) {
      return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);
    };
    JSONPBackend_.decorators = [{type: _angular_core.Injectable}];
    JSONPBackend_.ctorParameters = [{type: BrowserJsonp}, {type: ResponseOptions}];
    return JSONPBackend_;
  }(JSONPBackend));
  var XSSI_PREFIX = /^\)\]\}',?\n/;
  var XHRConnection = (function() {
    function XHRConnection(req, browserXHR, baseResponseOptions) {
      var _this = this;
      this.request = req;
      this.response = new rxjs_Observable.Observable(function(responseObserver) {
        var _xhr = browserXHR.build();
        _xhr.open(exports.RequestMethod[req.method].toUpperCase(), req.url);
        if (req.withCredentials != null) {
          _xhr.withCredentials = req.withCredentials;
        }
        var onLoad = function() {
          var status = _xhr.status === 1223 ? 204 : _xhr.status;
          var body = null;
          if (status !== 204) {
            body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;
            if (typeof body === 'string') {
              body = body.replace(XSSI_PREFIX, '');
            }
          }
          if (status === 0) {
            status = body ? 200 : 0;
          }
          var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());
          var url = getResponseURL(_xhr) || req.url;
          var statusText = _xhr.statusText || 'OK';
          var responseOptions = new ResponseOptions({
            body: body,
            status: status,
            headers: headers,
            statusText: statusText,
            url: url
          });
          if (baseResponseOptions != null) {
            responseOptions = baseResponseOptions.merge(responseOptions);
          }
          var response = new Response(responseOptions);
          response.ok = isSuccess(status);
          if (response.ok) {
            responseObserver.next(response);
            responseObserver.complete();
            return;
          }
          responseObserver.error(response);
        };
        var onError = function(err) {
          var responseOptions = new ResponseOptions({
            body: err,
            type: exports.ResponseType.Error,
            status: _xhr.status,
            statusText: _xhr.statusText
          });
          if (baseResponseOptions != null) {
            responseOptions = baseResponseOptions.merge(responseOptions);
          }
          responseObserver.error(new Response(responseOptions));
        };
        _this.setDetectedContentType(req, _xhr);
        if (req.headers != null) {
          req.headers.forEach(function(values, name) {
            return _xhr.setRequestHeader(name, values.join(','));
          });
        }
        if (req.responseType != null && _xhr.responseType != null) {
          switch (req.responseType) {
            case exports.ResponseContentType.ArrayBuffer:
              _xhr.responseType = 'arraybuffer';
              break;
            case exports.ResponseContentType.Json:
              _xhr.responseType = 'json';
              break;
            case exports.ResponseContentType.Text:
              _xhr.responseType = 'text';
              break;
            case exports.ResponseContentType.Blob:
              _xhr.responseType = 'blob';
              break;
            default:
              throw new Error('The selected responseType is not supported');
          }
        }
        _xhr.addEventListener('load', onLoad);
        _xhr.addEventListener('error', onError);
        _xhr.send(_this.request.getBody());
        return function() {
          _xhr.removeEventListener('load', onLoad);
          _xhr.removeEventListener('error', onError);
          _xhr.abort();
        };
      });
    }
    XHRConnection.prototype.setDetectedContentType = function(req, _xhr) {
      if (req.headers != null && req.headers.get('Content-Type') != null) {
        return;
      }
      switch (req.contentType) {
        case ContentType.NONE:
          break;
        case ContentType.JSON:
          _xhr.setRequestHeader('content-type', 'application/json');
          break;
        case ContentType.FORM:
          _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          break;
        case ContentType.TEXT:
          _xhr.setRequestHeader('content-type', 'text/plain');
          break;
        case ContentType.BLOB:
          var blob = req.blob();
          if (blob.type) {
            _xhr.setRequestHeader('content-type', blob.type);
          }
          break;
      }
    };
    return XHRConnection;
  }());
  var CookieXSRFStrategy = (function() {
    function CookieXSRFStrategy(_cookieName, _headerName) {
      if (_cookieName === void 0) {
        _cookieName = 'XSRF-TOKEN';
      }
      if (_headerName === void 0) {
        _headerName = 'X-XSRF-TOKEN';
      }
      this._cookieName = _cookieName;
      this._headerName = _headerName;
    }
    CookieXSRFStrategy.prototype.configureRequest = function(req) {
      var xsrfToken = _angular_platformBrowser.__platform_browser_private__.getDOM().getCookie(this._cookieName);
      if (xsrfToken) {
        req.headers.set(this._headerName, xsrfToken);
      }
    };
    return CookieXSRFStrategy;
  }());
  var XHRBackend = (function() {
    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {
      this._browserXHR = _browserXHR;
      this._baseResponseOptions = _baseResponseOptions;
      this._xsrfStrategy = _xsrfStrategy;
    }
    XHRBackend.prototype.createConnection = function(request) {
      this._xsrfStrategy.configureRequest(request);
      return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);
    };
    XHRBackend.decorators = [{type: _angular_core.Injectable}];
    XHRBackend.ctorParameters = [{type: BrowserXhr}, {type: ResponseOptions}, {type: XSRFStrategy}];
    return XHRBackend;
  }());
  var __extends$3 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var RequestOptions = (function() {
    function RequestOptions(_a) {
      var _b = _a === void 0 ? {} : _a,
          method = _b.method,
          headers = _b.headers,
          body = _b.body,
          url = _b.url,
          search = _b.search,
          withCredentials = _b.withCredentials,
          responseType = _b.responseType;
      this.method = method != null ? normalizeMethodName(method) : null;
      this.headers = headers != null ? headers : null;
      this.body = body != null ? body : null;
      this.url = url != null ? url : null;
      this.search = search != null ? (typeof search === 'string' ? new URLSearchParams(search) : search) : null;
      this.withCredentials = withCredentials != null ? withCredentials : null;
      this.responseType = responseType != null ? responseType : null;
    }
    RequestOptions.prototype.merge = function(options) {
      return new RequestOptions({
        method: options && options.method != null ? options.method : this.method,
        headers: options && options.headers != null ? options.headers : this.headers,
        body: options && options.body != null ? options.body : this.body,
        url: options && options.url != null ? options.url : this.url,
        search: options && options.search != null ? (typeof options.search === 'string' ? new URLSearchParams(options.search) : options.search.clone()) : this.search,
        withCredentials: options && options.withCredentials != null ? options.withCredentials : this.withCredentials,
        responseType: options && options.responseType != null ? options.responseType : this.responseType
      });
    };
    return RequestOptions;
  }());
  var BaseRequestOptions = (function(_super) {
    __extends$3(BaseRequestOptions, _super);
    function BaseRequestOptions() {
      _super.call(this, {
        method: exports.RequestMethod.Get,
        headers: new Headers()
      });
    }
    BaseRequestOptions.decorators = [{type: _angular_core.Injectable}];
    BaseRequestOptions.ctorParameters = [];
    return BaseRequestOptions;
  }(RequestOptions));
  var __extends$5 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Request = (function(_super) {
    __extends$5(Request, _super);
    function Request(requestOptions) {
      _super.call(this);
      var url = requestOptions.url;
      this.url = requestOptions.url;
      if (requestOptions.search) {
        var search = requestOptions.search.toString();
        if (search.length > 0) {
          var prefix = '?';
          if (this.url.indexOf('?') != -1) {
            prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';
          }
          this.url = url + prefix + search;
        }
      }
      this._body = requestOptions.body;
      this.method = normalizeMethodName(requestOptions.method);
      this.headers = new Headers(requestOptions.headers);
      this.contentType = this.detectContentType();
      this.withCredentials = requestOptions.withCredentials;
      this.responseType = requestOptions.responseType;
    }
    Request.prototype.detectContentType = function() {
      switch (this.headers.get('content-type')) {
        case 'application/json':
          return ContentType.JSON;
        case 'application/x-www-form-urlencoded':
          return ContentType.FORM;
        case 'multipart/form-data':
          return ContentType.FORM_DATA;
        case 'text/plain':
        case 'text/html':
          return ContentType.TEXT;
        case 'application/octet-stream':
          return ContentType.BLOB;
        default:
          return this.detectContentTypeFromBody();
      }
    };
    Request.prototype.detectContentTypeFromBody = function() {
      if (this._body == null) {
        return ContentType.NONE;
      } else if (this._body instanceof URLSearchParams) {
        return ContentType.FORM;
      } else if (this._body instanceof FormData) {
        return ContentType.FORM_DATA;
      } else if (this._body instanceof Blob$1) {
        return ContentType.BLOB;
      } else if (this._body instanceof ArrayBuffer$1) {
        return ContentType.ARRAY_BUFFER;
      } else if (this._body && typeof this._body == 'object') {
        return ContentType.JSON;
      } else {
        return ContentType.TEXT;
      }
    };
    Request.prototype.getBody = function() {
      switch (this.contentType) {
        case ContentType.JSON:
          return this.text();
        case ContentType.FORM:
          return this.text();
        case ContentType.FORM_DATA:
          return this._body;
        case ContentType.TEXT:
          return this.text();
        case ContentType.BLOB:
          return this.blob();
        case ContentType.ARRAY_BUFFER:
          return this.arrayBuffer();
        default:
          return null;
      }
    };
    return Request;
  }(Body));
  var noop = function() {};
  var w = typeof window == 'object' ? window : noop;
  var FormData = w['FormData'] || noop;
  var Blob$1 = w['Blob'] || noop;
  var ArrayBuffer$1 = w['ArrayBuffer'] || noop;
  var __extends$4 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  function httpRequest(backend, request) {
    return backend.createConnection(request).response;
  }
  function mergeOptions(defaultOpts, providedOpts, method, url) {
    var newOptions = defaultOpts;
    if (providedOpts) {
      return newOptions.merge(new RequestOptions({
        method: providedOpts.method || method,
        url: providedOpts.url || url,
        search: providedOpts.search,
        headers: providedOpts.headers,
        body: providedOpts.body,
        withCredentials: providedOpts.withCredentials,
        responseType: providedOpts.responseType
      }));
    }
    return newOptions.merge(new RequestOptions({
      method: method,
      url: url
    }));
  }
  var Http = (function() {
    function Http(_backend, _defaultOptions) {
      this._backend = _backend;
      this._defaultOptions = _defaultOptions;
    }
    Http.prototype.request = function(url, options) {
      var responseObservable;
      if (typeof url === 'string') {
        responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url)));
      } else if (url instanceof Request) {
        responseObservable = httpRequest(this._backend, url);
      } else {
        throw new Error('First argument must be a url string or Request instance.');
      }
      return responseObservable;
    };
    Http.prototype.get = function(url, options) {
      return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url)));
    };
    Http.prototype.post = function(url, body, options) {
      return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({body: body})), options, exports.RequestMethod.Post, url)));
    };
    Http.prototype.put = function(url, body, options) {
      return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({body: body})), options, exports.RequestMethod.Put, url)));
    };
    Http.prototype.delete = function(url, options) {
      return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Delete, url)));
    };
    Http.prototype.patch = function(url, body, options) {
      return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({body: body})), options, exports.RequestMethod.Patch, url)));
    };
    Http.prototype.head = function(url, options) {
      return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Head, url)));
    };
    Http.prototype.options = function(url, options) {
      return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Options, url)));
    };
    Http.decorators = [{type: _angular_core.Injectable}];
    Http.ctorParameters = [{type: ConnectionBackend}, {type: RequestOptions}];
    return Http;
  }());
  var Jsonp = (function(_super) {
    __extends$4(Jsonp, _super);
    function Jsonp(backend, defaultOptions) {
      _super.call(this, backend, defaultOptions);
    }
    Jsonp.prototype.request = function(url, options) {
      var responseObservable;
      if (typeof url === 'string') {
        url = new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url));
      }
      if (url instanceof Request) {
        if (url.method !== exports.RequestMethod.Get) {
          throw new Error('JSONP requests must use GET request method.');
        }
        responseObservable = httpRequest(this._backend, url);
      } else {
        throw new Error('First argument must be a url string or Request instance.');
      }
      return responseObservable;
    };
    Jsonp.decorators = [{type: _angular_core.Injectable}];
    Jsonp.ctorParameters = [{type: ConnectionBackend}, {type: RequestOptions}];
    return Jsonp;
  }(Http));
  function _createDefaultCookieXSRFStrategy() {
    return new CookieXSRFStrategy();
  }
  function httpFactory(xhrBackend, requestOptions) {
    return new Http(xhrBackend, requestOptions);
  }
  function jsonpFactory(jsonpBackend, requestOptions) {
    return new Jsonp(jsonpBackend, requestOptions);
  }
  var HttpModule = (function() {
    function HttpModule() {}
    HttpModule.decorators = [{
      type: _angular_core.NgModule,
      args: [{providers: [{
          provide: Http,
          useFactory: httpFactory,
          deps: [XHRBackend, RequestOptions]
        }, BrowserXhr, {
          provide: RequestOptions,
          useClass: BaseRequestOptions
        }, {
          provide: ResponseOptions,
          useClass: BaseResponseOptions
        }, XHRBackend, {
          provide: XSRFStrategy,
          useFactory: _createDefaultCookieXSRFStrategy
        }]}]
    }];
    HttpModule.ctorParameters = [];
    return HttpModule;
  }());
  var JsonpModule = (function() {
    function JsonpModule() {}
    JsonpModule.decorators = [{
      type: _angular_core.NgModule,
      args: [{providers: [{
          provide: Jsonp,
          useFactory: jsonpFactory,
          deps: [JSONPBackend, RequestOptions]
        }, BrowserJsonp, {
          provide: RequestOptions,
          useClass: BaseRequestOptions
        }, {
          provide: ResponseOptions,
          useClass: BaseResponseOptions
        }, {
          provide: JSONPBackend,
          useClass: JSONPBackend_
        }]}]
    }];
    JsonpModule.ctorParameters = [];
    return JsonpModule;
  }());
  exports.BrowserXhr = BrowserXhr;
  exports.JSONPBackend = JSONPBackend;
  exports.JSONPConnection = JSONPConnection;
  exports.CookieXSRFStrategy = CookieXSRFStrategy;
  exports.XHRBackend = XHRBackend;
  exports.XHRConnection = XHRConnection;
  exports.BaseRequestOptions = BaseRequestOptions;
  exports.RequestOptions = RequestOptions;
  exports.BaseResponseOptions = BaseResponseOptions;
  exports.ResponseOptions = ResponseOptions;
  exports.Headers = Headers;
  exports.Http = Http;
  exports.Jsonp = Jsonp;
  exports.HttpModule = HttpModule;
  exports.JsonpModule = JsonpModule;
  exports.Connection = Connection;
  exports.ConnectionBackend = ConnectionBackend;
  exports.XSRFStrategy = XSRFStrategy;
  exports.Request = Request;
  exports.Response = Response;
  exports.QueryEncoder = QueryEncoder;
  exports.URLSearchParams = URLSearchParams;
}));

})();
$__System.registerDynamic('node_modules/rxjs/operator/map.js', ['node_modules/rxjs/Subscriber.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    /**
     * Applies a given `project` function to each value emitted by the source
     * Observable, and emits the resulting values as an Observable.
     *
     * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
     * it passes each source value through a transformation function to get
     * corresponding output values.</span>
     *
     * <img src="./img/map.png" width="100%">
     *
     * Similar to the well known `Array.prototype.map` function, this operator
     * applies a projection to each value and emits that projection in the output
     * Observable.
     *
     * @example <caption>Map every every click to the clientX position of that click</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var positions = clicks.map(ev => ev.clientX);
     * positions.subscribe(x => console.log(x));
     *
     * @see {@link mapTo}
     * @see {@link pluck}
     *
     * @param {function(value: T, index: number): R} project The function to apply
     * to each `value` emitted by the source Observable. The `index` parameter is
     * the number `i` for the i-th emission that has happened since the
     * subscription, starting from the number `0`.
     * @param {any} [thisArg] An optional argument to define what `this` is in the
     * `project` function.
     * @return {Observable<R>} An Observable that emits the values from the source
     * Observable transformed by the given `project` function.
     * @method map
     * @owner Observable
     */
    function map(project, thisArg) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return this.lift(new MapOperator(project, thisArg));
    }
    exports.map = map;
    var MapOperator = function () {
        function MapOperator(project, thisArg) {
            this.project = project;
            this.thisArg = thisArg;
        }
        MapOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
        };
        return MapOperator;
    }();
    exports.MapOperator = MapOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MapSubscriber = function (_super) {
        __extends(MapSubscriber, _super);
        function MapSubscriber(destination, project, thisArg) {
            _super.call(this, destination);
            this.project = project;
            this.count = 0;
            this.thisArg = thisArg || this;
        }
        // NOTE: This looks unoptimized, but it's actually purposefully NOT
        // using try/catch optimizations.
        MapSubscriber.prototype._next = function (value) {
            var result;
            try {
                result = this.project.call(this.thisArg, value, this.count++);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return MapSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/add/operator/map.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/operator/map.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('node_modules/rxjs/Observable.js');
  var map_1 = $__require('node_modules/rxjs/operator/map.js');
  Observable_1.Observable.prototype.map = map_1.map;
  

  return module.exports;
});
$__System.registerDynamic("app/09/101Connecting to the Server/github.service.js", ["node_modules/@angular/core/bundles/core.umd.js", "node_modules/@angular/http/bundles/http.umd.js", "node_modules/rxjs/add/operator/map.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var http_1 = $__require("node_modules/@angular/http/bundles/http.umd.js");
    $__require("node_modules/rxjs/add/operator/map.js");
    var GitHubService = function () {
        function GitHubService(_http) {
            this._http = _http;
            this._baseUrl = "https://api.github.com/users/";
        }
        GitHubService.prototype.getUser = function (username) {
            return this._http.get(this._baseUrl + username).map(function (res) {
                return res.json();
            });
        };
        GitHubService.prototype.getFollowers = function (username) {
            return this._http.get(this._baseUrl + username + "/followers").map(function (res) {
                return res.json();
            });
        };
        return GitHubService;
    }();
    GitHubService = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [http_1.Http])], GitHubService);
    exports.GitHubService = GitHubService;
    

    return module.exports;
});
$__System.registerDynamic("app/09/app.module.js", ["node_modules/@angular/core/bundles/core.umd.js", "node_modules/@angular/platform-browser/bundles/platform-browser.umd.js", "app/09/app.component.js", "app/09/101Connecting to the Server/github-profile.component.js", "app/09/101Connecting to the Server/github.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var platform_browser_1 = $__require("node_modules/@angular/platform-browser/bundles/platform-browser.umd.js");
    var app_component_1 = $__require("app/09/app.component.js");
    var github_profile_component_1 = $__require("app/09/101Connecting to the Server/github-profile.component.js");
    var github_service_1 = $__require("app/09/101Connecting to the Server/github.service.js");
    var AppModule09 = function () {
        function AppModule09() {}
        return AppModule09;
    }();
    AppModule09 = __decorate([core_1.NgModule({
        imports: [platform_browser_1.BrowserModule],
        declarations: [app_component_1.ConnectingtotheServer, github_profile_component_1.GitHubProfileComponent],
        bootstrap: [app_component_1.ConnectingtotheServer],
        providers: [github_service_1.GitHubService]
    }), __metadata("design:paramtypes", [])], AppModule09);
    exports.AppModule09 = AppModule09;
    

    return module.exports;
});
(function() {
var define = $__System.amdDefine;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) : typeof define === 'function' && define.amd ? define("node_modules/@angular/common/bundles/common.umd.js", ["exports", "node_modules/@angular/core/bundles/core.umd.js"], factory) : (factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}), global.ng.core));
}(this, function(exports, _angular_core) {
  'use strict';
  var PlatformLocation = (function() {
    function PlatformLocation() {}
    Object.defineProperty(PlatformLocation.prototype, "pathname", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PlatformLocation.prototype, "search", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PlatformLocation.prototype, "hash", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    return PlatformLocation;
  }());
  var LocationStrategy = (function() {
    function LocationStrategy() {}
    return LocationStrategy;
  }());
  var APP_BASE_HREF = new _angular_core.OpaqueToken('appBaseHref');
  var globalScope;
  if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
      globalScope = self;
    } else {
      globalScope = global;
    }
  } else {
    globalScope = window;
  }
  var _global = globalScope;
  function getTypeNameForDebugging(type) {
    return type['name'] || typeof type;
  }
  _global.assert = function assert(condition) {};
  function isPresent(obj) {
    return obj != null;
  }
  function isBlank(obj) {
    return obj == null;
  }
  function isDate(obj) {
    return obj instanceof Date && !isNaN(obj.valueOf());
  }
  function stringify(token) {
    if (typeof token === 'string') {
      return token;
    }
    if (token == null) {
      return '' + token;
    }
    if (token.overriddenName) {
      return token.overriddenName;
    }
    if (token.name) {
      return token.name;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  var NumberWrapper = (function() {
    function NumberWrapper() {}
    NumberWrapper.parseIntAutoRadix = function(text) {
      var result = parseInt(text);
      if (isNaN(result)) {
        throw new Error('Invalid integer literal when parsing ' + text);
      }
      return result;
    };
    NumberWrapper.isNumeric = function(value) {
      return !isNaN(value - parseFloat(value));
    };
    return NumberWrapper;
  }());
  function isJsObject(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
  }
  var _symbolIterator = null;
  function getSymbolIterator() {
    if (!_symbolIterator) {
      if (globalScope.Symbol && Symbol.iterator) {
        _symbolIterator = Symbol.iterator;
      } else {
        var keys = Object.getOwnPropertyNames(Map.prototype);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
            _symbolIterator = key;
          }
        }
      }
    }
    return _symbolIterator;
  }
  var Location = (function() {
    function Location(platformStrategy) {
      var _this = this;
      this._subject = new _angular_core.EventEmitter();
      this._platformStrategy = platformStrategy;
      var browserBaseHref = this._platformStrategy.getBaseHref();
      this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
      this._platformStrategy.onPopState(function(ev) {
        _this._subject.emit({
          'url': _this.path(true),
          'pop': true,
          'type': ev.type
        });
      });
    }
    Location.prototype.path = function(includeHash) {
      if (includeHash === void 0) {
        includeHash = false;
      }
      return this.normalize(this._platformStrategy.path(includeHash));
    };
    Location.prototype.isCurrentPathEqualTo = function(path, query) {
      if (query === void 0) {
        query = '';
      }
      return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
    };
    Location.prototype.normalize = function(url) {
      return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
    };
    Location.prototype.prepareExternalUrl = function(url) {
      if (url.length > 0 && !url.startsWith('/')) {
        url = '/' + url;
      }
      return this._platformStrategy.prepareExternalUrl(url);
    };
    Location.prototype.go = function(path, query) {
      if (query === void 0) {
        query = '';
      }
      this._platformStrategy.pushState(null, '', path, query);
    };
    Location.prototype.replaceState = function(path, query) {
      if (query === void 0) {
        query = '';
      }
      this._platformStrategy.replaceState(null, '', path, query);
    };
    Location.prototype.forward = function() {
      this._platformStrategy.forward();
    };
    Location.prototype.back = function() {
      this._platformStrategy.back();
    };
    Location.prototype.subscribe = function(onNext, onThrow, onReturn) {
      if (onThrow === void 0) {
        onThrow = null;
      }
      if (onReturn === void 0) {
        onReturn = null;
      }
      return this._subject.subscribe({
        next: onNext,
        error: onThrow,
        complete: onReturn
      });
    };
    Location.normalizeQueryParams = function(params) {
      return (params.length > 0 && params.substring(0, 1) != '?') ? ('?' + params) : params;
    };
    Location.joinWithSlash = function(start, end) {
      if (start.length == 0) {
        return end;
      }
      if (end.length == 0) {
        return start;
      }
      var slashes = 0;
      if (start.endsWith('/')) {
        slashes++;
      }
      if (end.startsWith('/')) {
        slashes++;
      }
      if (slashes == 2) {
        return start + end.substring(1);
      }
      if (slashes == 1) {
        return start + end;
      }
      return start + '/' + end;
    };
    Location.stripTrailingSlash = function(url) {
      if (/\/$/g.test(url)) {
        url = url.substring(0, url.length - 1);
      }
      return url;
    };
    Location.decorators = [{type: _angular_core.Injectable}];
    Location.ctorParameters = [{type: LocationStrategy}];
    return Location;
  }());
  function _stripBaseHref(baseHref, url) {
    if (baseHref.length > 0 && url.startsWith(baseHref)) {
      return url.substring(baseHref.length);
    }
    return url;
  }
  function _stripIndexHtml(url) {
    if (/\/index.html$/g.test(url)) {
      return url.substring(0, url.length - 11);
    }
    return url;
  }
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HashLocationStrategy = (function(_super) {
    __extends(HashLocationStrategy, _super);
    function HashLocationStrategy(_platformLocation, _baseHref) {
      _super.call(this);
      this._platformLocation = _platformLocation;
      this._baseHref = '';
      if (isPresent(_baseHref)) {
        this._baseHref = _baseHref;
      }
    }
    HashLocationStrategy.prototype.onPopState = function(fn) {
      this._platformLocation.onPopState(fn);
      this._platformLocation.onHashChange(fn);
    };
    HashLocationStrategy.prototype.getBaseHref = function() {
      return this._baseHref;
    };
    HashLocationStrategy.prototype.path = function(includeHash) {
      if (includeHash === void 0) {
        includeHash = false;
      }
      var path = this._platformLocation.hash;
      if (!isPresent(path))
        path = '#';
      return path.length > 0 ? path.substring(1) : path;
    };
    HashLocationStrategy.prototype.prepareExternalUrl = function(internal) {
      var url = Location.joinWithSlash(this._baseHref, internal);
      return url.length > 0 ? ('#' + url) : url;
    };
    HashLocationStrategy.prototype.pushState = function(state, title, path, queryParams) {
      var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
      if (url.length == 0) {
        url = this._platformLocation.pathname;
      }
      this._platformLocation.pushState(state, title, url);
    };
    HashLocationStrategy.prototype.replaceState = function(state, title, path, queryParams) {
      var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
      if (url.length == 0) {
        url = this._platformLocation.pathname;
      }
      this._platformLocation.replaceState(state, title, url);
    };
    HashLocationStrategy.prototype.forward = function() {
      this._platformLocation.forward();
    };
    HashLocationStrategy.prototype.back = function() {
      this._platformLocation.back();
    };
    HashLocationStrategy.decorators = [{type: _angular_core.Injectable}];
    HashLocationStrategy.ctorParameters = [{type: PlatformLocation}, {
      type: undefined,
      decorators: [{type: _angular_core.Optional}, {
        type: _angular_core.Inject,
        args: [APP_BASE_HREF]
      }]
    }];
    return HashLocationStrategy;
  }(LocationStrategy));
  var __extends$1 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var PathLocationStrategy = (function(_super) {
    __extends$1(PathLocationStrategy, _super);
    function PathLocationStrategy(_platformLocation, href) {
      _super.call(this);
      this._platformLocation = _platformLocation;
      if (isBlank(href)) {
        href = this._platformLocation.getBaseHrefFromDOM();
      }
      if (isBlank(href)) {
        throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
      }
      this._baseHref = href;
    }
    PathLocationStrategy.prototype.onPopState = function(fn) {
      this._platformLocation.onPopState(fn);
      this._platformLocation.onHashChange(fn);
    };
    PathLocationStrategy.prototype.getBaseHref = function() {
      return this._baseHref;
    };
    PathLocationStrategy.prototype.prepareExternalUrl = function(internal) {
      return Location.joinWithSlash(this._baseHref, internal);
    };
    PathLocationStrategy.prototype.path = function(includeHash) {
      if (includeHash === void 0) {
        includeHash = false;
      }
      var pathname = this._platformLocation.pathname + Location.normalizeQueryParams(this._platformLocation.search);
      var hash = this._platformLocation.hash;
      return hash && includeHash ? "" + pathname + hash : pathname;
    };
    PathLocationStrategy.prototype.pushState = function(state, title, url, queryParams) {
      var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
      this._platformLocation.pushState(state, title, externalUrl);
    };
    PathLocationStrategy.prototype.replaceState = function(state, title, url, queryParams) {
      var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
      this._platformLocation.replaceState(state, title, externalUrl);
    };
    PathLocationStrategy.prototype.forward = function() {
      this._platformLocation.forward();
    };
    PathLocationStrategy.prototype.back = function() {
      this._platformLocation.back();
    };
    PathLocationStrategy.decorators = [{type: _angular_core.Injectable}];
    PathLocationStrategy.ctorParameters = [{type: PlatformLocation}, {
      type: undefined,
      decorators: [{type: _angular_core.Optional}, {
        type: _angular_core.Inject,
        args: [APP_BASE_HREF]
      }]
    }];
    return PathLocationStrategy;
  }(LocationStrategy));
  var __extends$2 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var NgLocalization = (function() {
    function NgLocalization() {}
    return NgLocalization;
  }());
  function getPluralCategory(value, cases, ngLocalization) {
    var nbCase = "=" + value;
    return cases.indexOf(nbCase) > -1 ? nbCase : ngLocalization.getPluralCategory(value);
  }
  var NgLocaleLocalization = (function(_super) {
    __extends$2(NgLocaleLocalization, _super);
    function NgLocaleLocalization(_locale) {
      _super.call(this);
      this._locale = _locale;
    }
    NgLocaleLocalization.prototype.getPluralCategory = function(value) {
      var plural = getPluralCase(this._locale, value);
      switch (plural) {
        case Plural.Zero:
          return 'zero';
        case Plural.One:
          return 'one';
        case Plural.Two:
          return 'two';
        case Plural.Few:
          return 'few';
        case Plural.Many:
          return 'many';
        default:
          return 'other';
      }
    };
    NgLocaleLocalization.decorators = [{type: _angular_core.Injectable}];
    NgLocaleLocalization.ctorParameters = [{
      type: undefined,
      decorators: [{
        type: _angular_core.Inject,
        args: [_angular_core.LOCALE_ID]
      }]
    }];
    return NgLocaleLocalization;
  }(NgLocalization));
  var Plural;
  (function(Plural) {
    Plural[Plural["Zero"] = 0] = "Zero";
    Plural[Plural["One"] = 1] = "One";
    Plural[Plural["Two"] = 2] = "Two";
    Plural[Plural["Few"] = 3] = "Few";
    Plural[Plural["Many"] = 4] = "Many";
    Plural[Plural["Other"] = 5] = "Other";
  })(Plural || (Plural = {}));
  function getPluralCase(locale, nLike) {
    if (typeof nLike === 'string') {
      nLike = parseInt(nLike, 10);
    }
    var n = nLike;
    var nDecimal = n.toString().replace(/^[^.]*\.?/, '');
    var i = Math.floor(Math.abs(n));
    var v = nDecimal.length;
    var f = parseInt(nDecimal, 10);
    var t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ''), 10) || 0;
    var lang = locale.split('-')[0].toLowerCase();
    switch (lang) {
      case 'af':
      case 'asa':
      case 'az':
      case 'bem':
      case 'bez':
      case 'bg':
      case 'brx':
      case 'ce':
      case 'cgg':
      case 'chr':
      case 'ckb':
      case 'ee':
      case 'el':
      case 'eo':
      case 'es':
      case 'eu':
      case 'fo':
      case 'fur':
      case 'gsw':
      case 'ha':
      case 'haw':
      case 'hu':
      case 'jgo':
      case 'jmc':
      case 'ka':
      case 'kk':
      case 'kkj':
      case 'kl':
      case 'ks':
      case 'ksb':
      case 'ky':
      case 'lb':
      case 'lg':
      case 'mas':
      case 'mgo':
      case 'ml':
      case 'mn':
      case 'nb':
      case 'nd':
      case 'ne':
      case 'nn':
      case 'nnh':
      case 'nyn':
      case 'om':
      case 'or':
      case 'os':
      case 'ps':
      case 'rm':
      case 'rof':
      case 'rwk':
      case 'saq':
      case 'seh':
      case 'sn':
      case 'so':
      case 'sq':
      case 'ta':
      case 'te':
      case 'teo':
      case 'tk':
      case 'tr':
      case 'ug':
      case 'uz':
      case 'vo':
      case 'vun':
      case 'wae':
      case 'xog':
        if (n === 1)
          return Plural.One;
        return Plural.Other;
      case 'agq':
      case 'bas':
      case 'cu':
      case 'dav':
      case 'dje':
      case 'dua':
      case 'dyo':
      case 'ebu':
      case 'ewo':
      case 'guz':
      case 'kam':
      case 'khq':
      case 'ki':
      case 'kln':
      case 'kok':
      case 'ksf':
      case 'lrc':
      case 'lu':
      case 'luo':
      case 'luy':
      case 'mer':
      case 'mfe':
      case 'mgh':
      case 'mua':
      case 'mzn':
      case 'nmg':
      case 'nus':
      case 'qu':
      case 'rn':
      case 'rw':
      case 'sbp':
      case 'twq':
      case 'vai':
      case 'yav':
      case 'yue':
      case 'zgh':
      case 'ak':
      case 'ln':
      case 'mg':
      case 'pa':
      case 'ti':
        if (n === Math.floor(n) && n >= 0 && n <= 1)
          return Plural.One;
        return Plural.Other;
      case 'am':
      case 'as':
      case 'bn':
      case 'fa':
      case 'gu':
      case 'hi':
      case 'kn':
      case 'mr':
      case 'zu':
        if (i === 0 || n === 1)
          return Plural.One;
        return Plural.Other;
      case 'ar':
        if (n === 0)
          return Plural.Zero;
        if (n === 1)
          return Plural.One;
        if (n === 2)
          return Plural.Two;
        if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)
          return Plural.Few;
        if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)
          return Plural.Many;
        return Plural.Other;
      case 'ast':
      case 'ca':
      case 'de':
      case 'en':
      case 'et':
      case 'fi':
      case 'fy':
      case 'gl':
      case 'it':
      case 'nl':
      case 'sv':
      case 'sw':
      case 'ur':
      case 'yi':
        if (i === 1 && v === 0)
          return Plural.One;
        return Plural.Other;
      case 'be':
        if (n % 10 === 1 && !(n % 100 === 11))
          return Plural.One;
        if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 && !(n % 100 >= 12 && n % 100 <= 14))
          return Plural.Few;
        if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)
          return Plural.Many;
        return Plural.Other;
      case 'br':
        if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))
          return Plural.One;
        if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))
          return Plural.Two;
        if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) && !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 || n % 100 >= 90 && n % 100 <= 99))
          return Plural.Few;
        if (!(n === 0) && n % 1e6 === 0)
          return Plural.Many;
        return Plural.Other;
      case 'bs':
      case 'hr':
      case 'sr':
        if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))
          return Plural.One;
        if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14) || f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 && !(f % 100 >= 12 && f % 100 <= 14))
          return Plural.Few;
        return Plural.Other;
      case 'cs':
      case 'sk':
        if (i === 1 && v === 0)
          return Plural.One;
        if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)
          return Plural.Few;
        if (!(v === 0))
          return Plural.Many;
        return Plural.Other;
      case 'cy':
        if (n === 0)
          return Plural.Zero;
        if (n === 1)
          return Plural.One;
        if (n === 2)
          return Plural.Two;
        if (n === 3)
          return Plural.Few;
        if (n === 6)
          return Plural.Many;
        return Plural.Other;
      case 'da':
        if (n === 1 || !(t === 0) && (i === 0 || i === 1))
          return Plural.One;
        return Plural.Other;
      case 'dsb':
      case 'hsb':
        if (v === 0 && i % 100 === 1 || f % 100 === 1)
          return Plural.One;
        if (v === 0 && i % 100 === 2 || f % 100 === 2)
          return Plural.Two;
        if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)
          return Plural.Few;
        return Plural.Other;
      case 'ff':
      case 'fr':
      case 'hy':
      case 'kab':
        if (i === 0 || i === 1)
          return Plural.One;
        return Plural.Other;
      case 'fil':
        if (v === 0 && (i === 1 || i === 2 || i === 3) || v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) || !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))
          return Plural.One;
        return Plural.Other;
      case 'ga':
        if (n === 1)
          return Plural.One;
        if (n === 2)
          return Plural.Two;
        if (n === Math.floor(n) && n >= 3 && n <= 6)
          return Plural.Few;
        if (n === Math.floor(n) && n >= 7 && n <= 10)
          return Plural.Many;
        return Plural.Other;
      case 'gd':
        if (n === 1 || n === 11)
          return Plural.One;
        if (n === 2 || n === 12)
          return Plural.Two;
        if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))
          return Plural.Few;
        return Plural.Other;
      case 'gv':
        if (v === 0 && i % 10 === 1)
          return Plural.One;
        if (v === 0 && i % 10 === 2)
          return Plural.Two;
        if (v === 0 && (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))
          return Plural.Few;
        if (!(v === 0))
          return Plural.Many;
        return Plural.Other;
      case 'he':
        if (i === 1 && v === 0)
          return Plural.One;
        if (i === 2 && v === 0)
          return Plural.Two;
        if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)
          return Plural.Many;
        return Plural.Other;
      case 'is':
        if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))
          return Plural.One;
        return Plural.Other;
      case 'ksh':
        if (n === 0)
          return Plural.Zero;
        if (n === 1)
          return Plural.One;
        return Plural.Other;
      case 'kw':
      case 'naq':
      case 'se':
      case 'smn':
        if (n === 1)
          return Plural.One;
        if (n === 2)
          return Plural.Two;
        return Plural.Other;
      case 'lag':
        if (n === 0)
          return Plural.Zero;
        if ((i === 0 || i === 1) && !(n === 0))
          return Plural.One;
        return Plural.Other;
      case 'lt':
        if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))
          return Plural.One;
        if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 && !(n % 100 >= 11 && n % 100 <= 19))
          return Plural.Few;
        if (!(f === 0))
          return Plural.Many;
        return Plural.Other;
      case 'lv':
      case 'prg':
        if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 || v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)
          return Plural.Zero;
        if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) || !(v === 2) && f % 10 === 1)
          return Plural.One;
        return Plural.Other;
      case 'mk':
        if (v === 0 && i % 10 === 1 || f % 10 === 1)
          return Plural.One;
        return Plural.Other;
      case 'mt':
        if (n === 1)
          return Plural.One;
        if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)
          return Plural.Few;
        if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)
          return Plural.Many;
        return Plural.Other;
      case 'pl':
        if (i === 1 && v === 0)
          return Plural.One;
        if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14))
          return Plural.Few;
        if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 || v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)
          return Plural.Many;
        return Plural.Other;
      case 'pt':
        if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))
          return Plural.One;
        return Plural.Other;
      case 'ro':
        if (i === 1 && v === 0)
          return Plural.One;
        if (!(v === 0) || n === 0 || !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)
          return Plural.Few;
        return Plural.Other;
      case 'ru':
      case 'uk':
        if (v === 0 && i % 10 === 1 && !(i % 100 === 11))
          return Plural.One;
        if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14))
          return Plural.Few;
        if (v === 0 && i % 10 === 0 || v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)
          return Plural.Many;
        return Plural.Other;
      case 'shi':
        if (i === 0 || n === 1)
          return Plural.One;
        if (n === Math.floor(n) && n >= 2 && n <= 10)
          return Plural.Few;
        return Plural.Other;
      case 'si':
        if (n === 0 || n === 1 || i === 0 && f === 1)
          return Plural.One;
        return Plural.Other;
      case 'sl':
        if (v === 0 && i % 100 === 1)
          return Plural.One;
        if (v === 0 && i % 100 === 2)
          return Plural.Two;
        if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))
          return Plural.Few;
        return Plural.Other;
      case 'tzm':
        if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)
          return Plural.One;
        return Plural.Other;
      default:
        return Plural.Other;
    }
  }
  function isListLikeIterable(obj) {
    if (!isJsObject(obj))
      return false;
    return Array.isArray(obj) || (!(obj instanceof Map) && getSymbolIterator() in obj);
  }
  var NgClass = (function() {
    function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
      this._iterableDiffers = _iterableDiffers;
      this._keyValueDiffers = _keyValueDiffers;
      this._ngEl = _ngEl;
      this._renderer = _renderer;
      this._initialClasses = [];
    }
    Object.defineProperty(NgClass.prototype, "klass", {
      set: function(v) {
        this._applyInitialClasses(true);
        this._initialClasses = typeof v === 'string' ? v.split(/\s+/) : [];
        this._applyInitialClasses(false);
        this._applyClasses(this._rawClass, false);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgClass.prototype, "ngClass", {
      set: function(v) {
        this._cleanupClasses(this._rawClass);
        this._iterableDiffer = null;
        this._keyValueDiffer = null;
        this._rawClass = typeof v === 'string' ? v.split(/\s+/) : v;
        if (this._rawClass) {
          if (isListLikeIterable(this._rawClass)) {
            this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create(null);
          } else {
            this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create(null);
          }
        }
      },
      enumerable: true,
      configurable: true
    });
    NgClass.prototype.ngDoCheck = function() {
      if (this._iterableDiffer) {
        var changes = this._iterableDiffer.diff(this._rawClass);
        if (changes) {
          this._applyIterableChanges(changes);
        }
      } else if (this._keyValueDiffer) {
        var changes = this._keyValueDiffer.diff(this._rawClass);
        if (changes) {
          this._applyKeyValueChanges(changes);
        }
      }
    };
    NgClass.prototype._cleanupClasses = function(rawClassVal) {
      this._applyClasses(rawClassVal, true);
      this._applyInitialClasses(false);
    };
    NgClass.prototype._applyKeyValueChanges = function(changes) {
      var _this = this;
      changes.forEachAddedItem(function(record) {
        return _this._toggleClass(record.key, record.currentValue);
      });
      changes.forEachChangedItem(function(record) {
        return _this._toggleClass(record.key, record.currentValue);
      });
      changes.forEachRemovedItem(function(record) {
        if (record.previousValue) {
          _this._toggleClass(record.key, false);
        }
      });
    };
    NgClass.prototype._applyIterableChanges = function(changes) {
      var _this = this;
      changes.forEachAddedItem(function(record) {
        if (typeof record.item === 'string') {
          _this._toggleClass(record.item, true);
        } else {
          throw new Error("NgClass can only toggle CSS classes expressed as strings, got " + stringify(record.item));
        }
      });
      changes.forEachRemovedItem(function(record) {
        return _this._toggleClass(record.item, false);
      });
    };
    NgClass.prototype._applyInitialClasses = function(isCleanup) {
      var _this = this;
      this._initialClasses.forEach(function(klass) {
        return _this._toggleClass(klass, !isCleanup);
      });
    };
    NgClass.prototype._applyClasses = function(rawClassVal, isCleanup) {
      var _this = this;
      if (rawClassVal) {
        if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
          rawClassVal.forEach(function(klass) {
            return _this._toggleClass(klass, !isCleanup);
          });
        } else {
          Object.keys(rawClassVal).forEach(function(klass) {
            if (isPresent(rawClassVal[klass]))
              _this._toggleClass(klass, !isCleanup);
          });
        }
      }
    };
    NgClass.prototype._toggleClass = function(klass, enabled) {
      var _this = this;
      klass = klass.trim();
      if (klass) {
        klass.split(/\s+/g).forEach(function(klass) {
          _this._renderer.setElementClass(_this._ngEl.nativeElement, klass, enabled);
        });
      }
    };
    NgClass.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngClass]'}]
    }];
    NgClass.ctorParameters = [{type: _angular_core.IterableDiffers}, {type: _angular_core.KeyValueDiffers}, {type: _angular_core.ElementRef}, {type: _angular_core.Renderer}];
    NgClass.propDecorators = {
      'klass': [{
        type: _angular_core.Input,
        args: ['class']
      }],
      'ngClass': [{type: _angular_core.Input}]
    };
    return NgClass;
  }());
  var NgForRow = (function() {
    function NgForRow($implicit, index, count) {
      this.$implicit = $implicit;
      this.index = index;
      this.count = count;
    }
    Object.defineProperty(NgForRow.prototype, "first", {
      get: function() {
        return this.index === 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForRow.prototype, "last", {
      get: function() {
        return this.index === this.count - 1;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForRow.prototype, "even", {
      get: function() {
        return this.index % 2 === 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForRow.prototype, "odd", {
      get: function() {
        return !this.even;
      },
      enumerable: true,
      configurable: true
    });
    return NgForRow;
  }());
  var NgFor = (function() {
    function NgFor(_viewContainer, _template, _differs, _cdr) {
      this._viewContainer = _viewContainer;
      this._template = _template;
      this._differs = _differs;
      this._cdr = _cdr;
      this._differ = null;
    }
    Object.defineProperty(NgFor.prototype, "ngForTemplate", {
      set: function(value) {
        if (value) {
          this._template = value;
        }
      },
      enumerable: true,
      configurable: true
    });
    NgFor.prototype.ngOnChanges = function(changes) {
      if ('ngForOf' in changes) {
        var value = changes['ngForOf'].currentValue;
        if (!this._differ && value) {
          try {
            this._differ = this._differs.find(value).create(this._cdr, this.ngForTrackBy);
          } catch (e) {
            throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
          }
        }
      }
    };
    NgFor.prototype.ngDoCheck = function() {
      if (this._differ) {
        var changes = this._differ.diff(this.ngForOf);
        if (changes)
          this._applyChanges(changes);
      }
    };
    NgFor.prototype._applyChanges = function(changes) {
      var _this = this;
      var insertTuples = [];
      changes.forEachOperation(function(item, adjustedPreviousIndex, currentIndex) {
        if (item.previousIndex == null) {
          var view = _this._viewContainer.createEmbeddedView(_this._template, new NgForRow(null, null, null), currentIndex);
          var tuple = new RecordViewTuple(item, view);
          insertTuples.push(tuple);
        } else if (currentIndex == null) {
          _this._viewContainer.remove(adjustedPreviousIndex);
        } else {
          var view = _this._viewContainer.get(adjustedPreviousIndex);
          _this._viewContainer.move(view, currentIndex);
          var tuple = new RecordViewTuple(item, view);
          insertTuples.push(tuple);
        }
      });
      for (var i = 0; i < insertTuples.length; i++) {
        this._perViewChange(insertTuples[i].view, insertTuples[i].record);
      }
      for (var i = 0,
          ilen = this._viewContainer.length; i < ilen; i++) {
        var viewRef = this._viewContainer.get(i);
        viewRef.context.index = i;
        viewRef.context.count = ilen;
      }
      changes.forEachIdentityChange(function(record) {
        var viewRef = _this._viewContainer.get(record.currentIndex);
        viewRef.context.$implicit = record.item;
      });
    };
    NgFor.prototype._perViewChange = function(view, record) {
      view.context.$implicit = record.item;
    };
    NgFor.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngFor][ngForOf]'}]
    }];
    NgFor.ctorParameters = [{type: _angular_core.ViewContainerRef}, {type: _angular_core.TemplateRef}, {type: _angular_core.IterableDiffers}, {type: _angular_core.ChangeDetectorRef}];
    NgFor.propDecorators = {
      'ngForOf': [{type: _angular_core.Input}],
      'ngForTrackBy': [{type: _angular_core.Input}],
      'ngForTemplate': [{type: _angular_core.Input}]
    };
    return NgFor;
  }());
  var RecordViewTuple = (function() {
    function RecordViewTuple(record, view) {
      this.record = record;
      this.view = view;
    }
    return RecordViewTuple;
  }());
  var NgIf = (function() {
    function NgIf(_viewContainer, _template) {
      this._viewContainer = _viewContainer;
      this._template = _template;
      this._hasView = false;
    }
    Object.defineProperty(NgIf.prototype, "ngIf", {
      set: function(condition) {
        if (condition && !this._hasView) {
          this._hasView = true;
          this._viewContainer.createEmbeddedView(this._template);
        } else if (!condition && this._hasView) {
          this._hasView = false;
          this._viewContainer.clear();
        }
      },
      enumerable: true,
      configurable: true
    });
    NgIf.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngIf]'}]
    }];
    NgIf.ctorParameters = [{type: _angular_core.ViewContainerRef}, {type: _angular_core.TemplateRef}];
    NgIf.propDecorators = {'ngIf': [{type: _angular_core.Input}]};
    return NgIf;
  }());
  var SwitchView = (function() {
    function SwitchView(_viewContainerRef, _templateRef) {
      this._viewContainerRef = _viewContainerRef;
      this._templateRef = _templateRef;
      this._created = false;
    }
    SwitchView.prototype.create = function() {
      this._created = true;
      this._viewContainerRef.createEmbeddedView(this._templateRef);
    };
    SwitchView.prototype.destroy = function() {
      this._created = false;
      this._viewContainerRef.clear();
    };
    SwitchView.prototype.enforceState = function(created) {
      if (created && !this._created) {
        this.create();
      } else if (!created && this._created) {
        this.destroy();
      }
    };
    return SwitchView;
  }());
  var NgSwitch = (function() {
    function NgSwitch() {
      this._defaultUsed = false;
      this._caseCount = 0;
      this._lastCaseCheckIndex = 0;
      this._lastCasesMatched = false;
    }
    Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
      set: function(newValue) {
        this._ngSwitch = newValue;
        if (this._caseCount === 0) {
          this._updateDefaultCases(true);
        }
      },
      enumerable: true,
      configurable: true
    });
    NgSwitch.prototype._addCase = function() {
      return this._caseCount++;
    };
    NgSwitch.prototype._addDefault = function(view) {
      if (!this._defaultViews) {
        this._defaultViews = [];
      }
      this._defaultViews.push(view);
    };
    NgSwitch.prototype._matchCase = function(value) {
      var matched = value == this._ngSwitch;
      this._lastCasesMatched = this._lastCasesMatched || matched;
      this._lastCaseCheckIndex++;
      if (this._lastCaseCheckIndex === this._caseCount) {
        this._updateDefaultCases(!this._lastCasesMatched);
        this._lastCaseCheckIndex = 0;
        this._lastCasesMatched = false;
      }
      return matched;
    };
    NgSwitch.prototype._updateDefaultCases = function(useDefault) {
      if (this._defaultViews && useDefault !== this._defaultUsed) {
        this._defaultUsed = useDefault;
        for (var i = 0; i < this._defaultViews.length; i++) {
          var defaultView = this._defaultViews[i];
          defaultView.enforceState(useDefault);
        }
      }
    };
    NgSwitch.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngSwitch]'}]
    }];
    NgSwitch.ctorParameters = [];
    NgSwitch.propDecorators = {'ngSwitch': [{type: _angular_core.Input}]};
    return NgSwitch;
  }());
  var NgSwitchCase = (function() {
    function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
      this.ngSwitch = ngSwitch;
      ngSwitch._addCase();
      this._view = new SwitchView(viewContainer, templateRef);
    }
    NgSwitchCase.prototype.ngDoCheck = function() {
      this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));
    };
    NgSwitchCase.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngSwitchCase]'}]
    }];
    NgSwitchCase.ctorParameters = [{type: _angular_core.ViewContainerRef}, {type: _angular_core.TemplateRef}, {
      type: NgSwitch,
      decorators: [{type: _angular_core.Host}]
    }];
    NgSwitchCase.propDecorators = {'ngSwitchCase': [{type: _angular_core.Input}]};
    return NgSwitchCase;
  }());
  var NgSwitchDefault = (function() {
    function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
      ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
    }
    NgSwitchDefault.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngSwitchDefault]'}]
    }];
    NgSwitchDefault.ctorParameters = [{type: _angular_core.ViewContainerRef}, {type: _angular_core.TemplateRef}, {
      type: NgSwitch,
      decorators: [{type: _angular_core.Host}]
    }];
    return NgSwitchDefault;
  }());
  var NgPlural = (function() {
    function NgPlural(_localization) {
      this._localization = _localization;
      this._caseViews = {};
    }
    Object.defineProperty(NgPlural.prototype, "ngPlural", {
      set: function(value) {
        this._switchValue = value;
        this._updateView();
      },
      enumerable: true,
      configurable: true
    });
    NgPlural.prototype.addCase = function(value, switchView) {
      this._caseViews[value] = switchView;
    };
    NgPlural.prototype._updateView = function() {
      this._clearViews();
      var cases = Object.keys(this._caseViews);
      var key = getPluralCategory(this._switchValue, cases, this._localization);
      this._activateView(this._caseViews[key]);
    };
    NgPlural.prototype._clearViews = function() {
      if (this._activeView)
        this._activeView.destroy();
    };
    NgPlural.prototype._activateView = function(view) {
      if (view) {
        this._activeView = view;
        this._activeView.create();
      }
    };
    NgPlural.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngPlural]'}]
    }];
    NgPlural.ctorParameters = [{type: NgLocalization}];
    NgPlural.propDecorators = {'ngPlural': [{type: _angular_core.Input}]};
    return NgPlural;
  }());
  var NgPluralCase = (function() {
    function NgPluralCase(value, template, viewContainer, ngPlural) {
      this.value = value;
      ngPlural.addCase(value, new SwitchView(viewContainer, template));
    }
    NgPluralCase.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngPluralCase]'}]
    }];
    NgPluralCase.ctorParameters = [{
      type: undefined,
      decorators: [{
        type: _angular_core.Attribute,
        args: ['ngPluralCase']
      }]
    }, {type: _angular_core.TemplateRef}, {type: _angular_core.ViewContainerRef}, {
      type: NgPlural,
      decorators: [{type: _angular_core.Host}]
    }];
    return NgPluralCase;
  }());
  var NgStyle = (function() {
    function NgStyle(_differs, _ngEl, _renderer) {
      this._differs = _differs;
      this._ngEl = _ngEl;
      this._renderer = _renderer;
    }
    Object.defineProperty(NgStyle.prototype, "ngStyle", {
      set: function(v) {
        this._ngStyle = v;
        if (!this._differ && v) {
          this._differ = this._differs.find(v).create(null);
        }
      },
      enumerable: true,
      configurable: true
    });
    NgStyle.prototype.ngDoCheck = function() {
      if (this._differ) {
        var changes = this._differ.diff(this._ngStyle);
        if (changes) {
          this._applyChanges(changes);
        }
      }
    };
    NgStyle.prototype._applyChanges = function(changes) {
      var _this = this;
      changes.forEachRemovedItem(function(record) {
        return _this._setStyle(record.key, null);
      });
      changes.forEachAddedItem(function(record) {
        return _this._setStyle(record.key, record.currentValue);
      });
      changes.forEachChangedItem(function(record) {
        return _this._setStyle(record.key, record.currentValue);
      });
    };
    NgStyle.prototype._setStyle = function(nameAndUnit, value) {
      var _a = nameAndUnit.split('.'),
          name = _a[0],
          unit = _a[1];
      value = value && unit ? "" + value + unit : value;
      this._renderer.setElementStyle(this._ngEl.nativeElement, name, value);
    };
    NgStyle.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngStyle]'}]
    }];
    NgStyle.ctorParameters = [{type: _angular_core.KeyValueDiffers}, {type: _angular_core.ElementRef}, {type: _angular_core.Renderer}];
    NgStyle.propDecorators = {'ngStyle': [{type: _angular_core.Input}]};
    return NgStyle;
  }());
  var NgTemplateOutlet = (function() {
    function NgTemplateOutlet(_viewContainerRef) {
      this._viewContainerRef = _viewContainerRef;
    }
    Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
      set: function(context) {
        this._context = context;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgTemplateOutlet.prototype, "ngTemplateOutlet", {
      set: function(templateRef) {
        this._templateRef = templateRef;
      },
      enumerable: true,
      configurable: true
    });
    NgTemplateOutlet.prototype.ngOnChanges = function(changes) {
      if (this._viewRef) {
        this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
      }
      if (this._templateRef) {
        this._viewRef = this._viewContainerRef.createEmbeddedView(this._templateRef, this._context);
      }
    };
    NgTemplateOutlet.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngTemplateOutlet]'}]
    }];
    NgTemplateOutlet.ctorParameters = [{type: _angular_core.ViewContainerRef}];
    NgTemplateOutlet.propDecorators = {
      'ngOutletContext': [{type: _angular_core.Input}],
      'ngTemplateOutlet': [{type: _angular_core.Input}]
    };
    return NgTemplateOutlet;
  }());
  var COMMON_DIRECTIVES = [NgClass, NgFor, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase];
  var isPromise = _angular_core.__core_private__.isPromise;
  var __extends$4 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var BaseError = (function(_super) {
    __extends$4(BaseError, _super);
    function BaseError(message) {
      var nativeError = _super.call(this, message);
      this._nativeError = nativeError;
    }
    Object.defineProperty(BaseError.prototype, "message", {
      get: function() {
        return this._nativeError.message;
      },
      set: function(message) {
        this._nativeError.message = message;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BaseError.prototype, "name", {
      get: function() {
        return this._nativeError.name;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BaseError.prototype, "stack", {
      get: function() {
        return this._nativeError.stack;
      },
      set: function(value) {
        this._nativeError.stack = value;
      },
      enumerable: true,
      configurable: true
    });
    BaseError.prototype.toString = function() {
      return this._nativeError.toString();
    };
    return BaseError;
  }(Error));
  var WrappedError = (function(_super) {
    __extends$4(WrappedError, _super);
    function WrappedError(message, error) {
      _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
      this.originalError = error;
    }
    Object.defineProperty(WrappedError.prototype, "stack", {
      get: function() {
        return (this.originalError instanceof Error ? this.originalError : this._nativeError).stack;
      },
      enumerable: true,
      configurable: true
    });
    return WrappedError;
  }(BaseError));
  var __extends$3 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var InvalidPipeArgumentError = (function(_super) {
    __extends$3(InvalidPipeArgumentError, _super);
    function InvalidPipeArgumentError(type, value) {
      _super.call(this, "Invalid argument '" + value + "' for pipe '" + stringify(type) + "'");
    }
    return InvalidPipeArgumentError;
  }(BaseError));
  var ObservableStrategy = (function() {
    function ObservableStrategy() {}
    ObservableStrategy.prototype.createSubscription = function(async, updateLatestValue) {
      return async.subscribe({
        next: updateLatestValue,
        error: function(e) {
          throw e;
        }
      });
    };
    ObservableStrategy.prototype.dispose = function(subscription) {
      subscription.unsubscribe();
    };
    ObservableStrategy.prototype.onDestroy = function(subscription) {
      subscription.unsubscribe();
    };
    return ObservableStrategy;
  }());
  var PromiseStrategy = (function() {
    function PromiseStrategy() {}
    PromiseStrategy.prototype.createSubscription = function(async, updateLatestValue) {
      return async.then(updateLatestValue, function(e) {
        throw e;
      });
    };
    PromiseStrategy.prototype.dispose = function(subscription) {};
    PromiseStrategy.prototype.onDestroy = function(subscription) {};
    return PromiseStrategy;
  }());
  var _promiseStrategy = new PromiseStrategy();
  var _observableStrategy = new ObservableStrategy();
  var AsyncPipe = (function() {
    function AsyncPipe(_ref) {
      this._ref = _ref;
      this._latestValue = null;
      this._latestReturnedValue = null;
      this._subscription = null;
      this._obj = null;
      this._strategy = null;
    }
    AsyncPipe.prototype.ngOnDestroy = function() {
      if (this._subscription) {
        this._dispose();
      }
    };
    AsyncPipe.prototype.transform = function(obj) {
      if (!this._obj) {
        if (obj) {
          this._subscribe(obj);
        }
        this._latestReturnedValue = this._latestValue;
        return this._latestValue;
      }
      if (obj !== this._obj) {
        this._dispose();
        return this.transform(obj);
      }
      if (this._latestValue === this._latestReturnedValue) {
        return this._latestReturnedValue;
      }
      this._latestReturnedValue = this._latestValue;
      return _angular_core.WrappedValue.wrap(this._latestValue);
    };
    AsyncPipe.prototype._subscribe = function(obj) {
      var _this = this;
      this._obj = obj;
      this._strategy = this._selectStrategy(obj);
      this._subscription = this._strategy.createSubscription(obj, function(value) {
        return _this._updateLatestValue(obj, value);
      });
    };
    AsyncPipe.prototype._selectStrategy = function(obj) {
      if (isPromise(obj)) {
        return _promiseStrategy;
      }
      if (obj.subscribe) {
        return _observableStrategy;
      }
      throw new InvalidPipeArgumentError(AsyncPipe, obj);
    };
    AsyncPipe.prototype._dispose = function() {
      this._strategy.dispose(this._subscription);
      this._latestValue = null;
      this._latestReturnedValue = null;
      this._subscription = null;
      this._obj = null;
    };
    AsyncPipe.prototype._updateLatestValue = function(async, value) {
      if (async === this._obj) {
        this._latestValue = value;
        this._ref.markForCheck();
      }
    };
    AsyncPipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{
        name: 'async',
        pure: false
      }]
    }];
    AsyncPipe.ctorParameters = [{type: _angular_core.ChangeDetectorRef}];
    return AsyncPipe;
  }());
  var NumberFormatStyle;
  (function(NumberFormatStyle) {
    NumberFormatStyle[NumberFormatStyle["Decimal"] = 0] = "Decimal";
    NumberFormatStyle[NumberFormatStyle["Percent"] = 1] = "Percent";
    NumberFormatStyle[NumberFormatStyle["Currency"] = 2] = "Currency";
  })(NumberFormatStyle || (NumberFormatStyle = {}));
  var NumberFormatter = (function() {
    function NumberFormatter() {}
    NumberFormatter.format = function(num, locale, style, _a) {
      var _b = _a === void 0 ? {} : _a,
          minimumIntegerDigits = _b.minimumIntegerDigits,
          minimumFractionDigits = _b.minimumFractionDigits,
          maximumFractionDigits = _b.maximumFractionDigits,
          currency = _b.currency,
          _c = _b.currencyAsSymbol,
          currencyAsSymbol = _c === void 0 ? false : _c;
      var options = {
        minimumIntegerDigits: minimumIntegerDigits,
        minimumFractionDigits: minimumFractionDigits,
        maximumFractionDigits: maximumFractionDigits,
        style: NumberFormatStyle[style].toLowerCase()
      };
      if (style == NumberFormatStyle.Currency) {
        options.currency = currency;
        options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
      }
      return new Intl.NumberFormat(locale, options).format(num);
    };
    return NumberFormatter;
  }());
  var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
  var PATTERN_ALIASES = {
    'yMMMdjms': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1), digitCondition('hour', 1), digitCondition('minute', 1), digitCondition('second', 1)])),
    'yMdjm': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1), digitCondition('hour', 1), digitCondition('minute', 1)])),
    'yMMMMEEEEd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4), digitCondition('day', 1)])),
    'yMMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),
    'yMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),
    'yMd': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),
    'jms': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),
    'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))
  };
  var DATE_FORMATS = {
    'yyyy': datePartGetterFactory(digitCondition('year', 4)),
    'yy': datePartGetterFactory(digitCondition('year', 2)),
    'y': datePartGetterFactory(digitCondition('year', 1)),
    'MMMM': datePartGetterFactory(nameCondition('month', 4)),
    'MMM': datePartGetterFactory(nameCondition('month', 3)),
    'MM': datePartGetterFactory(digitCondition('month', 2)),
    'M': datePartGetterFactory(digitCondition('month', 1)),
    'LLLL': datePartGetterFactory(nameCondition('month', 4)),
    'L': datePartGetterFactory(nameCondition('month', 1)),
    'dd': datePartGetterFactory(digitCondition('day', 2)),
    'd': datePartGetterFactory(digitCondition('day', 1)),
    'HH': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),
    'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),
    'hh': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),
    'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
    'jj': datePartGetterFactory(digitCondition('hour', 2)),
    'j': datePartGetterFactory(digitCondition('hour', 1)),
    'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),
    'm': datePartGetterFactory(digitCondition('minute', 1)),
    'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),
    's': datePartGetterFactory(digitCondition('second', 1)),
    'sss': datePartGetterFactory(digitCondition('second', 3)),
    'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),
    'EEE': datePartGetterFactory(nameCondition('weekday', 3)),
    'EE': datePartGetterFactory(nameCondition('weekday', 2)),
    'E': datePartGetterFactory(nameCondition('weekday', 1)),
    'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
    'Z': timeZoneGetter('short'),
    'z': timeZoneGetter('long'),
    'ww': datePartGetterFactory({}),
    'w': datePartGetterFactory({}),
    'G': datePartGetterFactory(nameCondition('era', 1)),
    'GG': datePartGetterFactory(nameCondition('era', 2)),
    'GGG': datePartGetterFactory(nameCondition('era', 3)),
    'GGGG': datePartGetterFactory(nameCondition('era', 4))
  };
  function digitModifier(inner) {
    return function(date, locale) {
      var result = inner(date, locale);
      return result.length == 1 ? '0' + result : result;
    };
  }
  function hourClockExtractor(inner) {
    return function(date, locale) {
      return inner(date, locale).split(' ')[1];
    };
  }
  function hourExtractor(inner) {
    return function(date, locale) {
      return inner(date, locale).split(' ')[0];
    };
  }
  function intlDateFormat(date, locale, options) {
    return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, '');
  }
  function timeZoneGetter(timezone) {
    var options = {
      hour: '2-digit',
      hour12: false,
      timeZoneName: timezone
    };
    return function(date, locale) {
      var result = intlDateFormat(date, locale, options);
      return result ? result.substring(3) : '';
    };
  }
  function hour12Modify(options, value) {
    options.hour12 = value;
    return options;
  }
  function digitCondition(prop, len) {
    var result = {};
    result[prop] = len === 2 ? '2-digit' : 'numeric';
    return result;
  }
  function nameCondition(prop, len) {
    var result = {};
    if (len < 4) {
      result[prop] = len > 1 ? 'short' : 'narrow';
    } else {
      result[prop] = 'long';
    }
    return result;
  }
  function combine(options) {
    return (_a = Object).assign.apply(_a, [{}].concat(options));
    var _a;
  }
  function datePartGetterFactory(ret) {
    return function(date, locale) {
      return intlDateFormat(date, locale, ret);
    };
  }
  var DATE_FORMATTER_CACHE = new Map();
  function dateFormatter(format, date, locale) {
    var fn = PATTERN_ALIASES[format];
    if (fn)
      return fn(date, locale);
    var parts = DATE_FORMATTER_CACHE.get(format);
    if (!parts) {
      parts = [];
      var match = void 0;
      DATE_FORMATS_SPLIT.exec(format);
      while (format) {
        match = DATE_FORMATS_SPLIT.exec(format);
        if (match) {
          parts = parts.concat(match.slice(1));
          format = parts.pop();
        } else {
          parts.push(format);
          format = null;
        }
      }
      DATE_FORMATTER_CACHE.set(format, parts);
    }
    return parts.reduce(function(text, part) {
      var fn = DATE_FORMATS[part];
      return text + (fn ? fn(date, locale) : partToTime(part));
    }, '');
  }
  function partToTime(part) {
    return part === '\'\'' ? '\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
  }
  var DateFormatter = (function() {
    function DateFormatter() {}
    DateFormatter.format = function(date, locale, pattern) {
      return dateFormatter(pattern, date, locale);
    };
    return DateFormatter;
  }());
  var DatePipe = (function() {
    function DatePipe(_locale) {
      this._locale = _locale;
    }
    DatePipe.prototype.transform = function(value, pattern) {
      if (pattern === void 0) {
        pattern = 'mediumDate';
      }
      var date;
      if (isBlank$1(value))
        return null;
      if (typeof value === 'string') {
        value = value.trim();
      }
      if (isDate(value)) {
        date = value;
      } else if (NumberWrapper.isNumeric(value)) {
        date = new Date(parseFloat(value));
      } else if (typeof value === 'string' && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
        var _a = value.split('-').map(function(val) {
          return parseInt(val, 10);
        }),
            y = _a[0],
            m = _a[1],
            d = _a[2];
        date = new Date(y, m - 1, d);
      } else {
        date = new Date(value);
      }
      if (!isDate(date)) {
        throw new InvalidPipeArgumentError(DatePipe, value);
      }
      return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);
    };
    DatePipe._ALIASES = {
      'medium': 'yMMMdjms',
      'short': 'yMdjm',
      'fullDate': 'yMMMMEEEEd',
      'longDate': 'yMMMMd',
      'mediumDate': 'yMMMd',
      'shortDate': 'yMd',
      'mediumTime': 'jms',
      'shortTime': 'jm'
    };
    DatePipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{
        name: 'date',
        pure: true
      }]
    }];
    DatePipe.ctorParameters = [{
      type: undefined,
      decorators: [{
        type: _angular_core.Inject,
        args: [_angular_core.LOCALE_ID]
      }]
    }];
    return DatePipe;
  }());
  function isBlank$1(obj) {
    return obj == null || obj === '';
  }
  var _INTERPOLATION_REGEXP = /#/g;
  var I18nPluralPipe = (function() {
    function I18nPluralPipe(_localization) {
      this._localization = _localization;
    }
    I18nPluralPipe.prototype.transform = function(value, pluralMap) {
      if (isBlank(value))
        return '';
      if (typeof pluralMap !== 'object' || pluralMap === null) {
        throw new InvalidPipeArgumentError(I18nPluralPipe, pluralMap);
      }
      var key = getPluralCategory(value, Object.keys(pluralMap), this._localization);
      return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
    };
    I18nPluralPipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{
        name: 'i18nPlural',
        pure: true
      }]
    }];
    I18nPluralPipe.ctorParameters = [{type: NgLocalization}];
    return I18nPluralPipe;
  }());
  var I18nSelectPipe = (function() {
    function I18nSelectPipe() {}
    I18nSelectPipe.prototype.transform = function(value, mapping) {
      if (value == null)
        return '';
      if (typeof mapping !== 'object' || typeof value !== 'string') {
        throw new InvalidPipeArgumentError(I18nSelectPipe, mapping);
      }
      if (mapping.hasOwnProperty(value)) {
        return mapping[value];
      }
      if (mapping.hasOwnProperty('other')) {
        return mapping['other'];
      }
      return '';
    };
    I18nSelectPipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{
        name: 'i18nSelect',
        pure: true
      }]
    }];
    I18nSelectPipe.ctorParameters = [];
    return I18nSelectPipe;
  }());
  var JsonPipe = (function() {
    function JsonPipe() {}
    JsonPipe.prototype.transform = function(value) {
      return JSON.stringify(value, null, 2);
    };
    JsonPipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{
        name: 'json',
        pure: false
      }]
    }];
    JsonPipe.ctorParameters = [];
    return JsonPipe;
  }());
  var LowerCasePipe = (function() {
    function LowerCasePipe() {}
    LowerCasePipe.prototype.transform = function(value) {
      if (isBlank(value))
        return value;
      if (typeof value !== 'string') {
        throw new InvalidPipeArgumentError(LowerCasePipe, value);
      }
      return value.toLowerCase();
    };
    LowerCasePipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{name: 'lowercase'}]
    }];
    LowerCasePipe.ctorParameters = [];
    return LowerCasePipe;
  }());
  var _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
  function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) {
    if (currency === void 0) {
      currency = null;
    }
    if (currencyAsSymbol === void 0) {
      currencyAsSymbol = false;
    }
    if (isBlank(value))
      return null;
    value = typeof value === 'string' && NumberWrapper.isNumeric(value) ? +value : value;
    if (typeof value !== 'number') {
      throw new InvalidPipeArgumentError(pipe, value);
    }
    var minInt;
    var minFraction;
    var maxFraction;
    if (style !== NumberFormatStyle.Currency) {
      minInt = 1;
      minFraction = 0;
      maxFraction = 3;
    }
    if (digits) {
      var parts = digits.match(_NUMBER_FORMAT_REGEXP);
      if (parts === null) {
        throw new Error(digits + " is not a valid digit info for number pipes");
      }
      if (isPresent(parts[1])) {
        minInt = NumberWrapper.parseIntAutoRadix(parts[1]);
      }
      if (isPresent(parts[3])) {
        minFraction = NumberWrapper.parseIntAutoRadix(parts[3]);
      }
      if (isPresent(parts[5])) {
        maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]);
      }
    }
    return NumberFormatter.format(value, locale, style, {
      minimumIntegerDigits: minInt,
      minimumFractionDigits: minFraction,
      maximumFractionDigits: maxFraction,
      currency: currency,
      currencyAsSymbol: currencyAsSymbol
    });
  }
  var DecimalPipe = (function() {
    function DecimalPipe(_locale) {
      this._locale = _locale;
    }
    DecimalPipe.prototype.transform = function(value, digits) {
      if (digits === void 0) {
        digits = null;
      }
      return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
    };
    DecimalPipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{name: 'number'}]
    }];
    DecimalPipe.ctorParameters = [{
      type: undefined,
      decorators: [{
        type: _angular_core.Inject,
        args: [_angular_core.LOCALE_ID]
      }]
    }];
    return DecimalPipe;
  }());
  var PercentPipe = (function() {
    function PercentPipe(_locale) {
      this._locale = _locale;
    }
    PercentPipe.prototype.transform = function(value, digits) {
      if (digits === void 0) {
        digits = null;
      }
      return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
    };
    PercentPipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{name: 'percent'}]
    }];
    PercentPipe.ctorParameters = [{
      type: undefined,
      decorators: [{
        type: _angular_core.Inject,
        args: [_angular_core.LOCALE_ID]
      }]
    }];
    return PercentPipe;
  }());
  var CurrencyPipe = (function() {
    function CurrencyPipe(_locale) {
      this._locale = _locale;
    }
    CurrencyPipe.prototype.transform = function(value, currencyCode, symbolDisplay, digits) {
      if (currencyCode === void 0) {
        currencyCode = 'USD';
      }
      if (symbolDisplay === void 0) {
        symbolDisplay = false;
      }
      if (digits === void 0) {
        digits = null;
      }
      return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
    };
    CurrencyPipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{name: 'currency'}]
    }];
    CurrencyPipe.ctorParameters = [{
      type: undefined,
      decorators: [{
        type: _angular_core.Inject,
        args: [_angular_core.LOCALE_ID]
      }]
    }];
    return CurrencyPipe;
  }());
  var SlicePipe = (function() {
    function SlicePipe() {}
    SlicePipe.prototype.transform = function(value, start, end) {
      if (isBlank(value))
        return value;
      if (!this.supports(value)) {
        throw new InvalidPipeArgumentError(SlicePipe, value);
      }
      return value.slice(start, end);
    };
    SlicePipe.prototype.supports = function(obj) {
      return typeof obj === 'string' || Array.isArray(obj);
    };
    SlicePipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{
        name: 'slice',
        pure: false
      }]
    }];
    SlicePipe.ctorParameters = [];
    return SlicePipe;
  }());
  var UpperCasePipe = (function() {
    function UpperCasePipe() {}
    UpperCasePipe.prototype.transform = function(value) {
      if (isBlank(value))
        return value;
      if (typeof value !== 'string') {
        throw new InvalidPipeArgumentError(UpperCasePipe, value);
      }
      return value.toUpperCase();
    };
    UpperCasePipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{name: 'uppercase'}]
    }];
    UpperCasePipe.ctorParameters = [];
    return UpperCasePipe;
  }());
  var COMMON_PIPES = [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe];
  var CommonModule = (function() {
    function CommonModule() {}
    CommonModule.decorators = [{
      type: _angular_core.NgModule,
      args: [{
        declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
        exports: [COMMON_DIRECTIVES, COMMON_PIPES],
        providers: [{
          provide: NgLocalization,
          useClass: NgLocaleLocalization
        }]
      }]
    }];
    CommonModule.ctorParameters = [];
    return CommonModule;
  }());
  exports.NgLocalization = NgLocalization;
  exports.CommonModule = CommonModule;
  exports.NgClass = NgClass;
  exports.NgFor = NgFor;
  exports.NgIf = NgIf;
  exports.NgPlural = NgPlural;
  exports.NgPluralCase = NgPluralCase;
  exports.NgStyle = NgStyle;
  exports.NgSwitch = NgSwitch;
  exports.NgSwitchCase = NgSwitchCase;
  exports.NgSwitchDefault = NgSwitchDefault;
  exports.NgTemplateOutlet = NgTemplateOutlet;
  exports.AsyncPipe = AsyncPipe;
  exports.DatePipe = DatePipe;
  exports.I18nPluralPipe = I18nPluralPipe;
  exports.I18nSelectPipe = I18nSelectPipe;
  exports.JsonPipe = JsonPipe;
  exports.LowerCasePipe = LowerCasePipe;
  exports.CurrencyPipe = CurrencyPipe;
  exports.DecimalPipe = DecimalPipe;
  exports.PercentPipe = PercentPipe;
  exports.SlicePipe = SlicePipe;
  exports.UpperCasePipe = UpperCasePipe;
  exports.PlatformLocation = PlatformLocation;
  exports.LocationStrategy = LocationStrategy;
  exports.APP_BASE_HREF = APP_BASE_HREF;
  exports.HashLocationStrategy = HashLocationStrategy;
  exports.PathLocationStrategy = PathLocationStrategy;
  exports.Location = Location;
}));

})();
(function() {
var define = $__System.amdDefine;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core')) : typeof define === 'function' && define.amd ? define("node_modules/@angular/platform-browser/bundles/platform-browser.umd.js", ["exports", "node_modules/@angular/common/bundles/common.umd.js", "node_modules/@angular/core/bundles/core.umd.js"], factory) : (factory((global.ng = global.ng || {}, global.ng.platformBrowser = global.ng.platformBrowser || {}), global.ng.common, global.ng.core));
}(this, function(exports, _angular_common, _angular_core) {
  'use strict';
  var DebugDomRootRenderer = _angular_core.__core_private__.DebugDomRootRenderer;
  var NoOpAnimationPlayer = _angular_core.__core_private__.NoOpAnimationPlayer;
  var _NoOpAnimationDriver = (function() {
    function _NoOpAnimationDriver() {}
    _NoOpAnimationDriver.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
      if (previousPlayers === void 0) {
        previousPlayers = [];
      }
      return new NoOpAnimationPlayer();
    };
    return _NoOpAnimationDriver;
  }());
  var AnimationDriver = (function() {
    function AnimationDriver() {}
    AnimationDriver.NOOP = new _NoOpAnimationDriver();
    return AnimationDriver;
  }());
  var globalScope;
  if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
      globalScope = self;
    } else {
      globalScope = global;
    }
  } else {
    globalScope = window;
  }
  var global$1 = globalScope;
  global$1.assert = function assert(condition) {};
  function isPresent(obj) {
    return obj != null;
  }
  function isBlank(obj) {
    return obj == null;
  }
  function stringify(token) {
    if (typeof token === 'string') {
      return token;
    }
    if (token == null) {
      return '' + token;
    }
    if (token.overriddenName) {
      return token.overriddenName;
    }
    if (token.name) {
      return token.name;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  function setValueOnPath(global, path, value) {
    var parts = path.split('.');
    var obj = global;
    while (parts.length > 1) {
      var name_1 = parts.shift();
      if (obj.hasOwnProperty(name_1) && obj[name_1] != null) {
        obj = obj[name_1];
      } else {
        obj = obj[name_1] = {};
      }
    }
    if (obj === undefined || obj === null) {
      obj = {};
    }
    obj[parts.shift()] = value;
  }
  var _DOM = null;
  function getDOM() {
    return _DOM;
  }
  function setRootDomAdapter(adapter) {
    if (!_DOM) {
      _DOM = adapter;
    }
  }
  var DomAdapter = (function() {
    function DomAdapter() {
      this.resourceLoaderType = null;
    }
    Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
      get: function() {
        return this._attrToPropMap;
      },
      set: function(value) {
        this._attrToPropMap = value;
      },
      enumerable: true,
      configurable: true
    });
    ;
    ;
    return DomAdapter;
  }());
  var WebAnimationsPlayer = (function() {
    function WebAnimationsPlayer(element, keyframes, options, previousPlayers) {
      var _this = this;
      if (previousPlayers === void 0) {
        previousPlayers = [];
      }
      this.element = element;
      this.keyframes = keyframes;
      this.options = options;
      this._onDoneFns = [];
      this._onStartFns = [];
      this._initialized = false;
      this._finished = false;
      this._started = false;
      this._destroyed = false;
      this.parentPlayer = null;
      this._duration = options['duration'];
      this.previousStyles = {};
      previousPlayers.forEach(function(player) {
        var styles = player._captureStyles();
        Object.keys(styles).forEach(function(prop) {
          return _this.previousStyles[prop] = styles[prop];
        });
      });
    }
    WebAnimationsPlayer.prototype._onFinish = function() {
      if (!this._finished) {
        this._finished = true;
        this._onDoneFns.forEach(function(fn) {
          return fn();
        });
        this._onDoneFns = [];
      }
    };
    WebAnimationsPlayer.prototype.init = function() {
      var _this = this;
      if (this._initialized)
        return;
      this._initialized = true;
      var keyframes = this.keyframes.map(function(styles) {
        var formattedKeyframe = {};
        Object.keys(styles).forEach(function(prop, index) {
          var value = styles[prop];
          if (value == _angular_core.AUTO_STYLE) {
            value = _computeStyle(_this.element, prop);
          }
          if (value != undefined) {
            formattedKeyframe[prop] = value;
          }
        });
        return formattedKeyframe;
      });
      var previousStyleProps = Object.keys(this.previousStyles);
      if (previousStyleProps.length) {
        var startingKeyframe_1 = findStartingKeyframe(keyframes);
        previousStyleProps.forEach(function(prop) {
          if (isPresent(startingKeyframe_1[prop])) {
            startingKeyframe_1[prop] = _this.previousStyles[prop];
          }
        });
      }
      this._player = this._triggerWebAnimation(this.element, keyframes, this.options);
      this._finalKeyframe = _copyKeyframeStyles(keyframes[keyframes.length - 1]);
      this._resetDomPlayerState();
      this._player.addEventListener('finish', function() {
        return _this._onFinish();
      });
    };
    WebAnimationsPlayer.prototype._triggerWebAnimation = function(element, keyframes, options) {
      return element.animate(keyframes, options);
    };
    Object.defineProperty(WebAnimationsPlayer.prototype, "domPlayer", {
      get: function() {
        return this._player;
      },
      enumerable: true,
      configurable: true
    });
    WebAnimationsPlayer.prototype.onStart = function(fn) {
      this._onStartFns.push(fn);
    };
    WebAnimationsPlayer.prototype.onDone = function(fn) {
      this._onDoneFns.push(fn);
    };
    WebAnimationsPlayer.prototype.play = function() {
      this.init();
      if (!this.hasStarted()) {
        this._onStartFns.forEach(function(fn) {
          return fn();
        });
        this._onStartFns = [];
        this._started = true;
      }
      this._player.play();
    };
    WebAnimationsPlayer.prototype.pause = function() {
      this.init();
      this._player.pause();
    };
    WebAnimationsPlayer.prototype.finish = function() {
      this.init();
      this._onFinish();
      this._player.finish();
    };
    WebAnimationsPlayer.prototype.reset = function() {
      this._resetDomPlayerState();
      this._destroyed = false;
      this._finished = false;
      this._started = false;
    };
    WebAnimationsPlayer.prototype._resetDomPlayerState = function() {
      this._player.cancel();
    };
    WebAnimationsPlayer.prototype.restart = function() {
      this.reset();
      this.play();
    };
    WebAnimationsPlayer.prototype.hasStarted = function() {
      return this._started;
    };
    WebAnimationsPlayer.prototype.destroy = function() {
      if (!this._destroyed) {
        this._resetDomPlayerState();
        this._onFinish();
        this._destroyed = true;
      }
    };
    Object.defineProperty(WebAnimationsPlayer.prototype, "totalTime", {
      get: function() {
        return this._duration;
      },
      enumerable: true,
      configurable: true
    });
    WebAnimationsPlayer.prototype.setPosition = function(p) {
      this._player.currentTime = p * this.totalTime;
    };
    WebAnimationsPlayer.prototype.getPosition = function() {
      return this._player.currentTime / this.totalTime;
    };
    WebAnimationsPlayer.prototype._captureStyles = function() {
      var _this = this;
      var styles = {};
      if (this.hasStarted()) {
        Object.keys(this._finalKeyframe).forEach(function(prop) {
          if (prop != 'offset') {
            styles[prop] = _this._finished ? _this._finalKeyframe[prop] : _computeStyle(_this.element, prop);
          }
        });
      }
      return styles;
    };
    return WebAnimationsPlayer;
  }());
  function _computeStyle(element, prop) {
    return getDOM().getComputedStyle(element)[prop];
  }
  function _copyKeyframeStyles(styles) {
    var newStyles = {};
    Object.keys(styles).forEach(function(prop) {
      if (prop != 'offset') {
        newStyles[prop] = styles[prop];
      }
    });
    return newStyles;
  }
  function findStartingKeyframe(keyframes) {
    var startingKeyframe = keyframes[0];
    for (var i = 1; i < keyframes.length; i++) {
      var kf = keyframes[i];
      var offset = kf['offset'];
      if (offset !== 0)
        break;
      startingKeyframe = kf;
    }
    return startingKeyframe;
  }
  var WebAnimationsDriver = (function() {
    function WebAnimationsDriver() {}
    WebAnimationsDriver.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
      if (previousPlayers === void 0) {
        previousPlayers = [];
      }
      var formattedSteps = [];
      var startingStyleLookup = {};
      if (isPresent(startingStyles) && startingStyles.styles.length > 0) {
        startingStyleLookup = _populateStyles(startingStyles, {});
        startingStyleLookup['offset'] = 0;
        formattedSteps.push(startingStyleLookup);
      }
      keyframes.forEach(function(keyframe) {
        var data = _populateStyles(keyframe.styles, startingStyleLookup);
        data['offset'] = keyframe.offset;
        formattedSteps.push(data);
      });
      if (formattedSteps.length == 1) {
        var start = formattedSteps[0];
        start['offset'] = null;
        formattedSteps = [start, start];
      }
      var playerOptions = {
        'duration': duration,
        'delay': delay,
        'fill': 'both'
      };
      if (easing) {
        playerOptions['easing'] = easing;
      }
      previousPlayers = previousPlayers.filter(filterWebAnimationPlayerFn);
      return new WebAnimationsPlayer(element, formattedSteps, playerOptions, previousPlayers);
    };
    return WebAnimationsDriver;
  }());
  function _populateStyles(styles, defaultStyles) {
    var data = {};
    styles.styles.forEach(function(entry) {
      Object.keys(entry).forEach(function(prop) {
        data[prop] = entry[prop];
      });
    });
    Object.keys(defaultStyles).forEach(function(prop) {
      if (!isPresent(data[prop])) {
        data[prop] = defaultStyles[prop];
      }
    });
    return data;
  }
  function filterWebAnimationPlayerFn(player) {
    return player instanceof WebAnimationsPlayer;
  }
  var __extends$1 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var GenericBrowserDomAdapter = (function(_super) {
    __extends$1(GenericBrowserDomAdapter, _super);
    function GenericBrowserDomAdapter() {
      var _this = this;
      _super.call(this);
      this._animationPrefix = null;
      this._transitionEnd = null;
      try {
        var element_1 = this.createElement('div', this.defaultDoc());
        if (isPresent(this.getStyle(element_1, 'animationName'))) {
          this._animationPrefix = '';
        } else {
          var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
          for (var i = 0; i < domPrefixes.length; i++) {
            if (isPresent(this.getStyle(element_1, domPrefixes[i] + 'AnimationName'))) {
              this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
              break;
            }
          }
        }
        var transEndEventNames_1 = {
          WebkitTransition: 'webkitTransitionEnd',
          MozTransition: 'transitionend',
          OTransition: 'oTransitionEnd otransitionend',
          transition: 'transitionend'
        };
        Object.keys(transEndEventNames_1).forEach(function(key) {
          if (isPresent(_this.getStyle(element_1, key))) {
            _this._transitionEnd = transEndEventNames_1[key];
          }
        });
      } catch (e) {
        this._animationPrefix = null;
        this._transitionEnd = null;
      }
    }
    GenericBrowserDomAdapter.prototype.getDistributedNodes = function(el) {
      return el.getDistributedNodes();
    };
    GenericBrowserDomAdapter.prototype.resolveAndSetHref = function(el, baseUrl, href) {
      el.href = href == null ? baseUrl : baseUrl + '/../' + href;
    };
    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function() {
      return true;
    };
    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function() {
      return typeof this.defaultDoc().body.createShadowRoot === 'function';
    };
    GenericBrowserDomAdapter.prototype.getAnimationPrefix = function() {
      return this._animationPrefix ? this._animationPrefix : '';
    };
    GenericBrowserDomAdapter.prototype.getTransitionEnd = function() {
      return this._transitionEnd ? this._transitionEnd : '';
    };
    GenericBrowserDomAdapter.prototype.supportsAnimation = function() {
      return isPresent(this._animationPrefix) && isPresent(this._transitionEnd);
    };
    return GenericBrowserDomAdapter;
  }(DomAdapter));
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var _attrToPropMap = {
    'class': 'className',
    'innerHtml': 'innerHTML',
    'readonly': 'readOnly',
    'tabindex': 'tabIndex'
  };
  var DOM_KEY_LOCATION_NUMPAD = 3;
  var _keyMap = {
    '\b': 'Backspace',
    '\t': 'Tab',
    '\x7F': 'Delete',
    '\x1B': 'Escape',
    'Del': 'Delete',
    'Esc': 'Escape',
    'Left': 'ArrowLeft',
    'Right': 'ArrowRight',
    'Up': 'ArrowUp',
    'Down': 'ArrowDown',
    'Menu': 'ContextMenu',
    'Scroll': 'ScrollLock',
    'Win': 'OS'
  };
  var _chromeNumKeyPadMap = {
    'A': '1',
    'B': '2',
    'C': '3',
    'D': '4',
    'E': '5',
    'F': '6',
    'G': '7',
    'H': '8',
    'I': '9',
    'J': '*',
    'K': '+',
    'M': '-',
    'N': '.',
    'O': '/',
    '\x60': '0',
    '\x90': 'NumLock'
  };
  var BrowserDomAdapter = (function(_super) {
    __extends(BrowserDomAdapter, _super);
    function BrowserDomAdapter() {
      _super.apply(this, arguments);
    }
    BrowserDomAdapter.prototype.parse = function(templateHtml) {
      throw new Error('parse not implemented');
    };
    BrowserDomAdapter.makeCurrent = function() {
      setRootDomAdapter(new BrowserDomAdapter());
    };
    BrowserDomAdapter.prototype.hasProperty = function(element, name) {
      return name in element;
    };
    BrowserDomAdapter.prototype.setProperty = function(el, name, value) {
      el[name] = value;
    };
    BrowserDomAdapter.prototype.getProperty = function(el, name) {
      return el[name];
    };
    BrowserDomAdapter.prototype.invoke = function(el, methodName, args) {
      (_a = el)[methodName].apply(_a, args);
      var _a;
    };
    BrowserDomAdapter.prototype.logError = function(error) {
      if (window.console) {
        (window.console.error || window.console.log)(error);
      }
    };
    BrowserDomAdapter.prototype.log = function(error) {
      if (window.console) {
        window.console.log && window.console.log(error);
      }
    };
    BrowserDomAdapter.prototype.logGroup = function(error) {
      if (window.console) {
        window.console.group && window.console.group(error);
        this.logError(error);
      }
    };
    BrowserDomAdapter.prototype.logGroupEnd = function() {
      if (window.console) {
        window.console.groupEnd && window.console.groupEnd();
      }
    };
    Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
      get: function() {
        return _attrToPropMap;
      },
      enumerable: true,
      configurable: true
    });
    BrowserDomAdapter.prototype.query = function(selector) {
      return document.querySelector(selector);
    };
    BrowserDomAdapter.prototype.querySelector = function(el, selector) {
      return el.querySelector(selector);
    };
    BrowserDomAdapter.prototype.querySelectorAll = function(el, selector) {
      return el.querySelectorAll(selector);
    };
    BrowserDomAdapter.prototype.on = function(el, evt, listener) {
      el.addEventListener(evt, listener, false);
    };
    BrowserDomAdapter.prototype.onAndCancel = function(el, evt, listener) {
      el.addEventListener(evt, listener, false);
      return function() {
        el.removeEventListener(evt, listener, false);
      };
    };
    BrowserDomAdapter.prototype.dispatchEvent = function(el, evt) {
      el.dispatchEvent(evt);
    };
    BrowserDomAdapter.prototype.createMouseEvent = function(eventType) {
      var evt = document.createEvent('MouseEvent');
      evt.initEvent(eventType, true, true);
      return evt;
    };
    BrowserDomAdapter.prototype.createEvent = function(eventType) {
      var evt = document.createEvent('Event');
      evt.initEvent(eventType, true, true);
      return evt;
    };
    BrowserDomAdapter.prototype.preventDefault = function(evt) {
      evt.preventDefault();
      evt.returnValue = false;
    };
    BrowserDomAdapter.prototype.isPrevented = function(evt) {
      return evt.defaultPrevented || isPresent(evt.returnValue) && !evt.returnValue;
    };
    BrowserDomAdapter.prototype.getInnerHTML = function(el) {
      return el.innerHTML;
    };
    BrowserDomAdapter.prototype.getTemplateContent = function(el) {
      return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;
    };
    BrowserDomAdapter.prototype.getOuterHTML = function(el) {
      return el.outerHTML;
    };
    BrowserDomAdapter.prototype.nodeName = function(node) {
      return node.nodeName;
    };
    BrowserDomAdapter.prototype.nodeValue = function(node) {
      return node.nodeValue;
    };
    BrowserDomAdapter.prototype.type = function(node) {
      return node.type;
    };
    BrowserDomAdapter.prototype.content = function(node) {
      if (this.hasProperty(node, 'content')) {
        return node.content;
      } else {
        return node;
      }
    };
    BrowserDomAdapter.prototype.firstChild = function(el) {
      return el.firstChild;
    };
    BrowserDomAdapter.prototype.nextSibling = function(el) {
      return el.nextSibling;
    };
    BrowserDomAdapter.prototype.parentElement = function(el) {
      return el.parentNode;
    };
    BrowserDomAdapter.prototype.childNodes = function(el) {
      return el.childNodes;
    };
    BrowserDomAdapter.prototype.childNodesAsList = function(el) {
      var childNodes = el.childNodes;
      var res = new Array(childNodes.length);
      for (var i = 0; i < childNodes.length; i++) {
        res[i] = childNodes[i];
      }
      return res;
    };
    BrowserDomAdapter.prototype.clearNodes = function(el) {
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
    };
    BrowserDomAdapter.prototype.appendChild = function(el, node) {
      el.appendChild(node);
    };
    BrowserDomAdapter.prototype.removeChild = function(el, node) {
      el.removeChild(node);
    };
    BrowserDomAdapter.prototype.replaceChild = function(el, newChild, oldChild) {
      el.replaceChild(newChild, oldChild);
    };
    BrowserDomAdapter.prototype.remove = function(node) {
      if (node.parentNode) {
        node.parentNode.removeChild(node);
      }
      return node;
    };
    BrowserDomAdapter.prototype.insertBefore = function(el, node) {
      el.parentNode.insertBefore(node, el);
    };
    BrowserDomAdapter.prototype.insertAllBefore = function(el, nodes) {
      nodes.forEach(function(n) {
        return el.parentNode.insertBefore(n, el);
      });
    };
    BrowserDomAdapter.prototype.insertAfter = function(el, node) {
      el.parentNode.insertBefore(node, el.nextSibling);
    };
    BrowserDomAdapter.prototype.setInnerHTML = function(el, value) {
      el.innerHTML = value;
    };
    BrowserDomAdapter.prototype.getText = function(el) {
      return el.textContent;
    };
    BrowserDomAdapter.prototype.setText = function(el, value) {
      el.textContent = value;
    };
    BrowserDomAdapter.prototype.getValue = function(el) {
      return el.value;
    };
    BrowserDomAdapter.prototype.setValue = function(el, value) {
      el.value = value;
    };
    BrowserDomAdapter.prototype.getChecked = function(el) {
      return el.checked;
    };
    BrowserDomAdapter.prototype.setChecked = function(el, value) {
      el.checked = value;
    };
    BrowserDomAdapter.prototype.createComment = function(text) {
      return document.createComment(text);
    };
    BrowserDomAdapter.prototype.createTemplate = function(html) {
      var t = document.createElement('template');
      t.innerHTML = html;
      return t;
    };
    BrowserDomAdapter.prototype.createElement = function(tagName, doc) {
      if (doc === void 0) {
        doc = document;
      }
      return doc.createElement(tagName);
    };
    BrowserDomAdapter.prototype.createElementNS = function(ns, tagName, doc) {
      if (doc === void 0) {
        doc = document;
      }
      return doc.createElementNS(ns, tagName);
    };
    BrowserDomAdapter.prototype.createTextNode = function(text, doc) {
      if (doc === void 0) {
        doc = document;
      }
      return doc.createTextNode(text);
    };
    BrowserDomAdapter.prototype.createScriptTag = function(attrName, attrValue, doc) {
      if (doc === void 0) {
        doc = document;
      }
      var el = doc.createElement('SCRIPT');
      el.setAttribute(attrName, attrValue);
      return el;
    };
    BrowserDomAdapter.prototype.createStyleElement = function(css, doc) {
      if (doc === void 0) {
        doc = document;
      }
      var style = doc.createElement('style');
      this.appendChild(style, this.createTextNode(css));
      return style;
    };
    BrowserDomAdapter.prototype.createShadowRoot = function(el) {
      return el.createShadowRoot();
    };
    BrowserDomAdapter.prototype.getShadowRoot = function(el) {
      return el.shadowRoot;
    };
    BrowserDomAdapter.prototype.getHost = function(el) {
      return el.host;
    };
    BrowserDomAdapter.prototype.clone = function(node) {
      return node.cloneNode(true);
    };
    BrowserDomAdapter.prototype.getElementsByClassName = function(element, name) {
      return element.getElementsByClassName(name);
    };
    BrowserDomAdapter.prototype.getElementsByTagName = function(element, name) {
      return element.getElementsByTagName(name);
    };
    BrowserDomAdapter.prototype.classList = function(element) {
      return Array.prototype.slice.call(element.classList, 0);
    };
    BrowserDomAdapter.prototype.addClass = function(element, className) {
      element.classList.add(className);
    };
    BrowserDomAdapter.prototype.removeClass = function(element, className) {
      element.classList.remove(className);
    };
    BrowserDomAdapter.prototype.hasClass = function(element, className) {
      return element.classList.contains(className);
    };
    BrowserDomAdapter.prototype.setStyle = function(element, styleName, styleValue) {
      element.style[styleName] = styleValue;
    };
    BrowserDomAdapter.prototype.removeStyle = function(element, stylename) {
      element.style[stylename] = '';
    };
    BrowserDomAdapter.prototype.getStyle = function(element, stylename) {
      return element.style[stylename];
    };
    BrowserDomAdapter.prototype.hasStyle = function(element, styleName, styleValue) {
      if (styleValue === void 0) {
        styleValue = null;
      }
      var value = this.getStyle(element, styleName) || '';
      return styleValue ? value == styleValue : value.length > 0;
    };
    BrowserDomAdapter.prototype.tagName = function(element) {
      return element.tagName;
    };
    BrowserDomAdapter.prototype.attributeMap = function(element) {
      var res = new Map();
      var elAttrs = element.attributes;
      for (var i = 0; i < elAttrs.length; i++) {
        var attrib = elAttrs[i];
        res.set(attrib.name, attrib.value);
      }
      return res;
    };
    BrowserDomAdapter.prototype.hasAttribute = function(element, attribute) {
      return element.hasAttribute(attribute);
    };
    BrowserDomAdapter.prototype.hasAttributeNS = function(element, ns, attribute) {
      return element.hasAttributeNS(ns, attribute);
    };
    BrowserDomAdapter.prototype.getAttribute = function(element, attribute) {
      return element.getAttribute(attribute);
    };
    BrowserDomAdapter.prototype.getAttributeNS = function(element, ns, name) {
      return element.getAttributeNS(ns, name);
    };
    BrowserDomAdapter.prototype.setAttribute = function(element, name, value) {
      element.setAttribute(name, value);
    };
    BrowserDomAdapter.prototype.setAttributeNS = function(element, ns, name, value) {
      element.setAttributeNS(ns, name, value);
    };
    BrowserDomAdapter.prototype.removeAttribute = function(element, attribute) {
      element.removeAttribute(attribute);
    };
    BrowserDomAdapter.prototype.removeAttributeNS = function(element, ns, name) {
      element.removeAttributeNS(ns, name);
    };
    BrowserDomAdapter.prototype.templateAwareRoot = function(el) {
      return this.isTemplateElement(el) ? this.content(el) : el;
    };
    BrowserDomAdapter.prototype.createHtmlDocument = function() {
      return document.implementation.createHTMLDocument('fakeTitle');
    };
    BrowserDomAdapter.prototype.defaultDoc = function() {
      return document;
    };
    BrowserDomAdapter.prototype.getBoundingClientRect = function(el) {
      try {
        return el.getBoundingClientRect();
      } catch (e) {
        return {
          top: 0,
          bottom: 0,
          left: 0,
          right: 0,
          width: 0,
          height: 0
        };
      }
    };
    BrowserDomAdapter.prototype.getTitle = function() {
      return document.title;
    };
    BrowserDomAdapter.prototype.setTitle = function(newTitle) {
      document.title = newTitle || '';
    };
    BrowserDomAdapter.prototype.elementMatches = function(n, selector) {
      if (n instanceof HTMLElement) {
        return n.matches && n.matches(selector) || n.msMatchesSelector && n.msMatchesSelector(selector) || n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
      }
      return false;
    };
    BrowserDomAdapter.prototype.isTemplateElement = function(el) {
      return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';
    };
    BrowserDomAdapter.prototype.isTextNode = function(node) {
      return node.nodeType === Node.TEXT_NODE;
    };
    BrowserDomAdapter.prototype.isCommentNode = function(node) {
      return node.nodeType === Node.COMMENT_NODE;
    };
    BrowserDomAdapter.prototype.isElementNode = function(node) {
      return node.nodeType === Node.ELEMENT_NODE;
    };
    BrowserDomAdapter.prototype.hasShadowRoot = function(node) {
      return isPresent(node.shadowRoot) && node instanceof HTMLElement;
    };
    BrowserDomAdapter.prototype.isShadowRoot = function(node) {
      return node instanceof DocumentFragment;
    };
    BrowserDomAdapter.prototype.importIntoDoc = function(node) {
      return document.importNode(this.templateAwareRoot(node), true);
    };
    BrowserDomAdapter.prototype.adoptNode = function(node) {
      return document.adoptNode(node);
    };
    BrowserDomAdapter.prototype.getHref = function(el) {
      return el.href;
    };
    BrowserDomAdapter.prototype.getEventKey = function(event) {
      var key = event.key;
      if (isBlank(key)) {
        key = event.keyIdentifier;
        if (isBlank(key)) {
          return 'Unidentified';
        }
        if (key.startsWith('U+')) {
          key = String.fromCharCode(parseInt(key.substring(2), 16));
          if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
            key = _chromeNumKeyPadMap[key];
          }
        }
      }
      return _keyMap[key] || key;
    };
    BrowserDomAdapter.prototype.getGlobalEventTarget = function(target) {
      if (target === 'window') {
        return window;
      }
      if (target === 'document') {
        return document;
      }
      if (target === 'body') {
        return document.body;
      }
    };
    BrowserDomAdapter.prototype.getHistory = function() {
      return window.history;
    };
    BrowserDomAdapter.prototype.getLocation = function() {
      return window.location;
    };
    BrowserDomAdapter.prototype.getBaseHref = function() {
      var href = getBaseElementHref();
      return isBlank(href) ? null : relativePath(href);
    };
    BrowserDomAdapter.prototype.resetBaseElement = function() {
      baseElement = null;
    };
    BrowserDomAdapter.prototype.getUserAgent = function() {
      return window.navigator.userAgent;
    };
    BrowserDomAdapter.prototype.setData = function(element, name, value) {
      this.setAttribute(element, 'data-' + name, value);
    };
    BrowserDomAdapter.prototype.getData = function(element, name) {
      return this.getAttribute(element, 'data-' + name);
    };
    BrowserDomAdapter.prototype.getComputedStyle = function(element) {
      return getComputedStyle(element);
    };
    BrowserDomAdapter.prototype.setGlobalVar = function(path, value) {
      setValueOnPath(global$1, path, value);
    };
    BrowserDomAdapter.prototype.supportsWebAnimation = function() {
      return typeof Element.prototype['animate'] === 'function';
    };
    BrowserDomAdapter.prototype.performanceNow = function() {
      return window.performance && window.performance.now ? window.performance.now() : new Date().getTime();
    };
    BrowserDomAdapter.prototype.supportsCookies = function() {
      return true;
    };
    BrowserDomAdapter.prototype.getCookie = function(name) {
      return parseCookieValue(document.cookie, name);
    };
    BrowserDomAdapter.prototype.setCookie = function(name, value) {
      document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
    };
    return BrowserDomAdapter;
  }(GenericBrowserDomAdapter));
  var baseElement = null;
  function getBaseElementHref() {
    if (!baseElement) {
      baseElement = document.querySelector('base');
      if (!baseElement) {
        return null;
      }
    }
    return baseElement.getAttribute('href');
  }
  var urlParsingNode;
  function relativePath(url) {
    if (!urlParsingNode) {
      urlParsingNode = document.createElement('a');
    }
    urlParsingNode.setAttribute('href', url);
    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname : '/' + urlParsingNode.pathname;
  }
  function parseCookieValue(cookieStr, name) {
    name = encodeURIComponent(name);
    for (var _i = 0,
        _a = cookieStr.split(';'); _i < _a.length; _i++) {
      var cookie = _a[_i];
      var eqIndex = cookie.indexOf('=');
      var _b = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)],
          cookieName = _b[0],
          cookieValue = _b[1];
      if (cookieName.trim() === name) {
        return decodeURIComponent(cookieValue);
      }
    }
    return null;
  }
  function supportsState() {
    return !!window.history.pushState;
  }
  var __extends$2 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var BrowserPlatformLocation = (function(_super) {
    __extends$2(BrowserPlatformLocation, _super);
    function BrowserPlatformLocation() {
      _super.call(this);
      this._init();
    }
    BrowserPlatformLocation.prototype._init = function() {
      this._location = getDOM().getLocation();
      this._history = getDOM().getHistory();
    };
    Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
      get: function() {
        return this._location;
      },
      enumerable: true,
      configurable: true
    });
    BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function() {
      return getDOM().getBaseHref();
    };
    BrowserPlatformLocation.prototype.onPopState = function(fn) {
      getDOM().getGlobalEventTarget('window').addEventListener('popstate', fn, false);
    };
    BrowserPlatformLocation.prototype.onHashChange = function(fn) {
      getDOM().getGlobalEventTarget('window').addEventListener('hashchange', fn, false);
    };
    Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
      get: function() {
        return this._location.pathname;
      },
      set: function(newPath) {
        this._location.pathname = newPath;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
      get: function() {
        return this._location.search;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
      get: function() {
        return this._location.hash;
      },
      enumerable: true,
      configurable: true
    });
    BrowserPlatformLocation.prototype.pushState = function(state, title, url) {
      if (supportsState()) {
        this._history.pushState(state, title, url);
      } else {
        this._location.hash = url;
      }
    };
    BrowserPlatformLocation.prototype.replaceState = function(state, title, url) {
      if (supportsState()) {
        this._history.replaceState(state, title, url);
      } else {
        this._location.hash = url;
      }
    };
    BrowserPlatformLocation.prototype.forward = function() {
      this._history.forward();
    };
    BrowserPlatformLocation.prototype.back = function() {
      this._history.back();
    };
    BrowserPlatformLocation.decorators = [{type: _angular_core.Injectable}];
    BrowserPlatformLocation.ctorParameters = [];
    return BrowserPlatformLocation;
  }(_angular_common.PlatformLocation));
  var BrowserGetTestability = (function() {
    function BrowserGetTestability() {}
    BrowserGetTestability.init = function() {
      _angular_core.setTestabilityGetter(new BrowserGetTestability());
    };
    BrowserGetTestability.prototype.addToWindow = function(registry) {
      global$1.getAngularTestability = function(elem, findInAncestors) {
        if (findInAncestors === void 0) {
          findInAncestors = true;
        }
        var testability = registry.findTestabilityInTree(elem, findInAncestors);
        if (testability == null) {
          throw new Error('Could not find testability for element.');
        }
        return testability;
      };
      global$1.getAllAngularTestabilities = function() {
        return registry.getAllTestabilities();
      };
      global$1.getAllAngularRootElements = function() {
        return registry.getAllRootElements();
      };
      var whenAllStable = function(callback) {
        var testabilities = global$1.getAllAngularTestabilities();
        var count = testabilities.length;
        var didWork = false;
        var decrement = function(didWork_) {
          didWork = didWork || didWork_;
          count--;
          if (count == 0) {
            callback(didWork);
          }
        };
        testabilities.forEach(function(testability) {
          testability.whenStable(decrement);
        });
      };
      if (!global$1['frameworkStabilizers']) {
        global$1['frameworkStabilizers'] = [];
      }
      global$1['frameworkStabilizers'].push(whenAllStable);
    };
    BrowserGetTestability.prototype.findTestabilityInTree = function(registry, elem, findInAncestors) {
      if (elem == null) {
        return null;
      }
      var t = registry.getTestability(elem);
      if (isPresent(t)) {
        return t;
      } else if (!findInAncestors) {
        return null;
      }
      if (getDOM().isShadowRoot(elem)) {
        return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
      }
      return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
    };
    return BrowserGetTestability;
  }());
  var Title = (function() {
    function Title() {}
    Title.prototype.getTitle = function() {
      return getDOM().getTitle();
    };
    Title.prototype.setTitle = function(newTitle) {
      getDOM().setTitle(newTitle);
    };
    return Title;
  }());
  var StringMapWrapper = (function() {
    function StringMapWrapper() {}
    StringMapWrapper.merge = function(m1, m2) {
      var m = {};
      for (var _i = 0,
          _a = Object.keys(m1); _i < _a.length; _i++) {
        var k = _a[_i];
        m[k] = m1[k];
      }
      for (var _b = 0,
          _c = Object.keys(m2); _b < _c.length; _b++) {
        var k = _c[_b];
        m[k] = m2[k];
      }
      return m;
    };
    StringMapWrapper.equals = function(m1, m2) {
      var k1 = Object.keys(m1);
      var k2 = Object.keys(m2);
      if (k1.length != k2.length) {
        return false;
      }
      for (var i = 0; i < k1.length; i++) {
        var key = k1[i];
        if (m1[key] !== m2[key]) {
          return false;
        }
      }
      return true;
    };
    return StringMapWrapper;
  }());
  var DOCUMENT = new _angular_core.OpaqueToken('DocumentToken');
  var EVENT_MANAGER_PLUGINS = new _angular_core.OpaqueToken('EventManagerPlugins');
  var EventManager = (function() {
    function EventManager(plugins, _zone) {
      var _this = this;
      this._zone = _zone;
      this._eventNameToPlugin = new Map();
      plugins.forEach(function(p) {
        return p.manager = _this;
      });
      this._plugins = plugins.slice().reverse();
    }
    EventManager.prototype.addEventListener = function(element, eventName, handler) {
      var plugin = this._findPluginFor(eventName);
      return plugin.addEventListener(element, eventName, handler);
    };
    EventManager.prototype.addGlobalEventListener = function(target, eventName, handler) {
      var plugin = this._findPluginFor(eventName);
      return plugin.addGlobalEventListener(target, eventName, handler);
    };
    EventManager.prototype.getZone = function() {
      return this._zone;
    };
    EventManager.prototype._findPluginFor = function(eventName) {
      var plugin = this._eventNameToPlugin.get(eventName);
      if (plugin) {
        return plugin;
      }
      var plugins = this._plugins;
      for (var i = 0; i < plugins.length; i++) {
        var plugin_1 = plugins[i];
        if (plugin_1.supports(eventName)) {
          this._eventNameToPlugin.set(eventName, plugin_1);
          return plugin_1;
        }
      }
      throw new Error("No event manager plugin found for event " + eventName);
    };
    EventManager.decorators = [{type: _angular_core.Injectable}];
    EventManager.ctorParameters = [{
      type: Array,
      decorators: [{
        type: _angular_core.Inject,
        args: [EVENT_MANAGER_PLUGINS]
      }]
    }, {type: _angular_core.NgZone}];
    return EventManager;
  }());
  var EventManagerPlugin = (function() {
    function EventManagerPlugin() {}
    EventManagerPlugin.prototype.addGlobalEventListener = function(element, eventName, handler) {
      var target = getDOM().getGlobalEventTarget(element);
      if (!target) {
        throw new Error("Unsupported event target " + target + " for event " + eventName);
      }
      return this.addEventListener(target, eventName, handler);
    };
    ;
    return EventManagerPlugin;
  }());
  var __extends$4 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var SharedStylesHost = (function() {
    function SharedStylesHost() {
      this._styles = [];
      this._stylesSet = new Set();
    }
    SharedStylesHost.prototype.addStyles = function(styles) {
      var _this = this;
      var additions = [];
      styles.forEach(function(style) {
        if (!_this._stylesSet.has(style)) {
          _this._stylesSet.add(style);
          _this._styles.push(style);
          additions.push(style);
        }
      });
      this.onStylesAdded(additions);
    };
    SharedStylesHost.prototype.onStylesAdded = function(additions) {};
    SharedStylesHost.prototype.getAllStyles = function() {
      return this._styles;
    };
    SharedStylesHost.decorators = [{type: _angular_core.Injectable}];
    SharedStylesHost.ctorParameters = [];
    return SharedStylesHost;
  }());
  var DomSharedStylesHost = (function(_super) {
    __extends$4(DomSharedStylesHost, _super);
    function DomSharedStylesHost(doc) {
      _super.call(this);
      this._hostNodes = new Set();
      this._hostNodes.add(doc.head);
    }
    DomSharedStylesHost.prototype._addStylesToHost = function(styles, host) {
      for (var i = 0; i < styles.length; i++) {
        var styleEl = document.createElement('style');
        styleEl.textContent = styles[i];
        host.appendChild(styleEl);
      }
    };
    DomSharedStylesHost.prototype.addHost = function(hostNode) {
      this._addStylesToHost(this._styles, hostNode);
      this._hostNodes.add(hostNode);
    };
    DomSharedStylesHost.prototype.removeHost = function(hostNode) {
      this._hostNodes.delete(hostNode);
    };
    DomSharedStylesHost.prototype.onStylesAdded = function(additions) {
      var _this = this;
      this._hostNodes.forEach(function(hostNode) {
        _this._addStylesToHost(additions, hostNode);
      });
    };
    DomSharedStylesHost.decorators = [{type: _angular_core.Injectable}];
    DomSharedStylesHost.ctorParameters = [{
      type: undefined,
      decorators: [{
        type: _angular_core.Inject,
        args: [DOCUMENT]
      }]
    }];
    return DomSharedStylesHost;
  }(SharedStylesHost));
  var __extends$3 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var NAMESPACE_URIS = {
    'xlink': 'http://www.w3.org/1999/xlink',
    'svg': 'http://www.w3.org/2000/svg',
    'xhtml': 'http://www.w3.org/1999/xhtml'
  };
  var TEMPLATE_COMMENT_TEXT = 'template bindings={}';
  var TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/;
  var DomRootRenderer = (function() {
    function DomRootRenderer(document, eventManager, sharedStylesHost, animationDriver, appId) {
      this.document = document;
      this.eventManager = eventManager;
      this.sharedStylesHost = sharedStylesHost;
      this.animationDriver = animationDriver;
      this.appId = appId;
      this.registeredComponents = new Map();
    }
    DomRootRenderer.prototype.renderComponent = function(componentProto) {
      var renderer = this.registeredComponents.get(componentProto.id);
      if (!renderer) {
        renderer = new DomRenderer(this, componentProto, this.animationDriver, this.appId + "-" + componentProto.id);
        this.registeredComponents.set(componentProto.id, renderer);
      }
      return renderer;
    };
    return DomRootRenderer;
  }());
  var DomRootRenderer_ = (function(_super) {
    __extends$3(DomRootRenderer_, _super);
    function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animationDriver, appId) {
      _super.call(this, _document, _eventManager, sharedStylesHost, animationDriver, appId);
    }
    DomRootRenderer_.decorators = [{type: _angular_core.Injectable}];
    DomRootRenderer_.ctorParameters = [{
      type: undefined,
      decorators: [{
        type: _angular_core.Inject,
        args: [DOCUMENT]
      }]
    }, {type: EventManager}, {type: DomSharedStylesHost}, {type: AnimationDriver}, {
      type: undefined,
      decorators: [{
        type: _angular_core.Inject,
        args: [_angular_core.APP_ID]
      }]
    }];
    return DomRootRenderer_;
  }(DomRootRenderer));
  var DIRECT_DOM_RENDERER = {
    remove: function(node) {
      if (node.parentNode) {
        node.parentNode.removeChild(node);
      }
    },
    appendChild: function(node, parent) {
      parent.appendChild(node);
    },
    insertBefore: function(node, refNode) {
      refNode.parentNode.insertBefore(node, refNode);
    },
    nextSibling: function(node) {
      return node.nextSibling;
    },
    parentElement: function(node) {
      return node.parentNode;
    }
  };
  var DomRenderer = (function() {
    function DomRenderer(_rootRenderer, componentProto, _animationDriver, styleShimId) {
      this._rootRenderer = _rootRenderer;
      this.componentProto = componentProto;
      this._animationDriver = _animationDriver;
      this.directRenderer = DIRECT_DOM_RENDERER;
      this._styles = flattenStyles(styleShimId, componentProto.styles, []);
      if (componentProto.encapsulation !== _angular_core.ViewEncapsulation.Native) {
        this._rootRenderer.sharedStylesHost.addStyles(this._styles);
      }
      if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Emulated) {
        this._contentAttr = shimContentAttribute(styleShimId);
        this._hostAttr = shimHostAttribute(styleShimId);
      } else {
        this._contentAttr = null;
        this._hostAttr = null;
      }
    }
    DomRenderer.prototype.selectRootElement = function(selectorOrNode, debugInfo) {
      var el;
      if (typeof selectorOrNode === 'string') {
        el = this._rootRenderer.document.querySelector(selectorOrNode);
        if (!el) {
          throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
        }
      } else {
        el = selectorOrNode;
      }
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
      return el;
    };
    DomRenderer.prototype.createElement = function(parent, name, debugInfo) {
      var el;
      if (isNamespaced(name)) {
        var nsAndName = splitNamespace(name);
        el = document.createElementNS((NAMESPACE_URIS)[nsAndName[0]], nsAndName[1]);
      } else {
        el = document.createElement(name);
      }
      if (this._contentAttr) {
        el.setAttribute(this._contentAttr, '');
      }
      if (parent) {
        parent.appendChild(el);
      }
      return el;
    };
    DomRenderer.prototype.createViewRoot = function(hostElement) {
      var nodesParent;
      if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Native) {
        nodesParent = hostElement.createShadowRoot();
        this._rootRenderer.sharedStylesHost.addHost(nodesParent);
        for (var i = 0; i < this._styles.length; i++) {
          var styleEl = document.createElement('style');
          styleEl.textContent = this._styles[i];
          nodesParent.appendChild(styleEl);
        }
      } else {
        if (this._hostAttr) {
          hostElement.setAttribute(this._hostAttr, '');
        }
        nodesParent = hostElement;
      }
      return nodesParent;
    };
    DomRenderer.prototype.createTemplateAnchor = function(parentElement, debugInfo) {
      var comment = document.createComment(TEMPLATE_COMMENT_TEXT);
      if (parentElement) {
        parentElement.appendChild(comment);
      }
      return comment;
    };
    DomRenderer.prototype.createText = function(parentElement, value, debugInfo) {
      var node = document.createTextNode(value);
      if (parentElement) {
        parentElement.appendChild(node);
      }
      return node;
    };
    DomRenderer.prototype.projectNodes = function(parentElement, nodes) {
      if (!parentElement)
        return;
      appendNodes(parentElement, nodes);
    };
    DomRenderer.prototype.attachViewAfter = function(node, viewRootNodes) {
      moveNodesAfterSibling(node, viewRootNodes);
    };
    DomRenderer.prototype.detachView = function(viewRootNodes) {
      for (var i = 0; i < viewRootNodes.length; i++) {
        var node = viewRootNodes[i];
        if (node.parentNode) {
          node.parentNode.removeChild(node);
        }
      }
    };
    DomRenderer.prototype.destroyView = function(hostElement, viewAllNodes) {
      if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Native && hostElement) {
        this._rootRenderer.sharedStylesHost.removeHost(hostElement.shadowRoot);
      }
    };
    DomRenderer.prototype.listen = function(renderElement, name, callback) {
      return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));
    };
    DomRenderer.prototype.listenGlobal = function(target, name, callback) {
      return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));
    };
    DomRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
      renderElement[propertyName] = propertyValue;
    };
    DomRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
      var attrNs;
      var attrNameWithoutNs = attributeName;
      if (isNamespaced(attributeName)) {
        var nsAndName = splitNamespace(attributeName);
        attrNameWithoutNs = nsAndName[1];
        attributeName = nsAndName[0] + ':' + nsAndName[1];
        attrNs = NAMESPACE_URIS[nsAndName[0]];
      }
      if (isPresent(attributeValue)) {
        if (attrNs) {
          renderElement.setAttributeNS(attrNs, attributeName, attributeValue);
        } else {
          renderElement.setAttribute(attributeName, attributeValue);
        }
      } else {
        if (isPresent(attrNs)) {
          renderElement.removeAttributeNS(attrNs, attrNameWithoutNs);
        } else {
          renderElement.removeAttribute(attributeName);
        }
      }
    };
    DomRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
      if (renderElement.nodeType === Node.COMMENT_NODE) {
        var existingBindings = renderElement.nodeValue.replace(/\n/g, '').match(TEMPLATE_BINDINGS_EXP);
        var parsedBindings = JSON.parse(existingBindings[1]);
        parsedBindings[propertyName] = propertyValue;
        renderElement.nodeValue = TEMPLATE_COMMENT_TEXT.replace('{}', JSON.stringify(parsedBindings, null, 2));
      } else {
        this.setElementAttribute(renderElement, propertyName, propertyValue);
      }
    };
    DomRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
      if (isAdd) {
        renderElement.classList.add(className);
      } else {
        renderElement.classList.remove(className);
      }
    };
    DomRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
      if (isPresent(styleValue)) {
        renderElement.style[styleName] = stringify(styleValue);
      } else {
        renderElement.style[styleName] = '';
      }
    };
    DomRenderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {
      renderElement[methodName].apply(renderElement, args);
    };
    DomRenderer.prototype.setText = function(renderNode, text) {
      renderNode.nodeValue = text;
    };
    DomRenderer.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
      if (previousPlayers === void 0) {
        previousPlayers = [];
      }
      return this._animationDriver.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);
    };
    return DomRenderer;
  }());
  function moveNodesAfterSibling(sibling, nodes) {
    var parent = sibling.parentNode;
    if (nodes.length > 0 && parent) {
      var nextSibling = sibling.nextSibling;
      if (nextSibling) {
        for (var i = 0; i < nodes.length; i++) {
          parent.insertBefore(nodes[i], nextSibling);
        }
      } else {
        for (var i = 0; i < nodes.length; i++) {
          parent.appendChild(nodes[i]);
        }
      }
    }
  }
  function appendNodes(parent, nodes) {
    for (var i = 0; i < nodes.length; i++) {
      parent.appendChild(nodes[i]);
    }
  }
  function decoratePreventDefault(eventHandler) {
    return function(event) {
      var allowDefaultBehavior = eventHandler(event);
      if (allowDefaultBehavior === false) {
        event.preventDefault();
        event.returnValue = false;
      }
    };
  }
  var COMPONENT_REGEX = /%COMP%/g;
  var COMPONENT_VARIABLE = '%COMP%';
  var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
  var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
  function shimContentAttribute(componentShortId) {
    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
  }
  function shimHostAttribute(componentShortId) {
    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
  }
  function flattenStyles(compId, styles, target) {
    for (var i = 0; i < styles.length; i++) {
      var style = styles[i];
      if (Array.isArray(style)) {
        flattenStyles(compId, style, target);
      } else {
        style = style.replace(COMPONENT_REGEX, compId);
        target.push(style);
      }
    }
    return target;
  }
  var NS_PREFIX_RE = /^:([^:]+):(.+)$/;
  function isNamespaced(name) {
    return name[0] === ':';
  }
  function splitNamespace(name) {
    var match = name.match(NS_PREFIX_RE);
    return [match[1], match[2]];
  }
  var CORE_TOKENS = {
    'ApplicationRef': _angular_core.ApplicationRef,
    'NgZone': _angular_core.NgZone
  };
  var INSPECT_GLOBAL_NAME = 'ng.probe';
  var CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';
  function inspectNativeElement(element) {
    return _angular_core.getDebugNode(element);
  }
  var NgProbeToken = (function() {
    function NgProbeToken(name, token) {
      this.name = name;
      this.token = token;
    }
    return NgProbeToken;
  }());
  function _createConditionalRootRenderer(rootRenderer, extraTokens) {
    if (_angular_core.isDevMode()) {
      return _createRootRenderer(rootRenderer, extraTokens);
    }
    return rootRenderer;
  }
  function _createRootRenderer(rootRenderer, extraTokens) {
    getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
    getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, StringMapWrapper.merge(CORE_TOKENS, _ngProbeTokensToMap(extraTokens || [])));
    return new DebugDomRootRenderer(rootRenderer);
  }
  function _ngProbeTokensToMap(tokens) {
    return tokens.reduce(function(prev, t) {
      return (prev[t.name] = t.token, prev);
    }, {});
  }
  var ELEMENT_PROBE_PROVIDERS = [{
    provide: _angular_core.RootRenderer,
    useFactory: _createConditionalRootRenderer,
    deps: [DomRootRenderer, [NgProbeToken, new _angular_core.Optional()]]
  }];
  var ELEMENT_PROBE_PROVIDERS_PROD_MODE = [{
    provide: _angular_core.RootRenderer,
    useFactory: _createRootRenderer,
    deps: [DomRootRenderer, [NgProbeToken, new _angular_core.Optional()]]
  }];
  var __extends$5 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var DomEventsPlugin = (function(_super) {
    __extends$5(DomEventsPlugin, _super);
    function DomEventsPlugin() {
      _super.apply(this, arguments);
    }
    DomEventsPlugin.prototype.supports = function(eventName) {
      return true;
    };
    DomEventsPlugin.prototype.addEventListener = function(element, eventName, handler) {
      element.addEventListener(eventName, handler, false);
      return function() {
        return element.removeEventListener(eventName, handler, false);
      };
    };
    DomEventsPlugin.decorators = [{type: _angular_core.Injectable}];
    DomEventsPlugin.ctorParameters = [];
    return DomEventsPlugin;
  }(EventManagerPlugin));
  var __extends$6 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var EVENT_NAMES = {
    'pan': true,
    'panstart': true,
    'panmove': true,
    'panend': true,
    'pancancel': true,
    'panleft': true,
    'panright': true,
    'panup': true,
    'pandown': true,
    'pinch': true,
    'pinchstart': true,
    'pinchmove': true,
    'pinchend': true,
    'pinchcancel': true,
    'pinchin': true,
    'pinchout': true,
    'press': true,
    'pressup': true,
    'rotate': true,
    'rotatestart': true,
    'rotatemove': true,
    'rotateend': true,
    'rotatecancel': true,
    'swipe': true,
    'swipeleft': true,
    'swiperight': true,
    'swipeup': true,
    'swipedown': true,
    'tap': true
  };
  var HAMMER_GESTURE_CONFIG = new _angular_core.OpaqueToken('HammerGestureConfig');
  var HammerGestureConfig = (function() {
    function HammerGestureConfig() {
      this.events = [];
      this.overrides = {};
    }
    HammerGestureConfig.prototype.buildHammer = function(element) {
      var mc = new Hammer(element);
      mc.get('pinch').set({enable: true});
      mc.get('rotate').set({enable: true});
      for (var eventName in this.overrides) {
        mc.get(eventName).set(this.overrides[eventName]);
      }
      return mc;
    };
    HammerGestureConfig.decorators = [{type: _angular_core.Injectable}];
    HammerGestureConfig.ctorParameters = [];
    return HammerGestureConfig;
  }());
  var HammerGesturesPlugin = (function(_super) {
    __extends$6(HammerGesturesPlugin, _super);
    function HammerGesturesPlugin(_config) {
      _super.call(this);
      this._config = _config;
    }
    HammerGesturesPlugin.prototype.supports = function(eventName) {
      if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
        return false;
      }
      if (!window.Hammer) {
        throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");
      }
      return true;
    };
    HammerGesturesPlugin.prototype.addEventListener = function(element, eventName, handler) {
      var _this = this;
      var zone = this.manager.getZone();
      eventName = eventName.toLowerCase();
      return zone.runOutsideAngular(function() {
        var mc = _this._config.buildHammer(element);
        var callback = function(eventObj) {
          zone.runGuarded(function() {
            handler(eventObj);
          });
        };
        mc.on(eventName, callback);
        return function() {
          return mc.off(eventName, callback);
        };
      });
    };
    HammerGesturesPlugin.prototype.isCustomEvent = function(eventName) {
      return this._config.events.indexOf(eventName) > -1;
    };
    HammerGesturesPlugin.decorators = [{type: _angular_core.Injectable}];
    HammerGesturesPlugin.ctorParameters = [{
      type: HammerGestureConfig,
      decorators: [{
        type: _angular_core.Inject,
        args: [HAMMER_GESTURE_CONFIG]
      }]
    }];
    return HammerGesturesPlugin;
  }(EventManagerPlugin));
  var __extends$7 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
  var MODIFIER_KEY_GETTERS = {
    'alt': function(event) {
      return event.altKey;
    },
    'control': function(event) {
      return event.ctrlKey;
    },
    'meta': function(event) {
      return event.metaKey;
    },
    'shift': function(event) {
      return event.shiftKey;
    }
  };
  var KeyEventsPlugin = (function(_super) {
    __extends$7(KeyEventsPlugin, _super);
    function KeyEventsPlugin() {
      _super.call(this);
    }
    KeyEventsPlugin.prototype.supports = function(eventName) {
      return KeyEventsPlugin.parseEventName(eventName) != null;
    };
    KeyEventsPlugin.prototype.addEventListener = function(element, eventName, handler) {
      var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
      var outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
      return this.manager.getZone().runOutsideAngular(function() {
        return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
      });
    };
    KeyEventsPlugin.parseEventName = function(eventName) {
      var parts = eventName.toLowerCase().split('.');
      var domEventName = parts.shift();
      if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {
        return null;
      }
      var key = KeyEventsPlugin._normalizeKey(parts.pop());
      var fullKey = '';
      MODIFIER_KEYS.forEach(function(modifierName) {
        var index = parts.indexOf(modifierName);
        if (index > -1) {
          parts.splice(index, 1);
          fullKey += modifierName + '.';
        }
      });
      fullKey += key;
      if (parts.length != 0 || key.length === 0) {
        return null;
      }
      var result = {};
      result['domEventName'] = domEventName;
      result['fullKey'] = fullKey;
      return result;
    };
    KeyEventsPlugin.getEventFullKey = function(event) {
      var fullKey = '';
      var key = getDOM().getEventKey(event);
      key = key.toLowerCase();
      if (key === ' ') {
        key = 'space';
      } else if (key === '.') {
        key = 'dot';
      }
      MODIFIER_KEYS.forEach(function(modifierName) {
        if (modifierName != key) {
          var modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
          if (modifierGetter(event)) {
            fullKey += modifierName + '.';
          }
        }
      });
      fullKey += key;
      return fullKey;
    };
    KeyEventsPlugin.eventCallback = function(fullKey, handler, zone) {
      return function(event) {
        if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
          zone.runGuarded(function() {
            return handler(event);
          });
        }
      };
    };
    KeyEventsPlugin._normalizeKey = function(keyName) {
      switch (keyName) {
        case 'esc':
          return 'escape';
        default:
          return keyName;
      }
    };
    KeyEventsPlugin.decorators = [{type: _angular_core.Injectable}];
    KeyEventsPlugin.ctorParameters = [];
    return KeyEventsPlugin;
  }(EventManagerPlugin));
  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
  var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
  function sanitizeUrl(url) {
    url = String(url);
    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))
      return url;
    if (_angular_core.isDevMode()) {
      getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
    }
    return 'unsafe:' + url;
  }
  function sanitizeSrcset(srcset) {
    srcset = String(srcset);
    return srcset.split(',').map(function(srcset) {
      return sanitizeUrl(srcset.trim());
    }).join(', ');
  }
  var inertElement = null;
  var DOM = null;
  function getInertElement() {
    if (inertElement)
      return inertElement;
    DOM = getDOM();
    var templateEl = DOM.createElement('template');
    if ('content' in templateEl)
      return templateEl;
    var doc = DOM.createHtmlDocument();
    inertElement = DOM.querySelector(doc, 'body');
    if (inertElement == null) {
      var html = DOM.createElement('html', doc);
      inertElement = DOM.createElement('body', doc);
      DOM.appendChild(html, inertElement);
      DOM.appendChild(doc, html);
    }
    return inertElement;
  }
  function tagSet(tags) {
    var res = {};
    for (var _i = 0,
        _a = tags.split(','); _i < _a.length; _i++) {
      var t = _a[_i];
      res[t] = true;
    }
    return res;
  }
  function merge() {
    var sets = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      sets[_i - 0] = arguments[_i];
    }
    var res = {};
    for (var _a = 0,
        sets_1 = sets; _a < sets_1.length; _a++) {
      var s = sets_1[_a];
      for (var v in s) {
        if (s.hasOwnProperty(v))
          res[v] = true;
      }
    }
    return res;
  }
  var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
  var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
  var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
  var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
  var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' + 'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
  var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' + 'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
  var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
  var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
  var SRCSET_ATTRS = tagSet('srcset');
  var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' + 'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' + 'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' + 'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' + 'valign,value,vspace,width');
  var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
  var SanitizingHtmlSerializer = (function() {
    function SanitizingHtmlSerializer() {
      this.sanitizedSomething = false;
      this.buf = [];
    }
    SanitizingHtmlSerializer.prototype.sanitizeChildren = function(el) {
      var current = el.firstChild;
      while (current) {
        if (DOM.isElementNode(current)) {
          this.startElement(current);
        } else if (DOM.isTextNode(current)) {
          this.chars(DOM.nodeValue(current));
        } else {
          this.sanitizedSomething = true;
        }
        if (DOM.firstChild(current)) {
          current = DOM.firstChild(current);
          continue;
        }
        while (current) {
          if (DOM.isElementNode(current)) {
            this.endElement(current);
          }
          if (DOM.nextSibling(current)) {
            current = DOM.nextSibling(current);
            break;
          }
          current = DOM.parentElement(current);
        }
      }
      return this.buf.join('');
    };
    SanitizingHtmlSerializer.prototype.startElement = function(element) {
      var _this = this;
      var tagName = DOM.nodeName(element).toLowerCase();
      if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
        this.sanitizedSomething = true;
        return;
      }
      this.buf.push('<');
      this.buf.push(tagName);
      DOM.attributeMap(element).forEach(function(value, attrName) {
        var lower = attrName.toLowerCase();
        if (!VALID_ATTRS.hasOwnProperty(lower)) {
          _this.sanitizedSomething = true;
          return;
        }
        if (URI_ATTRS[lower])
          value = sanitizeUrl(value);
        if (SRCSET_ATTRS[lower])
          value = sanitizeSrcset(value);
        _this.buf.push(' ');
        _this.buf.push(attrName);
        _this.buf.push('="');
        _this.buf.push(encodeEntities(value));
        _this.buf.push('"');
      });
      this.buf.push('>');
    };
    SanitizingHtmlSerializer.prototype.endElement = function(current) {
      var tagName = DOM.nodeName(current).toLowerCase();
      if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
        this.buf.push('</');
        this.buf.push(tagName);
        this.buf.push('>');
      }
    };
    SanitizingHtmlSerializer.prototype.chars = function(chars) {
      this.buf.push(encodeEntities(chars));
    };
    return SanitizingHtmlSerializer;
  }());
  var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
  var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
  function encodeEntities(value) {
    return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function(match) {
      var hi = match.charCodeAt(0);
      var low = match.charCodeAt(1);
      return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
    }).replace(NON_ALPHANUMERIC_REGEXP, function(match) {
      return '&#' + match.charCodeAt(0) + ';';
    }).replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }
  function stripCustomNsAttrs(el) {
    DOM.attributeMap(el).forEach(function(_, attrName) {
      if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
        DOM.removeAttribute(el, attrName);
      }
    });
    for (var _i = 0,
        _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
      var n = _a[_i];
      if (DOM.isElementNode(n))
        stripCustomNsAttrs(n);
    }
  }
  function sanitizeHtml(unsafeHtmlInput) {
    try {
      var containerEl = getInertElement();
      var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
      var mXSSAttempts = 5;
      var parsedHtml = unsafeHtml;
      do {
        if (mXSSAttempts === 0) {
          throw new Error('Failed to sanitize html because the input is unstable');
        }
        mXSSAttempts--;
        unsafeHtml = parsedHtml;
        DOM.setInnerHTML(containerEl, unsafeHtml);
        if (DOM.defaultDoc().documentMode) {
          stripCustomNsAttrs(containerEl);
        }
        parsedHtml = DOM.getInnerHTML(containerEl);
      } while (unsafeHtml !== parsedHtml);
      var sanitizer = new SanitizingHtmlSerializer();
      var safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);
      var parent_1 = DOM.getTemplateContent(containerEl) || containerEl;
      for (var _i = 0,
          _a = DOM.childNodesAsList(parent_1); _i < _a.length; _i++) {
        var child = _a[_i];
        DOM.removeChild(parent_1, child);
      }
      if (_angular_core.isDevMode() && sanitizer.sanitizedSomething) {
        DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');
      }
      return safeHtml;
    } catch (e) {
      inertElement = null;
      throw e;
    }
  }
  var VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
  var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';
  var COLOR_FNS = '(?:rgb|hsl)a?';
  var FN_ARGS = '\\([-0-9.%, a-zA-Z]+\\)';
  var SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + ")" + FN_ARGS + ")$", 'g');
  var URL_RE = /^url\(([^)]+)\)$/;
  function hasBalancedQuotes(value) {
    var outsideSingle = true;
    var outsideDouble = true;
    for (var i = 0; i < value.length; i++) {
      var c = value.charAt(i);
      if (c === '\'' && outsideDouble) {
        outsideSingle = !outsideSingle;
      } else if (c === '"' && outsideSingle) {
        outsideDouble = !outsideDouble;
      }
    }
    return outsideSingle && outsideDouble;
  }
  function sanitizeStyle(value) {
    value = String(value).trim();
    if (!value)
      return '';
    var urlMatch = value.match(URL_RE);
    if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) || value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
      return value;
    }
    if (_angular_core.isDevMode()) {
      getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
    }
    return 'unsafe';
  }
  var __extends$8 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var DomSanitizer = (function() {
    function DomSanitizer() {}
    return DomSanitizer;
  }());
  var DomSanitizerImpl = (function(_super) {
    __extends$8(DomSanitizerImpl, _super);
    function DomSanitizerImpl() {
      _super.apply(this, arguments);
    }
    DomSanitizerImpl.prototype.sanitize = function(ctx, value) {
      if (value == null)
        return null;
      switch (ctx) {
        case _angular_core.SecurityContext.NONE:
          return value;
        case _angular_core.SecurityContext.HTML:
          if (value instanceof SafeHtmlImpl)
            return value.changingThisBreaksApplicationSecurity;
          this.checkNotSafeValue(value, 'HTML');
          return sanitizeHtml(String(value));
        case _angular_core.SecurityContext.STYLE:
          if (value instanceof SafeStyleImpl)
            return value.changingThisBreaksApplicationSecurity;
          this.checkNotSafeValue(value, 'Style');
          return sanitizeStyle(value);
        case _angular_core.SecurityContext.SCRIPT:
          if (value instanceof SafeScriptImpl)
            return value.changingThisBreaksApplicationSecurity;
          this.checkNotSafeValue(value, 'Script');
          throw new Error('unsafe value used in a script context');
        case _angular_core.SecurityContext.URL:
          if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
            return value.changingThisBreaksApplicationSecurity;
          }
          this.checkNotSafeValue(value, 'URL');
          return sanitizeUrl(String(value));
        case _angular_core.SecurityContext.RESOURCE_URL:
          if (value instanceof SafeResourceUrlImpl) {
            return value.changingThisBreaksApplicationSecurity;
          }
          this.checkNotSafeValue(value, 'ResourceURL');
          throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
        default:
          throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
      }
    };
    DomSanitizerImpl.prototype.checkNotSafeValue = function(value, expectedType) {
      if (value instanceof SafeValueImpl) {
        throw new Error(("Required a safe " + expectedType + ", got a " + value.getTypeName() + " ") + "(see http://g.co/ng/security#xss)");
      }
    };
    DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function(value) {
      return new SafeHtmlImpl(value);
    };
    DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function(value) {
      return new SafeStyleImpl(value);
    };
    DomSanitizerImpl.prototype.bypassSecurityTrustScript = function(value) {
      return new SafeScriptImpl(value);
    };
    DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function(value) {
      return new SafeUrlImpl(value);
    };
    DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function(value) {
      return new SafeResourceUrlImpl(value);
    };
    DomSanitizerImpl.decorators = [{type: _angular_core.Injectable}];
    DomSanitizerImpl.ctorParameters = [];
    return DomSanitizerImpl;
  }(DomSanitizer));
  var SafeValueImpl = (function() {
    function SafeValueImpl(changingThisBreaksApplicationSecurity) {
      this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
    }
    SafeValueImpl.prototype.toString = function() {
      return ("SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity) + " (see http://g.co/ng/security#xss)";
    };
    return SafeValueImpl;
  }());
  var SafeHtmlImpl = (function(_super) {
    __extends$8(SafeHtmlImpl, _super);
    function SafeHtmlImpl() {
      _super.apply(this, arguments);
    }
    SafeHtmlImpl.prototype.getTypeName = function() {
      return 'HTML';
    };
    return SafeHtmlImpl;
  }(SafeValueImpl));
  var SafeStyleImpl = (function(_super) {
    __extends$8(SafeStyleImpl, _super);
    function SafeStyleImpl() {
      _super.apply(this, arguments);
    }
    SafeStyleImpl.prototype.getTypeName = function() {
      return 'Style';
    };
    return SafeStyleImpl;
  }(SafeValueImpl));
  var SafeScriptImpl = (function(_super) {
    __extends$8(SafeScriptImpl, _super);
    function SafeScriptImpl() {
      _super.apply(this, arguments);
    }
    SafeScriptImpl.prototype.getTypeName = function() {
      return 'Script';
    };
    return SafeScriptImpl;
  }(SafeValueImpl));
  var SafeUrlImpl = (function(_super) {
    __extends$8(SafeUrlImpl, _super);
    function SafeUrlImpl() {
      _super.apply(this, arguments);
    }
    SafeUrlImpl.prototype.getTypeName = function() {
      return 'URL';
    };
    return SafeUrlImpl;
  }(SafeValueImpl));
  var SafeResourceUrlImpl = (function(_super) {
    __extends$8(SafeResourceUrlImpl, _super);
    function SafeResourceUrlImpl() {
      _super.apply(this, arguments);
    }
    SafeResourceUrlImpl.prototype.getTypeName = function() {
      return 'ResourceURL';
    };
    return SafeResourceUrlImpl;
  }(SafeValueImpl));
  var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{
    provide: _angular_core.PLATFORM_INITIALIZER,
    useValue: initDomAdapter,
    multi: true
  }, {
    provide: _angular_common.PlatformLocation,
    useClass: BrowserPlatformLocation
  }];
  var BROWSER_SANITIZATION_PROVIDERS = [{
    provide: _angular_core.Sanitizer,
    useExisting: DomSanitizer
  }, {
    provide: DomSanitizer,
    useClass: DomSanitizerImpl
  }];
  var platformBrowser = _angular_core.createPlatformFactory(_angular_core.platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
  function initDomAdapter() {
    BrowserDomAdapter.makeCurrent();
    BrowserGetTestability.init();
  }
  function errorHandler() {
    return new _angular_core.ErrorHandler();
  }
  function _document() {
    return getDOM().defaultDoc();
  }
  function _resolveDefaultAnimationDriver() {
    if (getDOM().supportsWebAnimation()) {
      return new WebAnimationsDriver();
    }
    return AnimationDriver.NOOP;
  }
  var BrowserModule = (function() {
    function BrowserModule(parentModule) {
      if (parentModule) {
        throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
      }
    }
    BrowserModule.decorators = [{
      type: _angular_core.NgModule,
      args: [{
        providers: [BROWSER_SANITIZATION_PROVIDERS, {
          provide: _angular_core.ErrorHandler,
          useFactory: errorHandler,
          deps: []
        }, {
          provide: DOCUMENT,
          useFactory: _document,
          deps: []
        }, {
          provide: EVENT_MANAGER_PLUGINS,
          useClass: DomEventsPlugin,
          multi: true
        }, {
          provide: EVENT_MANAGER_PLUGINS,
          useClass: KeyEventsPlugin,
          multi: true
        }, {
          provide: EVENT_MANAGER_PLUGINS,
          useClass: HammerGesturesPlugin,
          multi: true
        }, {
          provide: HAMMER_GESTURE_CONFIG,
          useClass: HammerGestureConfig
        }, {
          provide: DomRootRenderer,
          useClass: DomRootRenderer_
        }, {
          provide: _angular_core.RootRenderer,
          useExisting: DomRootRenderer
        }, {
          provide: SharedStylesHost,
          useExisting: DomSharedStylesHost
        }, {
          provide: AnimationDriver,
          useFactory: _resolveDefaultAnimationDriver
        }, DomSharedStylesHost, _angular_core.Testability, EventManager, ELEMENT_PROBE_PROVIDERS, Title],
        exports: [_angular_common.CommonModule, _angular_core.ApplicationModule]
      }]
    }];
    BrowserModule.ctorParameters = [{
      type: BrowserModule,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.SkipSelf}]
    }];
    return BrowserModule;
  }());
  var win = typeof window !== 'undefined' && window || {};
  var ChangeDetectionPerfRecord = (function() {
    function ChangeDetectionPerfRecord(msPerTick, numTicks) {
      this.msPerTick = msPerTick;
      this.numTicks = numTicks;
    }
    return ChangeDetectionPerfRecord;
  }());
  var AngularTools = (function() {
    function AngularTools(ref) {
      this.profiler = new AngularProfiler(ref);
    }
    return AngularTools;
  }());
  var AngularProfiler = (function() {
    function AngularProfiler(ref) {
      this.appRef = ref.injector.get(_angular_core.ApplicationRef);
    }
    AngularProfiler.prototype.timeChangeDetection = function(config) {
      var record = config && config['record'];
      var profileName = 'Change Detection';
      var isProfilerAvailable = isPresent(win.console.profile);
      if (record && isProfilerAvailable) {
        win.console.profile(profileName);
      }
      var start = getDOM().performanceNow();
      var numTicks = 0;
      while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {
        this.appRef.tick();
        numTicks++;
      }
      var end = getDOM().performanceNow();
      if (record && isProfilerAvailable) {
        win.console.profileEnd(profileName);
      }
      var msPerTick = (end - start) / numTicks;
      win.console.log("ran " + numTicks + " change detection cycles");
      win.console.log(msPerTick.toFixed(2) + " ms per check");
      return new ChangeDetectionPerfRecord(msPerTick, numTicks);
    };
    return AngularProfiler;
  }());
  var context = global$1;
  function enableDebugTools(ref) {
    Object.assign(context.ng, new AngularTools(ref));
    return ref;
  }
  function disableDebugTools() {
    if (context.ng) {
      delete context.ng.profiler;
    }
  }
  var By = (function() {
    function By() {}
    By.all = function() {
      return function(debugElement) {
        return true;
      };
    };
    By.css = function(selector) {
      return function(debugElement) {
        return isPresent(debugElement.nativeElement) ? getDOM().elementMatches(debugElement.nativeElement, selector) : false;
      };
    };
    By.directive = function(type) {
      return function(debugElement) {
        return debugElement.providerTokens.indexOf(type) !== -1;
      };
    };
    return By;
  }());
  var __platform_browser_private__ = {
    BrowserPlatformLocation: BrowserPlatformLocation,
    DomAdapter: DomAdapter,
    BrowserDomAdapter: BrowserDomAdapter,
    BrowserGetTestability: BrowserGetTestability,
    getDOM: getDOM,
    setRootDomAdapter: setRootDomAdapter,
    DomRootRenderer_: DomRootRenderer_,
    DomRootRenderer: DomRootRenderer,
    NAMESPACE_URIS: NAMESPACE_URIS,
    shimContentAttribute: shimContentAttribute,
    shimHostAttribute: shimHostAttribute,
    flattenStyles: flattenStyles,
    splitNamespace: splitNamespace,
    isNamespaced: isNamespaced,
    DomSharedStylesHost: DomSharedStylesHost,
    SharedStylesHost: SharedStylesHost,
    ELEMENT_PROBE_PROVIDERS: ELEMENT_PROBE_PROVIDERS,
    DomEventsPlugin: DomEventsPlugin,
    KeyEventsPlugin: KeyEventsPlugin,
    HammerGesturesPlugin: HammerGesturesPlugin,
    initDomAdapter: initDomAdapter,
    INTERNAL_BROWSER_PLATFORM_PROVIDERS: INTERNAL_BROWSER_PLATFORM_PROVIDERS,
    BROWSER_SANITIZATION_PROVIDERS: BROWSER_SANITIZATION_PROVIDERS,
    WebAnimationsDriver: WebAnimationsDriver
  };
  exports.BrowserModule = BrowserModule;
  exports.platformBrowser = platformBrowser;
  exports.Title = Title;
  exports.disableDebugTools = disableDebugTools;
  exports.enableDebugTools = enableDebugTools;
  exports.AnimationDriver = AnimationDriver;
  exports.By = By;
  exports.NgProbeToken = NgProbeToken;
  exports.DOCUMENT = DOCUMENT;
  exports.EVENT_MANAGER_PLUGINS = EVENT_MANAGER_PLUGINS;
  exports.EventManager = EventManager;
  exports.HAMMER_GESTURE_CONFIG = HAMMER_GESTURE_CONFIG;
  exports.HammerGestureConfig = HammerGestureConfig;
  exports.DomSanitizer = DomSanitizer;
  exports.__platform_browser_private__ = __platform_browser_private__;
}));

})();
$__System.registerDynamic('node_modules/rxjs/util/ObjectUnsubscribedError.js', [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when an action is invalid because the object has been
     * unsubscribed.
     *
     * @see {@link Subject}
     * @see {@link BehaviorSubject}
     *
     * @class ObjectUnsubscribedError
     */
    var ObjectUnsubscribedError = function (_super) {
        __extends(ObjectUnsubscribedError, _super);
        function ObjectUnsubscribedError() {
            var err = _super.call(this, 'object unsubscribed');
            this.name = err.name = 'ObjectUnsubscribedError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return ObjectUnsubscribedError;
    }(Error);
    exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/SubjectSubscription.js", ["node_modules/rxjs/Subscription.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscription_1 = $__require("node_modules/rxjs/Subscription.js");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SubjectSubscription = function (_super) {
        __extends(SubjectSubscription, _super);
        function SubjectSubscription(subject, subscriber) {
            _super.call(this);
            this.subject = subject;
            this.subscriber = subscriber;
            this.closed = false;
        }
        SubjectSubscription.prototype.unsubscribe = function () {
            if (this.closed) {
                return;
            }
            this.closed = true;
            var subject = this.subject;
            var observers = subject.observers;
            this.subject = null;
            if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
                return;
            }
            var subscriberIndex = observers.indexOf(this.subscriber);
            if (subscriberIndex !== -1) {
                observers.splice(subscriberIndex, 1);
            }
        };
        return SubjectSubscription;
    }(Subscription_1.Subscription);
    exports.SubjectSubscription = SubjectSubscription;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/Subject.js', ['node_modules/rxjs/Observable.js', 'node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/Subscription.js', 'node_modules/rxjs/util/ObjectUnsubscribedError.js', 'node_modules/rxjs/SubjectSubscription.js', 'node_modules/rxjs/symbol/rxSubscriber.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('node_modules/rxjs/Observable.js');
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var Subscription_1 = $__require('node_modules/rxjs/Subscription.js');
    var ObjectUnsubscribedError_1 = $__require('node_modules/rxjs/util/ObjectUnsubscribedError.js');
    var SubjectSubscription_1 = $__require('node_modules/rxjs/SubjectSubscription.js');
    var rxSubscriber_1 = $__require('node_modules/rxjs/symbol/rxSubscriber.js');
    /**
     * @class SubjectSubscriber<T>
     */
    var SubjectSubscriber = function (_super) {
        __extends(SubjectSubscriber, _super);
        function SubjectSubscriber(destination) {
            _super.call(this, destination);
            this.destination = destination;
        }
        return SubjectSubscriber;
    }(Subscriber_1.Subscriber);
    exports.SubjectSubscriber = SubjectSubscriber;
    /**
     * @class Subject<T>
     */
    var Subject = function (_super) {
        __extends(Subject, _super);
        function Subject() {
            _super.call(this);
            this.observers = [];
            this.closed = false;
            this.isStopped = false;
            this.hasError = false;
            this.thrownError = null;
        }
        Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
            return new SubjectSubscriber(this);
        };
        Subject.prototype.lift = function (operator) {
            var subject = new AnonymousSubject(this, this);
            subject.operator = operator;
            return subject;
        };
        Subject.prototype.next = function (value) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            if (!this.isStopped) {
                var observers = this.observers;
                var len = observers.length;
                var copy = observers.slice();
                for (var i = 0; i < len; i++) {
                    copy[i].next(value);
                }
            }
        };
        Subject.prototype.error = function (err) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            this.hasError = true;
            this.thrownError = err;
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].error(err);
            }
            this.observers.length = 0;
        };
        Subject.prototype.complete = function () {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].complete();
            }
            this.observers.length = 0;
        };
        Subject.prototype.unsubscribe = function () {
            this.isStopped = true;
            this.closed = true;
            this.observers = null;
        };
        Subject.prototype._subscribe = function (subscriber) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            } else if (this.hasError) {
                subscriber.error(this.thrownError);
                return Subscription_1.Subscription.EMPTY;
            } else if (this.isStopped) {
                subscriber.complete();
                return Subscription_1.Subscription.EMPTY;
            } else {
                this.observers.push(subscriber);
                return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
            }
        };
        Subject.prototype.asObservable = function () {
            var observable = new Observable_1.Observable();
            observable.source = this;
            return observable;
        };
        Subject.create = function (destination, source) {
            return new AnonymousSubject(destination, source);
        };
        return Subject;
    }(Observable_1.Observable);
    exports.Subject = Subject;
    /**
     * @class AnonymousSubject<T>
     */
    var AnonymousSubject = function (_super) {
        __extends(AnonymousSubject, _super);
        function AnonymousSubject(destination, source) {
            _super.call(this);
            this.destination = destination;
            this.source = source;
        }
        AnonymousSubject.prototype.next = function (value) {
            var destination = this.destination;
            if (destination && destination.next) {
                destination.next(value);
            }
        };
        AnonymousSubject.prototype.error = function (err) {
            var destination = this.destination;
            if (destination && destination.error) {
                this.destination.error(err);
            }
        };
        AnonymousSubject.prototype.complete = function () {
            var destination = this.destination;
            if (destination && destination.complete) {
                this.destination.complete();
            }
        };
        AnonymousSubject.prototype._subscribe = function (subscriber) {
            var source = this.source;
            if (source) {
                return this.source.subscribe(subscriber);
            } else {
                return Subscription_1.Subscription.EMPTY;
            }
        };
        return AnonymousSubject;
    }(Subject);
    exports.AnonymousSubject = AnonymousSubject;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/util/isArray.js", [], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  exports.isArray = Array.isArray || function (x) {
    return x && typeof x.length === 'number';
  };
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/util/isObject.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isObject(x) {
        return x != null && typeof x === 'object';
    }
    exports.isObject = isObject;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/util/isFunction.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isFunction(x) {
        return typeof x === 'function';
    }
    exports.isFunction = isFunction;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/util/tryCatch.js", ["node_modules/rxjs/util/errorObject.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var errorObject_1 = $__require("node_modules/rxjs/util/errorObject.js");
    var tryCatchTarget;
    function tryCatcher() {
        try {
            return tryCatchTarget.apply(this, arguments);
        } catch (e) {
            errorObject_1.errorObject.e = e;
            return errorObject_1.errorObject;
        }
    }
    function tryCatch(fn) {
        tryCatchTarget = fn;
        return tryCatcher;
    }
    exports.tryCatch = tryCatch;
    ;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/util/errorObject.js", [], true, function ($__require, exports, module) {
  "use strict";
  // typeof any so that it we don't have to cast when comparing a result to the error object

  var define,
      global = this || self,
      GLOBAL = global;
  exports.errorObject = { e: {} };
  

  return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/util/UnsubscriptionError.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when one or more errors have occurred during the
     * `unsubscribe` of a {@link Subscription}.
     */
    var UnsubscriptionError = function (_super) {
        __extends(UnsubscriptionError, _super);
        function UnsubscriptionError(errors) {
            _super.call(this);
            this.errors = errors;
            var err = Error.call(this, errors ? errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) {
                return i + 1 + ") " + err.toString();
            }).join('\n  ') : '');
            this.name = err.name = 'UnsubscriptionError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return UnsubscriptionError;
    }(Error);
    exports.UnsubscriptionError = UnsubscriptionError;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/Subscription.js', ['node_modules/rxjs/util/isArray.js', 'node_modules/rxjs/util/isObject.js', 'node_modules/rxjs/util/isFunction.js', 'node_modules/rxjs/util/tryCatch.js', 'node_modules/rxjs/util/errorObject.js', 'node_modules/rxjs/util/UnsubscriptionError.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var isArray_1 = $__require('node_modules/rxjs/util/isArray.js');
    var isObject_1 = $__require('node_modules/rxjs/util/isObject.js');
    var isFunction_1 = $__require('node_modules/rxjs/util/isFunction.js');
    var tryCatch_1 = $__require('node_modules/rxjs/util/tryCatch.js');
    var errorObject_1 = $__require('node_modules/rxjs/util/errorObject.js');
    var UnsubscriptionError_1 = $__require('node_modules/rxjs/util/UnsubscriptionError.js');
    /**
     * Represents a disposable resource, such as the execution of an Observable. A
     * Subscription has one important method, `unsubscribe`, that takes no argument
     * and just disposes the resource held by the subscription.
     *
     * Additionally, subscriptions may be grouped together through the `add()`
     * method, which will attach a child Subscription to the current Subscription.
     * When a Subscription is unsubscribed, all its children (and its grandchildren)
     * will be unsubscribed as well.
     *
     * @class Subscription
     */
    var Subscription = function () {
        /**
         * @param {function(): void} [unsubscribe] A function describing how to
         * perform the disposal of resources when the `unsubscribe` method is called.
         */
        function Subscription(unsubscribe) {
            /**
             * A flag to indicate whether this Subscription has already been unsubscribed.
             * @type {boolean}
             */
            this.closed = false;
            if (unsubscribe) {
                this._unsubscribe = unsubscribe;
            }
        }
        /**
         * Disposes the resources held by the subscription. May, for instance, cancel
         * an ongoing Observable execution or cancel any other type of work that
         * started when the Subscription was created.
         * @return {void}
         */
        Subscription.prototype.unsubscribe = function () {
            var hasErrors = false;
            var errors;
            if (this.closed) {
                return;
            }
            this.closed = true;
            var _a = this,
                _unsubscribe = _a._unsubscribe,
                _subscriptions = _a._subscriptions;
            this._subscriptions = null;
            if (isFunction_1.isFunction(_unsubscribe)) {
                var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
                if (trial === errorObject_1.errorObject) {
                    hasErrors = true;
                    (errors = errors || []).push(errorObject_1.errorObject.e);
                }
            }
            if (isArray_1.isArray(_subscriptions)) {
                var index = -1;
                var len = _subscriptions.length;
                while (++index < len) {
                    var sub = _subscriptions[index];
                    if (isObject_1.isObject(sub)) {
                        var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
                        if (trial === errorObject_1.errorObject) {
                            hasErrors = true;
                            errors = errors || [];
                            var err = errorObject_1.errorObject.e;
                            if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                                errors = errors.concat(err.errors);
                            } else {
                                errors.push(err);
                            }
                        }
                    }
                }
            }
            if (hasErrors) {
                throw new UnsubscriptionError_1.UnsubscriptionError(errors);
            }
        };
        /**
         * Adds a tear down to be called during the unsubscribe() of this
         * Subscription.
         *
         * If the tear down being added is a subscription that is already
         * unsubscribed, is the same reference `add` is being called on, or is
         * `Subscription.EMPTY`, it will not be added.
         *
         * If this subscription is already in an `closed` state, the passed
         * tear down logic will be executed immediately.
         *
         * @param {TeardownLogic} teardown The additional logic to execute on
         * teardown.
         * @return {Subscription} Returns the Subscription used or created to be
         * added to the inner subscriptions list. This Subscription can be used with
         * `remove()` to remove the passed teardown logic from the inner subscriptions
         * list.
         */
        Subscription.prototype.add = function (teardown) {
            if (!teardown || teardown === Subscription.EMPTY) {
                return Subscription.EMPTY;
            }
            if (teardown === this) {
                return this;
            }
            var sub = teardown;
            switch (typeof teardown) {
                case 'function':
                    sub = new Subscription(teardown);
                case 'object':
                    if (sub.closed || typeof sub.unsubscribe !== 'function') {
                        break;
                    } else if (this.closed) {
                        sub.unsubscribe();
                    } else {
                        (this._subscriptions || (this._subscriptions = [])).push(sub);
                    }
                    break;
                default:
                    throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
            }
            return sub;
        };
        /**
         * Removes a Subscription from the internal list of subscriptions that will
         * unsubscribe during the unsubscribe process of this Subscription.
         * @param {Subscription} subscription The subscription to remove.
         * @return {void}
         */
        Subscription.prototype.remove = function (subscription) {
            // HACK: This might be redundant because of the logic in `add()`
            if (subscription == null || subscription === this || subscription === Subscription.EMPTY) {
                return;
            }
            var subscriptions = this._subscriptions;
            if (subscriptions) {
                var subscriptionIndex = subscriptions.indexOf(subscription);
                if (subscriptionIndex !== -1) {
                    subscriptions.splice(subscriptionIndex, 1);
                }
            }
        };
        Subscription.EMPTY = function (empty) {
            empty.closed = true;
            return empty;
        }(new Subscription());
        return Subscription;
    }();
    exports.Subscription = Subscription;
    

    return module.exports;
});
$__System.registerDynamic("node_modules/rxjs/Observer.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    exports.empty = {
        closed: true,
        next: function (value) {},
        error: function (err) {
            throw err;
        },
        complete: function () {}
    };
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/Subscriber.js', ['node_modules/rxjs/util/isFunction.js', 'node_modules/rxjs/Subscription.js', 'node_modules/rxjs/Observer.js', 'node_modules/rxjs/symbol/rxSubscriber.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var isFunction_1 = $__require('node_modules/rxjs/util/isFunction.js');
    var Subscription_1 = $__require('node_modules/rxjs/Subscription.js');
    var Observer_1 = $__require('node_modules/rxjs/Observer.js');
    var rxSubscriber_1 = $__require('node_modules/rxjs/symbol/rxSubscriber.js');
    /**
     * Implements the {@link Observer} interface and extends the
     * {@link Subscription} class. While the {@link Observer} is the public API for
     * consuming the values of an {@link Observable}, all Observers get converted to
     * a Subscriber, in order to provide Subscription-like capabilities such as
     * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
     * implementing operators, but it is rarely used as a public API.
     *
     * @class Subscriber<T>
     */
    var Subscriber = function (_super) {
        __extends(Subscriber, _super);
        /**
         * @param {Observer|function(value: T): void} [destinationOrNext] A partially
         * defined Observer or a `next` callback function.
         * @param {function(e: ?any): void} [error] The `error` callback of an
         * Observer.
         * @param {function(): void} [complete] The `complete` callback of an
         * Observer.
         */
        function Subscriber(destinationOrNext, error, complete) {
            _super.call(this);
            this.syncErrorValue = null;
            this.syncErrorThrown = false;
            this.syncErrorThrowable = false;
            this.isStopped = false;
            switch (arguments.length) {
                case 0:
                    this.destination = Observer_1.empty;
                    break;
                case 1:
                    if (!destinationOrNext) {
                        this.destination = Observer_1.empty;
                        break;
                    }
                    if (typeof destinationOrNext === 'object') {
                        if (destinationOrNext instanceof Subscriber) {
                            this.destination = destinationOrNext;
                            this.destination.add(this);
                        } else {
                            this.syncErrorThrowable = true;
                            this.destination = new SafeSubscriber(this, destinationOrNext);
                        }
                        break;
                    }
                default:
                    this.syncErrorThrowable = true;
                    this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
                    break;
            }
        }
        Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
            return this;
        };
        /**
         * A static factory for a Subscriber, given a (potentially partial) definition
         * of an Observer.
         * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
         * @param {function(e: ?any): void} [error] The `error` callback of an
         * Observer.
         * @param {function(): void} [complete] The `complete` callback of an
         * Observer.
         * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
         * Observer represented by the given arguments.
         */
        Subscriber.create = function (next, error, complete) {
            var subscriber = new Subscriber(next, error, complete);
            subscriber.syncErrorThrowable = false;
            return subscriber;
        };
        /**
         * The {@link Observer} callback to receive notifications of type `next` from
         * the Observable, with a value. The Observable may call this method 0 or more
         * times.
         * @param {T} [value] The `next` value.
         * @return {void}
         */
        Subscriber.prototype.next = function (value) {
            if (!this.isStopped) {
                this._next(value);
            }
        };
        /**
         * The {@link Observer} callback to receive notifications of type `error` from
         * the Observable, with an attached {@link Error}. Notifies the Observer that
         * the Observable has experienced an error condition.
         * @param {any} [err] The `error` exception.
         * @return {void}
         */
        Subscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                this.isStopped = true;
                this._error(err);
            }
        };
        /**
         * The {@link Observer} callback to receive a valueless notification of type
         * `complete` from the Observable. Notifies the Observer that the Observable
         * has finished sending push-based notifications.
         * @return {void}
         */
        Subscriber.prototype.complete = function () {
            if (!this.isStopped) {
                this.isStopped = true;
                this._complete();
            }
        };
        Subscriber.prototype.unsubscribe = function () {
            if (this.closed) {
                return;
            }
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
        };
        Subscriber.prototype._next = function (value) {
            this.destination.next(value);
        };
        Subscriber.prototype._error = function (err) {
            this.destination.error(err);
            this.unsubscribe();
        };
        Subscriber.prototype._complete = function () {
            this.destination.complete();
            this.unsubscribe();
        };
        return Subscriber;
    }(Subscription_1.Subscription);
    exports.Subscriber = Subscriber;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SafeSubscriber = function (_super) {
        __extends(SafeSubscriber, _super);
        function SafeSubscriber(_parent, observerOrNext, error, complete) {
            _super.call(this);
            this._parent = _parent;
            var next;
            var context = this;
            if (isFunction_1.isFunction(observerOrNext)) {
                next = observerOrNext;
            } else if (observerOrNext) {
                context = observerOrNext;
                next = observerOrNext.next;
                error = observerOrNext.error;
                complete = observerOrNext.complete;
                if (isFunction_1.isFunction(context.unsubscribe)) {
                    this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = this.unsubscribe.bind(this);
            }
            this._context = context;
            this._next = next;
            this._error = error;
            this._complete = complete;
        }
        SafeSubscriber.prototype.next = function (value) {
            if (!this.isStopped && this._next) {
                var _parent = this._parent;
                if (!_parent.syncErrorThrowable) {
                    this.__tryOrUnsub(this._next, value);
                } else if (this.__tryOrSetError(_parent, this._next, value)) {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var _parent = this._parent;
                if (this._error) {
                    if (!_parent.syncErrorThrowable) {
                        this.__tryOrUnsub(this._error, err);
                        this.unsubscribe();
                    } else {
                        this.__tryOrSetError(_parent, this._error, err);
                        this.unsubscribe();
                    }
                } else if (!_parent.syncErrorThrowable) {
                    this.unsubscribe();
                    throw err;
                } else {
                    _parent.syncErrorValue = err;
                    _parent.syncErrorThrown = true;
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.complete = function () {
            if (!this.isStopped) {
                var _parent = this._parent;
                if (this._complete) {
                    if (!_parent.syncErrorThrowable) {
                        this.__tryOrUnsub(this._complete);
                        this.unsubscribe();
                    } else {
                        this.__tryOrSetError(_parent, this._complete);
                        this.unsubscribe();
                    }
                } else {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
            try {
                fn.call(this._context, value);
            } catch (err) {
                this.unsubscribe();
                throw err;
            }
        };
        SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
            try {
                fn.call(this._context, value);
            } catch (err) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
            }
            return false;
        };
        SafeSubscriber.prototype._unsubscribe = function () {
            var _parent = this._parent;
            this._context = null;
            this._parent = null;
            _parent.unsubscribe();
        };
        return SafeSubscriber;
    }(Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/symbol/rxSubscriber.js', ['node_modules/rxjs/util/root.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('node_modules/rxjs/util/root.js');
    var Symbol = root_1.root.Symbol;
    exports.$$rxSubscriber = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('rxSubscriber') : '@@rxSubscriber';
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/util/toSubscriber.js', ['node_modules/rxjs/Subscriber.js', 'node_modules/rxjs/symbol/rxSubscriber.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var Subscriber_1 = $__require('node_modules/rxjs/Subscriber.js');
    var rxSubscriber_1 = $__require('node_modules/rxjs/symbol/rxSubscriber.js');
    function toSubscriber(nextOrObserver, error, complete) {
        if (nextOrObserver) {
            if (nextOrObserver instanceof Subscriber_1.Subscriber) {
                return nextOrObserver;
            }
            if (nextOrObserver[rxSubscriber_1.$$rxSubscriber]) {
                return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();
            }
        }
        if (!nextOrObserver && !error && !complete) {
            return new Subscriber_1.Subscriber();
        }
        return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
    }
    exports.toSubscriber = toSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/util/root.js', [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var objectTypes = {
        'boolean': false,
        'function': true,
        'object': true,
        'number': false,
        'string': false,
        'undefined': false
    };
    exports.root = objectTypes[typeof self] && self || objectTypes[typeof window] && window;
    var freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
        exports.root = freeGlobal;
    }
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/symbol/observable.js', ['node_modules/rxjs/util/root.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('node_modules/rxjs/util/root.js');
    function getSymbolObservable(context) {
        var $$observable;
        var Symbol = context.Symbol;
        if (typeof Symbol === 'function') {
            if (Symbol.observable) {
                $$observable = Symbol.observable;
            } else {
                $$observable = Symbol('observable');
                Symbol.observable = $$observable;
            }
        } else {
            $$observable = '@@observable';
        }
        return $$observable;
    }
    exports.getSymbolObservable = getSymbolObservable;
    exports.$$observable = getSymbolObservable(root_1.root);
    

    return module.exports;
});
$__System.registerDynamic('node_modules/rxjs/Observable.js', ['node_modules/rxjs/util/root.js', 'node_modules/rxjs/util/toSubscriber.js', 'node_modules/rxjs/symbol/observable.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('node_modules/rxjs/util/root.js');
    var toSubscriber_1 = $__require('node_modules/rxjs/util/toSubscriber.js');
    var observable_1 = $__require('node_modules/rxjs/symbol/observable.js');
    /**
     * A representation of any set of values over any amount of time. This the most basic building block
     * of RxJS.
     *
     * @class Observable<T>
     */
    var Observable = function () {
        /**
         * @constructor
         * @param {Function} subscribe the function that is  called when the Observable is
         * initially subscribed to. This function is given a Subscriber, to which new values
         * can be `next`ed, or an `error` method can be called to raise an error, or
         * `complete` can be called to notify of a successful completion.
         */
        function Observable(subscribe) {
            this._isScalar = false;
            if (subscribe) {
                this._subscribe = subscribe;
            }
        }
        /**
         * Creates a new Observable, with this Observable as the source, and the passed
         * operator defined as the new observable's operator.
         * @method lift
         * @param {Operator} operator the operator defining the operation to take on the observable
         * @return {Observable} a new observable with the Operator applied
         */
        Observable.prototype.lift = function (operator) {
            var observable = new Observable();
            observable.source = this;
            observable.operator = operator;
            return observable;
        };
        /**
         * Registers handlers for handling emitted values, error and completions from the observable, and
         *  executes the observable's subscriber function, which will take action to set up the underlying data stream
         * @method subscribe
         * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,
         *  or the first of three possible handlers, which is the handler for each value emitted from the observable.
         * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,
         *  the error will be thrown as unhandled
         * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.
         * @return {ISubscription} a subscription reference to the registered handlers
         */
        Observable.prototype.subscribe = function (observerOrNext, error, complete) {
            var operator = this.operator;
            var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
            if (operator) {
                operator.call(sink, this);
            } else {
                sink.add(this._subscribe(sink));
            }
            if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) {
                    throw sink.syncErrorValue;
                }
            }
            return sink;
        };
        /**
         * @method forEach
         * @param {Function} next a handler for each value emitted by the observable
         * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
         * @return {Promise} a promise that either resolves on observable completion or
         *  rejects with the handled error
         */
        Observable.prototype.forEach = function (next, PromiseCtor) {
            var _this = this;
            if (!PromiseCtor) {
                if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                    PromiseCtor = root_1.root.Rx.config.Promise;
                } else if (root_1.root.Promise) {
                    PromiseCtor = root_1.root.Promise;
                }
            }
            if (!PromiseCtor) {
                throw new Error('no Promise impl found');
            }
            return new PromiseCtor(function (resolve, reject) {
                var subscription = _this.subscribe(function (value) {
                    if (subscription) {
                        // if there is a subscription, then we can surmise
                        // the next handling is asynchronous. Any errors thrown
                        // need to be rejected explicitly and unsubscribe must be
                        // called manually
                        try {
                            next(value);
                        } catch (err) {
                            reject(err);
                            subscription.unsubscribe();
                        }
                    } else {
                        // if there is NO subscription, then we're getting a nexted
                        // value synchronously during subscription. We can just call it.
                        // If it errors, Observable's `subscribe` will ensure the
                        // unsubscription logic is called, then synchronously rethrow the error.
                        // After that, Promise will trap the error and send it
                        // down the rejection path.
                        next(value);
                    }
                }, reject, resolve);
            });
        };
        Observable.prototype._subscribe = function (subscriber) {
            return this.source.subscribe(subscriber);
        };
        /**
         * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
         * @method Symbol.observable
         * @return {Observable} this instance of the observable
         */
        Observable.prototype[observable_1.$$observable] = function () {
            return this;
        };
        // HACK: Since TypeScript inherits static properties too, we have to
        // fight against TypeScript here so Subject can have a different static create signature
        /**
         * Creates a new cold Observable by calling the Observable constructor
         * @static true
         * @owner Observable
         * @method create
         * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
         * @return {Observable} a new cold observable
         */
        Observable.create = function (subscribe) {
            return new Observable(subscribe);
        };
        return Observable;
    }();
    exports.Observable = Observable;
    

    return module.exports;
});
(function() {
var define = $__System.amdDefine;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs/Subject'), require('rxjs/Observable')) : typeof define === 'function' && define.amd ? define("node_modules/@angular/core/bundles/core.umd.js", ["exports", "node_modules/rxjs/Subject.js", "node_modules/rxjs/Observable.js"], factory) : (factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}), global.Rx, global.Rx));
}(this, function(exports, rxjs_Subject, rxjs_Observable) {
  'use strict';
  var globalScope;
  if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
      globalScope = self;
    } else {
      globalScope = global;
    }
  } else {
    globalScope = window;
  }
  function scheduleMicroTask(fn) {
    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
  }
  var global$1 = globalScope;
  function getTypeNameForDebugging(type) {
    return type['name'] || typeof type;
  }
  global$1.assert = function assert(condition) {};
  function isPresent(obj) {
    return obj != null;
  }
  function isBlank(obj) {
    return obj == null;
  }
  function stringify(token) {
    if (typeof token === 'string') {
      return token;
    }
    if (token == null) {
      return '' + token;
    }
    if (token.overriddenName) {
      return token.overriddenName;
    }
    if (token.name) {
      return token.name;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
  }
  function isJsObject(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
  }
  function print(obj) {
    console.log(obj);
  }
  function warn(obj) {
    console.warn(obj);
  }
  var _symbolIterator = null;
  function getSymbolIterator() {
    if (!_symbolIterator) {
      if (globalScope.Symbol && Symbol.iterator) {
        _symbolIterator = Symbol.iterator;
      } else {
        var keys = Object.getOwnPropertyNames(Map.prototype);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
            _symbolIterator = key;
          }
        }
      }
    }
    return _symbolIterator;
  }
  function isPrimitive(obj) {
    return !isJsObject(obj);
  }
  var _nextClassId = 0;
  var Reflect = global$1.Reflect;
  function extractAnnotation(annotation) {
    if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {
      annotation = annotation.annotation;
    }
    return annotation;
  }
  function applyParams(fnOrArray, key) {
    if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function || fnOrArray === Number || fnOrArray === Array) {
      throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");
    }
    if (typeof fnOrArray === 'function') {
      return fnOrArray;
    }
    if (Array.isArray(fnOrArray)) {
      var annotations = fnOrArray;
      var annoLength = annotations.length - 1;
      var fn = fnOrArray[annoLength];
      if (typeof fn !== 'function') {
        throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");
      }
      if (annoLength != fn.length) {
        throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));
      }
      var paramsAnnotations = [];
      for (var i = 0,
          ii = annotations.length - 1; i < ii; i++) {
        var paramAnnotations = [];
        paramsAnnotations.push(paramAnnotations);
        var annotation = annotations[i];
        if (Array.isArray(annotation)) {
          for (var j = 0; j < annotation.length; j++) {
            paramAnnotations.push(extractAnnotation(annotation[j]));
          }
        } else if (typeof annotation === 'function') {
          paramAnnotations.push(extractAnnotation(annotation));
        } else {
          paramAnnotations.push(annotation);
        }
      }
      Reflect.defineMetadata('parameters', paramsAnnotations, fn);
      return fn;
    }
    throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
  }
  function Class(clsDef) {
    var constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
    var proto = constructor.prototype;
    if (clsDef.hasOwnProperty('extends')) {
      if (typeof clsDef.extends === 'function') {
        constructor.prototype = proto = Object.create(clsDef.extends.prototype);
      } else {
        throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));
      }
    }
    for (var key in clsDef) {
      if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {
        proto[key] = applyParams(clsDef[key], key);
      }
    }
    if (this && this.annotations instanceof Array) {
      Reflect.defineMetadata('annotations', this.annotations, constructor);
    }
    var constructorName = constructor['name'];
    if (!constructorName || constructorName === 'constructor') {
      constructor['overriddenName'] = "class" + _nextClassId++;
    }
    return constructor;
  }
  function makeDecorator(name, props, parentClass, chainFn) {
    if (chainFn === void 0) {
      chainFn = null;
    }
    var metaCtor = makeMetadataCtor([props]);
    function DecoratorFactory(objOrType) {
      if (!(Reflect && Reflect.getMetadata)) {
        throw 'reflect-metadata shim is required when using class decorators';
      }
      if (this instanceof DecoratorFactory) {
        metaCtor.call(this, objOrType);
        return this;
      }
      var annotationInstance = new DecoratorFactory(objOrType);
      var chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];
      chainAnnotation.push(annotationInstance);
      var TypeDecorator = function TypeDecorator(cls) {
        var annotations = Reflect.getOwnMetadata('annotations', cls) || [];
        annotations.push(annotationInstance);
        Reflect.defineMetadata('annotations', annotations, cls);
        return cls;
      };
      TypeDecorator.annotations = chainAnnotation;
      TypeDecorator.Class = Class;
      if (chainFn)
        chainFn(TypeDecorator);
      return TypeDecorator;
    }
    if (parentClass) {
      DecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    DecoratorFactory.prototype.toString = function() {
      return ("@" + name);
    };
    DecoratorFactory.annotationCls = DecoratorFactory;
    return DecoratorFactory;
  }
  function makeMetadataCtor(props) {
    return function ctor() {
      var _this = this;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      props.forEach(function(prop, i) {
        var argVal = args[i];
        if (Array.isArray(prop)) {
          _this[prop[0]] = argVal === undefined ? prop[1] : argVal;
        } else {
          for (var propName in prop) {
            _this[propName] = argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];
          }
        }
      });
    };
  }
  function makeParamDecorator(name, props, parentClass) {
    var metaCtor = makeMetadataCtor(props);
    function ParamDecoratorFactory() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      if (this instanceof ParamDecoratorFactory) {
        metaCtor.apply(this, args);
        return this;
      }
      var annotationInstance = new ((_a = ParamDecoratorFactory).bind.apply(_a, [void 0].concat(args)))();
      ParamDecorator.annotation = annotationInstance;
      return ParamDecorator;
      function ParamDecorator(cls, unusedKey, index) {
        var parameters = Reflect.getMetadata('parameters', cls) || [];
        while (parameters.length <= index) {
          parameters.push(null);
        }
        parameters[index] = parameters[index] || [];
        parameters[index].push(annotationInstance);
        Reflect.defineMetadata('parameters', parameters, cls);
        return cls;
      }
      var _a;
    }
    if (parentClass) {
      ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    ParamDecoratorFactory.prototype.toString = function() {
      return ("@" + name);
    };
    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
    return ParamDecoratorFactory;
  }
  function makePropDecorator(name, props, parentClass) {
    var metaCtor = makeMetadataCtor(props);
    function PropDecoratorFactory() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      if (this instanceof PropDecoratorFactory) {
        metaCtor.apply(this, args);
        return this;
      }
      var decoratorInstance = new ((_a = PropDecoratorFactory).bind.apply(_a, [void 0].concat(args)))();
      return function PropDecorator(target, name) {
        var meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};
        meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
        meta[name].unshift(decoratorInstance);
        Reflect.defineMetadata('propMetadata', meta, target.constructor);
      };
      var _a;
    }
    if (parentClass) {
      PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    PropDecoratorFactory.prototype.toString = function() {
      return ("@" + name);
    };
    PropDecoratorFactory.annotationCls = PropDecoratorFactory;
    return PropDecoratorFactory;
  }
  var Inject = makeParamDecorator('Inject', [['token', undefined]]);
  var Optional = makeParamDecorator('Optional', []);
  var Injectable = makeParamDecorator('Injectable', []);
  var Self = makeParamDecorator('Self', []);
  var SkipSelf = makeParamDecorator('SkipSelf', []);
  var Host = makeParamDecorator('Host', []);
  var OpaqueToken = (function() {
    function OpaqueToken(_desc) {
      this._desc = _desc;
    }
    OpaqueToken.prototype.toString = function() {
      return "Token " + this._desc;
    };
    OpaqueToken.decorators = [{type: Injectable}];
    OpaqueToken.ctorParameters = [null];
    return OpaqueToken;
  }());
  var ANALYZE_FOR_ENTRY_COMPONENTS = new OpaqueToken('AnalyzeForEntryComponents');
  var Attribute = makeParamDecorator('Attribute', [['attributeName', undefined]]);
  var Query = (function() {
    function Query() {}
    return Query;
  }());
  var ContentChildren = makePropDecorator('ContentChildren', [['selector', undefined], {
    first: false,
    isViewQuery: false,
    descendants: false,
    read: undefined
  }], Query);
  var ContentChild = makePropDecorator('ContentChild', [['selector', undefined], {
    first: true,
    isViewQuery: false,
    descendants: true,
    read: undefined
  }], Query);
  var ViewChildren = makePropDecorator('ViewChildren', [['selector', undefined], {
    first: false,
    isViewQuery: true,
    descendants: true,
    read: undefined
  }], Query);
  var ViewChild = makePropDecorator('ViewChild', [['selector', undefined], {
    first: true,
    isViewQuery: true,
    descendants: true,
    read: undefined
  }], Query);
  exports.ChangeDetectionStrategy;
  (function(ChangeDetectionStrategy) {
    ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 0] = "OnPush";
    ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 1] = "Default";
  })(exports.ChangeDetectionStrategy || (exports.ChangeDetectionStrategy = {}));
  var ChangeDetectorStatus;
  (function(ChangeDetectorStatus) {
    ChangeDetectorStatus[ChangeDetectorStatus["CheckOnce"] = 0] = "CheckOnce";
    ChangeDetectorStatus[ChangeDetectorStatus["Checked"] = 1] = "Checked";
    ChangeDetectorStatus[ChangeDetectorStatus["CheckAlways"] = 2] = "CheckAlways";
    ChangeDetectorStatus[ChangeDetectorStatus["Detached"] = 3] = "Detached";
    ChangeDetectorStatus[ChangeDetectorStatus["Errored"] = 4] = "Errored";
    ChangeDetectorStatus[ChangeDetectorStatus["Destroyed"] = 5] = "Destroyed";
  })(ChangeDetectorStatus || (ChangeDetectorStatus = {}));
  function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
    return isBlank(changeDetectionStrategy) || changeDetectionStrategy === exports.ChangeDetectionStrategy.Default;
  }
  var Directive = makeDecorator('Directive', {
    selector: undefined,
    inputs: undefined,
    outputs: undefined,
    host: undefined,
    providers: undefined,
    exportAs: undefined,
    queries: undefined
  });
  var Component = makeDecorator('Component', {
    selector: undefined,
    inputs: undefined,
    outputs: undefined,
    host: undefined,
    exportAs: undefined,
    moduleId: undefined,
    providers: undefined,
    viewProviders: undefined,
    changeDetection: exports.ChangeDetectionStrategy.Default,
    queries: undefined,
    templateUrl: undefined,
    template: undefined,
    styleUrls: undefined,
    styles: undefined,
    animations: undefined,
    encapsulation: undefined,
    interpolation: undefined,
    entryComponents: undefined
  }, Directive);
  var Pipe = makeDecorator('Pipe', {
    name: undefined,
    pure: true
  });
  var Input = makePropDecorator('Input', [['bindingPropertyName', undefined]]);
  var Output = makePropDecorator('Output', [['bindingPropertyName', undefined]]);
  var HostBinding = makePropDecorator('HostBinding', [['hostPropertyName', undefined]]);
  var HostListener = makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);
  var LifecycleHooks;
  (function(LifecycleHooks) {
    LifecycleHooks[LifecycleHooks["OnInit"] = 0] = "OnInit";
    LifecycleHooks[LifecycleHooks["OnDestroy"] = 1] = "OnDestroy";
    LifecycleHooks[LifecycleHooks["DoCheck"] = 2] = "DoCheck";
    LifecycleHooks[LifecycleHooks["OnChanges"] = 3] = "OnChanges";
    LifecycleHooks[LifecycleHooks["AfterContentInit"] = 4] = "AfterContentInit";
    LifecycleHooks[LifecycleHooks["AfterContentChecked"] = 5] = "AfterContentChecked";
    LifecycleHooks[LifecycleHooks["AfterViewInit"] = 6] = "AfterViewInit";
    LifecycleHooks[LifecycleHooks["AfterViewChecked"] = 7] = "AfterViewChecked";
  })(LifecycleHooks || (LifecycleHooks = {}));
  var LIFECYCLE_HOOKS_VALUES = [LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges, LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit, LifecycleHooks.AfterViewChecked];
  var OnChanges = (function() {
    function OnChanges() {}
    return OnChanges;
  }());
  var OnInit = (function() {
    function OnInit() {}
    return OnInit;
  }());
  var DoCheck = (function() {
    function DoCheck() {}
    return DoCheck;
  }());
  var OnDestroy = (function() {
    function OnDestroy() {}
    return OnDestroy;
  }());
  var AfterContentInit = (function() {
    function AfterContentInit() {}
    return AfterContentInit;
  }());
  var AfterContentChecked = (function() {
    function AfterContentChecked() {}
    return AfterContentChecked;
  }());
  var AfterViewInit = (function() {
    function AfterViewInit() {}
    return AfterViewInit;
  }());
  var AfterViewChecked = (function() {
    function AfterViewChecked() {}
    return AfterViewChecked;
  }());
  var CUSTOM_ELEMENTS_SCHEMA = {name: 'custom-elements'};
  var NO_ERRORS_SCHEMA = {name: 'no-errors-schema'};
  var NgModule = makeDecorator('NgModule', {
    providers: undefined,
    declarations: undefined,
    imports: undefined,
    exports: undefined,
    entryComponents: undefined,
    bootstrap: undefined,
    schemas: undefined,
    id: undefined
  });
  exports.ViewEncapsulation;
  (function(ViewEncapsulation) {
    ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
    ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
    ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
  })(exports.ViewEncapsulation || (exports.ViewEncapsulation = {}));
  var ViewMetadata = (function() {
    function ViewMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          templateUrl = _b.templateUrl,
          template = _b.template,
          encapsulation = _b.encapsulation,
          styles = _b.styles,
          styleUrls = _b.styleUrls,
          animations = _b.animations,
          interpolation = _b.interpolation;
      this.templateUrl = templateUrl;
      this.template = template;
      this.styleUrls = styleUrls;
      this.styles = styles;
      this.encapsulation = encapsulation;
      this.animations = animations;
      this.interpolation = interpolation;
    }
    return ViewMetadata;
  }());
  function forwardRef(forwardRefFn) {
    forwardRefFn.__forward_ref__ = forwardRef;
    forwardRefFn.toString = function() {
      return stringify(this());
    };
    return forwardRefFn;
  }
  function resolveForwardRef(type) {
    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') && type.__forward_ref__ === forwardRef) {
      return type();
    } else {
      return type;
    }
  }
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  function unimplemented() {
    throw new Error('unimplemented');
  }
  var BaseError = (function(_super) {
    __extends(BaseError, _super);
    function BaseError(message) {
      var nativeError = _super.call(this, message);
      this._nativeError = nativeError;
    }
    Object.defineProperty(BaseError.prototype, "message", {
      get: function() {
        return this._nativeError.message;
      },
      set: function(message) {
        this._nativeError.message = message;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BaseError.prototype, "name", {
      get: function() {
        return this._nativeError.name;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BaseError.prototype, "stack", {
      get: function() {
        return this._nativeError.stack;
      },
      set: function(value) {
        this._nativeError.stack = value;
      },
      enumerable: true,
      configurable: true
    });
    BaseError.prototype.toString = function() {
      return this._nativeError.toString();
    };
    return BaseError;
  }(Error));
  var WrappedError = (function(_super) {
    __extends(WrappedError, _super);
    function WrappedError(message, error) {
      _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
      this.originalError = error;
    }
    Object.defineProperty(WrappedError.prototype, "stack", {
      get: function() {
        return (this.originalError instanceof Error ? this.originalError : this._nativeError).stack;
      },
      enumerable: true,
      configurable: true
    });
    return WrappedError;
  }(BaseError));
  var _THROW_IF_NOT_FOUND = new Object();
  var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
  var _NullInjector = (function() {
    function _NullInjector() {}
    _NullInjector.prototype.get = function(token, notFoundValue) {
      if (notFoundValue === void 0) {
        notFoundValue = _THROW_IF_NOT_FOUND;
      }
      if (notFoundValue === _THROW_IF_NOT_FOUND) {
        throw new Error("No provider for " + stringify(token) + "!");
      }
      return notFoundValue;
    };
    return _NullInjector;
  }());
  var Injector = (function() {
    function Injector() {}
    Injector.prototype.get = function(token, notFoundValue) {
      return unimplemented();
    };
    Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
    Injector.NULL = new _NullInjector();
    return Injector;
  }());
  var __extends$1 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  function findFirstClosedCycle(keys) {
    var res = [];
    for (var i = 0; i < keys.length; ++i) {
      if (res.indexOf(keys[i]) > -1) {
        res.push(keys[i]);
        return res;
      }
      res.push(keys[i]);
    }
    return res;
  }
  function constructResolvingPath(keys) {
    if (keys.length > 1) {
      var reversed = findFirstClosedCycle(keys.slice().reverse());
      var tokenStrs = reversed.map(function(k) {
        return stringify(k.token);
      });
      return ' (' + tokenStrs.join(' -> ') + ')';
    }
    return '';
  }
  var AbstractProviderError = (function(_super) {
    __extends$1(AbstractProviderError, _super);
    function AbstractProviderError(injector, key, constructResolvingMessage) {
      _super.call(this, 'DI Error');
      this.keys = [key];
      this.injectors = [injector];
      this.constructResolvingMessage = constructResolvingMessage;
      this.message = this.constructResolvingMessage(this.keys);
    }
    AbstractProviderError.prototype.addKey = function(injector, key) {
      this.injectors.push(injector);
      this.keys.push(key);
      this.message = this.constructResolvingMessage(this.keys);
    };
    return AbstractProviderError;
  }(BaseError));
  var NoProviderError = (function(_super) {
    __extends$1(NoProviderError, _super);
    function NoProviderError(injector, key) {
      _super.call(this, injector, key, function(keys) {
        var first = stringify(keys[0].token);
        return "No provider for " + first + "!" + constructResolvingPath(keys);
      });
    }
    return NoProviderError;
  }(AbstractProviderError));
  var CyclicDependencyError = (function(_super) {
    __extends$1(CyclicDependencyError, _super);
    function CyclicDependencyError(injector, key) {
      _super.call(this, injector, key, function(keys) {
        return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
      });
    }
    return CyclicDependencyError;
  }(AbstractProviderError));
  var InstantiationError = (function(_super) {
    __extends$1(InstantiationError, _super);
    function InstantiationError(injector, originalException, originalStack, key) {
      _super.call(this, 'DI Error', originalException);
      this.keys = [key];
      this.injectors = [injector];
    }
    InstantiationError.prototype.addKey = function(injector, key) {
      this.injectors.push(injector);
      this.keys.push(key);
    };
    Object.defineProperty(InstantiationError.prototype, "message", {
      get: function() {
        var first = stringify(this.keys[0].token);
        return this.originalError.message + ": Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(InstantiationError.prototype, "causeKey", {
      get: function() {
        return this.keys[0];
      },
      enumerable: true,
      configurable: true
    });
    return InstantiationError;
  }(WrappedError));
  var InvalidProviderError = (function(_super) {
    __extends$1(InvalidProviderError, _super);
    function InvalidProviderError(provider) {
      _super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
    }
    return InvalidProviderError;
  }(BaseError));
  var NoAnnotationError = (function(_super) {
    __extends$1(NoAnnotationError, _super);
    function NoAnnotationError(typeOrFunc, params) {
      _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
    }
    NoAnnotationError._genMessage = function(typeOrFunc, params) {
      var signature = [];
      for (var i = 0,
          ii = params.length; i < ii; i++) {
        var parameter = params[i];
        if (!parameter || parameter.length == 0) {
          signature.push('?');
        } else {
          signature.push(parameter.map(stringify).join(' '));
        }
      }
      return 'Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' + signature.join(', ') + '). ' + 'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' + stringify(typeOrFunc) + '\' is decorated with Injectable.';
    };
    return NoAnnotationError;
  }(BaseError));
  var OutOfBoundsError = (function(_super) {
    __extends$1(OutOfBoundsError, _super);
    function OutOfBoundsError(index) {
      _super.call(this, "Index " + index + " is out-of-bounds.");
    }
    return OutOfBoundsError;
  }(BaseError));
  var MixingMultiProvidersWithRegularProvidersError = (function(_super) {
    __extends$1(MixingMultiProvidersWithRegularProvidersError, _super);
    function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
      _super.call(this, 'Cannot mix multi providers and regular providers, got: ' + provider1.toString() + ' ' + provider2.toString());
    }
    return MixingMultiProvidersWithRegularProvidersError;
  }(BaseError));
  var ReflectiveKey = (function() {
    function ReflectiveKey(token, id) {
      this.token = token;
      this.id = id;
      if (!token) {
        throw new Error('Token must be defined!');
      }
    }
    Object.defineProperty(ReflectiveKey.prototype, "displayName", {
      get: function() {
        return stringify(this.token);
      },
      enumerable: true,
      configurable: true
    });
    ReflectiveKey.get = function(token) {
      return _globalKeyRegistry.get(resolveForwardRef(token));
    };
    Object.defineProperty(ReflectiveKey, "numberOfKeys", {
      get: function() {
        return _globalKeyRegistry.numberOfKeys;
      },
      enumerable: true,
      configurable: true
    });
    return ReflectiveKey;
  }());
  var KeyRegistry = (function() {
    function KeyRegistry() {
      this._allKeys = new Map();
    }
    KeyRegistry.prototype.get = function(token) {
      if (token instanceof ReflectiveKey)
        return token;
      if (this._allKeys.has(token)) {
        return this._allKeys.get(token);
      }
      var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
      this._allKeys.set(token, newKey);
      return newKey;
    };
    Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
      get: function() {
        return this._allKeys.size;
      },
      enumerable: true,
      configurable: true
    });
    return KeyRegistry;
  }());
  var _globalKeyRegistry = new KeyRegistry();
  var Type = Function;
  var ReflectionCapabilities = (function() {
    function ReflectionCapabilities(reflect) {
      this._reflect = reflect || global$1.Reflect;
    }
    ReflectionCapabilities.prototype.isReflectionEnabled = function() {
      return true;
    };
    ReflectionCapabilities.prototype.factory = function(t) {
      return function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i - 0] = arguments[_i];
        }
        return new (t.bind.apply(t, [void 0].concat(args)))();
      };
    };
    ReflectionCapabilities.prototype._zipTypesAndAnnotations = function(paramTypes, paramAnnotations) {
      var result;
      if (typeof paramTypes === 'undefined') {
        result = new Array(paramAnnotations.length);
      } else {
        result = new Array(paramTypes.length);
      }
      for (var i = 0; i < result.length; i++) {
        if (typeof paramTypes === 'undefined') {
          result[i] = [];
        } else if (paramTypes[i] != Object) {
          result[i] = [paramTypes[i]];
        } else {
          result[i] = [];
        }
        if (paramAnnotations && isPresent(paramAnnotations[i])) {
          result[i] = result[i].concat(paramAnnotations[i]);
        }
      }
      return result;
    };
    ReflectionCapabilities.prototype.parameters = function(type) {
      if (type.parameters) {
        return type.parameters;
      }
      var tsickleCtorParams = type.ctorParameters;
      if (tsickleCtorParams) {
        var ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
        var paramTypes = ctorParameters.map(function(ctorParam) {
          return ctorParam && ctorParam.type;
        });
        var paramAnnotations = ctorParameters.map(function(ctorParam) {
          return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
        });
        return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
      }
      if (isPresent(this._reflect) && isPresent(this._reflect.getMetadata)) {
        var paramAnnotations = this._reflect.getMetadata('parameters', type);
        var paramTypes = this._reflect.getMetadata('design:paramtypes', type);
        if (paramTypes || paramAnnotations) {
          return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
        }
      }
      return new Array(type.length).fill(undefined);
    };
    ReflectionCapabilities.prototype.annotations = function(typeOrFunc) {
      if (typeOrFunc.annotations) {
        var annotations = typeOrFunc.annotations;
        if (typeof annotations === 'function' && annotations.annotations) {
          annotations = annotations.annotations;
        }
        return annotations;
      }
      if (typeOrFunc.decorators) {
        return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
      }
      if (this._reflect && this._reflect.getMetadata) {
        var annotations = this._reflect.getMetadata('annotations', typeOrFunc);
        if (annotations)
          return annotations;
      }
      return [];
    };
    ReflectionCapabilities.prototype.propMetadata = function(typeOrFunc) {
      if (typeOrFunc.propMetadata) {
        var propMetadata = typeOrFunc.propMetadata;
        if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
          propMetadata = propMetadata.propMetadata;
        }
        return propMetadata;
      }
      if (typeOrFunc.propDecorators) {
        var propDecorators_1 = typeOrFunc.propDecorators;
        var propMetadata_1 = {};
        Object.keys(propDecorators_1).forEach(function(prop) {
          propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
        });
        return propMetadata_1;
      }
      if (this._reflect && this._reflect.getMetadata) {
        var propMetadata = this._reflect.getMetadata('propMetadata', typeOrFunc);
        if (propMetadata)
          return propMetadata;
      }
      return {};
    };
    ReflectionCapabilities.prototype.hasLifecycleHook = function(type, lcProperty) {
      return type instanceof Type && lcProperty in type.prototype;
    };
    ReflectionCapabilities.prototype.getter = function(name) {
      return new Function('o', 'return o.' + name + ';');
    };
    ReflectionCapabilities.prototype.setter = function(name) {
      return new Function('o', 'v', 'return o.' + name + ' = v;');
    };
    ReflectionCapabilities.prototype.method = function(name) {
      var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
      return new Function('o', 'args', functionBody);
    };
    ReflectionCapabilities.prototype.importUri = function(type) {
      if (typeof type === 'object' && type['filePath']) {
        return type['filePath'];
      }
      return "./" + stringify(type);
    };
    ReflectionCapabilities.prototype.resolveIdentifier = function(name, moduleUrl, runtime) {
      return runtime;
    };
    ReflectionCapabilities.prototype.resolveEnum = function(enumIdentifier, name) {
      return enumIdentifier[name];
    };
    return ReflectionCapabilities;
  }());
  function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
    if (!decoratorInvocations) {
      return [];
    }
    return decoratorInvocations.map(function(decoratorInvocation) {
      var decoratorType = decoratorInvocation.type;
      var annotationCls = decoratorType.annotationCls;
      var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
      return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();
    });
  }
  var ReflectorReader = (function() {
    function ReflectorReader() {}
    return ReflectorReader;
  }());
  var __extends$2 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Reflector = (function(_super) {
    __extends$2(Reflector, _super);
    function Reflector(reflectionCapabilities) {
      _super.call(this);
      this.reflectionCapabilities = reflectionCapabilities;
    }
    Reflector.prototype.updateCapabilities = function(caps) {
      this.reflectionCapabilities = caps;
    };
    Reflector.prototype.factory = function(type) {
      return this.reflectionCapabilities.factory(type);
    };
    Reflector.prototype.parameters = function(typeOrFunc) {
      return this.reflectionCapabilities.parameters(typeOrFunc);
    };
    Reflector.prototype.annotations = function(typeOrFunc) {
      return this.reflectionCapabilities.annotations(typeOrFunc);
    };
    Reflector.prototype.propMetadata = function(typeOrFunc) {
      return this.reflectionCapabilities.propMetadata(typeOrFunc);
    };
    Reflector.prototype.hasLifecycleHook = function(type, lcProperty) {
      return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
    };
    Reflector.prototype.getter = function(name) {
      return this.reflectionCapabilities.getter(name);
    };
    Reflector.prototype.setter = function(name) {
      return this.reflectionCapabilities.setter(name);
    };
    Reflector.prototype.method = function(name) {
      return this.reflectionCapabilities.method(name);
    };
    Reflector.prototype.importUri = function(type) {
      return this.reflectionCapabilities.importUri(type);
    };
    Reflector.prototype.resolveIdentifier = function(name, moduleUrl, runtime) {
      return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, runtime);
    };
    Reflector.prototype.resolveEnum = function(identifier, name) {
      return this.reflectionCapabilities.resolveEnum(identifier, name);
    };
    return Reflector;
  }(ReflectorReader));
  var reflector = new Reflector(new ReflectionCapabilities());
  var ReflectiveDependency = (function() {
    function ReflectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {
      this.key = key;
      this.optional = optional;
      this.lowerBoundVisibility = lowerBoundVisibility;
      this.upperBoundVisibility = upperBoundVisibility;
      this.properties = properties;
    }
    ReflectiveDependency.fromKey = function(key) {
      return new ReflectiveDependency(key, false, null, null, []);
    };
    return ReflectiveDependency;
  }());
  var _EMPTY_LIST = [];
  var ResolvedReflectiveProvider_ = (function() {
    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
      this.key = key;
      this.resolvedFactories = resolvedFactories;
      this.multiProvider = multiProvider;
    }
    Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
      get: function() {
        return this.resolvedFactories[0];
      },
      enumerable: true,
      configurable: true
    });
    return ResolvedReflectiveProvider_;
  }());
  var ResolvedReflectiveFactory = (function() {
    function ResolvedReflectiveFactory(factory, dependencies) {
      this.factory = factory;
      this.dependencies = dependencies;
    }
    return ResolvedReflectiveFactory;
  }());
  function resolveReflectiveFactory(provider) {
    var factoryFn;
    var resolvedDeps;
    if (provider.useClass) {
      var useClass = resolveForwardRef(provider.useClass);
      factoryFn = reflector.factory(useClass);
      resolvedDeps = _dependenciesFor(useClass);
    } else if (provider.useExisting) {
      factoryFn = function(aliasInstance) {
        return aliasInstance;
      };
      resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
    } else if (provider.useFactory) {
      factoryFn = provider.useFactory;
      resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
    } else {
      factoryFn = function() {
        return provider.useValue;
      };
      resolvedDeps = _EMPTY_LIST;
    }
    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
  }
  function resolveReflectiveProvider(provider) {
    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);
  }
  function resolveReflectiveProviders(providers) {
    var normalized = _normalizeProviders(providers, []);
    var resolved = normalized.map(resolveReflectiveProvider);
    var resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
    return Array.from(resolvedProviderMap.values());
  }
  function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
    for (var i = 0; i < providers.length; i++) {
      var provider = providers[i];
      var existing = normalizedProvidersMap.get(provider.key.id);
      if (existing) {
        if (provider.multiProvider !== existing.multiProvider) {
          throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);
        }
        if (provider.multiProvider) {
          for (var j = 0; j < provider.resolvedFactories.length; j++) {
            existing.resolvedFactories.push(provider.resolvedFactories[j]);
          }
        } else {
          normalizedProvidersMap.set(provider.key.id, provider);
        }
      } else {
        var resolvedProvider = void 0;
        if (provider.multiProvider) {
          resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
        } else {
          resolvedProvider = provider;
        }
        normalizedProvidersMap.set(provider.key.id, resolvedProvider);
      }
    }
    return normalizedProvidersMap;
  }
  function _normalizeProviders(providers, res) {
    providers.forEach(function(b) {
      if (b instanceof Type) {
        res.push({
          provide: b,
          useClass: b
        });
      } else if (b && typeof b == 'object' && b.provide !== undefined) {
        res.push(b);
      } else if (b instanceof Array) {
        _normalizeProviders(b, res);
      } else {
        throw new InvalidProviderError(b);
      }
    });
    return res;
  }
  function constructDependencies(typeOrFunc, dependencies) {
    if (!dependencies) {
      return _dependenciesFor(typeOrFunc);
    } else {
      var params_1 = dependencies.map(function(t) {
        return [t];
      });
      return dependencies.map(function(t) {
        return _extractToken(typeOrFunc, t, params_1);
      });
    }
  }
  function _dependenciesFor(typeOrFunc) {
    var params = reflector.parameters(typeOrFunc);
    if (!params)
      return [];
    if (params.some(function(p) {
      return p == null;
    })) {
      throw new NoAnnotationError(typeOrFunc, params);
    }
    return params.map(function(p) {
      return _extractToken(typeOrFunc, p, params);
    });
  }
  function _extractToken(typeOrFunc, metadata, params) {
    var depProps = [];
    var token = null;
    var optional = false;
    if (!Array.isArray(metadata)) {
      if (metadata instanceof Inject) {
        return _createDependency(metadata.token, optional, null, null, depProps);
      } else {
        return _createDependency(metadata, optional, null, null, depProps);
      }
    }
    var lowerBoundVisibility = null;
    var upperBoundVisibility = null;
    for (var i = 0; i < metadata.length; ++i) {
      var paramMetadata = metadata[i];
      if (paramMetadata instanceof Type) {
        token = paramMetadata;
      } else if (paramMetadata instanceof Inject) {
        token = paramMetadata.token;
      } else if (paramMetadata instanceof Optional) {
        optional = true;
      } else if (paramMetadata instanceof Self) {
        upperBoundVisibility = paramMetadata;
      } else if (paramMetadata instanceof Host) {
        upperBoundVisibility = paramMetadata;
      } else if (paramMetadata instanceof SkipSelf) {
        lowerBoundVisibility = paramMetadata;
      }
    }
    token = resolveForwardRef(token);
    if (token != null) {
      return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);
    } else {
      throw new NoAnnotationError(typeOrFunc, params);
    }
  }
  function _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps) {
    return new ReflectiveDependency(ReflectiveKey.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);
  }
  var _MAX_CONSTRUCTION_COUNTER = 10;
  var UNDEFINED = new Object();
  var ReflectiveProtoInjectorInlineStrategy = (function() {
    function ReflectiveProtoInjectorInlineStrategy(protoEI, providers) {
      this.provider0 = null;
      this.provider1 = null;
      this.provider2 = null;
      this.provider3 = null;
      this.provider4 = null;
      this.provider5 = null;
      this.provider6 = null;
      this.provider7 = null;
      this.provider8 = null;
      this.provider9 = null;
      this.keyId0 = null;
      this.keyId1 = null;
      this.keyId2 = null;
      this.keyId3 = null;
      this.keyId4 = null;
      this.keyId5 = null;
      this.keyId6 = null;
      this.keyId7 = null;
      this.keyId8 = null;
      this.keyId9 = null;
      var length = providers.length;
      if (length > 0) {
        this.provider0 = providers[0];
        this.keyId0 = providers[0].key.id;
      }
      if (length > 1) {
        this.provider1 = providers[1];
        this.keyId1 = providers[1].key.id;
      }
      if (length > 2) {
        this.provider2 = providers[2];
        this.keyId2 = providers[2].key.id;
      }
      if (length > 3) {
        this.provider3 = providers[3];
        this.keyId3 = providers[3].key.id;
      }
      if (length > 4) {
        this.provider4 = providers[4];
        this.keyId4 = providers[4].key.id;
      }
      if (length > 5) {
        this.provider5 = providers[5];
        this.keyId5 = providers[5].key.id;
      }
      if (length > 6) {
        this.provider6 = providers[6];
        this.keyId6 = providers[6].key.id;
      }
      if (length > 7) {
        this.provider7 = providers[7];
        this.keyId7 = providers[7].key.id;
      }
      if (length > 8) {
        this.provider8 = providers[8];
        this.keyId8 = providers[8].key.id;
      }
      if (length > 9) {
        this.provider9 = providers[9];
        this.keyId9 = providers[9].key.id;
      }
    }
    ReflectiveProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function(index) {
      if (index == 0)
        return this.provider0;
      if (index == 1)
        return this.provider1;
      if (index == 2)
        return this.provider2;
      if (index == 3)
        return this.provider3;
      if (index == 4)
        return this.provider4;
      if (index == 5)
        return this.provider5;
      if (index == 6)
        return this.provider6;
      if (index == 7)
        return this.provider7;
      if (index == 8)
        return this.provider8;
      if (index == 9)
        return this.provider9;
      throw new OutOfBoundsError(index);
    };
    ReflectiveProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function(injector) {
      return new ReflectiveInjectorInlineStrategy(injector, this);
    };
    return ReflectiveProtoInjectorInlineStrategy;
  }());
  var ReflectiveProtoInjectorDynamicStrategy = (function() {
    function ReflectiveProtoInjectorDynamicStrategy(protoInj, providers) {
      this.providers = providers;
      var len = providers.length;
      this.keyIds = new Array(len);
      for (var i = 0; i < len; i++) {
        this.keyIds[i] = providers[i].key.id;
      }
    }
    ReflectiveProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function(index) {
      if (index < 0 || index >= this.providers.length) {
        throw new OutOfBoundsError(index);
      }
      return this.providers[index];
    };
    ReflectiveProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function(ei) {
      return new ReflectiveInjectorDynamicStrategy(this, ei);
    };
    return ReflectiveProtoInjectorDynamicStrategy;
  }());
  var ReflectiveProtoInjector = (function() {
    function ReflectiveProtoInjector(providers) {
      this.numberOfProviders = providers.length;
      this._strategy = providers.length > _MAX_CONSTRUCTION_COUNTER ? new ReflectiveProtoInjectorDynamicStrategy(this, providers) : new ReflectiveProtoInjectorInlineStrategy(this, providers);
    }
    ReflectiveProtoInjector.fromResolvedProviders = function(providers) {
      return new ReflectiveProtoInjector(providers);
    };
    ReflectiveProtoInjector.prototype.getProviderAtIndex = function(index) {
      return this._strategy.getProviderAtIndex(index);
    };
    return ReflectiveProtoInjector;
  }());
  var ReflectiveInjectorInlineStrategy = (function() {
    function ReflectiveInjectorInlineStrategy(injector, protoStrategy) {
      this.injector = injector;
      this.protoStrategy = protoStrategy;
      this.obj0 = UNDEFINED;
      this.obj1 = UNDEFINED;
      this.obj2 = UNDEFINED;
      this.obj3 = UNDEFINED;
      this.obj4 = UNDEFINED;
      this.obj5 = UNDEFINED;
      this.obj6 = UNDEFINED;
      this.obj7 = UNDEFINED;
      this.obj8 = UNDEFINED;
      this.obj9 = UNDEFINED;
    }
    ReflectiveInjectorInlineStrategy.prototype.resetConstructionCounter = function() {
      this.injector._constructionCounter = 0;
    };
    ReflectiveInjectorInlineStrategy.prototype.instantiateProvider = function(provider) {
      return this.injector._new(provider);
    };
    ReflectiveInjectorInlineStrategy.prototype.getObjByKeyId = function(keyId) {
      var p = this.protoStrategy;
      var inj = this.injector;
      if (p.keyId0 === keyId) {
        if (this.obj0 === UNDEFINED) {
          this.obj0 = inj._new(p.provider0);
        }
        return this.obj0;
      }
      if (p.keyId1 === keyId) {
        if (this.obj1 === UNDEFINED) {
          this.obj1 = inj._new(p.provider1);
        }
        return this.obj1;
      }
      if (p.keyId2 === keyId) {
        if (this.obj2 === UNDEFINED) {
          this.obj2 = inj._new(p.provider2);
        }
        return this.obj2;
      }
      if (p.keyId3 === keyId) {
        if (this.obj3 === UNDEFINED) {
          this.obj3 = inj._new(p.provider3);
        }
        return this.obj3;
      }
      if (p.keyId4 === keyId) {
        if (this.obj4 === UNDEFINED) {
          this.obj4 = inj._new(p.provider4);
        }
        return this.obj4;
      }
      if (p.keyId5 === keyId) {
        if (this.obj5 === UNDEFINED) {
          this.obj5 = inj._new(p.provider5);
        }
        return this.obj5;
      }
      if (p.keyId6 === keyId) {
        if (this.obj6 === UNDEFINED) {
          this.obj6 = inj._new(p.provider6);
        }
        return this.obj6;
      }
      if (p.keyId7 === keyId) {
        if (this.obj7 === UNDEFINED) {
          this.obj7 = inj._new(p.provider7);
        }
        return this.obj7;
      }
      if (p.keyId8 === keyId) {
        if (this.obj8 === UNDEFINED) {
          this.obj8 = inj._new(p.provider8);
        }
        return this.obj8;
      }
      if (p.keyId9 === keyId) {
        if (this.obj9 === UNDEFINED) {
          this.obj9 = inj._new(p.provider9);
        }
        return this.obj9;
      }
      return UNDEFINED;
    };
    ReflectiveInjectorInlineStrategy.prototype.getObjAtIndex = function(index) {
      if (index == 0)
        return this.obj0;
      if (index == 1)
        return this.obj1;
      if (index == 2)
        return this.obj2;
      if (index == 3)
        return this.obj3;
      if (index == 4)
        return this.obj4;
      if (index == 5)
        return this.obj5;
      if (index == 6)
        return this.obj6;
      if (index == 7)
        return this.obj7;
      if (index == 8)
        return this.obj8;
      if (index == 9)
        return this.obj9;
      throw new OutOfBoundsError(index);
    };
    ReflectiveInjectorInlineStrategy.prototype.getMaxNumberOfObjects = function() {
      return _MAX_CONSTRUCTION_COUNTER;
    };
    return ReflectiveInjectorInlineStrategy;
  }());
  var ReflectiveInjectorDynamicStrategy = (function() {
    function ReflectiveInjectorDynamicStrategy(protoStrategy, injector) {
      this.protoStrategy = protoStrategy;
      this.injector = injector;
      this.objs = new Array(protoStrategy.providers.length).fill(UNDEFINED);
    }
    ReflectiveInjectorDynamicStrategy.prototype.resetConstructionCounter = function() {
      this.injector._constructionCounter = 0;
    };
    ReflectiveInjectorDynamicStrategy.prototype.instantiateProvider = function(provider) {
      return this.injector._new(provider);
    };
    ReflectiveInjectorDynamicStrategy.prototype.getObjByKeyId = function(keyId) {
      var p = this.protoStrategy;
      for (var i = 0; i < p.keyIds.length; i++) {
        if (p.keyIds[i] === keyId) {
          if (this.objs[i] === UNDEFINED) {
            this.objs[i] = this.injector._new(p.providers[i]);
          }
          return this.objs[i];
        }
      }
      return UNDEFINED;
    };
    ReflectiveInjectorDynamicStrategy.prototype.getObjAtIndex = function(index) {
      if (index < 0 || index >= this.objs.length) {
        throw new OutOfBoundsError(index);
      }
      return this.objs[index];
    };
    ReflectiveInjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function() {
      return this.objs.length;
    };
    return ReflectiveInjectorDynamicStrategy;
  }());
  var ReflectiveInjector = (function() {
    function ReflectiveInjector() {}
    ReflectiveInjector.resolve = function(providers) {
      return resolveReflectiveProviders(providers);
    };
    ReflectiveInjector.resolveAndCreate = function(providers, parent) {
      if (parent === void 0) {
        parent = null;
      }
      var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
      return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
    };
    ReflectiveInjector.fromResolvedProviders = function(providers, parent) {
      if (parent === void 0) {
        parent = null;
      }
      return new ReflectiveInjector_(ReflectiveProtoInjector.fromResolvedProviders(providers), parent);
    };
    Object.defineProperty(ReflectiveInjector.prototype, "parent", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    ReflectiveInjector.prototype.resolveAndCreateChild = function(providers) {
      return unimplemented();
    };
    ReflectiveInjector.prototype.createChildFromResolved = function(providers) {
      return unimplemented();
    };
    ReflectiveInjector.prototype.resolveAndInstantiate = function(provider) {
      return unimplemented();
    };
    ReflectiveInjector.prototype.instantiateResolved = function(provider) {
      return unimplemented();
    };
    return ReflectiveInjector;
  }());
  var ReflectiveInjector_ = (function() {
    function ReflectiveInjector_(_proto, _parent) {
      if (_parent === void 0) {
        _parent = null;
      }
      this._constructionCounter = 0;
      this._proto = _proto;
      this._parent = _parent;
      this._strategy = _proto._strategy.createInjectorStrategy(this);
    }
    ReflectiveInjector_.prototype.get = function(token, notFoundValue) {
      if (notFoundValue === void 0) {
        notFoundValue = THROW_IF_NOT_FOUND;
      }
      return this._getByKey(ReflectiveKey.get(token), null, null, notFoundValue);
    };
    ReflectiveInjector_.prototype.getAt = function(index) {
      return this._strategy.getObjAtIndex(index);
    };
    Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
      get: function() {
        return this._parent;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ReflectiveInjector_.prototype, "internalStrategy", {
      get: function() {
        return this._strategy;
      },
      enumerable: true,
      configurable: true
    });
    ReflectiveInjector_.prototype.resolveAndCreateChild = function(providers) {
      var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
      return this.createChildFromResolved(ResolvedReflectiveProviders);
    };
    ReflectiveInjector_.prototype.createChildFromResolved = function(providers) {
      var proto = new ReflectiveProtoInjector(providers);
      var inj = new ReflectiveInjector_(proto);
      inj._parent = this;
      return inj;
    };
    ReflectiveInjector_.prototype.resolveAndInstantiate = function(provider) {
      return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
    };
    ReflectiveInjector_.prototype.instantiateResolved = function(provider) {
      return this._instantiateProvider(provider);
    };
    ReflectiveInjector_.prototype._new = function(provider) {
      if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) {
        throw new CyclicDependencyError(this, provider.key);
      }
      return this._instantiateProvider(provider);
    };
    ReflectiveInjector_.prototype._instantiateProvider = function(provider) {
      if (provider.multiProvider) {
        var res = new Array(provider.resolvedFactories.length);
        for (var i = 0; i < provider.resolvedFactories.length; ++i) {
          res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
        }
        return res;
      } else {
        return this._instantiate(provider, provider.resolvedFactories[0]);
      }
    };
    ReflectiveInjector_.prototype._instantiate = function(provider, ResolvedReflectiveFactory) {
      var factory = ResolvedReflectiveFactory.factory;
      var deps = ResolvedReflectiveFactory.dependencies;
      var length = deps.length;
      var d0;
      var d1;
      var d2;
      var d3;
      var d4;
      var d5;
      var d6;
      var d7;
      var d8;
      var d9;
      var d10;
      var d11;
      var d12;
      var d13;
      var d14;
      var d15;
      var d16;
      var d17;
      var d18;
      var d19;
      try {
        d0 = length > 0 ? this._getByReflectiveDependency(provider, deps[0]) : null;
        d1 = length > 1 ? this._getByReflectiveDependency(provider, deps[1]) : null;
        d2 = length > 2 ? this._getByReflectiveDependency(provider, deps[2]) : null;
        d3 = length > 3 ? this._getByReflectiveDependency(provider, deps[3]) : null;
        d4 = length > 4 ? this._getByReflectiveDependency(provider, deps[4]) : null;
        d5 = length > 5 ? this._getByReflectiveDependency(provider, deps[5]) : null;
        d6 = length > 6 ? this._getByReflectiveDependency(provider, deps[6]) : null;
        d7 = length > 7 ? this._getByReflectiveDependency(provider, deps[7]) : null;
        d8 = length > 8 ? this._getByReflectiveDependency(provider, deps[8]) : null;
        d9 = length > 9 ? this._getByReflectiveDependency(provider, deps[9]) : null;
        d10 = length > 10 ? this._getByReflectiveDependency(provider, deps[10]) : null;
        d11 = length > 11 ? this._getByReflectiveDependency(provider, deps[11]) : null;
        d12 = length > 12 ? this._getByReflectiveDependency(provider, deps[12]) : null;
        d13 = length > 13 ? this._getByReflectiveDependency(provider, deps[13]) : null;
        d14 = length > 14 ? this._getByReflectiveDependency(provider, deps[14]) : null;
        d15 = length > 15 ? this._getByReflectiveDependency(provider, deps[15]) : null;
        d16 = length > 16 ? this._getByReflectiveDependency(provider, deps[16]) : null;
        d17 = length > 17 ? this._getByReflectiveDependency(provider, deps[17]) : null;
        d18 = length > 18 ? this._getByReflectiveDependency(provider, deps[18]) : null;
        d19 = length > 19 ? this._getByReflectiveDependency(provider, deps[19]) : null;
      } catch (e) {
        if (e instanceof AbstractProviderError || e instanceof InstantiationError) {
          e.addKey(this, provider.key);
        }
        throw e;
      }
      var obj;
      try {
        switch (length) {
          case 0:
            obj = factory();
            break;
          case 1:
            obj = factory(d0);
            break;
          case 2:
            obj = factory(d0, d1);
            break;
          case 3:
            obj = factory(d0, d1, d2);
            break;
          case 4:
            obj = factory(d0, d1, d2, d3);
            break;
          case 5:
            obj = factory(d0, d1, d2, d3, d4);
            break;
          case 6:
            obj = factory(d0, d1, d2, d3, d4, d5);
            break;
          case 7:
            obj = factory(d0, d1, d2, d3, d4, d5, d6);
            break;
          case 8:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
            break;
          case 9:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
            break;
          case 10:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
            break;
          case 11:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
            break;
          case 12:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
            break;
          case 13:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
            break;
          case 14:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
            break;
          case 15:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
            break;
          case 16:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
            break;
          case 17:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
            break;
          case 18:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
            break;
          case 19:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
            break;
          case 20:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
            break;
          default:
            throw new Error("Cannot instantiate '" + provider.key.displayName + "' because it has more than 20 dependencies");
        }
      } catch (e) {
        throw new InstantiationError(this, e, e.stack, provider.key);
      }
      return obj;
    };
    ReflectiveInjector_.prototype._getByReflectiveDependency = function(provider, dep) {
      return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional ? null : THROW_IF_NOT_FOUND);
    };
    ReflectiveInjector_.prototype._getByKey = function(key, lowerBoundVisibility, upperBoundVisibility, notFoundValue) {
      if (key === INJECTOR_KEY) {
        return this;
      }
      if (upperBoundVisibility instanceof Self) {
        return this._getByKeySelf(key, notFoundValue);
      } else {
        return this._getByKeyDefault(key, notFoundValue, lowerBoundVisibility);
      }
    };
    ReflectiveInjector_.prototype._throwOrNull = function(key, notFoundValue) {
      if (notFoundValue !== THROW_IF_NOT_FOUND) {
        return notFoundValue;
      } else {
        throw new NoProviderError(this, key);
      }
    };
    ReflectiveInjector_.prototype._getByKeySelf = function(key, notFoundValue) {
      var obj = this._strategy.getObjByKeyId(key.id);
      return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
    };
    ReflectiveInjector_.prototype._getByKeyDefault = function(key, notFoundValue, lowerBoundVisibility) {
      var inj;
      if (lowerBoundVisibility instanceof SkipSelf) {
        inj = this._parent;
      } else {
        inj = this;
      }
      while (inj instanceof ReflectiveInjector_) {
        var inj_ = inj;
        var obj = inj_._strategy.getObjByKeyId(key.id);
        if (obj !== UNDEFINED)
          return obj;
        inj = inj_._parent;
      }
      if (inj !== null) {
        return inj.get(key.token, notFoundValue);
      } else {
        return this._throwOrNull(key, notFoundValue);
      }
    };
    Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
      get: function() {
        var providers = _mapProviders(this, function(b) {
          return ' "' + b.key.displayName + '" ';
        }).join(', ');
        return "ReflectiveInjector(providers: [" + providers + "])";
      },
      enumerable: true,
      configurable: true
    });
    ReflectiveInjector_.prototype.toString = function() {
      return this.displayName;
    };
    return ReflectiveInjector_;
  }());
  var INJECTOR_KEY = ReflectiveKey.get(Injector);
  function _mapProviders(injector, fn) {
    var res = new Array(injector._proto.numberOfProviders);
    for (var i = 0; i < injector._proto.numberOfProviders; ++i) {
      res[i] = fn(injector._proto.getProviderAtIndex(i));
    }
    return res;
  }
  var ErrorHandler = (function() {
    function ErrorHandler(rethrowError) {
      if (rethrowError === void 0) {
        rethrowError = true;
      }
      this._console = console;
      this.rethrowError = rethrowError;
    }
    ErrorHandler.prototype.handleError = function(error) {
      var originalError = this._findOriginalError(error);
      var originalStack = this._findOriginalStack(error);
      var context = this._findContext(error);
      this._console.error("EXCEPTION: " + this._extractMessage(error));
      if (originalError) {
        this._console.error("ORIGINAL EXCEPTION: " + this._extractMessage(originalError));
      }
      if (originalStack) {
        this._console.error('ORIGINAL STACKTRACE:');
        this._console.error(originalStack);
      }
      if (context) {
        this._console.error('ERROR CONTEXT:');
        this._console.error(context);
      }
      if (this.rethrowError)
        throw error;
    };
    ErrorHandler.prototype._extractMessage = function(error) {
      return error instanceof Error ? error.message : error.toString();
    };
    ErrorHandler.prototype._findContext = function(error) {
      if (error) {
        return error.context ? error.context : this._findContext(error.originalError);
      }
      return null;
    };
    ErrorHandler.prototype._findOriginalError = function(error) {
      var e = error.originalError;
      while (e && e.originalError) {
        e = e.originalError;
      }
      return e;
    };
    ErrorHandler.prototype._findOriginalStack = function(error) {
      if (!(error instanceof Error))
        return null;
      var e = error;
      var stack = e.stack;
      while (e instanceof Error && e.originalError) {
        e = e.originalError;
        if (e instanceof Error && e.stack) {
          stack = e.stack;
        }
      }
      return stack;
    };
    return ErrorHandler;
  }());
  var StringMapWrapper = (function() {
    function StringMapWrapper() {}
    StringMapWrapper.merge = function(m1, m2) {
      var m = {};
      for (var _i = 0,
          _a = Object.keys(m1); _i < _a.length; _i++) {
        var k = _a[_i];
        m[k] = m1[k];
      }
      for (var _b = 0,
          _c = Object.keys(m2); _b < _c.length; _b++) {
        var k = _c[_b];
        m[k] = m2[k];
      }
      return m;
    };
    StringMapWrapper.equals = function(m1, m2) {
      var k1 = Object.keys(m1);
      var k2 = Object.keys(m2);
      if (k1.length != k2.length) {
        return false;
      }
      for (var i = 0; i < k1.length; i++) {
        var key = k1[i];
        if (m1[key] !== m2[key]) {
          return false;
        }
      }
      return true;
    };
    return StringMapWrapper;
  }());
  var ListWrapper = (function() {
    function ListWrapper() {}
    ListWrapper.removeAll = function(list, items) {
      for (var i = 0; i < items.length; ++i) {
        var index = list.indexOf(items[i]);
        if (index > -1) {
          list.splice(index, 1);
        }
      }
    };
    ListWrapper.remove = function(list, el) {
      var index = list.indexOf(el);
      if (index > -1) {
        list.splice(index, 1);
        return true;
      }
      return false;
    };
    ListWrapper.equals = function(a, b) {
      if (a.length != b.length)
        return false;
      for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i])
          return false;
      }
      return true;
    };
    ListWrapper.flatten = function(list) {
      return list.reduce(function(flat, item) {
        var flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
        return flat.concat(flatItem);
      }, []);
    };
    return ListWrapper;
  }());
  function isListLikeIterable(obj) {
    if (!isJsObject(obj))
      return false;
    return Array.isArray(obj) || (!(obj instanceof Map) && getSymbolIterator() in obj);
  }
  function areIterablesEqual(a, b, comparator) {
    var iterator1 = a[getSymbolIterator()]();
    var iterator2 = b[getSymbolIterator()]();
    while (true) {
      var item1 = iterator1.next();
      var item2 = iterator2.next();
      if (item1.done && item2.done)
        return true;
      if (item1.done || item2.done)
        return false;
      if (!comparator(item1.value, item2.value))
        return false;
    }
  }
  function iterateListLike(obj, fn) {
    if (Array.isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        fn(obj[i]);
      }
    } else {
      var iterator = obj[getSymbolIterator()]();
      var item = void 0;
      while (!((item = iterator.next()).done)) {
        fn(item.value);
      }
    }
  }
  function isPromise(obj) {
    return !!obj && typeof obj.then === 'function';
  }
  var APP_INITIALIZER = new OpaqueToken('Application Initializer');
  var ApplicationInitStatus = (function() {
    function ApplicationInitStatus(appInits) {
      var _this = this;
      this._done = false;
      var asyncInitPromises = [];
      if (appInits) {
        for (var i = 0; i < appInits.length; i++) {
          var initResult = appInits[i]();
          if (isPromise(initResult)) {
            asyncInitPromises.push(initResult);
          }
        }
      }
      this._donePromise = Promise.all(asyncInitPromises).then(function() {
        _this._done = true;
      });
      if (asyncInitPromises.length === 0) {
        this._done = true;
      }
    }
    Object.defineProperty(ApplicationInitStatus.prototype, "done", {
      get: function() {
        return this._done;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
      get: function() {
        return this._donePromise;
      },
      enumerable: true,
      configurable: true
    });
    ApplicationInitStatus.decorators = [{type: Injectable}];
    ApplicationInitStatus.ctorParameters = [{
      type: Array,
      decorators: [{
        type: Inject,
        args: [APP_INITIALIZER]
      }, {type: Optional}]
    }];
    return ApplicationInitStatus;
  }());
  var APP_ID = new OpaqueToken('AppId');
  function _appIdRandomProviderFactory() {
    return "" + _randomChar() + _randomChar() + _randomChar();
  }
  var APP_ID_RANDOM_PROVIDER = {
    provide: APP_ID,
    useFactory: _appIdRandomProviderFactory,
    deps: []
  };
  function _randomChar() {
    return String.fromCharCode(97 + Math.floor(Math.random() * 25));
  }
  var PLATFORM_INITIALIZER = new OpaqueToken('Platform Initializer');
  var APP_BOOTSTRAP_LISTENER = new OpaqueToken('appBootstrapListener');
  var PACKAGE_ROOT_URL = new OpaqueToken('Application Packages Root URL');
  var Console = (function() {
    function Console() {}
    Console.prototype.log = function(message) {
      print(message);
    };
    Console.prototype.warn = function(message) {
      warn(message);
    };
    Console.decorators = [{type: Injectable}];
    Console.ctorParameters = [];
    return Console;
  }());
  var __extends$4 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ComponentStillLoadingError = (function(_super) {
    __extends$4(ComponentStillLoadingError, _super);
    function ComponentStillLoadingError(compType) {
      _super.call(this, "Can't compile synchronously as " + stringify(compType) + " is still being loaded!");
      this.compType = compType;
    }
    return ComponentStillLoadingError;
  }(BaseError));
  var ModuleWithComponentFactories = (function() {
    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
      this.ngModuleFactory = ngModuleFactory;
      this.componentFactories = componentFactories;
    }
    return ModuleWithComponentFactories;
  }());
  function _throwError() {
    throw new Error("Runtime compiler is not loaded");
  }
  var Compiler = (function() {
    function Compiler() {}
    Compiler.prototype.compileModuleSync = function(moduleType) {
      throw _throwError();
    };
    Compiler.prototype.compileModuleAsync = function(moduleType) {
      throw _throwError();
    };
    Compiler.prototype.compileModuleAndAllComponentsSync = function(moduleType) {
      throw _throwError();
    };
    Compiler.prototype.compileModuleAndAllComponentsAsync = function(moduleType) {
      throw _throwError();
    };
    Compiler.prototype.clearCache = function() {};
    Compiler.prototype.clearCacheFor = function(type) {};
    return Compiler;
  }());
  var COMPILER_OPTIONS = new OpaqueToken('compilerOptions');
  var CompilerFactory = (function() {
    function CompilerFactory() {}
    return CompilerFactory;
  }());
  var ElementRef = (function() {
    function ElementRef(nativeElement) {
      this.nativeElement = nativeElement;
    }
    return ElementRef;
  }());
  var DefaultIterableDifferFactory = (function() {
    function DefaultIterableDifferFactory() {}
    DefaultIterableDifferFactory.prototype.supports = function(obj) {
      return isListLikeIterable(obj);
    };
    DefaultIterableDifferFactory.prototype.create = function(cdRef, trackByFn) {
      return new DefaultIterableDiffer(trackByFn);
    };
    return DefaultIterableDifferFactory;
  }());
  var trackByIdentity = function(index, item) {
    return item;
  };
  var DefaultIterableDiffer = (function() {
    function DefaultIterableDiffer(_trackByFn) {
      this._trackByFn = _trackByFn;
      this._length = null;
      this._collection = null;
      this._linkedRecords = null;
      this._unlinkedRecords = null;
      this._previousItHead = null;
      this._itHead = null;
      this._itTail = null;
      this._additionsHead = null;
      this._additionsTail = null;
      this._movesHead = null;
      this._movesTail = null;
      this._removalsHead = null;
      this._removalsTail = null;
      this._identityChangesHead = null;
      this._identityChangesTail = null;
      this._trackByFn = this._trackByFn || trackByIdentity;
    }
    Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
      get: function() {
        return this._collection;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
      get: function() {
        return this._length;
      },
      enumerable: true,
      configurable: true
    });
    DefaultIterableDiffer.prototype.forEachItem = function(fn) {
      var record;
      for (record = this._itHead; record !== null; record = record._next) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.forEachOperation = function(fn) {
      var nextIt = this._itHead;
      var nextRemove = this._removalsHead;
      var addRemoveOffset = 0;
      var moveOffsets = null;
      while (nextIt || nextRemove) {
        var record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;
        var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
        var currentIndex = record.currentIndex;
        if (record === nextRemove) {
          addRemoveOffset--;
          nextRemove = nextRemove._nextRemoved;
        } else {
          nextIt = nextIt._next;
          if (record.previousIndex == null) {
            addRemoveOffset++;
          } else {
            if (!moveOffsets)
              moveOffsets = [];
            var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
            var localCurrentIndex = currentIndex - addRemoveOffset;
            if (localMovePreviousIndex != localCurrentIndex) {
              for (var i = 0; i < localMovePreviousIndex; i++) {
                var offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
                var index = offset + i;
                if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                  moveOffsets[i] = offset + 1;
                }
              }
              var previousIndex = record.previousIndex;
              moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
            }
          }
        }
        if (adjPreviousIndex !== currentIndex) {
          fn(record, adjPreviousIndex, currentIndex);
        }
      }
    };
    DefaultIterableDiffer.prototype.forEachPreviousItem = function(fn) {
      var record;
      for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.forEachAddedItem = function(fn) {
      var record;
      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.forEachMovedItem = function(fn) {
      var record;
      for (record = this._movesHead; record !== null; record = record._nextMoved) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.forEachRemovedItem = function(fn) {
      var record;
      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.forEachIdentityChange = function(fn) {
      var record;
      for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.diff = function(collection) {
      if (isBlank(collection))
        collection = [];
      if (!isListLikeIterable(collection)) {
        throw new Error("Error trying to diff '" + collection + "'");
      }
      if (this.check(collection)) {
        return this;
      } else {
        return null;
      }
    };
    DefaultIterableDiffer.prototype.onDestroy = function() {};
    DefaultIterableDiffer.prototype.check = function(collection) {
      var _this = this;
      this._reset();
      var record = this._itHead;
      var mayBeDirty = false;
      var index;
      var item;
      var itemTrackBy;
      if (Array.isArray(collection)) {
        var list = collection;
        this._length = collection.length;
        for (var index_1 = 0; index_1 < this._length; index_1++) {
          item = list[index_1];
          itemTrackBy = this._trackByFn(index_1, item);
          if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
            record = this._mismatch(record, item, itemTrackBy, index_1);
            mayBeDirty = true;
          } else {
            if (mayBeDirty) {
              record = this._verifyReinsertion(record, item, itemTrackBy, index_1);
            }
            if (!looseIdentical(record.item, item))
              this._addIdentityChange(record, item);
          }
          record = record._next;
        }
      } else {
        index = 0;
        iterateListLike(collection, function(item) {
          itemTrackBy = _this._trackByFn(index, item);
          if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
            record = _this._mismatch(record, item, itemTrackBy, index);
            mayBeDirty = true;
          } else {
            if (mayBeDirty) {
              record = _this._verifyReinsertion(record, item, itemTrackBy, index);
            }
            if (!looseIdentical(record.item, item))
              _this._addIdentityChange(record, item);
          }
          record = record._next;
          index++;
        });
        this._length = index;
      }
      this._truncate(record);
      this._collection = collection;
      return this.isDirty;
    };
    Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
      get: function() {
        return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;
      },
      enumerable: true,
      configurable: true
    });
    DefaultIterableDiffer.prototype._reset = function() {
      if (this.isDirty) {
        var record = void 0;
        var nextRecord = void 0;
        for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
          record._nextPrevious = record._next;
        }
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
          record.previousIndex = record.currentIndex;
        }
        this._additionsHead = this._additionsTail = null;
        for (record = this._movesHead; record !== null; record = nextRecord) {
          record.previousIndex = record.currentIndex;
          nextRecord = record._nextMoved;
        }
        this._movesHead = this._movesTail = null;
        this._removalsHead = this._removalsTail = null;
        this._identityChangesHead = this._identityChangesTail = null;
      }
    };
    DefaultIterableDiffer.prototype._mismatch = function(record, item, itemTrackBy, index) {
      var previousRecord;
      if (record === null) {
        previousRecord = this._itTail;
      } else {
        previousRecord = record._prev;
        this._remove(record);
      }
      record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
      if (record !== null) {
        if (!looseIdentical(record.item, item))
          this._addIdentityChange(record, item);
        this._moveAfter(record, previousRecord, index);
      } else {
        record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
        if (record !== null) {
          if (!looseIdentical(record.item, item))
            this._addIdentityChange(record, item);
          this._reinsertAfter(record, previousRecord, index);
        } else {
          record = this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);
        }
      }
      return record;
    };
    DefaultIterableDiffer.prototype._verifyReinsertion = function(record, item, itemTrackBy, index) {
      var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
      if (reinsertRecord !== null) {
        record = this._reinsertAfter(reinsertRecord, record._prev, index);
      } else if (record.currentIndex != index) {
        record.currentIndex = index;
        this._addToMoves(record, index);
      }
      return record;
    };
    DefaultIterableDiffer.prototype._truncate = function(record) {
      while (record !== null) {
        var nextRecord = record._next;
        this._addToRemovals(this._unlink(record));
        record = nextRecord;
      }
      if (this._unlinkedRecords !== null) {
        this._unlinkedRecords.clear();
      }
      if (this._additionsTail !== null) {
        this._additionsTail._nextAdded = null;
      }
      if (this._movesTail !== null) {
        this._movesTail._nextMoved = null;
      }
      if (this._itTail !== null) {
        this._itTail._next = null;
      }
      if (this._removalsTail !== null) {
        this._removalsTail._nextRemoved = null;
      }
      if (this._identityChangesTail !== null) {
        this._identityChangesTail._nextIdentityChange = null;
      }
    };
    DefaultIterableDiffer.prototype._reinsertAfter = function(record, prevRecord, index) {
      if (this._unlinkedRecords !== null) {
        this._unlinkedRecords.remove(record);
      }
      var prev = record._prevRemoved;
      var next = record._nextRemoved;
      if (prev === null) {
        this._removalsHead = next;
      } else {
        prev._nextRemoved = next;
      }
      if (next === null) {
        this._removalsTail = prev;
      } else {
        next._prevRemoved = prev;
      }
      this._insertAfter(record, prevRecord, index);
      this._addToMoves(record, index);
      return record;
    };
    DefaultIterableDiffer.prototype._moveAfter = function(record, prevRecord, index) {
      this._unlink(record);
      this._insertAfter(record, prevRecord, index);
      this._addToMoves(record, index);
      return record;
    };
    DefaultIterableDiffer.prototype._addAfter = function(record, prevRecord, index) {
      this._insertAfter(record, prevRecord, index);
      if (this._additionsTail === null) {
        this._additionsTail = this._additionsHead = record;
      } else {
        this._additionsTail = this._additionsTail._nextAdded = record;
      }
      return record;
    };
    DefaultIterableDiffer.prototype._insertAfter = function(record, prevRecord, index) {
      var next = prevRecord === null ? this._itHead : prevRecord._next;
      record._next = next;
      record._prev = prevRecord;
      if (next === null) {
        this._itTail = record;
      } else {
        next._prev = record;
      }
      if (prevRecord === null) {
        this._itHead = record;
      } else {
        prevRecord._next = record;
      }
      if (this._linkedRecords === null) {
        this._linkedRecords = new _DuplicateMap();
      }
      this._linkedRecords.put(record);
      record.currentIndex = index;
      return record;
    };
    DefaultIterableDiffer.prototype._remove = function(record) {
      return this._addToRemovals(this._unlink(record));
    };
    DefaultIterableDiffer.prototype._unlink = function(record) {
      if (this._linkedRecords !== null) {
        this._linkedRecords.remove(record);
      }
      var prev = record._prev;
      var next = record._next;
      if (prev === null) {
        this._itHead = next;
      } else {
        prev._next = next;
      }
      if (next === null) {
        this._itTail = prev;
      } else {
        next._prev = prev;
      }
      return record;
    };
    DefaultIterableDiffer.prototype._addToMoves = function(record, toIndex) {
      if (record.previousIndex === toIndex) {
        return record;
      }
      if (this._movesTail === null) {
        this._movesTail = this._movesHead = record;
      } else {
        this._movesTail = this._movesTail._nextMoved = record;
      }
      return record;
    };
    DefaultIterableDiffer.prototype._addToRemovals = function(record) {
      if (this._unlinkedRecords === null) {
        this._unlinkedRecords = new _DuplicateMap();
      }
      this._unlinkedRecords.put(record);
      record.currentIndex = null;
      record._nextRemoved = null;
      if (this._removalsTail === null) {
        this._removalsTail = this._removalsHead = record;
        record._prevRemoved = null;
      } else {
        record._prevRemoved = this._removalsTail;
        this._removalsTail = this._removalsTail._nextRemoved = record;
      }
      return record;
    };
    DefaultIterableDiffer.prototype._addIdentityChange = function(record, item) {
      record.item = item;
      if (this._identityChangesTail === null) {
        this._identityChangesTail = this._identityChangesHead = record;
      } else {
        this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
      }
      return record;
    };
    DefaultIterableDiffer.prototype.toString = function() {
      var list = [];
      this.forEachItem(function(record) {
        return list.push(record);
      });
      var previous = [];
      this.forEachPreviousItem(function(record) {
        return previous.push(record);
      });
      var additions = [];
      this.forEachAddedItem(function(record) {
        return additions.push(record);
      });
      var moves = [];
      this.forEachMovedItem(function(record) {
        return moves.push(record);
      });
      var removals = [];
      this.forEachRemovedItem(function(record) {
        return removals.push(record);
      });
      var identityChanges = [];
      this.forEachIdentityChange(function(record) {
        return identityChanges.push(record);
      });
      return 'collection: ' + list.join(', ') + '\n' + 'previous: ' + previous.join(', ') + '\n' + 'additions: ' + additions.join(', ') + '\n' + 'moves: ' + moves.join(', ') + '\n' + 'removals: ' + removals.join(', ') + '\n' + 'identityChanges: ' + identityChanges.join(', ') + '\n';
    };
    return DefaultIterableDiffer;
  }());
  var CollectionChangeRecord = (function() {
    function CollectionChangeRecord(item, trackById) {
      this.item = item;
      this.trackById = trackById;
      this.currentIndex = null;
      this.previousIndex = null;
      this._nextPrevious = null;
      this._prev = null;
      this._next = null;
      this._prevDup = null;
      this._nextDup = null;
      this._prevRemoved = null;
      this._nextRemoved = null;
      this._nextAdded = null;
      this._nextMoved = null;
      this._nextIdentityChange = null;
    }
    CollectionChangeRecord.prototype.toString = function() {
      return this.previousIndex === this.currentIndex ? stringify(this.item) : stringify(this.item) + '[' + stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';
    };
    return CollectionChangeRecord;
  }());
  var _DuplicateItemRecordList = (function() {
    function _DuplicateItemRecordList() {
      this._head = null;
      this._tail = null;
    }
    _DuplicateItemRecordList.prototype.add = function(record) {
      if (this._head === null) {
        this._head = this._tail = record;
        record._nextDup = null;
        record._prevDup = null;
      } else {
        this._tail._nextDup = record;
        record._prevDup = this._tail;
        record._nextDup = null;
        this._tail = record;
      }
    };
    _DuplicateItemRecordList.prototype.get = function(trackById, afterIndex) {
      var record;
      for (record = this._head; record !== null; record = record._nextDup) {
        if ((afterIndex === null || afterIndex < record.currentIndex) && looseIdentical(record.trackById, trackById)) {
          return record;
        }
      }
      return null;
    };
    _DuplicateItemRecordList.prototype.remove = function(record) {
      var prev = record._prevDup;
      var next = record._nextDup;
      if (prev === null) {
        this._head = next;
      } else {
        prev._nextDup = next;
      }
      if (next === null) {
        this._tail = prev;
      } else {
        next._prevDup = prev;
      }
      return this._head === null;
    };
    return _DuplicateItemRecordList;
  }());
  var _DuplicateMap = (function() {
    function _DuplicateMap() {
      this.map = new Map();
    }
    _DuplicateMap.prototype.put = function(record) {
      var key = record.trackById;
      var duplicates = this.map.get(key);
      if (!duplicates) {
        duplicates = new _DuplicateItemRecordList();
        this.map.set(key, duplicates);
      }
      duplicates.add(record);
    };
    _DuplicateMap.prototype.get = function(trackById, afterIndex) {
      if (afterIndex === void 0) {
        afterIndex = null;
      }
      var key = trackById;
      var recordList = this.map.get(key);
      return recordList ? recordList.get(trackById, afterIndex) : null;
    };
    _DuplicateMap.prototype.remove = function(record) {
      var key = record.trackById;
      var recordList = this.map.get(key);
      if (recordList.remove(record)) {
        this.map.delete(key);
      }
      return record;
    };
    Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
      get: function() {
        return this.map.size === 0;
      },
      enumerable: true,
      configurable: true
    });
    _DuplicateMap.prototype.clear = function() {
      this.map.clear();
    };
    _DuplicateMap.prototype.toString = function() {
      return '_DuplicateMap(' + stringify(this.map) + ')';
    };
    return _DuplicateMap;
  }());
  function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
    var previousIndex = item.previousIndex;
    if (previousIndex === null)
      return previousIndex;
    var moveOffset = 0;
    if (moveOffsets && previousIndex < moveOffsets.length) {
      moveOffset = moveOffsets[previousIndex];
    }
    return previousIndex + addRemoveOffset + moveOffset;
  }
  var DefaultKeyValueDifferFactory = (function() {
    function DefaultKeyValueDifferFactory() {}
    DefaultKeyValueDifferFactory.prototype.supports = function(obj) {
      return obj instanceof Map || isJsObject(obj);
    };
    DefaultKeyValueDifferFactory.prototype.create = function(cdRef) {
      return new DefaultKeyValueDiffer();
    };
    return DefaultKeyValueDifferFactory;
  }());
  var DefaultKeyValueDiffer = (function() {
    function DefaultKeyValueDiffer() {
      this._records = new Map();
      this._mapHead = null;
      this._previousMapHead = null;
      this._changesHead = null;
      this._changesTail = null;
      this._additionsHead = null;
      this._additionsTail = null;
      this._removalsHead = null;
      this._removalsTail = null;
    }
    Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
      get: function() {
        return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
      },
      enumerable: true,
      configurable: true
    });
    DefaultKeyValueDiffer.prototype.forEachItem = function(fn) {
      var record;
      for (record = this._mapHead; record !== null; record = record._next) {
        fn(record);
      }
    };
    DefaultKeyValueDiffer.prototype.forEachPreviousItem = function(fn) {
      var record;
      for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
        fn(record);
      }
    };
    DefaultKeyValueDiffer.prototype.forEachChangedItem = function(fn) {
      var record;
      for (record = this._changesHead; record !== null; record = record._nextChanged) {
        fn(record);
      }
    };
    DefaultKeyValueDiffer.prototype.forEachAddedItem = function(fn) {
      var record;
      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        fn(record);
      }
    };
    DefaultKeyValueDiffer.prototype.forEachRemovedItem = function(fn) {
      var record;
      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
        fn(record);
      }
    };
    DefaultKeyValueDiffer.prototype.diff = function(map) {
      if (!map) {
        map = new Map();
      } else if (!(map instanceof Map || isJsObject(map))) {
        throw new Error("Error trying to diff '" + map + "'");
      }
      return this.check(map) ? this : null;
    };
    DefaultKeyValueDiffer.prototype.onDestroy = function() {};
    DefaultKeyValueDiffer.prototype.check = function(map) {
      var _this = this;
      this._reset();
      var records = this._records;
      var oldSeqRecord = this._mapHead;
      var lastOldSeqRecord = null;
      var lastNewSeqRecord = null;
      var seqChanged = false;
      this._forEach(map, function(value, key) {
        var newSeqRecord;
        if (oldSeqRecord && key === oldSeqRecord.key) {
          newSeqRecord = oldSeqRecord;
          _this._maybeAddToChanges(newSeqRecord, value);
        } else {
          seqChanged = true;
          if (oldSeqRecord !== null) {
            _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
            _this._addToRemovals(oldSeqRecord);
          }
          if (records.has(key)) {
            newSeqRecord = records.get(key);
            _this._maybeAddToChanges(newSeqRecord, value);
          } else {
            newSeqRecord = new KeyValueChangeRecord(key);
            records.set(key, newSeqRecord);
            newSeqRecord.currentValue = value;
            _this._addToAdditions(newSeqRecord);
          }
        }
        if (seqChanged) {
          if (_this._isInRemovals(newSeqRecord)) {
            _this._removeFromRemovals(newSeqRecord);
          }
          if (lastNewSeqRecord == null) {
            _this._mapHead = newSeqRecord;
          } else {
            lastNewSeqRecord._next = newSeqRecord;
          }
        }
        lastOldSeqRecord = oldSeqRecord;
        lastNewSeqRecord = newSeqRecord;
        oldSeqRecord = oldSeqRecord && oldSeqRecord._next;
      });
      this._truncate(lastOldSeqRecord, oldSeqRecord);
      return this.isDirty;
    };
    DefaultKeyValueDiffer.prototype._reset = function() {
      if (this.isDirty) {
        var record = void 0;
        for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
          record._nextPrevious = record._next;
        }
        for (record = this._changesHead; record !== null; record = record._nextChanged) {
          record.previousValue = record.currentValue;
        }
        for (record = this._additionsHead; record != null; record = record._nextAdded) {
          record.previousValue = record.currentValue;
        }
        this._changesHead = this._changesTail = null;
        this._additionsHead = this._additionsTail = null;
        this._removalsHead = this._removalsTail = null;
      }
    };
    DefaultKeyValueDiffer.prototype._truncate = function(lastRecord, record) {
      while (record !== null) {
        if (lastRecord === null) {
          this._mapHead = null;
        } else {
          lastRecord._next = null;
        }
        var nextRecord = record._next;
        this._addToRemovals(record);
        lastRecord = record;
        record = nextRecord;
      }
      for (var rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
        rec.previousValue = rec.currentValue;
        rec.currentValue = null;
        this._records.delete(rec.key);
      }
    };
    DefaultKeyValueDiffer.prototype._maybeAddToChanges = function(record, newValue) {
      if (!looseIdentical(newValue, record.currentValue)) {
        record.previousValue = record.currentValue;
        record.currentValue = newValue;
        this._addToChanges(record);
      }
    };
    DefaultKeyValueDiffer.prototype._isInRemovals = function(record) {
      return record === this._removalsHead || record._nextRemoved !== null || record._prevRemoved !== null;
    };
    DefaultKeyValueDiffer.prototype._addToRemovals = function(record) {
      if (this._removalsHead === null) {
        this._removalsHead = this._removalsTail = record;
      } else {
        this._removalsTail._nextRemoved = record;
        record._prevRemoved = this._removalsTail;
        this._removalsTail = record;
      }
    };
    DefaultKeyValueDiffer.prototype._removeFromSeq = function(prev, record) {
      var next = record._next;
      if (prev === null) {
        this._mapHead = next;
      } else {
        prev._next = next;
      }
      record._next = null;
    };
    DefaultKeyValueDiffer.prototype._removeFromRemovals = function(record) {
      var prev = record._prevRemoved;
      var next = record._nextRemoved;
      if (prev === null) {
        this._removalsHead = next;
      } else {
        prev._nextRemoved = next;
      }
      if (next === null) {
        this._removalsTail = prev;
      } else {
        next._prevRemoved = prev;
      }
      record._prevRemoved = record._nextRemoved = null;
    };
    DefaultKeyValueDiffer.prototype._addToAdditions = function(record) {
      if (this._additionsHead === null) {
        this._additionsHead = this._additionsTail = record;
      } else {
        this._additionsTail._nextAdded = record;
        this._additionsTail = record;
      }
    };
    DefaultKeyValueDiffer.prototype._addToChanges = function(record) {
      if (this._changesHead === null) {
        this._changesHead = this._changesTail = record;
      } else {
        this._changesTail._nextChanged = record;
        this._changesTail = record;
      }
    };
    DefaultKeyValueDiffer.prototype.toString = function() {
      var items = [];
      var previous = [];
      var changes = [];
      var additions = [];
      var removals = [];
      var record;
      for (record = this._mapHead; record !== null; record = record._next) {
        items.push(stringify(record));
      }
      for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
        previous.push(stringify(record));
      }
      for (record = this._changesHead; record !== null; record = record._nextChanged) {
        changes.push(stringify(record));
      }
      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        additions.push(stringify(record));
      }
      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
        removals.push(stringify(record));
      }
      return 'map: ' + items.join(', ') + '\n' + 'previous: ' + previous.join(', ') + '\n' + 'additions: ' + additions.join(', ') + '\n' + 'changes: ' + changes.join(', ') + '\n' + 'removals: ' + removals.join(', ') + '\n';
    };
    DefaultKeyValueDiffer.prototype._forEach = function(obj, fn) {
      if (obj instanceof Map) {
        obj.forEach(fn);
      } else {
        Object.keys(obj).forEach(function(k) {
          return fn(obj[k], k);
        });
      }
    };
    return DefaultKeyValueDiffer;
  }());
  var KeyValueChangeRecord = (function() {
    function KeyValueChangeRecord(key) {
      this.key = key;
      this.previousValue = null;
      this.currentValue = null;
      this._nextPrevious = null;
      this._next = null;
      this._nextAdded = null;
      this._nextRemoved = null;
      this._prevRemoved = null;
      this._nextChanged = null;
    }
    KeyValueChangeRecord.prototype.toString = function() {
      return looseIdentical(this.previousValue, this.currentValue) ? stringify(this.key) : (stringify(this.key) + '[' + stringify(this.previousValue) + '->' + stringify(this.currentValue) + ']');
    };
    return KeyValueChangeRecord;
  }());
  var IterableDiffers = (function() {
    function IterableDiffers(factories) {
      this.factories = factories;
    }
    IterableDiffers.create = function(factories, parent) {
      if (isPresent(parent)) {
        var copied = parent.factories.slice();
        factories = factories.concat(copied);
        return new IterableDiffers(factories);
      } else {
        return new IterableDiffers(factories);
      }
    };
    IterableDiffers.extend = function(factories) {
      return {
        provide: IterableDiffers,
        useFactory: function(parent) {
          if (!parent) {
            throw new Error('Cannot extend IterableDiffers without a parent injector');
          }
          return IterableDiffers.create(factories, parent);
        },
        deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
      };
    };
    IterableDiffers.prototype.find = function(iterable) {
      var factory = this.factories.find(function(f) {
        return f.supports(iterable);
      });
      if (isPresent(factory)) {
        return factory;
      } else {
        throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
      }
    };
    return IterableDiffers;
  }());
  var KeyValueDiffers = (function() {
    function KeyValueDiffers(factories) {
      this.factories = factories;
    }
    KeyValueDiffers.create = function(factories, parent) {
      if (isPresent(parent)) {
        var copied = parent.factories.slice();
        factories = factories.concat(copied);
        return new KeyValueDiffers(factories);
      } else {
        return new KeyValueDiffers(factories);
      }
    };
    KeyValueDiffers.extend = function(factories) {
      return {
        provide: KeyValueDiffers,
        useFactory: function(parent) {
          if (!parent) {
            throw new Error('Cannot extend KeyValueDiffers without a parent injector');
          }
          return KeyValueDiffers.create(factories, parent);
        },
        deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
      };
    };
    KeyValueDiffers.prototype.find = function(kv) {
      var factory = this.factories.find(function(f) {
        return f.supports(kv);
      });
      if (isPresent(factory)) {
        return factory;
      } else {
        throw new Error("Cannot find a differ supporting object '" + kv + "'");
      }
    };
    return KeyValueDiffers;
  }());
  var UNINITIALIZED = {toString: function() {
      return 'CD_INIT_VALUE';
    }};
  function devModeEqual(a, b) {
    if (isListLikeIterable(a) && isListLikeIterable(b)) {
      return areIterablesEqual(a, b, devModeEqual);
    } else if (!isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {
      return true;
    } else {
      return looseIdentical(a, b);
    }
  }
  var WrappedValue = (function() {
    function WrappedValue(wrapped) {
      this.wrapped = wrapped;
    }
    WrappedValue.wrap = function(value) {
      return new WrappedValue(value);
    };
    return WrappedValue;
  }());
  var ValueUnwrapper = (function() {
    function ValueUnwrapper() {
      this.hasWrappedValue = false;
    }
    ValueUnwrapper.prototype.unwrap = function(value) {
      if (value instanceof WrappedValue) {
        this.hasWrappedValue = true;
        return value.wrapped;
      }
      return value;
    };
    ValueUnwrapper.prototype.reset = function() {
      this.hasWrappedValue = false;
    };
    return ValueUnwrapper;
  }());
  var SimpleChange = (function() {
    function SimpleChange(previousValue, currentValue) {
      this.previousValue = previousValue;
      this.currentValue = currentValue;
    }
    SimpleChange.prototype.isFirstChange = function() {
      return this.previousValue === UNINITIALIZED;
    };
    return SimpleChange;
  }());
  var ChangeDetectorRef = (function() {
    function ChangeDetectorRef() {}
    return ChangeDetectorRef;
  }());
  var keyValDiff = [new DefaultKeyValueDifferFactory()];
  var iterableDiff = [new DefaultIterableDifferFactory()];
  var defaultIterableDiffers = new IterableDiffers(iterableDiff);
  var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
  var RenderComponentType = (function() {
    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
      this.id = id;
      this.templateUrl = templateUrl;
      this.slotCount = slotCount;
      this.encapsulation = encapsulation;
      this.styles = styles;
      this.animations = animations;
    }
    return RenderComponentType;
  }());
  var RenderDebugInfo = (function() {
    function RenderDebugInfo() {}
    Object.defineProperty(RenderDebugInfo.prototype, "injector", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "component", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "providerTokens", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "references", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "context", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "source", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    return RenderDebugInfo;
  }());
  var Renderer = (function() {
    function Renderer() {}
    return Renderer;
  }());
  var RootRenderer = (function() {
    function RootRenderer() {}
    return RootRenderer;
  }());
  exports.SecurityContext;
  (function(SecurityContext) {
    SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
    SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
    SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
    SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
    SecurityContext[SecurityContext["URL"] = 4] = "URL";
    SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
  })(exports.SecurityContext || (exports.SecurityContext = {}));
  var Sanitizer = (function() {
    function Sanitizer() {}
    return Sanitizer;
  }());
  var __extends$6 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ExpressionChangedAfterItHasBeenCheckedError = (function(_super) {
    __extends$6(ExpressionChangedAfterItHasBeenCheckedError, _super);
    function ExpressionChangedAfterItHasBeenCheckedError(oldValue, currValue) {
      var msg = "Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
      if (oldValue === UNINITIALIZED) {
        msg += " It seems like the view has been created after its parent and its children have been dirty checked." + " Has it been created in a change detection hook ?";
      }
      _super.call(this, msg);
    }
    return ExpressionChangedAfterItHasBeenCheckedError;
  }(BaseError));
  var ViewWrappedError = (function(_super) {
    __extends$6(ViewWrappedError, _super);
    function ViewWrappedError(originalError, context) {
      _super.call(this, "Error in " + context.source, originalError);
      this.context = context;
    }
    return ViewWrappedError;
  }(WrappedError));
  var ViewDestroyedError = (function(_super) {
    __extends$6(ViewDestroyedError, _super);
    function ViewDestroyedError(details) {
      _super.call(this, "Attempt to use a destroyed view: " + details);
    }
    return ViewDestroyedError;
  }(BaseError));
  var ViewUtils = (function() {
    function ViewUtils(_renderer, sanitizer) {
      this._renderer = _renderer;
      this._nextCompTypeId = 0;
      this.sanitizer = sanitizer;
    }
    ViewUtils.prototype.renderComponent = function(renderComponentType) {
      return this._renderer.renderComponent(renderComponentType);
    };
    ViewUtils.decorators = [{type: Injectable}];
    ViewUtils.ctorParameters = [{type: RootRenderer}, {type: Sanitizer}];
    return ViewUtils;
  }());
  var nextRenderComponentTypeId = 0;
  function createRenderComponentType(templateUrl, slotCount, encapsulation, styles, animations) {
    return new RenderComponentType("" + nextRenderComponentTypeId++, templateUrl, slotCount, encapsulation, styles, animations);
  }
  function addToArray(e, array) {
    array.push(e);
  }
  function interpolate(valueCount, constAndInterp) {
    var result = '';
    for (var i = 0; i < valueCount * 2; i = i + 2) {
      result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
    }
    return result + constAndInterp[valueCount * 2];
  }
  function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
    switch (valueCount) {
      case 1:
        return c0 + _toStringWithNull(a1) + c1;
      case 2:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
      case 3:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3;
      case 4:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4;
      case 5:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
      case 6:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
      case 7:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7;
      case 8:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
      case 9:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
      default:
        throw new Error("Does not support more than 9 expressions");
    }
  }
  function _toStringWithNull(v) {
    return v != null ? v.toString() : '';
  }
  function checkBinding(throwOnChange, oldValue, newValue) {
    if (throwOnChange) {
      if (!devModeEqual(oldValue, newValue)) {
        throw new ExpressionChangedAfterItHasBeenCheckedError(oldValue, newValue);
      }
      return false;
    } else {
      return !looseIdentical(oldValue, newValue);
    }
  }
  function castByValue(input, value) {
    return input;
  }
  var EMPTY_ARRAY = [];
  var EMPTY_MAP = {};
  function pureProxy1(fn) {
    var result;
    var v0 = UNINITIALIZED;
    return function(p0) {
      if (!looseIdentical(v0, p0)) {
        v0 = p0;
        result = fn(p0);
      }
      return result;
    };
  }
  function pureProxy2(fn) {
    var result;
    var v0 = UNINITIALIZED;
    var v1 = UNINITIALIZED;
    return function(p0, p1) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1)) {
        v0 = p0;
        v1 = p1;
        result = fn(p0, p1);
      }
      return result;
    };
  }
  function pureProxy3(fn) {
    var result;
    var v0 = UNINITIALIZED;
    var v1 = UNINITIALIZED;
    var v2 = UNINITIALIZED;
    return function(p0, p1, p2) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        result = fn(p0, p1, p2);
      }
      return result;
    };
  }
  function pureProxy4(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3;
    v0 = v1 = v2 = v3 = UNINITIALIZED;
    return function(p0, p1, p2, p3) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        result = fn(p0, p1, p2, p3);
      }
      return result;
    };
  }
  function pureProxy5(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4;
    v0 = v1 = v2 = v3 = v4 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        result = fn(p0, p1, p2, p3, p4);
      }
      return result;
    };
  }
  function pureProxy6(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4,
        v5;
    v0 = v1 = v2 = v3 = v4 = v5 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4, p5) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        v5 = p5;
        result = fn(p0, p1, p2, p3, p4, p5);
      }
      return result;
    };
  }
  function pureProxy7(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4, p5, p6) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        v5 = p5;
        v6 = p6;
        result = fn(p0, p1, p2, p3, p4, p5, p6);
      }
      return result;
    };
  }
  function pureProxy8(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6,
        v7;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4, p5, p6, p7) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        v5 = p5;
        v6 = p6;
        v7 = p7;
        result = fn(p0, p1, p2, p3, p4, p5, p6, p7);
      }
      return result;
    };
  }
  function pureProxy9(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6,
        v7,
        v8;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        v5 = p5;
        v6 = p6;
        v7 = p7;
        v8 = p8;
        result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);
      }
      return result;
    };
  }
  function pureProxy10(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6,
        v7,
        v8,
        v9;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8) || !looseIdentical(v9, p9)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        v5 = p5;
        v6 = p6;
        v7 = p7;
        v8 = p8;
        v9 = p9;
        result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
      }
      return result;
    };
  }
  function setBindingDebugInfoForChanges(renderer, el, changes) {
    Object.keys(changes).forEach(function(propName) {
      setBindingDebugInfo(renderer, el, propName, changes[propName].currentValue);
    });
  }
  function setBindingDebugInfo(renderer, el, propName, value) {
    try {
      renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), value ? value.toString() : null);
    } catch (e) {
      renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), '[ERROR] Exception while trying to serialize the value');
    }
  }
  var CAMEL_CASE_REGEXP = /([A-Z])/g;
  function camelCaseToDashCase(input) {
    return input.replace(CAMEL_CASE_REGEXP, function() {
      var m = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        m[_i - 0] = arguments[_i];
      }
      return '-' + m[1].toLowerCase();
    });
  }
  function createRenderElement(renderer, parentElement, name, attrs, debugInfo) {
    var el = renderer.createElement(parentElement, name, debugInfo);
    for (var i = 0; i < attrs.length; i += 2) {
      renderer.setElementAttribute(el, attrs.get(i), attrs.get(i + 1));
    }
    return el;
  }
  function selectOrCreateRenderHostElement(renderer, elementName, attrs, rootSelectorOrNode, debugInfo) {
    var hostElement;
    if (isPresent(rootSelectorOrNode)) {
      hostElement = renderer.selectRootElement(rootSelectorOrNode, debugInfo);
      for (var i = 0; i < attrs.length; i += 2) {
        renderer.setElementAttribute(hostElement, attrs.get(i), attrs.get(i + 1));
      }
    } else {
      hostElement = createRenderElement(renderer, null, elementName, attrs, debugInfo);
    }
    return hostElement;
  }
  function subscribeToRenderElement(view, element, eventNamesAndTargets, listener) {
    var disposables = createEmptyInlineArray(eventNamesAndTargets.length / 2);
    for (var i = 0; i < eventNamesAndTargets.length; i += 2) {
      var eventName = eventNamesAndTargets.get(i);
      var eventTarget = eventNamesAndTargets.get(i + 1);
      var disposable = void 0;
      if (eventTarget) {
        disposable = view.renderer.listenGlobal(eventTarget, eventName, listener.bind(view, eventTarget + ":" + eventName));
      } else {
        disposable = view.renderer.listen(element, eventName, listener.bind(view, eventName));
      }
      disposables.set(i / 2, disposable);
    }
    return disposeInlineArray.bind(null, disposables);
  }
  function disposeInlineArray(disposables) {
    for (var i = 0; i < disposables.length; i++) {
      disposables.get(i)();
    }
  }
  function noop() {}
  function createEmptyInlineArray(length) {
    var ctor;
    if (length <= 2) {
      ctor = InlineArray2;
    } else if (length <= 4) {
      ctor = InlineArray4;
    } else if (length <= 8) {
      ctor = InlineArray8;
    } else if (length <= 16) {
      ctor = InlineArray16;
    } else {
      ctor = InlineArrayDynamic;
    }
    return new ctor(length);
  }
  var InlineArray0 = (function() {
    function InlineArray0() {
      this.length = 0;
    }
    InlineArray0.prototype.get = function(index) {
      return undefined;
    };
    InlineArray0.prototype.set = function(index, value) {};
    return InlineArray0;
  }());
  var InlineArray2 = (function() {
    function InlineArray2(length, _v0, _v1) {
      this.length = length;
      this._v0 = _v0;
      this._v1 = _v1;
    }
    InlineArray2.prototype.get = function(index) {
      switch (index) {
        case 0:
          return this._v0;
        case 1:
          return this._v1;
        default:
          return undefined;
      }
    };
    InlineArray2.prototype.set = function(index, value) {
      switch (index) {
        case 0:
          this._v0 = value;
          break;
        case 1:
          this._v1 = value;
          break;
      }
    };
    return InlineArray2;
  }());
  var InlineArray4 = (function() {
    function InlineArray4(length, _v0, _v1, _v2, _v3) {
      this.length = length;
      this._v0 = _v0;
      this._v1 = _v1;
      this._v2 = _v2;
      this._v3 = _v3;
    }
    InlineArray4.prototype.get = function(index) {
      switch (index) {
        case 0:
          return this._v0;
        case 1:
          return this._v1;
        case 2:
          return this._v2;
        case 3:
          return this._v3;
        default:
          return undefined;
      }
    };
    InlineArray4.prototype.set = function(index, value) {
      switch (index) {
        case 0:
          this._v0 = value;
          break;
        case 1:
          this._v1 = value;
          break;
        case 2:
          this._v2 = value;
          break;
        case 3:
          this._v3 = value;
          break;
      }
    };
    return InlineArray4;
  }());
  var InlineArray8 = (function() {
    function InlineArray8(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {
      this.length = length;
      this._v0 = _v0;
      this._v1 = _v1;
      this._v2 = _v2;
      this._v3 = _v3;
      this._v4 = _v4;
      this._v5 = _v5;
      this._v6 = _v6;
      this._v7 = _v7;
    }
    InlineArray8.prototype.get = function(index) {
      switch (index) {
        case 0:
          return this._v0;
        case 1:
          return this._v1;
        case 2:
          return this._v2;
        case 3:
          return this._v3;
        case 4:
          return this._v4;
        case 5:
          return this._v5;
        case 6:
          return this._v6;
        case 7:
          return this._v7;
        default:
          return undefined;
      }
    };
    InlineArray8.prototype.set = function(index, value) {
      switch (index) {
        case 0:
          this._v0 = value;
          break;
        case 1:
          this._v1 = value;
          break;
        case 2:
          this._v2 = value;
          break;
        case 3:
          this._v3 = value;
          break;
        case 4:
          this._v4 = value;
          break;
        case 5:
          this._v5 = value;
          break;
        case 6:
          this._v6 = value;
          break;
        case 7:
          this._v7 = value;
          break;
      }
    };
    return InlineArray8;
  }());
  var InlineArray16 = (function() {
    function InlineArray16(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8, _v9, _v10, _v11, _v12, _v13, _v14, _v15) {
      this.length = length;
      this._v0 = _v0;
      this._v1 = _v1;
      this._v2 = _v2;
      this._v3 = _v3;
      this._v4 = _v4;
      this._v5 = _v5;
      this._v6 = _v6;
      this._v7 = _v7;
      this._v8 = _v8;
      this._v9 = _v9;
      this._v10 = _v10;
      this._v11 = _v11;
      this._v12 = _v12;
      this._v13 = _v13;
      this._v14 = _v14;
      this._v15 = _v15;
    }
    InlineArray16.prototype.get = function(index) {
      switch (index) {
        case 0:
          return this._v0;
        case 1:
          return this._v1;
        case 2:
          return this._v2;
        case 3:
          return this._v3;
        case 4:
          return this._v4;
        case 5:
          return this._v5;
        case 6:
          return this._v6;
        case 7:
          return this._v7;
        case 8:
          return this._v8;
        case 9:
          return this._v9;
        case 10:
          return this._v10;
        case 11:
          return this._v11;
        case 12:
          return this._v12;
        case 13:
          return this._v13;
        case 14:
          return this._v14;
        case 15:
          return this._v15;
        default:
          return undefined;
      }
    };
    InlineArray16.prototype.set = function(index, value) {
      switch (index) {
        case 0:
          this._v0 = value;
          break;
        case 1:
          this._v1 = value;
          break;
        case 2:
          this._v2 = value;
          break;
        case 3:
          this._v3 = value;
          break;
        case 4:
          this._v4 = value;
          break;
        case 5:
          this._v5 = value;
          break;
        case 6:
          this._v6 = value;
          break;
        case 7:
          this._v7 = value;
          break;
        case 8:
          this._v8 = value;
          break;
        case 9:
          this._v9 = value;
          break;
        case 10:
          this._v10 = value;
          break;
        case 11:
          this._v11 = value;
          break;
        case 12:
          this._v12 = value;
          break;
        case 13:
          this._v13 = value;
          break;
        case 14:
          this._v14 = value;
          break;
        case 15:
          this._v15 = value;
          break;
      }
    };
    return InlineArray16;
  }());
  var InlineArrayDynamic = (function() {
    function InlineArrayDynamic(length) {
      var values = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
      }
      this.length = length;
      this._values = values;
    }
    InlineArrayDynamic.prototype.get = function(index) {
      return this._values[index];
    };
    InlineArrayDynamic.prototype.set = function(index, value) {
      this._values[index] = value;
    };
    return InlineArrayDynamic;
  }());
  var EMPTY_INLINE_ARRAY = new InlineArray0();
  var view_utils = Object.freeze({
    ViewUtils: ViewUtils,
    createRenderComponentType: createRenderComponentType,
    addToArray: addToArray,
    interpolate: interpolate,
    inlineInterpolate: inlineInterpolate,
    checkBinding: checkBinding,
    castByValue: castByValue,
    EMPTY_ARRAY: EMPTY_ARRAY,
    EMPTY_MAP: EMPTY_MAP,
    pureProxy1: pureProxy1,
    pureProxy2: pureProxy2,
    pureProxy3: pureProxy3,
    pureProxy4: pureProxy4,
    pureProxy5: pureProxy5,
    pureProxy6: pureProxy6,
    pureProxy7: pureProxy7,
    pureProxy8: pureProxy8,
    pureProxy9: pureProxy9,
    pureProxy10: pureProxy10,
    setBindingDebugInfoForChanges: setBindingDebugInfoForChanges,
    setBindingDebugInfo: setBindingDebugInfo,
    createRenderElement: createRenderElement,
    selectOrCreateRenderHostElement: selectOrCreateRenderHostElement,
    subscribeToRenderElement: subscribeToRenderElement,
    noop: noop,
    InlineArray2: InlineArray2,
    InlineArray4: InlineArray4,
    InlineArray8: InlineArray8,
    InlineArray16: InlineArray16,
    InlineArrayDynamic: InlineArrayDynamic,
    EMPTY_INLINE_ARRAY: EMPTY_INLINE_ARRAY
  });
  var __extends$5 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ComponentRef = (function() {
    function ComponentRef() {}
    Object.defineProperty(ComponentRef.prototype, "location", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ComponentRef.prototype, "injector", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ComponentRef.prototype, "instance", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    ;
    Object.defineProperty(ComponentRef.prototype, "hostView", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    ;
    Object.defineProperty(ComponentRef.prototype, "changeDetectorRef", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ComponentRef.prototype, "componentType", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    return ComponentRef;
  }());
  var ComponentRef_ = (function(_super) {
    __extends$5(ComponentRef_, _super);
    function ComponentRef_(_index, _parentView, _nativeElement, _component) {
      _super.call(this);
      this._index = _index;
      this._parentView = _parentView;
      this._nativeElement = _nativeElement;
      this._component = _component;
    }
    Object.defineProperty(ComponentRef_.prototype, "location", {
      get: function() {
        return new ElementRef(this._nativeElement);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ComponentRef_.prototype, "injector", {
      get: function() {
        return this._parentView.injector(this._index);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ComponentRef_.prototype, "instance", {
      get: function() {
        return this._component;
      },
      enumerable: true,
      configurable: true
    });
    ;
    Object.defineProperty(ComponentRef_.prototype, "hostView", {
      get: function() {
        return this._parentView.ref;
      },
      enumerable: true,
      configurable: true
    });
    ;
    Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
      get: function() {
        return this._parentView.ref;
      },
      enumerable: true,
      configurable: true
    });
    ;
    Object.defineProperty(ComponentRef_.prototype, "componentType", {
      get: function() {
        return this._component.constructor;
      },
      enumerable: true,
      configurable: true
    });
    ComponentRef_.prototype.destroy = function() {
      this._parentView.detachAndDestroy();
    };
    ComponentRef_.prototype.onDestroy = function(callback) {
      this.hostView.onDestroy(callback);
    };
    return ComponentRef_;
  }(ComponentRef));
  var ComponentFactory = (function() {
    function ComponentFactory(selector, _viewClass, _componentType) {
      this.selector = selector;
      this._viewClass = _viewClass;
      this._componentType = _componentType;
    }
    Object.defineProperty(ComponentFactory.prototype, "componentType", {
      get: function() {
        return this._componentType;
      },
      enumerable: true,
      configurable: true
    });
    ComponentFactory.prototype.create = function(injector, projectableNodes, rootSelectorOrNode) {
      if (projectableNodes === void 0) {
        projectableNodes = null;
      }
      if (rootSelectorOrNode === void 0) {
        rootSelectorOrNode = null;
      }
      var vu = injector.get(ViewUtils);
      if (!projectableNodes) {
        projectableNodes = [];
      }
      var hostView = new this._viewClass(vu, null, null, null);
      return hostView.createHostView(rootSelectorOrNode, injector, projectableNodes);
    };
    return ComponentFactory;
  }());
  var __extends$7 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var NoComponentFactoryError = (function(_super) {
    __extends$7(NoComponentFactoryError, _super);
    function NoComponentFactoryError(component) {
      _super.call(this, "No component factory found for " + stringify(component));
      this.component = component;
    }
    return NoComponentFactoryError;
  }(BaseError));
  var _NullComponentFactoryResolver = (function() {
    function _NullComponentFactoryResolver() {}
    _NullComponentFactoryResolver.prototype.resolveComponentFactory = function(component) {
      throw new NoComponentFactoryError(component);
    };
    return _NullComponentFactoryResolver;
  }());
  var ComponentFactoryResolver = (function() {
    function ComponentFactoryResolver() {}
    ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
    return ComponentFactoryResolver;
  }());
  var CodegenComponentFactoryResolver = (function() {
    function CodegenComponentFactoryResolver(factories, _parent) {
      this._parent = _parent;
      this._factories = new Map();
      for (var i = 0; i < factories.length; i++) {
        var factory = factories[i];
        this._factories.set(factory.componentType, factory);
      }
    }
    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function(component) {
      var result = this._factories.get(component);
      if (!result) {
        result = this._parent.resolveComponentFactory(component);
      }
      return result;
    };
    return CodegenComponentFactoryResolver;
  }());
  var trace;
  var events;
  function detectWTF() {
    var wtf = global$1['wtf'];
    if (wtf) {
      trace = wtf['trace'];
      if (trace) {
        events = trace['events'];
        return true;
      }
    }
    return false;
  }
  function createScope(signature, flags) {
    if (flags === void 0) {
      flags = null;
    }
    return events.createScope(signature, flags);
  }
  function leave(scope, returnValue) {
    trace.leaveScope(scope, returnValue);
    return returnValue;
  }
  function startTimeRange(rangeType, action) {
    return trace.beginTimeRange(rangeType, action);
  }
  function endTimeRange(range) {
    trace.endTimeRange(range);
  }
  var wtfEnabled = detectWTF();
  function noopScope(arg0, arg1) {
    return null;
  }
  var wtfCreateScope = wtfEnabled ? createScope : function(signature, flags) {
    return noopScope;
  };
  var wtfLeave = wtfEnabled ? leave : function(s, r) {
    return r;
  };
  var wtfStartTimeRange = wtfEnabled ? startTimeRange : function(rangeType, action) {
    return null;
  };
  var wtfEndTimeRange = wtfEnabled ? endTimeRange : function(r) {
    return null;
  };
  var __extends$8 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var EventEmitter = (function(_super) {
    __extends$8(EventEmitter, _super);
    function EventEmitter(isAsync) {
      if (isAsync === void 0) {
        isAsync = false;
      }
      _super.call(this);
      this.__isAsync = isAsync;
    }
    EventEmitter.prototype.emit = function(value) {
      _super.prototype.next.call(this, value);
    };
    EventEmitter.prototype.subscribe = function(generatorOrNext, error, complete) {
      var schedulerFn;
      var errorFn = function(err) {
        return null;
      };
      var completeFn = function() {
        return null;
      };
      if (generatorOrNext && typeof generatorOrNext === 'object') {
        schedulerFn = this.__isAsync ? function(value) {
          setTimeout(function() {
            return generatorOrNext.next(value);
          });
        } : function(value) {
          generatorOrNext.next(value);
        };
        if (generatorOrNext.error) {
          errorFn = this.__isAsync ? function(err) {
            setTimeout(function() {
              return generatorOrNext.error(err);
            });
          } : function(err) {
            generatorOrNext.error(err);
          };
        }
        if (generatorOrNext.complete) {
          completeFn = this.__isAsync ? function() {
            setTimeout(function() {
              return generatorOrNext.complete();
            });
          } : function() {
            generatorOrNext.complete();
          };
        }
      } else {
        schedulerFn = this.__isAsync ? function(value) {
          setTimeout(function() {
            return generatorOrNext(value);
          });
        } : function(value) {
          generatorOrNext(value);
        };
        if (error) {
          errorFn = this.__isAsync ? function(err) {
            setTimeout(function() {
              return error(err);
            });
          } : function(err) {
            error(err);
          };
        }
        if (complete) {
          completeFn = this.__isAsync ? function() {
            setTimeout(function() {
              return complete();
            });
          } : function() {
            complete();
          };
        }
      }
      return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
    };
    return EventEmitter;
  }(rxjs_Subject.Subject));
  var NgZone = (function() {
    function NgZone(_a) {
      var _b = _a.enableLongStackTrace,
          enableLongStackTrace = _b === void 0 ? false : _b;
      this._hasPendingMicrotasks = false;
      this._hasPendingMacrotasks = false;
      this._isStable = true;
      this._nesting = 0;
      this._onUnstable = new EventEmitter(false);
      this._onMicrotaskEmpty = new EventEmitter(false);
      this._onStable = new EventEmitter(false);
      this._onErrorEvents = new EventEmitter(false);
      if (typeof Zone == 'undefined') {
        throw new Error('Angular requires Zone.js prolyfill.');
      }
      Zone.assertZonePatched();
      this.outer = this.inner = Zone.current;
      if (Zone['wtfZoneSpec']) {
        this.inner = this.inner.fork(Zone['wtfZoneSpec']);
      }
      if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
        this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);
      }
      this.forkInnerZoneWithAngularBehavior();
    }
    NgZone.isInAngularZone = function() {
      return Zone.current.get('isAngularZone') === true;
    };
    NgZone.assertInAngularZone = function() {
      if (!NgZone.isInAngularZone()) {
        throw new Error('Expected to be in Angular Zone, but it is not!');
      }
    };
    NgZone.assertNotInAngularZone = function() {
      if (NgZone.isInAngularZone()) {
        throw new Error('Expected to not be in Angular Zone, but it is!');
      }
    };
    NgZone.prototype.run = function(fn) {
      return this.inner.run(fn);
    };
    NgZone.prototype.runGuarded = function(fn) {
      return this.inner.runGuarded(fn);
    };
    NgZone.prototype.runOutsideAngular = function(fn) {
      return this.outer.run(fn);
    };
    Object.defineProperty(NgZone.prototype, "onUnstable", {
      get: function() {
        return this._onUnstable;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
      get: function() {
        return this._onMicrotaskEmpty;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgZone.prototype, "onStable", {
      get: function() {
        return this._onStable;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgZone.prototype, "onError", {
      get: function() {
        return this._onErrorEvents;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgZone.prototype, "isStable", {
      get: function() {
        return this._isStable;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
      get: function() {
        return this._hasPendingMicrotasks;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
      get: function() {
        return this._hasPendingMacrotasks;
      },
      enumerable: true,
      configurable: true
    });
    NgZone.prototype.checkStable = function() {
      var _this = this;
      if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {
        try {
          this._nesting++;
          this._onMicrotaskEmpty.emit(null);
        } finally {
          this._nesting--;
          if (!this._hasPendingMicrotasks) {
            try {
              this.runOutsideAngular(function() {
                return _this._onStable.emit(null);
              });
            } finally {
              this._isStable = true;
            }
          }
        }
      }
    };
    NgZone.prototype.forkInnerZoneWithAngularBehavior = function() {
      var _this = this;
      this.inner = this.inner.fork({
        name: 'angular',
        properties: {'isAngularZone': true},
        onInvokeTask: function(delegate, current, target, task, applyThis, applyArgs) {
          try {
            _this.onEnter();
            return delegate.invokeTask(target, task, applyThis, applyArgs);
          } finally {
            _this.onLeave();
          }
        },
        onInvoke: function(delegate, current, target, callback, applyThis, applyArgs, source) {
          try {
            _this.onEnter();
            return delegate.invoke(target, callback, applyThis, applyArgs, source);
          } finally {
            _this.onLeave();
          }
        },
        onHasTask: function(delegate, current, target, hasTaskState) {
          delegate.hasTask(target, hasTaskState);
          if (current === target) {
            if (hasTaskState.change == 'microTask') {
              _this.setHasMicrotask(hasTaskState.microTask);
            } else if (hasTaskState.change == 'macroTask') {
              _this.setHasMacrotask(hasTaskState.macroTask);
            }
          }
        },
        onHandleError: function(delegate, current, target, error) {
          delegate.handleError(target, error);
          _this.triggerError(error);
          return false;
        }
      });
    };
    NgZone.prototype.onEnter = function() {
      this._nesting++;
      if (this._isStable) {
        this._isStable = false;
        this._onUnstable.emit(null);
      }
    };
    NgZone.prototype.onLeave = function() {
      this._nesting--;
      this.checkStable();
    };
    NgZone.prototype.setHasMicrotask = function(hasMicrotasks) {
      this._hasPendingMicrotasks = hasMicrotasks;
      this.checkStable();
    };
    NgZone.prototype.setHasMacrotask = function(hasMacrotasks) {
      this._hasPendingMacrotasks = hasMacrotasks;
    };
    NgZone.prototype.triggerError = function(error) {
      this._onErrorEvents.emit(error);
    };
    return NgZone;
  }());
  var Testability = (function() {
    function Testability(_ngZone) {
      this._ngZone = _ngZone;
      this._pendingCount = 0;
      this._isZoneStable = true;
      this._didWork = false;
      this._callbacks = [];
      this._watchAngularEvents();
    }
    Testability.prototype._watchAngularEvents = function() {
      var _this = this;
      this._ngZone.onUnstable.subscribe({next: function() {
          _this._didWork = true;
          _this._isZoneStable = false;
        }});
      this._ngZone.runOutsideAngular(function() {
        _this._ngZone.onStable.subscribe({next: function() {
            NgZone.assertNotInAngularZone();
            scheduleMicroTask(function() {
              _this._isZoneStable = true;
              _this._runCallbacksIfReady();
            });
          }});
      });
    };
    Testability.prototype.increasePendingRequestCount = function() {
      this._pendingCount += 1;
      this._didWork = true;
      return this._pendingCount;
    };
    Testability.prototype.decreasePendingRequestCount = function() {
      this._pendingCount -= 1;
      if (this._pendingCount < 0) {
        throw new Error('pending async requests below zero');
      }
      this._runCallbacksIfReady();
      return this._pendingCount;
    };
    Testability.prototype.isStable = function() {
      return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
    };
    Testability.prototype._runCallbacksIfReady = function() {
      var _this = this;
      if (this.isStable()) {
        scheduleMicroTask(function() {
          while (_this._callbacks.length !== 0) {
            (_this._callbacks.pop())(_this._didWork);
          }
          _this._didWork = false;
        });
      } else {
        this._didWork = true;
      }
    };
    Testability.prototype.whenStable = function(callback) {
      this._callbacks.push(callback);
      this._runCallbacksIfReady();
    };
    Testability.prototype.getPendingRequestCount = function() {
      return this._pendingCount;
    };
    Testability.prototype.findBindings = function(using, provider, exactMatch) {
      return [];
    };
    Testability.prototype.findProviders = function(using, provider, exactMatch) {
      return [];
    };
    Testability.decorators = [{type: Injectable}];
    Testability.ctorParameters = [{type: NgZone}];
    return Testability;
  }());
  var TestabilityRegistry = (function() {
    function TestabilityRegistry() {
      this._applications = new Map();
      _testabilityGetter.addToWindow(this);
    }
    TestabilityRegistry.prototype.registerApplication = function(token, testability) {
      this._applications.set(token, testability);
    };
    TestabilityRegistry.prototype.getTestability = function(elem) {
      return this._applications.get(elem);
    };
    TestabilityRegistry.prototype.getAllTestabilities = function() {
      return Array.from(this._applications.values());
    };
    TestabilityRegistry.prototype.getAllRootElements = function() {
      return Array.from(this._applications.keys());
    };
    TestabilityRegistry.prototype.findTestabilityInTree = function(elem, findInAncestors) {
      if (findInAncestors === void 0) {
        findInAncestors = true;
      }
      return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
    };
    TestabilityRegistry.decorators = [{type: Injectable}];
    TestabilityRegistry.ctorParameters = [];
    return TestabilityRegistry;
  }());
  var _NoopGetTestability = (function() {
    function _NoopGetTestability() {}
    _NoopGetTestability.prototype.addToWindow = function(registry) {};
    _NoopGetTestability.prototype.findTestabilityInTree = function(registry, elem, findInAncestors) {
      return null;
    };
    return _NoopGetTestability;
  }());
  function setTestabilityGetter(getter) {
    _testabilityGetter = getter;
  }
  var _testabilityGetter = new _NoopGetTestability();
  var __extends$3 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var _devMode = true;
  var _runModeLocked = false;
  var _platform;
  function enableProdMode() {
    if (_runModeLocked) {
      throw new Error('Cannot enable prod mode after platform setup.');
    }
    _devMode = false;
  }
  function isDevMode() {
    _runModeLocked = true;
    return _devMode;
  }
  function createPlatform(injector) {
    if (_platform && !_platform.destroyed) {
      throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
    }
    _platform = injector.get(PlatformRef);
    var inits = injector.get(PLATFORM_INITIALIZER, null);
    if (inits)
      inits.forEach(function(init) {
        return init();
      });
    return _platform;
  }
  function createPlatformFactory(parentPlaformFactory, name, providers) {
    if (providers === void 0) {
      providers = [];
    }
    var marker = new OpaqueToken("Platform: " + name);
    return function(extraProviders) {
      if (extraProviders === void 0) {
        extraProviders = [];
      }
      if (!getPlatform()) {
        if (parentPlaformFactory) {
          parentPlaformFactory(providers.concat(extraProviders).concat({
            provide: marker,
            useValue: true
          }));
        } else {
          createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({
            provide: marker,
            useValue: true
          })));
        }
      }
      return assertPlatform(marker);
    };
  }
  function assertPlatform(requiredToken) {
    var platform = getPlatform();
    if (!platform) {
      throw new Error('No platform exists!');
    }
    if (!platform.injector.get(requiredToken, null)) {
      throw new Error('A platform with a different configuration has been created. Please destroy it first.');
    }
    return platform;
  }
  function destroyPlatform() {
    if (_platform && !_platform.destroyed) {
      _platform.destroy();
    }
  }
  function getPlatform() {
    return _platform && !_platform.destroyed ? _platform : null;
  }
  var PlatformRef = (function() {
    function PlatformRef() {}
    PlatformRef.prototype.bootstrapModuleFactory = function(moduleFactory) {
      throw unimplemented();
    };
    PlatformRef.prototype.bootstrapModule = function(moduleType, compilerOptions) {
      if (compilerOptions === void 0) {
        compilerOptions = [];
      }
      throw unimplemented();
    };
    Object.defineProperty(PlatformRef.prototype, "injector", {
      get: function() {
        throw unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    ;
    Object.defineProperty(PlatformRef.prototype, "destroyed", {
      get: function() {
        throw unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    return PlatformRef;
  }());
  function _callAndReportToErrorHandler(errorHandler, callback) {
    try {
      var result = callback();
      if (isPromise(result)) {
        return result.catch(function(e) {
          errorHandler.handleError(e);
          throw e;
        });
      }
      return result;
    } catch (e) {
      errorHandler.handleError(e);
      throw e;
    }
  }
  var PlatformRef_ = (function(_super) {
    __extends$3(PlatformRef_, _super);
    function PlatformRef_(_injector) {
      _super.call(this);
      this._injector = _injector;
      this._modules = [];
      this._destroyListeners = [];
      this._destroyed = false;
    }
    PlatformRef_.prototype.onDestroy = function(callback) {
      this._destroyListeners.push(callback);
    };
    Object.defineProperty(PlatformRef_.prototype, "injector", {
      get: function() {
        return this._injector;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PlatformRef_.prototype, "destroyed", {
      get: function() {
        return this._destroyed;
      },
      enumerable: true,
      configurable: true
    });
    PlatformRef_.prototype.destroy = function() {
      if (this._destroyed) {
        throw new Error('The platform has already been destroyed!');
      }
      this._modules.slice().forEach(function(module) {
        return module.destroy();
      });
      this._destroyListeners.forEach(function(listener) {
        return listener();
      });
      this._destroyed = true;
    };
    PlatformRef_.prototype.bootstrapModuleFactory = function(moduleFactory) {
      return this._bootstrapModuleFactoryWithZone(moduleFactory, null);
    };
    PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function(moduleFactory, ngZone) {
      var _this = this;
      if (!ngZone)
        ngZone = new NgZone({enableLongStackTrace: isDevMode()});
      return ngZone.run(function() {
        var ngZoneInjector = ReflectiveInjector.resolveAndCreate([{
          provide: NgZone,
          useValue: ngZone
        }], _this.injector);
        var moduleRef = moduleFactory.create(ngZoneInjector);
        var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
        if (!exceptionHandler) {
          throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
        }
        moduleRef.onDestroy(function() {
          return ListWrapper.remove(_this._modules, moduleRef);
        });
        ngZone.onError.subscribe({next: function(error) {
            exceptionHandler.handleError(error);
          }});
        return _callAndReportToErrorHandler(exceptionHandler, function() {
          var initStatus = moduleRef.injector.get(ApplicationInitStatus);
          return initStatus.donePromise.then(function() {
            _this._moduleDoBootstrap(moduleRef);
            return moduleRef;
          });
        });
      });
    };
    PlatformRef_.prototype.bootstrapModule = function(moduleType, compilerOptions) {
      if (compilerOptions === void 0) {
        compilerOptions = [];
      }
      return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);
    };
    PlatformRef_.prototype._bootstrapModuleWithZone = function(moduleType, compilerOptions, ngZone, componentFactoryCallback) {
      var _this = this;
      if (compilerOptions === void 0) {
        compilerOptions = [];
      }
      var compilerFactory = this.injector.get(CompilerFactory);
      var compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);
      if (componentFactoryCallback) {
        return compiler.compileModuleAndAllComponentsAsync(moduleType).then(function(_a) {
          var ngModuleFactory = _a.ngModuleFactory,
              componentFactories = _a.componentFactories;
          componentFactoryCallback(componentFactories);
          return _this._bootstrapModuleFactoryWithZone(ngModuleFactory, ngZone);
        });
      }
      return compiler.compileModuleAsync(moduleType).then(function(moduleFactory) {
        return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone);
      });
    };
    PlatformRef_.prototype._moduleDoBootstrap = function(moduleRef) {
      var appRef = moduleRef.injector.get(ApplicationRef);
      if (moduleRef.bootstrapFactories.length > 0) {
        moduleRef.bootstrapFactories.forEach(function(compFactory) {
          return appRef.bootstrap(compFactory);
        });
      } else if (moduleRef.instance.ngDoBootstrap) {
        moduleRef.instance.ngDoBootstrap(appRef);
      } else {
        throw new Error(("The module " + stringify(moduleRef.instance.constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ") + "Please define one of these.");
      }
    };
    PlatformRef_.decorators = [{type: Injectable}];
    PlatformRef_.ctorParameters = [{type: Injector}];
    return PlatformRef_;
  }(PlatformRef));
  var ApplicationRef = (function() {
    function ApplicationRef() {}
    Object.defineProperty(ApplicationRef.prototype, "componentTypes", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    ;
    Object.defineProperty(ApplicationRef.prototype, "components", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    ;
    return ApplicationRef;
  }());
  var ApplicationRef_ = (function(_super) {
    __extends$3(ApplicationRef_, _super);
    function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {
      var _this = this;
      _super.call(this);
      this._zone = _zone;
      this._console = _console;
      this._injector = _injector;
      this._exceptionHandler = _exceptionHandler;
      this._componentFactoryResolver = _componentFactoryResolver;
      this._initStatus = _initStatus;
      this._testabilityRegistry = _testabilityRegistry;
      this._testability = _testability;
      this._bootstrapListeners = [];
      this._rootComponents = [];
      this._rootComponentTypes = [];
      this._changeDetectorRefs = [];
      this._runningTick = false;
      this._enforceNoNewChanges = false;
      this._enforceNoNewChanges = isDevMode();
      this._zone.onMicrotaskEmpty.subscribe({next: function() {
          _this._zone.run(function() {
            _this.tick();
          });
        }});
    }
    ApplicationRef_.prototype.registerChangeDetector = function(changeDetector) {
      this._changeDetectorRefs.push(changeDetector);
    };
    ApplicationRef_.prototype.unregisterChangeDetector = function(changeDetector) {
      ListWrapper.remove(this._changeDetectorRefs, changeDetector);
    };
    ApplicationRef_.prototype.bootstrap = function(componentOrFactory) {
      var _this = this;
      if (!this._initStatus.done) {
        throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
      }
      var componentFactory;
      if (componentOrFactory instanceof ComponentFactory) {
        componentFactory = componentOrFactory;
      } else {
        componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
      }
      this._rootComponentTypes.push(componentFactory.componentType);
      var compRef = componentFactory.create(this._injector, [], componentFactory.selector);
      compRef.onDestroy(function() {
        _this._unloadComponent(compRef);
      });
      var testability = compRef.injector.get(Testability, null);
      if (testability) {
        compRef.injector.get(TestabilityRegistry).registerApplication(compRef.location.nativeElement, testability);
      }
      this._loadComponent(compRef);
      if (isDevMode()) {
        this._console.log("Angular 2 is running in the development mode. Call enableProdMode() to enable the production mode.");
      }
      return compRef;
    };
    ApplicationRef_.prototype._loadComponent = function(componentRef) {
      this._changeDetectorRefs.push(componentRef.changeDetectorRef);
      this.tick();
      this._rootComponents.push(componentRef);
      var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);
      listeners.forEach(function(listener) {
        return listener(componentRef);
      });
    };
    ApplicationRef_.prototype._unloadComponent = function(componentRef) {
      if (this._rootComponents.indexOf(componentRef) == -1) {
        return;
      }
      this.unregisterChangeDetector(componentRef.changeDetectorRef);
      ListWrapper.remove(this._rootComponents, componentRef);
    };
    ApplicationRef_.prototype.tick = function() {
      if (this._runningTick) {
        throw new Error('ApplicationRef.tick is called recursively');
      }
      var scope = ApplicationRef_._tickScope();
      try {
        this._runningTick = true;
        this._changeDetectorRefs.forEach(function(detector) {
          return detector.detectChanges();
        });
        if (this._enforceNoNewChanges) {
          this._changeDetectorRefs.forEach(function(detector) {
            return detector.checkNoChanges();
          });
        }
      } finally {
        this._runningTick = false;
        wtfLeave(scope);
      }
    };
    ApplicationRef_.prototype.ngOnDestroy = function() {
      this._rootComponents.slice().forEach(function(component) {
        return component.destroy();
      });
    };
    Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
      get: function() {
        return this._rootComponentTypes;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ApplicationRef_.prototype, "components", {
      get: function() {
        return this._rootComponents;
      },
      enumerable: true,
      configurable: true
    });
    ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');
    ApplicationRef_.decorators = [{type: Injectable}];
    ApplicationRef_.ctorParameters = [{type: NgZone}, {type: Console}, {type: Injector}, {type: ErrorHandler}, {type: ComponentFactoryResolver}, {type: ApplicationInitStatus}, {
      type: TestabilityRegistry,
      decorators: [{type: Optional}]
    }, {
      type: Testability,
      decorators: [{type: Optional}]
    }];
    return ApplicationRef_;
  }(ApplicationRef));
  var __extends$9 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var NgModuleRef = (function() {
    function NgModuleRef() {}
    Object.defineProperty(NgModuleRef.prototype, "injector", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModuleRef.prototype, "componentFactoryResolver", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModuleRef.prototype, "instance", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    return NgModuleRef;
  }());
  var NgModuleFactory = (function() {
    function NgModuleFactory(_injectorClass, _moduleType) {
      this._injectorClass = _injectorClass;
      this._moduleType = _moduleType;
    }
    Object.defineProperty(NgModuleFactory.prototype, "moduleType", {
      get: function() {
        return this._moduleType;
      },
      enumerable: true,
      configurable: true
    });
    NgModuleFactory.prototype.create = function(parentInjector) {
      if (!parentInjector) {
        parentInjector = Injector.NULL;
      }
      var instance = new this._injectorClass(parentInjector);
      instance.create();
      return instance;
    };
    return NgModuleFactory;
  }());
  var _UNDEFINED = new Object();
  var NgModuleInjector = (function(_super) {
    __extends$9(NgModuleInjector, _super);
    function NgModuleInjector(parent, factories, bootstrapFactories) {
      _super.call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL));
      this.parent = parent;
      this.bootstrapFactories = bootstrapFactories;
      this._destroyListeners = [];
      this._destroyed = false;
    }
    NgModuleInjector.prototype.create = function() {
      this.instance = this.createInternal();
    };
    NgModuleInjector.prototype.get = function(token, notFoundValue) {
      if (notFoundValue === void 0) {
        notFoundValue = THROW_IF_NOT_FOUND;
      }
      if (token === Injector || token === ComponentFactoryResolver) {
        return this;
      }
      var result = this.getInternal(token, _UNDEFINED);
      return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
    };
    Object.defineProperty(NgModuleInjector.prototype, "injector", {
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", {
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    NgModuleInjector.prototype.destroy = function() {
      if (this._destroyed) {
        throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
      }
      this._destroyed = true;
      this.destroyInternal();
      this._destroyListeners.forEach(function(listener) {
        return listener();
      });
    };
    NgModuleInjector.prototype.onDestroy = function(callback) {
      this._destroyListeners.push(callback);
    };
    return NgModuleInjector;
  }(CodegenComponentFactoryResolver));
  var NgModuleFactoryLoader = (function() {
    function NgModuleFactoryLoader() {}
    return NgModuleFactoryLoader;
  }());
  var moduleFactories = new Map();
  function registerModuleFactory(id, factory) {
    var existing = moduleFactories.get(id);
    if (existing) {
      throw new Error("Duplicate module registered for " + id + " - " + existing.moduleType.name + " vs " + factory.moduleType.name);
    }
    moduleFactories.set(id, factory);
  }
  function getModuleFactory(id) {
    var factory = moduleFactories.get(id);
    if (!factory)
      throw new Error("No module with ID " + id + " loaded");
    return factory;
  }
  var QueryList = (function() {
    function QueryList() {
      this._dirty = true;
      this._results = [];
      this._emitter = new EventEmitter();
    }
    Object.defineProperty(QueryList.prototype, "changes", {
      get: function() {
        return this._emitter;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(QueryList.prototype, "length", {
      get: function() {
        return this._results.length;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(QueryList.prototype, "first", {
      get: function() {
        return this._results[0];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(QueryList.prototype, "last", {
      get: function() {
        return this._results[this.length - 1];
      },
      enumerable: true,
      configurable: true
    });
    QueryList.prototype.map = function(fn) {
      return this._results.map(fn);
    };
    QueryList.prototype.filter = function(fn) {
      return this._results.filter(fn);
    };
    QueryList.prototype.find = function(fn) {
      return this._results.find(fn);
    };
    QueryList.prototype.reduce = function(fn, init) {
      return this._results.reduce(fn, init);
    };
    QueryList.prototype.forEach = function(fn) {
      this._results.forEach(fn);
    };
    QueryList.prototype.some = function(fn) {
      return this._results.some(fn);
    };
    QueryList.prototype.toArray = function() {
      return this._results.slice();
    };
    QueryList.prototype[getSymbolIterator()] = function() {
      return this._results[getSymbolIterator()]();
    };
    QueryList.prototype.toString = function() {
      return this._results.toString();
    };
    QueryList.prototype.reset = function(res) {
      this._results = ListWrapper.flatten(res);
      this._dirty = false;
    };
    QueryList.prototype.notifyOnChanges = function() {
      this._emitter.emit(this);
    };
    QueryList.prototype.setDirty = function() {
      this._dirty = true;
    };
    Object.defineProperty(QueryList.prototype, "dirty", {
      get: function() {
        return this._dirty;
      },
      enumerable: true,
      configurable: true
    });
    return QueryList;
  }());
  var _SEPARATOR = '#';
  var FACTORY_CLASS_SUFFIX = 'NgFactory';
  var SystemJsNgModuleLoaderConfig = (function() {
    function SystemJsNgModuleLoaderConfig() {}
    return SystemJsNgModuleLoaderConfig;
  }());
  var DEFAULT_CONFIG = {
    factoryPathPrefix: '',
    factoryPathSuffix: '.ngfactory'
  };
  var SystemJsNgModuleLoader = (function() {
    function SystemJsNgModuleLoader(_compiler, config) {
      this._compiler = _compiler;
      this._config = config || DEFAULT_CONFIG;
    }
    SystemJsNgModuleLoader.prototype.load = function(path) {
      var offlineMode = this._compiler instanceof Compiler;
      return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
    };
    SystemJsNgModuleLoader.prototype.loadAndCompile = function(path) {
      var _this = this;
      var _a = path.split(_SEPARATOR),
          module = _a[0],
          exportName = _a[1];
      if (exportName === undefined) {
        exportName = 'default';
      }
      return System.import(module).then(function(module) {
        return module[exportName];
      }).then(function(type) {
        return checkNotEmpty(type, module, exportName);
      }).then(function(type) {
        return _this._compiler.compileModuleAsync(type);
      });
    };
    SystemJsNgModuleLoader.prototype.loadFactory = function(path) {
      var _a = path.split(_SEPARATOR),
          module = _a[0],
          exportName = _a[1];
      var factoryClassSuffix = FACTORY_CLASS_SUFFIX;
      if (exportName === undefined) {
        exportName = 'default';
        factoryClassSuffix = '';
      }
      return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix).then(function(module) {
        return module[exportName + factoryClassSuffix];
      }).then(function(factory) {
        return checkNotEmpty(factory, module, exportName);
      });
    };
    SystemJsNgModuleLoader.decorators = [{type: Injectable}];
    SystemJsNgModuleLoader.ctorParameters = [{type: Compiler}, {
      type: SystemJsNgModuleLoaderConfig,
      decorators: [{type: Optional}]
    }];
    return SystemJsNgModuleLoader;
  }());
  function checkNotEmpty(value, modulePath, exportName) {
    if (!value) {
      throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
    }
    return value;
  }
  var __extends$10 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var TemplateRef = (function() {
    function TemplateRef() {}
    Object.defineProperty(TemplateRef.prototype, "elementRef", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    return TemplateRef;
  }());
  var TemplateRef_ = (function(_super) {
    __extends$10(TemplateRef_, _super);
    function TemplateRef_(_parentView, _nodeIndex, _nativeElement) {
      _super.call(this);
      this._parentView = _parentView;
      this._nodeIndex = _nodeIndex;
      this._nativeElement = _nativeElement;
    }
    TemplateRef_.prototype.createEmbeddedView = function(context) {
      var view = this._parentView.createEmbeddedViewInternal(this._nodeIndex);
      view.create(context || {});
      return view.ref;
    };
    Object.defineProperty(TemplateRef_.prototype, "elementRef", {
      get: function() {
        return new ElementRef(this._nativeElement);
      },
      enumerable: true,
      configurable: true
    });
    return TemplateRef_;
  }(TemplateRef));
  var ViewContainerRef = (function() {
    function ViewContainerRef() {}
    Object.defineProperty(ViewContainerRef.prototype, "element", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainerRef.prototype, "injector", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainerRef.prototype, "parentInjector", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainerRef.prototype, "length", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    ;
    return ViewContainerRef;
  }());
  var ViewContainerRef_ = (function() {
    function ViewContainerRef_(_element) {
      this._element = _element;
      this._createComponentInContainerScope = wtfCreateScope('ViewContainerRef#createComponent()');
      this._insertScope = wtfCreateScope('ViewContainerRef#insert()');
      this._removeScope = wtfCreateScope('ViewContainerRef#remove()');
      this._detachScope = wtfCreateScope('ViewContainerRef#detach()');
    }
    ViewContainerRef_.prototype.get = function(index) {
      return this._element.nestedViews[index].ref;
    };
    Object.defineProperty(ViewContainerRef_.prototype, "length", {
      get: function() {
        var views = this._element.nestedViews;
        return isPresent(views) ? views.length : 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainerRef_.prototype, "element", {
      get: function() {
        return this._element.elementRef;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainerRef_.prototype, "injector", {
      get: function() {
        return this._element.injector;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
      get: function() {
        return this._element.parentInjector;
      },
      enumerable: true,
      configurable: true
    });
    ViewContainerRef_.prototype.createEmbeddedView = function(templateRef, context, index) {
      if (context === void 0) {
        context = null;
      }
      if (index === void 0) {
        index = -1;
      }
      var viewRef = templateRef.createEmbeddedView(context);
      this.insert(viewRef, index);
      return viewRef;
    };
    ViewContainerRef_.prototype.createComponent = function(componentFactory, index, injector, projectableNodes) {
      if (index === void 0) {
        index = -1;
      }
      if (injector === void 0) {
        injector = null;
      }
      if (projectableNodes === void 0) {
        projectableNodes = null;
      }
      var s = this._createComponentInContainerScope();
      var contextInjector = injector || this._element.parentInjector;
      var componentRef = componentFactory.create(contextInjector, projectableNodes);
      this.insert(componentRef.hostView, index);
      return wtfLeave(s, componentRef);
    };
    ViewContainerRef_.prototype.insert = function(viewRef, index) {
      if (index === void 0) {
        index = -1;
      }
      var s = this._insertScope();
      if (index == -1)
        index = this.length;
      var viewRef_ = viewRef;
      this._element.attachView(viewRef_.internalView, index);
      return wtfLeave(s, viewRef_);
    };
    ViewContainerRef_.prototype.move = function(viewRef, currentIndex) {
      var s = this._insertScope();
      if (currentIndex == -1)
        return;
      var viewRef_ = viewRef;
      this._element.moveView(viewRef_.internalView, currentIndex);
      return wtfLeave(s, viewRef_);
    };
    ViewContainerRef_.prototype.indexOf = function(viewRef) {
      return this._element.nestedViews.indexOf(viewRef.internalView);
    };
    ViewContainerRef_.prototype.remove = function(index) {
      if (index === void 0) {
        index = -1;
      }
      var s = this._removeScope();
      if (index == -1)
        index = this.length - 1;
      var view = this._element.detachView(index);
      view.destroy();
      wtfLeave(s);
    };
    ViewContainerRef_.prototype.detach = function(index) {
      if (index === void 0) {
        index = -1;
      }
      var s = this._detachScope();
      if (index == -1)
        index = this.length - 1;
      var view = this._element.detachView(index);
      return wtfLeave(s, view.ref);
    };
    ViewContainerRef_.prototype.clear = function() {
      for (var i = this.length - 1; i >= 0; i--) {
        this.remove(i);
      }
    };
    return ViewContainerRef_;
  }());
  var _queuedAnimations = [];
  function queueAnimationGlobally(player) {
    _queuedAnimations.push(player);
  }
  function triggerQueuedAnimations() {
    if (_queuedAnimations.length) {
      Promise.resolve(null).then(_triggerAnimations);
    }
  }
  function _triggerAnimations() {
    for (var i = 0; i < _queuedAnimations.length; i++) {
      var player = _queuedAnimations[i];
      player.play();
    }
    _queuedAnimations = [];
  }
  var __extends$11 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ViewRef = (function() {
    function ViewRef() {}
    Object.defineProperty(ViewRef.prototype, "destroyed", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    return ViewRef;
  }());
  var EmbeddedViewRef = (function(_super) {
    __extends$11(EmbeddedViewRef, _super);
    function EmbeddedViewRef() {
      _super.apply(this, arguments);
    }
    Object.defineProperty(EmbeddedViewRef.prototype, "context", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(EmbeddedViewRef.prototype, "rootNodes", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    ;
    return EmbeddedViewRef;
  }(ViewRef));
  var ViewRef_ = (function() {
    function ViewRef_(_view) {
      this._view = _view;
      this._view = _view;
      this._originalMode = this._view.cdMode;
    }
    Object.defineProperty(ViewRef_.prototype, "internalView", {
      get: function() {
        return this._view;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "rootNodes", {
      get: function() {
        return this._view.flatRootNodes;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "context", {
      get: function() {
        return this._view.context;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "destroyed", {
      get: function() {
        return this._view.destroyed;
      },
      enumerable: true,
      configurable: true
    });
    ViewRef_.prototype.markForCheck = function() {
      this._view.markPathToRootAsCheckOnce();
    };
    ViewRef_.prototype.detach = function() {
      this._view.cdMode = ChangeDetectorStatus.Detached;
    };
    ViewRef_.prototype.detectChanges = function() {
      this._view.detectChanges(false);
      triggerQueuedAnimations();
    };
    ViewRef_.prototype.checkNoChanges = function() {
      this._view.detectChanges(true);
    };
    ViewRef_.prototype.reattach = function() {
      this._view.cdMode = this._originalMode;
      this.markForCheck();
    };
    ViewRef_.prototype.onDestroy = function(callback) {
      if (!this._view.disposables) {
        this._view.disposables = [];
      }
      this._view.disposables.push(callback);
    };
    ViewRef_.prototype.destroy = function() {
      this._view.detachAndDestroy();
    };
    return ViewRef_;
  }());
  var __extends$12 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var EventListener = (function() {
    function EventListener(name, callback) {
      this.name = name;
      this.callback = callback;
    }
    ;
    return EventListener;
  }());
  var DebugNode = (function() {
    function DebugNode(nativeNode, parent, _debugInfo) {
      this._debugInfo = _debugInfo;
      this.nativeNode = nativeNode;
      if (parent && parent instanceof DebugElement) {
        parent.addChild(this);
      } else {
        this.parent = null;
      }
      this.listeners = [];
    }
    Object.defineProperty(DebugNode.prototype, "injector", {
      get: function() {
        return this._debugInfo ? this._debugInfo.injector : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "componentInstance", {
      get: function() {
        return this._debugInfo ? this._debugInfo.component : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "context", {
      get: function() {
        return this._debugInfo ? this._debugInfo.context : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "references", {
      get: function() {
        return this._debugInfo ? this._debugInfo.references : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "providerTokens", {
      get: function() {
        return this._debugInfo ? this._debugInfo.providerTokens : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "source", {
      get: function() {
        return this._debugInfo ? this._debugInfo.source : null;
      },
      enumerable: true,
      configurable: true
    });
    return DebugNode;
  }());
  var DebugElement = (function(_super) {
    __extends$12(DebugElement, _super);
    function DebugElement(nativeNode, parent, _debugInfo) {
      _super.call(this, nativeNode, parent, _debugInfo);
      this.properties = {};
      this.attributes = {};
      this.classes = {};
      this.styles = {};
      this.childNodes = [];
      this.nativeElement = nativeNode;
    }
    DebugElement.prototype.addChild = function(child) {
      if (child) {
        this.childNodes.push(child);
        child.parent = this;
      }
    };
    DebugElement.prototype.removeChild = function(child) {
      var childIndex = this.childNodes.indexOf(child);
      if (childIndex !== -1) {
        child.parent = null;
        this.childNodes.splice(childIndex, 1);
      }
    };
    DebugElement.prototype.insertChildrenAfter = function(child, newChildren) {
      var siblingIndex = this.childNodes.indexOf(child);
      if (siblingIndex !== -1) {
        var previousChildren = this.childNodes.slice(0, siblingIndex + 1);
        var nextChildren = this.childNodes.slice(siblingIndex + 1);
        this.childNodes = previousChildren.concat(newChildren, nextChildren);
        for (var i = 0; i < newChildren.length; ++i) {
          var newChild = newChildren[i];
          if (newChild.parent) {
            newChild.parent.removeChild(newChild);
          }
          newChild.parent = this;
        }
      }
    };
    DebugElement.prototype.query = function(predicate) {
      var results = this.queryAll(predicate);
      return results[0] || null;
    };
    DebugElement.prototype.queryAll = function(predicate) {
      var matches = [];
      _queryElementChildren(this, predicate, matches);
      return matches;
    };
    DebugElement.prototype.queryAllNodes = function(predicate) {
      var matches = [];
      _queryNodeChildren(this, predicate, matches);
      return matches;
    };
    Object.defineProperty(DebugElement.prototype, "children", {
      get: function() {
        return this.childNodes.filter(function(node) {
          return node instanceof DebugElement;
        });
      },
      enumerable: true,
      configurable: true
    });
    DebugElement.prototype.triggerEventHandler = function(eventName, eventObj) {
      this.listeners.forEach(function(listener) {
        if (listener.name == eventName) {
          listener.callback(eventObj);
        }
      });
    };
    return DebugElement;
  }(DebugNode));
  function asNativeElements(debugEls) {
    return debugEls.map(function(el) {
      return el.nativeElement;
    });
  }
  function _queryElementChildren(element, predicate, matches) {
    element.childNodes.forEach(function(node) {
      if (node instanceof DebugElement) {
        if (predicate(node)) {
          matches.push(node);
        }
        _queryElementChildren(node, predicate, matches);
      }
    });
  }
  function _queryNodeChildren(parentNode, predicate, matches) {
    if (parentNode instanceof DebugElement) {
      parentNode.childNodes.forEach(function(node) {
        if (predicate(node)) {
          matches.push(node);
        }
        if (node instanceof DebugElement) {
          _queryNodeChildren(node, predicate, matches);
        }
      });
    }
  }
  var _nativeNodeToDebugNode = new Map();
  function getDebugNode(nativeNode) {
    return _nativeNodeToDebugNode.get(nativeNode);
  }
  function indexDebugNode(node) {
    _nativeNodeToDebugNode.set(node.nativeNode, node);
  }
  function removeDebugNodeFromIndex(node) {
    _nativeNodeToDebugNode.delete(node.nativeNode);
  }
  function _reflector() {
    return reflector;
  }
  var _CORE_PLATFORM_PROVIDERS = [PlatformRef_, {
    provide: PlatformRef,
    useExisting: PlatformRef_
  }, {
    provide: Reflector,
    useFactory: _reflector,
    deps: []
  }, {
    provide: ReflectorReader,
    useExisting: Reflector
  }, TestabilityRegistry, Console];
  var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);
  var LOCALE_ID = new OpaqueToken('LocaleId');
  var TRANSLATIONS = new OpaqueToken('Translations');
  var TRANSLATIONS_FORMAT = new OpaqueToken('TranslationsFormat');
  function _iterableDiffersFactory() {
    return defaultIterableDiffers;
  }
  function _keyValueDiffersFactory() {
    return defaultKeyValueDiffers;
  }
  var ApplicationModule = (function() {
    function ApplicationModule() {}
    ApplicationModule.decorators = [{
      type: NgModule,
      args: [{providers: [ApplicationRef_, {
          provide: ApplicationRef,
          useExisting: ApplicationRef_
        }, ApplicationInitStatus, Compiler, APP_ID_RANDOM_PROVIDER, ViewUtils, {
          provide: IterableDiffers,
          useFactory: _iterableDiffersFactory
        }, {
          provide: KeyValueDiffers,
          useFactory: _keyValueDiffersFactory
        }, {
          provide: LOCALE_ID,
          useValue: 'en-US'
        }]}]
    }];
    ApplicationModule.ctorParameters = [];
    return ApplicationModule;
  }());
  var FILL_STYLE_FLAG = 'true';
  var ANY_STATE = '*';
  var DEFAULT_STATE = '*';
  var EMPTY_STATE = 'void';
  var AnimationGroupPlayer = (function() {
    function AnimationGroupPlayer(_players) {
      var _this = this;
      this._players = _players;
      this._onDoneFns = [];
      this._onStartFns = [];
      this._finished = false;
      this._started = false;
      this._destroyed = false;
      this.parentPlayer = null;
      var count = 0;
      var total = this._players.length;
      if (total == 0) {
        scheduleMicroTask(function() {
          return _this._onFinish();
        });
      } else {
        this._players.forEach(function(player) {
          player.parentPlayer = _this;
          player.onDone(function() {
            if (++count >= total) {
              _this._onFinish();
            }
          });
        });
      }
    }
    AnimationGroupPlayer.prototype._onFinish = function() {
      if (!this._finished) {
        this._finished = true;
        this._onDoneFns.forEach(function(fn) {
          return fn();
        });
        this._onDoneFns = [];
      }
    };
    AnimationGroupPlayer.prototype.init = function() {
      this._players.forEach(function(player) {
        return player.init();
      });
    };
    AnimationGroupPlayer.prototype.onStart = function(fn) {
      this._onStartFns.push(fn);
    };
    AnimationGroupPlayer.prototype.onDone = function(fn) {
      this._onDoneFns.push(fn);
    };
    AnimationGroupPlayer.prototype.hasStarted = function() {
      return this._started;
    };
    AnimationGroupPlayer.prototype.play = function() {
      if (!isPresent(this.parentPlayer)) {
        this.init();
      }
      if (!this.hasStarted()) {
        this._onStartFns.forEach(function(fn) {
          return fn();
        });
        this._onStartFns = [];
        this._started = true;
      }
      this._players.forEach(function(player) {
        return player.play();
      });
    };
    AnimationGroupPlayer.prototype.pause = function() {
      this._players.forEach(function(player) {
        return player.pause();
      });
    };
    AnimationGroupPlayer.prototype.restart = function() {
      this._players.forEach(function(player) {
        return player.restart();
      });
    };
    AnimationGroupPlayer.prototype.finish = function() {
      this._onFinish();
      this._players.forEach(function(player) {
        return player.finish();
      });
    };
    AnimationGroupPlayer.prototype.destroy = function() {
      if (!this._destroyed) {
        this._onFinish();
        this._players.forEach(function(player) {
          return player.destroy();
        });
        this._destroyed = true;
      }
    };
    AnimationGroupPlayer.prototype.reset = function() {
      this._players.forEach(function(player) {
        return player.reset();
      });
      this._destroyed = false;
      this._finished = false;
      this._started = false;
    };
    AnimationGroupPlayer.prototype.setPosition = function(p) {
      this._players.forEach(function(player) {
        player.setPosition(p);
      });
    };
    AnimationGroupPlayer.prototype.getPosition = function() {
      var min = 0;
      this._players.forEach(function(player) {
        var p = player.getPosition();
        min = Math.min(p, min);
      });
      return min;
    };
    Object.defineProperty(AnimationGroupPlayer.prototype, "players", {
      get: function() {
        return this._players;
      },
      enumerable: true,
      configurable: true
    });
    return AnimationGroupPlayer;
  }());
  var AnimationKeyframe = (function() {
    function AnimationKeyframe(offset, styles) {
      this.offset = offset;
      this.styles = styles;
    }
    return AnimationKeyframe;
  }());
  var AnimationPlayer = (function() {
    function AnimationPlayer() {}
    Object.defineProperty(AnimationPlayer.prototype, "parentPlayer", {
      get: function() {
        throw new Error('NOT IMPLEMENTED: Base Class');
      },
      set: function(player) {
        throw new Error('NOT IMPLEMENTED: Base Class');
      },
      enumerable: true,
      configurable: true
    });
    return AnimationPlayer;
  }());
  var NoOpAnimationPlayer = (function() {
    function NoOpAnimationPlayer() {
      var _this = this;
      this._onDoneFns = [];
      this._onStartFns = [];
      this._started = false;
      this.parentPlayer = null;
      scheduleMicroTask(function() {
        return _this._onFinish();
      });
    }
    NoOpAnimationPlayer.prototype._onFinish = function() {
      this._onDoneFns.forEach(function(fn) {
        return fn();
      });
      this._onDoneFns = [];
    };
    NoOpAnimationPlayer.prototype.onStart = function(fn) {
      this._onStartFns.push(fn);
    };
    NoOpAnimationPlayer.prototype.onDone = function(fn) {
      this._onDoneFns.push(fn);
    };
    NoOpAnimationPlayer.prototype.hasStarted = function() {
      return this._started;
    };
    NoOpAnimationPlayer.prototype.init = function() {};
    NoOpAnimationPlayer.prototype.play = function() {
      if (!this.hasStarted()) {
        this._onStartFns.forEach(function(fn) {
          return fn();
        });
        this._onStartFns = [];
      }
      this._started = true;
    };
    NoOpAnimationPlayer.prototype.pause = function() {};
    NoOpAnimationPlayer.prototype.restart = function() {};
    NoOpAnimationPlayer.prototype.finish = function() {
      this._onFinish();
    };
    NoOpAnimationPlayer.prototype.destroy = function() {};
    NoOpAnimationPlayer.prototype.reset = function() {};
    NoOpAnimationPlayer.prototype.setPosition = function(p) {};
    NoOpAnimationPlayer.prototype.getPosition = function() {
      return 0;
    };
    return NoOpAnimationPlayer;
  }());
  var AnimationSequencePlayer = (function() {
    function AnimationSequencePlayer(_players) {
      var _this = this;
      this._players = _players;
      this._currentIndex = 0;
      this._onDoneFns = [];
      this._onStartFns = [];
      this._finished = false;
      this._started = false;
      this._destroyed = false;
      this.parentPlayer = null;
      this._players.forEach(function(player) {
        player.parentPlayer = _this;
      });
      this._onNext(false);
    }
    AnimationSequencePlayer.prototype._onNext = function(start) {
      var _this = this;
      if (this._finished)
        return;
      if (this._players.length == 0) {
        this._activePlayer = new NoOpAnimationPlayer();
        scheduleMicroTask(function() {
          return _this._onFinish();
        });
      } else if (this._currentIndex >= this._players.length) {
        this._activePlayer = new NoOpAnimationPlayer();
        this._onFinish();
      } else {
        var player = this._players[this._currentIndex++];
        player.onDone(function() {
          return _this._onNext(true);
        });
        this._activePlayer = player;
        if (start) {
          player.play();
        }
      }
    };
    AnimationSequencePlayer.prototype._onFinish = function() {
      if (!this._finished) {
        this._finished = true;
        this._onDoneFns.forEach(function(fn) {
          return fn();
        });
        this._onDoneFns = [];
      }
    };
    AnimationSequencePlayer.prototype.init = function() {
      this._players.forEach(function(player) {
        return player.init();
      });
    };
    AnimationSequencePlayer.prototype.onStart = function(fn) {
      this._onStartFns.push(fn);
    };
    AnimationSequencePlayer.prototype.onDone = function(fn) {
      this._onDoneFns.push(fn);
    };
    AnimationSequencePlayer.prototype.hasStarted = function() {
      return this._started;
    };
    AnimationSequencePlayer.prototype.play = function() {
      if (!isPresent(this.parentPlayer)) {
        this.init();
      }
      if (!this.hasStarted()) {
        this._onStartFns.forEach(function(fn) {
          return fn();
        });
        this._onStartFns = [];
        this._started = true;
      }
      this._activePlayer.play();
    };
    AnimationSequencePlayer.prototype.pause = function() {
      this._activePlayer.pause();
    };
    AnimationSequencePlayer.prototype.restart = function() {
      this.reset();
      if (this._players.length > 0) {
        this._players[0].restart();
      }
    };
    AnimationSequencePlayer.prototype.reset = function() {
      this._players.forEach(function(player) {
        return player.reset();
      });
      this._destroyed = false;
      this._finished = false;
      this._started = false;
    };
    AnimationSequencePlayer.prototype.finish = function() {
      this._onFinish();
      this._players.forEach(function(player) {
        return player.finish();
      });
    };
    AnimationSequencePlayer.prototype.destroy = function() {
      if (!this._destroyed) {
        this._onFinish();
        this._players.forEach(function(player) {
          return player.destroy();
        });
        this._destroyed = true;
        this._activePlayer = new NoOpAnimationPlayer();
      }
    };
    AnimationSequencePlayer.prototype.setPosition = function(p) {
      this._players[0].setPosition(p);
    };
    AnimationSequencePlayer.prototype.getPosition = function() {
      return this._players[0].getPosition();
    };
    Object.defineProperty(AnimationSequencePlayer.prototype, "players", {
      get: function() {
        return this._players;
      },
      enumerable: true,
      configurable: true
    });
    return AnimationSequencePlayer;
  }());
  var __extends$13 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AUTO_STYLE = '*';
  var AnimationEntryMetadata = (function() {
    function AnimationEntryMetadata(name, definitions) {
      this.name = name;
      this.definitions = definitions;
    }
    return AnimationEntryMetadata;
  }());
  var AnimationStateMetadata = (function() {
    function AnimationStateMetadata() {}
    return AnimationStateMetadata;
  }());
  var AnimationStateDeclarationMetadata = (function(_super) {
    __extends$13(AnimationStateDeclarationMetadata, _super);
    function AnimationStateDeclarationMetadata(stateNameExpr, styles) {
      _super.call(this);
      this.stateNameExpr = stateNameExpr;
      this.styles = styles;
    }
    return AnimationStateDeclarationMetadata;
  }(AnimationStateMetadata));
  var AnimationStateTransitionMetadata = (function(_super) {
    __extends$13(AnimationStateTransitionMetadata, _super);
    function AnimationStateTransitionMetadata(stateChangeExpr, steps) {
      _super.call(this);
      this.stateChangeExpr = stateChangeExpr;
      this.steps = steps;
    }
    return AnimationStateTransitionMetadata;
  }(AnimationStateMetadata));
  var AnimationMetadata = (function() {
    function AnimationMetadata() {}
    return AnimationMetadata;
  }());
  var AnimationKeyframesSequenceMetadata = (function(_super) {
    __extends$13(AnimationKeyframesSequenceMetadata, _super);
    function AnimationKeyframesSequenceMetadata(steps) {
      _super.call(this);
      this.steps = steps;
    }
    return AnimationKeyframesSequenceMetadata;
  }(AnimationMetadata));
  var AnimationStyleMetadata = (function(_super) {
    __extends$13(AnimationStyleMetadata, _super);
    function AnimationStyleMetadata(styles, offset) {
      if (offset === void 0) {
        offset = null;
      }
      _super.call(this);
      this.styles = styles;
      this.offset = offset;
    }
    return AnimationStyleMetadata;
  }(AnimationMetadata));
  var AnimationAnimateMetadata = (function(_super) {
    __extends$13(AnimationAnimateMetadata, _super);
    function AnimationAnimateMetadata(timings, styles) {
      _super.call(this);
      this.timings = timings;
      this.styles = styles;
    }
    return AnimationAnimateMetadata;
  }(AnimationMetadata));
  var AnimationWithStepsMetadata = (function(_super) {
    __extends$13(AnimationWithStepsMetadata, _super);
    function AnimationWithStepsMetadata() {
      _super.call(this);
    }
    Object.defineProperty(AnimationWithStepsMetadata.prototype, "steps", {
      get: function() {
        throw new Error('NOT IMPLEMENTED: Base Class');
      },
      enumerable: true,
      configurable: true
    });
    return AnimationWithStepsMetadata;
  }(AnimationMetadata));
  var AnimationSequenceMetadata = (function(_super) {
    __extends$13(AnimationSequenceMetadata, _super);
    function AnimationSequenceMetadata(_steps) {
      _super.call(this);
      this._steps = _steps;
    }
    Object.defineProperty(AnimationSequenceMetadata.prototype, "steps", {
      get: function() {
        return this._steps;
      },
      enumerable: true,
      configurable: true
    });
    return AnimationSequenceMetadata;
  }(AnimationWithStepsMetadata));
  var AnimationGroupMetadata = (function(_super) {
    __extends$13(AnimationGroupMetadata, _super);
    function AnimationGroupMetadata(_steps) {
      _super.call(this);
      this._steps = _steps;
    }
    Object.defineProperty(AnimationGroupMetadata.prototype, "steps", {
      get: function() {
        return this._steps;
      },
      enumerable: true,
      configurable: true
    });
    return AnimationGroupMetadata;
  }(AnimationWithStepsMetadata));
  function animate(timing, styles) {
    if (styles === void 0) {
      styles = null;
    }
    var stylesEntry = styles;
    if (!isPresent(stylesEntry)) {
      var EMPTY_STYLE = {};
      stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1);
    }
    return new AnimationAnimateMetadata(timing, stylesEntry);
  }
  function group(steps) {
    return new AnimationGroupMetadata(steps);
  }
  function sequence(steps) {
    return new AnimationSequenceMetadata(steps);
  }
  function style(tokens) {
    var input;
    var offset = null;
    if (typeof tokens === 'string') {
      input = [tokens];
    } else {
      if (Array.isArray(tokens)) {
        input = tokens;
      } else {
        input = [tokens];
      }
      input.forEach(function(entry) {
        var entryOffset = entry['offset'];
        if (isPresent(entryOffset)) {
          offset = offset == null ? parseFloat(entryOffset) : offset;
        }
      });
    }
    return new AnimationStyleMetadata(input, offset);
  }
  function state(stateNameExpr, styles) {
    return new AnimationStateDeclarationMetadata(stateNameExpr, styles);
  }
  function keyframes(steps) {
    return new AnimationKeyframesSequenceMetadata(steps);
  }
  function transition(stateChangeExpr, steps) {
    var animationData = Array.isArray(steps) ? new AnimationSequenceMetadata(steps) : steps;
    return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);
  }
  function trigger(name, animation) {
    return new AnimationEntryMetadata(name, animation);
  }
  function prepareFinalAnimationStyles(previousStyles, newStyles, nullValue) {
    if (nullValue === void 0) {
      nullValue = null;
    }
    var finalStyles = {};
    Object.keys(newStyles).forEach(function(prop) {
      var value = newStyles[prop];
      finalStyles[prop] = value == AUTO_STYLE ? nullValue : value.toString();
    });
    Object.keys(previousStyles).forEach(function(prop) {
      if (!isPresent(finalStyles[prop])) {
        finalStyles[prop] = nullValue;
      }
    });
    return finalStyles;
  }
  function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes) {
    var limit = keyframes.length - 1;
    var firstKeyframe = keyframes[0];
    var flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles);
    var extraFirstKeyframeStyles = {};
    var hasExtraFirstStyles = false;
    Object.keys(collectedStyles).forEach(function(prop) {
      var value = collectedStyles[prop];
      if (!flatenedFirstKeyframeStyles[prop]) {
        flatenedFirstKeyframeStyles[prop] = value;
        extraFirstKeyframeStyles[prop] = value;
        hasExtraFirstStyles = true;
      }
    });
    var keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles);
    var finalKeyframe = keyframes[limit];
    finalKeyframe.styles.styles.unshift(finalStateStyles);
    var flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles);
    var extraFinalKeyframeStyles = {};
    var hasExtraFinalStyles = false;
    Object.keys(keyframeCollectedStyles).forEach(function(prop) {
      if (!isPresent(flatenedFinalKeyframeStyles[prop])) {
        extraFinalKeyframeStyles[prop] = AUTO_STYLE;
        hasExtraFinalStyles = true;
      }
    });
    if (hasExtraFinalStyles) {
      finalKeyframe.styles.styles.push(extraFinalKeyframeStyles);
    }
    Object.keys(flatenedFinalKeyframeStyles).forEach(function(prop) {
      if (!isPresent(flatenedFirstKeyframeStyles[prop])) {
        extraFirstKeyframeStyles[prop] = AUTO_STYLE;
        hasExtraFirstStyles = true;
      }
    });
    if (hasExtraFirstStyles) {
      firstKeyframe.styles.styles.push(extraFirstKeyframeStyles);
    }
    collectAndResolveStyles(collectedStyles, [finalStateStyles]);
    return keyframes;
  }
  function clearStyles(styles) {
    var finalStyles = {};
    Object.keys(styles).forEach(function(key) {
      finalStyles[key] = null;
    });
    return finalStyles;
  }
  function collectAndResolveStyles(collection, styles) {
    return styles.map(function(entry) {
      var stylesObj = {};
      Object.keys(entry).forEach(function(prop) {
        var value = entry[prop];
        if (value == FILL_STYLE_FLAG) {
          value = collection[prop];
          if (!isPresent(value)) {
            value = AUTO_STYLE;
          }
        }
        collection[prop] = value;
        stylesObj[prop] = value;
      });
      return stylesObj;
    });
  }
  function renderStyles(element, renderer, styles) {
    Object.keys(styles).forEach(function(prop) {
      renderer.setElementStyle(element, prop, styles[prop]);
    });
  }
  function flattenStyles(styles) {
    var finalStyles = {};
    styles.forEach(function(entry) {
      Object.keys(entry).forEach(function(prop) {
        finalStyles[prop] = entry[prop];
      });
    });
    return finalStyles;
  }
  var AnimationStyles = (function() {
    function AnimationStyles(styles) {
      this.styles = styles;
    }
    return AnimationStyles;
  }());
  var AnimationTransitionEvent = (function() {
    function AnimationTransitionEvent(_a) {
      var fromState = _a.fromState,
          toState = _a.toState,
          totalTime = _a.totalTime,
          phaseName = _a.phaseName;
      this.fromState = fromState;
      this.toState = toState;
      this.totalTime = totalTime;
      this.phaseName = phaseName;
    }
    return AnimationTransitionEvent;
  }());
  var AnimationTransition = (function() {
    function AnimationTransition(_player, _fromState, _toState, _totalTime) {
      this._player = _player;
      this._fromState = _fromState;
      this._toState = _toState;
      this._totalTime = _totalTime;
    }
    AnimationTransition.prototype._createEvent = function(phaseName) {
      return new AnimationTransitionEvent({
        fromState: this._fromState,
        toState: this._toState,
        totalTime: this._totalTime,
        phaseName: phaseName
      });
    };
    AnimationTransition.prototype.onStart = function(callback) {
      var event = this._createEvent('start');
      this._player.onStart(function() {
        return callback(event);
      });
    };
    AnimationTransition.prototype.onDone = function(callback) {
      var event = this._createEvent('done');
      this._player.onDone(function() {
        return callback(event);
      });
    };
    return AnimationTransition;
  }());
  var DebugDomRootRenderer = (function() {
    function DebugDomRootRenderer(_delegate) {
      this._delegate = _delegate;
    }
    DebugDomRootRenderer.prototype.renderComponent = function(componentProto) {
      return new DebugDomRenderer(this._delegate.renderComponent(componentProto));
    };
    return DebugDomRootRenderer;
  }());
  var DebugDomRenderer = (function() {
    function DebugDomRenderer(_delegate) {
      this._delegate = _delegate;
    }
    DebugDomRenderer.prototype.selectRootElement = function(selectorOrNode, debugInfo) {
      var nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo);
      var debugEl = new DebugElement(nativeEl, null, debugInfo);
      indexDebugNode(debugEl);
      return nativeEl;
    };
    DebugDomRenderer.prototype.createElement = function(parentElement, name, debugInfo) {
      var nativeEl = this._delegate.createElement(parentElement, name, debugInfo);
      var debugEl = new DebugElement(nativeEl, getDebugNode(parentElement), debugInfo);
      debugEl.name = name;
      indexDebugNode(debugEl);
      return nativeEl;
    };
    DebugDomRenderer.prototype.createViewRoot = function(hostElement) {
      return this._delegate.createViewRoot(hostElement);
    };
    DebugDomRenderer.prototype.createTemplateAnchor = function(parentElement, debugInfo) {
      var comment = this._delegate.createTemplateAnchor(parentElement, debugInfo);
      var debugEl = new DebugNode(comment, getDebugNode(parentElement), debugInfo);
      indexDebugNode(debugEl);
      return comment;
    };
    DebugDomRenderer.prototype.createText = function(parentElement, value, debugInfo) {
      var text = this._delegate.createText(parentElement, value, debugInfo);
      var debugEl = new DebugNode(text, getDebugNode(parentElement), debugInfo);
      indexDebugNode(debugEl);
      return text;
    };
    DebugDomRenderer.prototype.projectNodes = function(parentElement, nodes) {
      var debugParent = getDebugNode(parentElement);
      if (isPresent(debugParent) && debugParent instanceof DebugElement) {
        var debugElement_1 = debugParent;
        nodes.forEach(function(node) {
          debugElement_1.addChild(getDebugNode(node));
        });
      }
      this._delegate.projectNodes(parentElement, nodes);
    };
    DebugDomRenderer.prototype.attachViewAfter = function(node, viewRootNodes) {
      var debugNode = getDebugNode(node);
      if (isPresent(debugNode)) {
        var debugParent = debugNode.parent;
        if (viewRootNodes.length > 0 && isPresent(debugParent)) {
          var debugViewRootNodes_1 = [];
          viewRootNodes.forEach(function(rootNode) {
            return debugViewRootNodes_1.push(getDebugNode(rootNode));
          });
          debugParent.insertChildrenAfter(debugNode, debugViewRootNodes_1);
        }
      }
      this._delegate.attachViewAfter(node, viewRootNodes);
    };
    DebugDomRenderer.prototype.detachView = function(viewRootNodes) {
      viewRootNodes.forEach(function(node) {
        var debugNode = getDebugNode(node);
        if (isPresent(debugNode) && isPresent(debugNode.parent)) {
          debugNode.parent.removeChild(debugNode);
        }
      });
      this._delegate.detachView(viewRootNodes);
    };
    DebugDomRenderer.prototype.destroyView = function(hostElement, viewAllNodes) {
      viewAllNodes = viewAllNodes || [];
      viewAllNodes.forEach(function(node) {
        removeDebugNodeFromIndex(getDebugNode(node));
      });
      this._delegate.destroyView(hostElement, viewAllNodes);
    };
    DebugDomRenderer.prototype.listen = function(renderElement, name, callback) {
      var debugEl = getDebugNode(renderElement);
      if (isPresent(debugEl)) {
        debugEl.listeners.push(new EventListener(name, callback));
      }
      return this._delegate.listen(renderElement, name, callback);
    };
    DebugDomRenderer.prototype.listenGlobal = function(target, name, callback) {
      return this._delegate.listenGlobal(target, name, callback);
    };
    DebugDomRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
      var debugEl = getDebugNode(renderElement);
      if (isPresent(debugEl) && debugEl instanceof DebugElement) {
        debugEl.properties[propertyName] = propertyValue;
      }
      this._delegate.setElementProperty(renderElement, propertyName, propertyValue);
    };
    DebugDomRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
      var debugEl = getDebugNode(renderElement);
      if (isPresent(debugEl) && debugEl instanceof DebugElement) {
        debugEl.attributes[attributeName] = attributeValue;
      }
      this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);
    };
    DebugDomRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
      this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);
    };
    DebugDomRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
      var debugEl = getDebugNode(renderElement);
      if (isPresent(debugEl) && debugEl instanceof DebugElement) {
        debugEl.classes[className] = isAdd;
      }
      this._delegate.setElementClass(renderElement, className, isAdd);
    };
    DebugDomRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
      var debugEl = getDebugNode(renderElement);
      if (isPresent(debugEl) && debugEl instanceof DebugElement) {
        debugEl.styles[styleName] = styleValue;
      }
      this._delegate.setElementStyle(renderElement, styleName, styleValue);
    };
    DebugDomRenderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {
      this._delegate.invokeElementMethod(renderElement, methodName, args);
    };
    DebugDomRenderer.prototype.setText = function(renderNode, text) {
      this._delegate.setText(renderNode, text);
    };
    DebugDomRenderer.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
      if (previousPlayers === void 0) {
        previousPlayers = [];
      }
      return this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);
    };
    return DebugDomRenderer;
  }());
  var ViewType;
  (function(ViewType) {
    ViewType[ViewType["HOST"] = 0] = "HOST";
    ViewType[ViewType["COMPONENT"] = 1] = "COMPONENT";
    ViewType[ViewType["EMBEDDED"] = 2] = "EMBEDDED";
  })(ViewType || (ViewType = {}));
  var StaticNodeDebugInfo = (function() {
    function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {
      this.providerTokens = providerTokens;
      this.componentToken = componentToken;
      this.refTokens = refTokens;
    }
    return StaticNodeDebugInfo;
  }());
  var DebugContext = (function() {
    function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {
      this._view = _view;
      this._nodeIndex = _nodeIndex;
      this._tplRow = _tplRow;
      this._tplCol = _tplCol;
    }
    Object.defineProperty(DebugContext.prototype, "_staticNodeInfo", {
      get: function() {
        return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "context", {
      get: function() {
        return this._view.context;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "component", {
      get: function() {
        var staticNodeInfo = this._staticNodeInfo;
        if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {
          return this.injector.get(staticNodeInfo.componentToken);
        }
        return null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "componentRenderElement", {
      get: function() {
        var componentView = this._view;
        while (isPresent(componentView.parentView) && componentView.type !== ViewType.COMPONENT) {
          componentView = componentView.parentView;
        }
        return componentView.parentElement;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "injector", {
      get: function() {
        return this._view.injector(this._nodeIndex);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "renderNode", {
      get: function() {
        if (isPresent(this._nodeIndex) && this._view.allNodes) {
          return this._view.allNodes[this._nodeIndex];
        } else {
          return null;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "providerTokens", {
      get: function() {
        var staticNodeInfo = this._staticNodeInfo;
        return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "source", {
      get: function() {
        return this._view.componentType.templateUrl + ":" + this._tplRow + ":" + this._tplCol;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "references", {
      get: function() {
        var _this = this;
        var varValues = {};
        var staticNodeInfo = this._staticNodeInfo;
        if (isPresent(staticNodeInfo)) {
          var refs_1 = staticNodeInfo.refTokens;
          Object.keys(refs_1).forEach(function(refName) {
            var refToken = refs_1[refName];
            var varValue;
            if (isBlank(refToken)) {
              varValue = _this._view.allNodes ? _this._view.allNodes[_this._nodeIndex] : null;
            } else {
              varValue = _this._view.injectorGet(refToken, _this._nodeIndex, null);
            }
            varValues[refName] = varValue;
          });
        }
        return varValues;
      },
      enumerable: true,
      configurable: true
    });
    return DebugContext;
  }());
  var ViewAnimationMap = (function() {
    function ViewAnimationMap() {
      this._map = new Map();
      this._allPlayers = [];
    }
    ViewAnimationMap.prototype.find = function(element, animationName) {
      var playersByAnimation = this._map.get(element);
      if (isPresent(playersByAnimation)) {
        return playersByAnimation[animationName];
      }
    };
    ViewAnimationMap.prototype.findAllPlayersByElement = function(element) {
      var el = this._map.get(element);
      return el ? Object.keys(el).map(function(k) {
        return el[k];
      }) : [];
    };
    ViewAnimationMap.prototype.set = function(element, animationName, player) {
      var playersByAnimation = this._map.get(element);
      if (!isPresent(playersByAnimation)) {
        playersByAnimation = {};
      }
      var existingEntry = playersByAnimation[animationName];
      if (isPresent(existingEntry)) {
        this.remove(element, animationName);
      }
      playersByAnimation[animationName] = player;
      this._allPlayers.push(player);
      this._map.set(element, playersByAnimation);
    };
    ViewAnimationMap.prototype.getAllPlayers = function() {
      return this._allPlayers;
    };
    ViewAnimationMap.prototype.remove = function(element, animationName) {
      var playersByAnimation = this._map.get(element);
      if (playersByAnimation) {
        var player = playersByAnimation[animationName];
        delete playersByAnimation[animationName];
        var index = this._allPlayers.indexOf(player);
        this._allPlayers.splice(index, 1);
        if (Object.keys(playersByAnimation).length === 0) {
          this._map.delete(element);
        }
      }
    };
    return ViewAnimationMap;
  }());
  var AnimationViewContext = (function() {
    function AnimationViewContext() {
      this._players = new ViewAnimationMap();
    }
    AnimationViewContext.prototype.onAllActiveAnimationsDone = function(callback) {
      var activeAnimationPlayers = this._players.getAllPlayers();
      if (activeAnimationPlayers.length) {
        new AnimationGroupPlayer(activeAnimationPlayers).onDone(function() {
          return callback();
        });
      } else {
        callback();
      }
    };
    AnimationViewContext.prototype.queueAnimation = function(element, animationName, player) {
      queueAnimationGlobally(player);
      this._players.set(element, animationName, player);
    };
    AnimationViewContext.prototype.getAnimationPlayers = function(element, animationName, removeAllAnimations) {
      if (removeAllAnimations === void 0) {
        removeAllAnimations = false;
      }
      var players = [];
      if (removeAllAnimations) {
        this._players.findAllPlayersByElement(element).forEach(function(player) {
          _recursePlayers(player, players);
        });
      } else {
        var currentPlayer = this._players.find(element, animationName);
        if (currentPlayer) {
          _recursePlayers(currentPlayer, players);
        }
      }
      return players;
    };
    return AnimationViewContext;
  }());
  function _recursePlayers(player, collectedPlayers) {
    if ((player instanceof AnimationGroupPlayer) || (player instanceof AnimationSequencePlayer)) {
      player.players.forEach(function(player) {
        return _recursePlayers(player, collectedPlayers);
      });
    } else {
      collectedPlayers.push(player);
    }
  }
  var __extends$15 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ElementInjector = (function(_super) {
    __extends$15(ElementInjector, _super);
    function ElementInjector(_view, _nodeIndex) {
      _super.call(this);
      this._view = _view;
      this._nodeIndex = _nodeIndex;
    }
    ElementInjector.prototype.get = function(token, notFoundValue) {
      if (notFoundValue === void 0) {
        notFoundValue = THROW_IF_NOT_FOUND;
      }
      return this._view.injectorGet(token, this._nodeIndex, notFoundValue);
    };
    return ElementInjector;
  }(Injector));
  var __extends$14 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var _scope_check = wtfCreateScope("AppView#check(ascii id)");
  var EMPTY_CONTEXT$1 = new Object();
  var UNDEFINED$1 = new Object();
  var AppView = (function() {
    function AppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentElement, cdMode, declaredViewContainer) {
      if (declaredViewContainer === void 0) {
        declaredViewContainer = null;
      }
      this.clazz = clazz;
      this.componentType = componentType;
      this.type = type;
      this.viewUtils = viewUtils;
      this.parentView = parentView;
      this.parentIndex = parentIndex;
      this.parentElement = parentElement;
      this.cdMode = cdMode;
      this.declaredViewContainer = declaredViewContainer;
      this.viewContainer = null;
      this.numberOfChecks = 0;
      this.ref = new ViewRef_(this);
      if (type === ViewType.COMPONENT || type === ViewType.HOST) {
        this.renderer = viewUtils.renderComponent(componentType);
      } else {
        this.renderer = parentView.renderer;
      }
      this._directRenderer = this.renderer.directRenderer;
    }
    Object.defineProperty(AppView.prototype, "animationContext", {
      get: function() {
        if (!this._animationContext) {
          this._animationContext = new AnimationViewContext();
        }
        return this._animationContext;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AppView.prototype, "destroyed", {
      get: function() {
        return this.cdMode === ChangeDetectorStatus.Destroyed;
      },
      enumerable: true,
      configurable: true
    });
    AppView.prototype.create = function(context) {
      this.context = context;
      return this.createInternal(null);
    };
    AppView.prototype.createHostView = function(rootSelectorOrNode, hostInjector, projectableNodes) {
      this.context = EMPTY_CONTEXT$1;
      this._hasExternalHostElement = isPresent(rootSelectorOrNode);
      this._hostInjector = hostInjector;
      this._hostProjectableNodes = projectableNodes;
      return this.createInternal(rootSelectorOrNode);
    };
    AppView.prototype.createInternal = function(rootSelectorOrNode) {
      return null;
    };
    AppView.prototype.createEmbeddedViewInternal = function(templateNodeIndex) {
      return null;
    };
    AppView.prototype.init = function(lastRootNode, allNodes, disposables) {
      this.lastRootNode = lastRootNode;
      this.allNodes = allNodes;
      this.disposables = disposables;
      if (this.type === ViewType.COMPONENT) {
        this.dirtyParentQueriesInternal();
      }
    };
    AppView.prototype.injectorGet = function(token, nodeIndex, notFoundValue) {
      if (notFoundValue === void 0) {
        notFoundValue = THROW_IF_NOT_FOUND;
      }
      var result = UNDEFINED$1;
      var view = this;
      while (result === UNDEFINED$1) {
        if (isPresent(nodeIndex)) {
          result = view.injectorGetInternal(token, nodeIndex, UNDEFINED$1);
        }
        if (result === UNDEFINED$1 && view.type === ViewType.HOST) {
          result = view._hostInjector.get(token, notFoundValue);
        }
        nodeIndex = view.parentIndex;
        view = view.parentView;
      }
      return result;
    };
    AppView.prototype.injectorGetInternal = function(token, nodeIndex, notFoundResult) {
      return notFoundResult;
    };
    AppView.prototype.injector = function(nodeIndex) {
      return new ElementInjector(this, nodeIndex);
    };
    AppView.prototype.detachAndDestroy = function() {
      if (this._hasExternalHostElement) {
        this.detach();
      } else if (isPresent(this.viewContainer)) {
        this.viewContainer.detachView(this.viewContainer.nestedViews.indexOf(this));
      }
      this.destroy();
    };
    AppView.prototype.destroy = function() {
      var _this = this;
      if (this.cdMode === ChangeDetectorStatus.Destroyed) {
        return;
      }
      var hostElement = this.type === ViewType.COMPONENT ? this.parentElement : null;
      if (this.disposables) {
        for (var i = 0; i < this.disposables.length; i++) {
          this.disposables[i]();
        }
      }
      this.destroyInternal();
      this.dirtyParentQueriesInternal();
      if (this._animationContext) {
        this._animationContext.onAllActiveAnimationsDone(function() {
          return _this.renderer.destroyView(hostElement, _this.allNodes);
        });
      } else {
        this.renderer.destroyView(hostElement, this.allNodes);
      }
      this.cdMode = ChangeDetectorStatus.Destroyed;
    };
    AppView.prototype.destroyInternal = function() {};
    AppView.prototype.detachInternal = function() {};
    AppView.prototype.detach = function() {
      var _this = this;
      this.detachInternal();
      if (this._animationContext) {
        this._animationContext.onAllActiveAnimationsDone(function() {
          return _this._renderDetach();
        });
      } else {
        this._renderDetach();
      }
      if (this.declaredViewContainer && this.declaredViewContainer !== this.viewContainer) {
        var projectedViews = this.declaredViewContainer.projectedViews;
        var index = projectedViews.indexOf(this);
        if (index >= projectedViews.length - 1) {
          projectedViews.pop();
        } else {
          projectedViews.splice(index, 1);
        }
      }
      this.viewContainer = null;
      this.dirtyParentQueriesInternal();
    };
    AppView.prototype._renderDetach = function() {
      if (this._directRenderer) {
        this.visitRootNodesInternal(this._directRenderer.remove, null);
      } else {
        this.renderer.detachView(this.flatRootNodes);
      }
    };
    AppView.prototype.attachAfter = function(viewContainer, prevView) {
      this._renderAttach(viewContainer, prevView);
      this.viewContainer = viewContainer;
      if (this.declaredViewContainer && this.declaredViewContainer !== viewContainer) {
        if (!this.declaredViewContainer.projectedViews) {
          this.declaredViewContainer.projectedViews = [];
        }
        this.declaredViewContainer.projectedViews.push(this);
      }
      this.dirtyParentQueriesInternal();
    };
    AppView.prototype.moveAfter = function(viewContainer, prevView) {
      this._renderAttach(viewContainer, prevView);
      this.dirtyParentQueriesInternal();
    };
    AppView.prototype._renderAttach = function(viewContainer, prevView) {
      var prevNode = prevView ? prevView.lastRootNode : viewContainer.nativeElement;
      if (this._directRenderer) {
        var nextSibling = this._directRenderer.nextSibling(prevNode);
        if (nextSibling) {
          this.visitRootNodesInternal(this._directRenderer.insertBefore, nextSibling);
        } else {
          var parentElement = this._directRenderer.parentElement(prevNode);
          if (parentElement) {
            this.visitRootNodesInternal(this._directRenderer.appendChild, parentElement);
          }
        }
      } else {
        this.renderer.attachViewAfter(prevNode, this.flatRootNodes);
      }
    };
    Object.defineProperty(AppView.prototype, "changeDetectorRef", {
      get: function() {
        return this.ref;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AppView.prototype, "flatRootNodes", {
      get: function() {
        var nodes = [];
        this.visitRootNodesInternal(addToArray, nodes);
        return nodes;
      },
      enumerable: true,
      configurable: true
    });
    AppView.prototype.projectNodes = function(parentElement, ngContentIndex) {
      if (this._directRenderer) {
        this.visitProjectedNodes(ngContentIndex, this._directRenderer.appendChild, parentElement);
      } else {
        var nodes = [];
        this.visitProjectedNodes(ngContentIndex, addToArray, nodes);
        this.renderer.projectNodes(parentElement, nodes);
      }
    };
    AppView.prototype.visitProjectedNodes = function(ngContentIndex, cb, c) {
      switch (this.type) {
        case ViewType.EMBEDDED:
          this.parentView.visitProjectedNodes(ngContentIndex, cb, c);
          break;
        case ViewType.COMPONENT:
          if (this.parentView.type === ViewType.HOST) {
            var nodes = this.parentView._hostProjectableNodes[ngContentIndex] || [];
            for (var i = 0; i < nodes.length; i++) {
              cb(nodes[i], c);
            }
          } else {
            this.parentView.visitProjectableNodesInternal(this.parentIndex, ngContentIndex, cb, c);
          }
          break;
      }
    };
    AppView.prototype.visitRootNodesInternal = function(cb, c) {};
    AppView.prototype.visitProjectableNodesInternal = function(nodeIndex, ngContentIndex, cb, c) {};
    AppView.prototype.dirtyParentQueriesInternal = function() {};
    AppView.prototype.detectChanges = function(throwOnChange) {
      var s = _scope_check(this.clazz);
      if (this.cdMode === ChangeDetectorStatus.Checked || this.cdMode === ChangeDetectorStatus.Errored || this.cdMode === ChangeDetectorStatus.Detached)
        return;
      if (this.cdMode === ChangeDetectorStatus.Destroyed) {
        this.throwDestroyedError('detectChanges');
      }
      this.detectChangesInternal(throwOnChange);
      if (this.cdMode === ChangeDetectorStatus.CheckOnce)
        this.cdMode = ChangeDetectorStatus.Checked;
      this.numberOfChecks++;
      wtfLeave(s);
    };
    AppView.prototype.detectChangesInternal = function(throwOnChange) {};
    AppView.prototype.markAsCheckOnce = function() {
      this.cdMode = ChangeDetectorStatus.CheckOnce;
    };
    AppView.prototype.markPathToRootAsCheckOnce = function() {
      var c = this;
      while (isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached) {
        if (c.cdMode === ChangeDetectorStatus.Checked) {
          c.cdMode = ChangeDetectorStatus.CheckOnce;
        }
        if (c.type === ViewType.COMPONENT) {
          c = c.parentView;
        } else {
          c = c.viewContainer ? c.viewContainer.parentView : null;
        }
      }
    };
    AppView.prototype.eventHandler = function(cb) {
      return cb;
    };
    AppView.prototype.throwDestroyedError = function(details) {
      throw new ViewDestroyedError(details);
    };
    return AppView;
  }());
  var DebugAppView = (function(_super) {
    __extends$14(DebugAppView, _super);
    function DebugAppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, staticNodeDebugInfos, declaredViewContainer) {
      if (declaredViewContainer === void 0) {
        declaredViewContainer = null;
      }
      _super.call(this, clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, declaredViewContainer);
      this.staticNodeDebugInfos = staticNodeDebugInfos;
      this._currentDebugContext = null;
    }
    DebugAppView.prototype.create = function(context) {
      this._resetDebug();
      try {
        return _super.prototype.create.call(this, context);
      } catch (e) {
        this._rethrowWithContext(e);
        throw e;
      }
    };
    DebugAppView.prototype.createHostView = function(rootSelectorOrNode, injector, projectableNodes) {
      if (projectableNodes === void 0) {
        projectableNodes = null;
      }
      this._resetDebug();
      try {
        return _super.prototype.createHostView.call(this, rootSelectorOrNode, injector, projectableNodes);
      } catch (e) {
        this._rethrowWithContext(e);
        throw e;
      }
    };
    DebugAppView.prototype.injectorGet = function(token, nodeIndex, notFoundResult) {
      this._resetDebug();
      try {
        return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);
      } catch (e) {
        this._rethrowWithContext(e);
        throw e;
      }
    };
    DebugAppView.prototype.detach = function() {
      this._resetDebug();
      try {
        _super.prototype.detach.call(this);
      } catch (e) {
        this._rethrowWithContext(e);
        throw e;
      }
    };
    DebugAppView.prototype.destroy = function() {
      this._resetDebug();
      try {
        _super.prototype.destroy.call(this);
      } catch (e) {
        this._rethrowWithContext(e);
        throw e;
      }
    };
    DebugAppView.prototype.detectChanges = function(throwOnChange) {
      this._resetDebug();
      try {
        _super.prototype.detectChanges.call(this, throwOnChange);
      } catch (e) {
        this._rethrowWithContext(e);
        throw e;
      }
    };
    DebugAppView.prototype._resetDebug = function() {
      this._currentDebugContext = null;
    };
    DebugAppView.prototype.debug = function(nodeIndex, rowNum, colNum) {
      return this._currentDebugContext = new DebugContext(this, nodeIndex, rowNum, colNum);
    };
    DebugAppView.prototype._rethrowWithContext = function(e) {
      if (!(e instanceof ViewWrappedError)) {
        if (!(e instanceof ExpressionChangedAfterItHasBeenCheckedError)) {
          this.cdMode = ChangeDetectorStatus.Errored;
        }
        if (isPresent(this._currentDebugContext)) {
          throw new ViewWrappedError(e, this._currentDebugContext);
        }
      }
    };
    DebugAppView.prototype.eventHandler = function(cb) {
      var _this = this;
      var superHandler = _super.prototype.eventHandler.call(this, cb);
      return function(eventName, event) {
        _this._resetDebug();
        try {
          return superHandler.call(_this, eventName, event);
        } catch (e) {
          _this._rethrowWithContext(e);
          throw e;
        }
      };
    };
    return DebugAppView;
  }(AppView));
  var ViewContainer = (function() {
    function ViewContainer(index, parentIndex, parentView, nativeElement) {
      this.index = index;
      this.parentIndex = parentIndex;
      this.parentView = parentView;
      this.nativeElement = nativeElement;
    }
    Object.defineProperty(ViewContainer.prototype, "elementRef", {
      get: function() {
        return new ElementRef(this.nativeElement);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainer.prototype, "vcRef", {
      get: function() {
        return new ViewContainerRef_(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainer.prototype, "parentInjector", {
      get: function() {
        return this.parentView.injector(this.parentIndex);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainer.prototype, "injector", {
      get: function() {
        return this.parentView.injector(this.index);
      },
      enumerable: true,
      configurable: true
    });
    ViewContainer.prototype.detectChangesInNestedViews = function(throwOnChange) {
      if (this.nestedViews) {
        for (var i = 0; i < this.nestedViews.length; i++) {
          this.nestedViews[i].detectChanges(throwOnChange);
        }
      }
    };
    ViewContainer.prototype.destroyNestedViews = function() {
      if (this.nestedViews) {
        for (var i = 0; i < this.nestedViews.length; i++) {
          this.nestedViews[i].destroy();
        }
      }
    };
    ViewContainer.prototype.visitNestedViewRootNodes = function(cb, c) {
      if (this.nestedViews) {
        for (var i = 0; i < this.nestedViews.length; i++) {
          this.nestedViews[i].visitRootNodesInternal(cb, c);
        }
      }
    };
    ViewContainer.prototype.mapNestedViews = function(nestedViewClass, callback) {
      var result = [];
      if (this.nestedViews) {
        for (var i = 0; i < this.nestedViews.length; i++) {
          var nestedView = this.nestedViews[i];
          if (nestedView.clazz === nestedViewClass) {
            result.push(callback(nestedView));
          }
        }
      }
      if (this.projectedViews) {
        for (var i = 0; i < this.projectedViews.length; i++) {
          var projectedView = this.projectedViews[i];
          if (projectedView.clazz === nestedViewClass) {
            result.push(callback(projectedView));
          }
        }
      }
      return result;
    };
    ViewContainer.prototype.moveView = function(view, currentIndex) {
      var previousIndex = this.nestedViews.indexOf(view);
      if (view.type === ViewType.COMPONENT) {
        throw new Error("Component views can't be moved!");
      }
      var nestedViews = this.nestedViews;
      if (nestedViews == null) {
        nestedViews = [];
        this.nestedViews = nestedViews;
      }
      nestedViews.splice(previousIndex, 1);
      nestedViews.splice(currentIndex, 0, view);
      var prevView = currentIndex > 0 ? nestedViews[currentIndex - 1] : null;
      view.moveAfter(this, prevView);
    };
    ViewContainer.prototype.attachView = function(view, viewIndex) {
      if (view.type === ViewType.COMPONENT) {
        throw new Error("Component views can't be moved!");
      }
      var nestedViews = this.nestedViews;
      if (nestedViews == null) {
        nestedViews = [];
        this.nestedViews = nestedViews;
      }
      if (viewIndex >= nestedViews.length) {
        nestedViews.push(view);
      } else {
        nestedViews.splice(viewIndex, 0, view);
      }
      var prevView = viewIndex > 0 ? nestedViews[viewIndex - 1] : null;
      view.attachAfter(this, prevView);
    };
    ViewContainer.prototype.detachView = function(viewIndex) {
      var view = this.nestedViews[viewIndex];
      if (viewIndex >= this.nestedViews.length - 1) {
        this.nestedViews.pop();
      } else {
        this.nestedViews.splice(viewIndex, 1);
      }
      if (view.type === ViewType.COMPONENT) {
        throw new Error("Component views can't be moved!");
      }
      view.detach();
      return view;
    };
    return ViewContainer;
  }());
  var __core_private__ = {
    isDefaultChangeDetectionStrategy: isDefaultChangeDetectionStrategy,
    ChangeDetectorStatus: ChangeDetectorStatus,
    constructDependencies: constructDependencies,
    LifecycleHooks: LifecycleHooks,
    LIFECYCLE_HOOKS_VALUES: LIFECYCLE_HOOKS_VALUES,
    ReflectorReader: ReflectorReader,
    CodegenComponentFactoryResolver: CodegenComponentFactoryResolver,
    ComponentRef_: ComponentRef_,
    ViewContainer: ViewContainer,
    AppView: AppView,
    DebugAppView: DebugAppView,
    NgModuleInjector: NgModuleInjector,
    registerModuleFactory: registerModuleFactory,
    ViewType: ViewType,
    view_utils: view_utils,
    ViewMetadata: ViewMetadata,
    DebugContext: DebugContext,
    StaticNodeDebugInfo: StaticNodeDebugInfo,
    devModeEqual: devModeEqual,
    UNINITIALIZED: UNINITIALIZED,
    ValueUnwrapper: ValueUnwrapper,
    RenderDebugInfo: RenderDebugInfo,
    TemplateRef_: TemplateRef_,
    ReflectionCapabilities: ReflectionCapabilities,
    makeDecorator: makeDecorator,
    DebugDomRootRenderer: DebugDomRootRenderer,
    Console: Console,
    reflector: reflector,
    Reflector: Reflector,
    NoOpAnimationPlayer: NoOpAnimationPlayer,
    AnimationPlayer: AnimationPlayer,
    AnimationSequencePlayer: AnimationSequencePlayer,
    AnimationGroupPlayer: AnimationGroupPlayer,
    AnimationKeyframe: AnimationKeyframe,
    prepareFinalAnimationStyles: prepareFinalAnimationStyles,
    balanceAnimationKeyframes: balanceAnimationKeyframes,
    flattenStyles: flattenStyles,
    clearStyles: clearStyles,
    renderStyles: renderStyles,
    collectAndResolveStyles: collectAndResolveStyles,
    APP_ID_RANDOM_PROVIDER: APP_ID_RANDOM_PROVIDER,
    AnimationStyles: AnimationStyles,
    ANY_STATE: ANY_STATE,
    DEFAULT_STATE: DEFAULT_STATE,
    EMPTY_STATE: EMPTY_STATE,
    FILL_STYLE_FLAG: FILL_STYLE_FLAG,
    ComponentStillLoadingError: ComponentStillLoadingError,
    isPromise: isPromise,
    AnimationTransition: AnimationTransition
  };
  exports.createPlatform = createPlatform;
  exports.assertPlatform = assertPlatform;
  exports.destroyPlatform = destroyPlatform;
  exports.getPlatform = getPlatform;
  exports.PlatformRef = PlatformRef;
  exports.ApplicationRef = ApplicationRef;
  exports.enableProdMode = enableProdMode;
  exports.isDevMode = isDevMode;
  exports.createPlatformFactory = createPlatformFactory;
  exports.APP_ID = APP_ID;
  exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;
  exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;
  exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;
  exports.APP_INITIALIZER = APP_INITIALIZER;
  exports.ApplicationInitStatus = ApplicationInitStatus;
  exports.DebugElement = DebugElement;
  exports.DebugNode = DebugNode;
  exports.asNativeElements = asNativeElements;
  exports.getDebugNode = getDebugNode;
  exports.Testability = Testability;
  exports.TestabilityRegistry = TestabilityRegistry;
  exports.setTestabilityGetter = setTestabilityGetter;
  exports.TRANSLATIONS = TRANSLATIONS;
  exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;
  exports.LOCALE_ID = LOCALE_ID;
  exports.ApplicationModule = ApplicationModule;
  exports.wtfCreateScope = wtfCreateScope;
  exports.wtfLeave = wtfLeave;
  exports.wtfStartTimeRange = wtfStartTimeRange;
  exports.wtfEndTimeRange = wtfEndTimeRange;
  exports.Type = Type;
  exports.EventEmitter = EventEmitter;
  exports.ErrorHandler = ErrorHandler;
  exports.AnimationTransitionEvent = AnimationTransitionEvent;
  exports.AnimationPlayer = AnimationPlayer;
  exports.Sanitizer = Sanitizer;
  exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;
  exports.Attribute = Attribute;
  exports.ContentChild = ContentChild;
  exports.ContentChildren = ContentChildren;
  exports.Query = Query;
  exports.ViewChild = ViewChild;
  exports.ViewChildren = ViewChildren;
  exports.Component = Component;
  exports.Directive = Directive;
  exports.HostBinding = HostBinding;
  exports.HostListener = HostListener;
  exports.Input = Input;
  exports.Output = Output;
  exports.Pipe = Pipe;
  exports.AfterContentChecked = AfterContentChecked;
  exports.AfterContentInit = AfterContentInit;
  exports.AfterViewChecked = AfterViewChecked;
  exports.AfterViewInit = AfterViewInit;
  exports.DoCheck = DoCheck;
  exports.OnChanges = OnChanges;
  exports.OnDestroy = OnDestroy;
  exports.OnInit = OnInit;
  exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;
  exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;
  exports.NgModule = NgModule;
  exports.Class = Class;
  exports.forwardRef = forwardRef;
  exports.resolveForwardRef = resolveForwardRef;
  exports.Injector = Injector;
  exports.ReflectiveInjector = ReflectiveInjector;
  exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;
  exports.ReflectiveKey = ReflectiveKey;
  exports.OpaqueToken = OpaqueToken;
  exports.Inject = Inject;
  exports.Optional = Optional;
  exports.Injectable = Injectable;
  exports.Self = Self;
  exports.SkipSelf = SkipSelf;
  exports.Host = Host;
  exports.NgZone = NgZone;
  exports.RenderComponentType = RenderComponentType;
  exports.Renderer = Renderer;
  exports.RootRenderer = RootRenderer;
  exports.COMPILER_OPTIONS = COMPILER_OPTIONS;
  exports.Compiler = Compiler;
  exports.CompilerFactory = CompilerFactory;
  exports.ModuleWithComponentFactories = ModuleWithComponentFactories;
  exports.ComponentFactory = ComponentFactory;
  exports.ComponentRef = ComponentRef;
  exports.ComponentFactoryResolver = ComponentFactoryResolver;
  exports.ElementRef = ElementRef;
  exports.NgModuleFactory = NgModuleFactory;
  exports.NgModuleRef = NgModuleRef;
  exports.NgModuleFactoryLoader = NgModuleFactoryLoader;
  exports.getModuleFactory = getModuleFactory;
  exports.QueryList = QueryList;
  exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;
  exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;
  exports.TemplateRef = TemplateRef;
  exports.ViewContainerRef = ViewContainerRef;
  exports.EmbeddedViewRef = EmbeddedViewRef;
  exports.ViewRef = ViewRef;
  exports.ChangeDetectorRef = ChangeDetectorRef;
  exports.CollectionChangeRecord = CollectionChangeRecord;
  exports.DefaultIterableDiffer = DefaultIterableDiffer;
  exports.IterableDiffers = IterableDiffers;
  exports.KeyValueChangeRecord = KeyValueChangeRecord;
  exports.KeyValueDiffers = KeyValueDiffers;
  exports.SimpleChange = SimpleChange;
  exports.WrappedValue = WrappedValue;
  exports.platformCore = platformCore;
  exports.__core_private__ = __core_private__;
  exports.AUTO_STYLE = AUTO_STYLE;
  exports.AnimationEntryMetadata = AnimationEntryMetadata;
  exports.AnimationStateMetadata = AnimationStateMetadata;
  exports.AnimationStateDeclarationMetadata = AnimationStateDeclarationMetadata;
  exports.AnimationStateTransitionMetadata = AnimationStateTransitionMetadata;
  exports.AnimationMetadata = AnimationMetadata;
  exports.AnimationKeyframesSequenceMetadata = AnimationKeyframesSequenceMetadata;
  exports.AnimationStyleMetadata = AnimationStyleMetadata;
  exports.AnimationAnimateMetadata = AnimationAnimateMetadata;
  exports.AnimationWithStepsMetadata = AnimationWithStepsMetadata;
  exports.AnimationSequenceMetadata = AnimationSequenceMetadata;
  exports.AnimationGroupMetadata = AnimationGroupMetadata;
  exports.animate = animate;
  exports.group = group;
  exports.sequence = sequence;
  exports.style = style;
  exports.state = state;
  exports.keyframes = keyframes;
  exports.transition = transition;
  exports.trigger = trigger;
}));

})();
$__System.registerDynamic("app/10/app.component.js", ["node_modules/@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var BuildingSinglePageApps = function () {
        function BuildingSinglePageApps() {}
        return BuildingSinglePageApps;
    }();
    BuildingSinglePageApps = __decorate([core_1.Component({
        selector: 'component',
        moduleId: module.id,
        templateUrl: 'app.html',
        styleUrls: ['app.css']
    }), __metadata("design:paramtypes", [])], BuildingSinglePageApps);
    exports.BuildingSinglePageApps = BuildingSinglePageApps;
    

    return module.exports;
});
$__System.registerDynamic("app/10/app.module.js", ["node_modules/@angular/core/bundles/core.umd.js", "node_modules/@angular/platform-browser/bundles/platform-browser.umd.js", "app/10/app.component.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var platform_browser_1 = $__require("node_modules/@angular/platform-browser/bundles/platform-browser.umd.js");
    var app_component_1 = $__require("app/10/app.component.js");
    var AppModule10 = function () {
        function AppModule10() {}
        return AppModule10;
    }();
    AppModule10 = __decorate([core_1.NgModule({
        imports: [platform_browser_1.BrowserModule],
        declarations: [app_component_1.BuildingSinglePageApps],
        bootstrap: [app_component_1.BuildingSinglePageApps]
    }), __metadata("design:paramtypes", [])], AppModule10);
    exports.AppModule10 = AppModule10;
    

    return module.exports;
});
$__System.registerDynamic("app/app.module.js", ["node_modules/ui-router-ng2/_bundles/ui-router-ng2.js", "node_modules/@angular/core/bundles/core.umd.js", "node_modules/@angular/platform-browser/bundles/platform-browser.umd.js", "node_modules/@angular/http/bundles/http.umd.js", "node_modules/@angular/common/bundles/common.umd.js", "app/app.states.js", "app/app.component.js", "app/shared/app.component.js", "app/01/app.module.js", "app/02/app.module.js", "app/03/app.module.js", "app/04/app.module.js", "app/05/app.module.js", "app/06/app.module.js", "app/07/app.module.js", "app/08/app.module.js", "app/09/app.module.js", "app/10/app.module.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var ui_router_ng2_1 = $__require("node_modules/ui-router-ng2/_bundles/ui-router-ng2.js");
    var core_1 = $__require("node_modules/@angular/core/bundles/core.umd.js");
    var platform_browser_1 = $__require("node_modules/@angular/platform-browser/bundles/platform-browser.umd.js");
    var http_1 = $__require("node_modules/@angular/http/bundles/http.umd.js");
    var common_1 = $__require("node_modules/@angular/common/bundles/common.umd.js");
    var app_states_1 = $__require("app/app.states.js");
    var app_component_1 = $__require("app/app.component.js");
    var app_component_2 = $__require("app/shared/app.component.js");
    var app_module_1 = $__require("app/01/app.module.js");
    var app_module_2 = $__require("app/02/app.module.js");
    var app_module_3 = $__require("app/03/app.module.js");
    var app_module_4 = $__require("app/04/app.module.js");
    var app_module_5 = $__require("app/05/app.module.js");
    var app_module_6 = $__require("app/06/app.module.js");
    var app_module_7 = $__require("app/07/app.module.js");
    var app_module_8 = $__require("app/08/app.module.js");
    var app_module_9 = $__require("app/09/app.module.js");
    var app_module_10 = $__require("app/10/app.module.js");
    var AppModule = function () {
        function AppModule() {}
        return AppModule;
    }();
    AppModule = __decorate([core_1.NgModule({
        imports: [platform_browser_1.BrowserModule, http_1.HttpModule, common_1.CommonModule, ui_router_ng2_1.UIRouterModule.forRoot({
            states: app_states_1.INITIAL_STATES,
            otherwise: { state: 'app.Default', params: {} }
        }), app_module_1.AppModule01, app_module_2.AppModule02, app_module_3.AppModule03, app_module_4.AppModule04, app_module_5.AppModule05, app_module_6.AppModule06, app_module_7.AppModule07, app_module_8.AppModule08, app_module_9.AppModule09, app_module_10.AppModule10],
        declarations: [app_component_1.AppComponent, app_component_2.Sidebar],
        providers: [{ provide: core_1.NgModuleFactoryLoader, useClass: core_1.SystemJsNgModuleLoader }],
        bootstrap: [ui_router_ng2_1.UIView]
    }), __metadata("design:paramtypes", [])], AppModule);
    exports.AppModule = AppModule;
    

    return module.exports;
});
$__System.registerDynamic("app/main.js", ["node_modules/@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js", "app/app.module.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var platform_browser_dynamic_1 = $__require("node_modules/@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js");
  var app_module_1 = $__require("app/app.module.js");
  platform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(app_module_1.AppModule);
  

  return module.exports;
});
})
(function(factory) {
  if (typeof define == 'function' && define.amd)
    define([], factory);
  else if (typeof module == 'object' && module.exports && typeof require == 'function')
    module.exports = factory();
  else
    factory();
});
//# sourceMappingURL=app.bundle.js.map